// Package packageinfo provides specification for the package.corgi file.
package packageinfo

import (
	"bytes"
	"encoding/json"
	"io"

	"github.com/mavolin/corgi/internal/meta"
)

// Filename is the conventional filename for the package info file.
const Filename = "package.corgi"

// Read reads a [Package] file from the given reader.
//
// Users should generally prefer [Read] over using [json.Unmarshal] directly,
// to keep Package encoding agnostic.
func Read(r io.Reader) (*Package, error) {
	var p Package
	err := json.NewDecoder(r).Decode(&p)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

func ReadBytes(b []byte) (*Package, error) {
	return Read(bytes.NewReader(b))
}

func Write(w io.Writer, p Package) error {
	enc := json.NewEncoder(w)
	enc.SetIndent("", "  ")
	return enc.Encode(p)
}

func WriteBytes(p Package) ([]byte, error) {
	var buf bytes.Buffer
	err := Write(&buf, p)
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type (
	Package struct {
		// CorgiVersion is the version of the corgi compiler used to compile
		// the files in this package.
		CorgiVersion string
		// HasState indicates whether this package contains state variables.
		HasState bool

		Components []Component
	}

	Component struct {
		Name   string
		Params []ComponentParam

		// WritesBody indicates whether the Component writes to the body of an
		// element.
		// Blocks including block defaults are ignored.
		WritesBody bool
		// WritesElements indicates whether the Component writes elements.
		//
		// Only true, if WritesBody is as well.
		WritesElements bool
		// WritesTopLevelAttributes indicates whether the Component writes any
		// top-level attributes, except &-placeholders.
		WritesTopLevelAttributes bool
		// AndPlaceholder indicates whether the Component has any
		// &-placeholders.
		AndPlaceholders bool
		// TopLevelAndPlaceholder indicates whether the Component has any
		// top-level &-placeholders.
		//
		// Only true, if AndPlaceholders is as well.
		TopLevelAndPlaceholder bool
		// Blocks is are the blocks used in the Component in the order they
		// appear in, and in the order they appear in the functions' signature.
		Blocks []ComponentBlock
	}

	ComponentParam struct {
		Name       string
		Type       string
		IsSafeType bool // type from package safe
		HasDefault bool
	}

	ComponentBlock struct {
		// Name is the name of the block.
		Name string
		// TopLevel is true, if at least one block with Name is placed at the
		// top-level of the Component, so that it writes to the element it is
		// called in.
		TopLevel bool // writes directly to the element it is called in
		// CanAttributes specifies whether &-directives can be used in this
		// block.
		CanAttributes bool
		// DefaultWritesBody indicates whether the block writes to the body of
		// the element.
		DefaultWritesBody bool
		// DefaultWritesElements indicates whether the block writes any
		// elements.
		//
		// Only true, if DefaultWritesBody is as well.
		DefaultWritesElements bool
		// DefaultWritesTopLevelAttributes indicates whether the block writes
		// any top-level attributes, except &-placeholders.
		DefaultWritesTopLevelAttributes bool
		// DefaultAndPlaceholder indicates whether the block has any
		// &-placeholders at the top-level.
		DefaultTopLevelAndPlaceholder bool
	}
)

var _ json.Marshaler = Package{}

var (
	warning1 = "Code generated by github.com/mavolin/corgi (" + meta.Version + "). DO NOT EDIT."
	warning2 = "Editing this file may undermine corgi's security guarantees."
)

func (p Package) MarshalJSON() ([]byte, error) {
	serialize := struct {
		Warn1 string `json:"_0"`
		Warn2 string `json:"_1"`
		Package
	}{warning1, warning2, p}
	return json.Marshal(serialize)
}
