package precomp

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *_import) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Imports":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Imports")
				return
			}
			if cap(z.Imports) >= int(zb0002) {
				z.Imports = (z.Imports)[:zb0002]
			} else {
				z.Imports = make([]importSpec, zb0002)
			}
			for za0001 := range z.Imports {
				err = z.Imports[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Imports", za0001)
					return
				}
			}
		case "Position":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0003 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0003}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *_import) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Imports"
	err = en.Append(0x82, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Imports)))
	if err != nil {
		err = msgp.WrapError(err, "Imports")
		return
	}
	for za0001 := range z.Imports {
		err = z.Imports[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Imports", za0001)
			return
		}
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *_import) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Imports"
	o = append(o, 0x82, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Imports)))
	for za0001 := range z.Imports {
		o, err = z.Imports[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Imports", za0001)
			return
		}
	}
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *_import) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Imports":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Imports")
				return
			}
			if cap(z.Imports) >= int(zb0002) {
				z.Imports = (z.Imports)[:zb0002]
			} else {
				z.Imports = make([]importSpec, zb0002)
			}
			for za0001 := range z.Imports {
				bts, err = z.Imports[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Imports", za0001)
					return
				}
			}
		case "Position":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0003 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0003}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *_import) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Imports {
		s += z.Imports[za0001].Msgsize()
	}
	s += 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *code) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MachineComments":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "MachineComments")
				return
			}
			if cap(z.MachineComments) >= int(zb0002) {
				z.MachineComments = (z.MachineComments)[:zb0002]
			} else {
				z.MachineComments = make([]string, zb0002)
			}
			for za0001 := range z.MachineComments {
				z.MachineComments[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MachineComments", za0001)
					return
				}
			}
		case "Lines":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Lines")
				return
			}
			if cap(z.Lines) >= int(zb0003) {
				z.Lines = (z.Lines)[:zb0003]
			} else {
				z.Lines = make([]string, zb0003)
			}
			for za0002 := range z.Lines {
				z.Lines[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Lines", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *code) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "MachineComments"
	err = en.Append(0x82, 0xaf, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MachineComments)))
	if err != nil {
		err = msgp.WrapError(err, "MachineComments")
		return
	}
	for za0001 := range z.MachineComments {
		err = en.WriteString(z.MachineComments[za0001])
		if err != nil {
			err = msgp.WrapError(err, "MachineComments", za0001)
			return
		}
	}
	// write "Lines"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6e, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Lines)))
	if err != nil {
		err = msgp.WrapError(err, "Lines")
		return
	}
	for za0002 := range z.Lines {
		err = en.WriteString(z.Lines[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Lines", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *code) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "MachineComments"
	o = append(o, 0x82, 0xaf, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MachineComments)))
	for za0001 := range z.MachineComments {
		o = msgp.AppendString(o, z.MachineComments[za0001])
	}
	// string "Lines"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6e, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Lines)))
	for za0002 := range z.Lines {
		o = msgp.AppendString(o, z.Lines[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *code) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MachineComments":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MachineComments")
				return
			}
			if cap(z.MachineComments) >= int(zb0002) {
				z.MachineComments = (z.MachineComments)[:zb0002]
			} else {
				z.MachineComments = make([]string, zb0002)
			}
			for za0001 := range z.MachineComments {
				z.MachineComments[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MachineComments", za0001)
					return
				}
			}
		case "Lines":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lines")
				return
			}
			if cap(z.Lines) >= int(zb0003) {
				z.Lines = (z.Lines)[:zb0003]
			} else {
				z.Lines = make([]string, zb0003)
			}
			for za0002 := range z.Lines {
				z.Lines[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Lines", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *code) Msgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for za0001 := range z.MachineComments {
		s += msgp.StringPrefixSize + len(z.MachineComments[za0001])
	}
	s += 6 + msgp.ArrayHeaderSize
	for za0002 := range z.Lines {
		s += msgp.StringPrefixSize + len(z.Lines[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *corgiIdent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Ident":
			z.Ident, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Ident")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *corgiIdent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Ident"
	err = en.Append(0x82, 0xa5, 0x49, 0x64, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Ident)
	if err != nil {
		err = msgp.WrapError(err, "Ident")
		return
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *corgiIdent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Ident"
	o = append(o, 0x82, 0xa5, 0x49, 0x64, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Ident)
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *corgiIdent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Ident":
			z.Ident, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ident")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *corgiIdent) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Ident) + 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *corgiString) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Quote":
			z.Quote, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "Contents":
			z.Contents, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Contents")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *corgiString) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Quote"
	err = en.Append(0x83, 0xa5, 0x51, 0x75, 0x6f, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteByte(z.Quote)
	if err != nil {
		err = msgp.WrapError(err, "Quote")
		return
	}
	// write "Contents"
	err = en.Append(0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Contents)
	if err != nil {
		err = msgp.WrapError(err, "Contents")
		return
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *corgiString) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Quote"
	o = append(o, 0x83, 0xa5, 0x51, 0x75, 0x6f, 0x74, 0x65)
	o = msgp.AppendByte(o, z.Quote)
	// string "Contents"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendString(o, z.Contents)
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *corgiString) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Quote":
			z.Quote, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "Contents":
			z.Contents, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Contents")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *corgiString) Msgsize() (s int) {
	s = 1 + 6 + msgp.ByteSize + 9 + msgp.StringPrefixSize + len(z.Contents) + 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *expression) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Expressions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0002) {
				z.Expressions = (z.Expressions)[:zb0002]
			} else {
				z.Expressions = make([]expressionItem, zb0002)
			}
			for za0001 := range z.Expressions {
				err = z.Expressions[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *expression) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Expressions"
	err = en.Append(0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "Expressions")
		return
	}
	for za0001 := range z.Expressions {
		err = z.Expressions[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Expressions", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *expression) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Expressions"
	o = append(o, 0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Expressions)))
	for za0001 := range z.Expressions {
		o, err = z.Expressions[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Expressions", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *expression) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Expressions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0002) {
				z.Expressions = (z.Expressions)[:zb0002]
			} else {
				z.Expressions = make([]expressionItem, zb0002)
			}
			for za0001 := range z.Expressions {
				bts, err = z.Expressions[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *expression) Msgsize() (s int) {
	s = 1 + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.Expressions {
		s += z.Expressions[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *expressionItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "GoExpression":
			z.GoExpression, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GoExpression")
				return
			}
		case "Quote":
			z.Quote, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "Contents":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Contents")
				return
			}
			if cap(z.Contents) >= int(zb0002) {
				z.Contents = (z.Contents)[:zb0002]
			} else {
				z.Contents = make([]stringExpressionItem, zb0002)
			}
			for za0001 := range z.Contents {
				err = z.Contents[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Contents", za0001)
					return
				}
			}
		case "Condition":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Condition")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Condition")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0004 uint32
					zb0004, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Condition", "Expressions")
						return
					}
					if cap(z.Condition.Expressions) >= int(zb0004) {
						z.Condition.Expressions = (z.Condition.Expressions)[:zb0004]
					} else {
						z.Condition.Expressions = make([]expressionItem, zb0004)
					}
					for za0002 := range z.Condition.Expressions {
						err = z.Condition.Expressions[za0002].DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Condition", "Expressions", za0002)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Condition")
						return
					}
				}
			}
		case "IfTrue":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "IfTrue")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "IfTrue")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0006 uint32
					zb0006, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "IfTrue", "Expressions")
						return
					}
					if cap(z.IfTrue.Expressions) >= int(zb0006) {
						z.IfTrue.Expressions = (z.IfTrue.Expressions)[:zb0006]
					} else {
						z.IfTrue.Expressions = make([]expressionItem, zb0006)
					}
					for za0003 := range z.IfTrue.Expressions {
						err = z.IfTrue.Expressions[za0003].DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "IfTrue", "Expressions", za0003)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "IfTrue")
						return
					}
				}
			}
		case "IfFalse":
			var zb0007 uint32
			zb0007, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "IfFalse")
				return
			}
			for zb0007 > 0 {
				zb0007--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "IfFalse")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0008 uint32
					zb0008, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "IfFalse", "Expressions")
						return
					}
					if cap(z.IfFalse.Expressions) >= int(zb0008) {
						z.IfFalse.Expressions = (z.IfFalse.Expressions)[:zb0008]
					} else {
						z.IfFalse.Expressions = make([]expressionItem, zb0008)
					}
					for za0004 := range z.IfFalse.Expressions {
						err = z.IfFalse.Expressions[za0004].DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "IfFalse", "Expressions", za0004)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "IfFalse")
						return
					}
				}
			}
		case "RParenPos":
			var zb0009 uint32
			zb0009, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RParenPos")
				return
			}
			if zb0009 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0009}
				return
			}
			z.RParenPos.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RParenPos", "Line")
				return
			}
			z.RParenPos.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RParenPos", "Col")
				return
			}
		case "Position":
			var zb0010 uint32
			zb0010, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0010 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0010}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *expressionItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "GoExpression"
	err = en.Append(0x88, 0xac, 0x47, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.GoExpression)
	if err != nil {
		err = msgp.WrapError(err, "GoExpression")
		return
	}
	// write "Quote"
	err = en.Append(0xa5, 0x51, 0x75, 0x6f, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteByte(z.Quote)
	if err != nil {
		err = msgp.WrapError(err, "Quote")
		return
	}
	// write "Contents"
	err = en.Append(0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Contents)))
	if err != nil {
		err = msgp.WrapError(err, "Contents")
		return
	}
	for za0001 := range z.Contents {
		err = z.Contents[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Contents", za0001)
			return
		}
	}
	// write "Condition"
	err = en.Append(0xa9, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// map header, size 1
	// write "Expressions"
	err = en.Append(0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Condition.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "Condition", "Expressions")
		return
	}
	for za0002 := range z.Condition.Expressions {
		err = z.Condition.Expressions[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Condition", "Expressions", za0002)
			return
		}
	}
	// write "IfTrue"
	err = en.Append(0xa6, 0x49, 0x66, 0x54, 0x72, 0x75, 0x65)
	if err != nil {
		return
	}
	// map header, size 1
	// write "Expressions"
	err = en.Append(0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.IfTrue.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "IfTrue", "Expressions")
		return
	}
	for za0003 := range z.IfTrue.Expressions {
		err = z.IfTrue.Expressions[za0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "IfTrue", "Expressions", za0003)
			return
		}
	}
	// write "IfFalse"
	err = en.Append(0xa7, 0x49, 0x66, 0x46, 0x61, 0x6c, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 1
	// write "Expressions"
	err = en.Append(0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.IfFalse.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "IfFalse", "Expressions")
		return
	}
	for za0004 := range z.IfFalse.Expressions {
		err = z.IfFalse.Expressions[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "IfFalse", "Expressions", za0004)
			return
		}
	}
	// write "RParenPos"
	err = en.Append(0xa9, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RParenPos.Line)
	if err != nil {
		err = msgp.WrapError(err, "RParenPos", "Line")
		return
	}
	err = en.WriteInt(z.RParenPos.Col)
	if err != nil {
		err = msgp.WrapError(err, "RParenPos", "Col")
		return
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *expressionItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "GoExpression"
	o = append(o, 0x88, 0xac, 0x47, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.GoExpression)
	// string "Quote"
	o = append(o, 0xa5, 0x51, 0x75, 0x6f, 0x74, 0x65)
	o = msgp.AppendByte(o, z.Quote)
	// string "Contents"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Contents)))
	for za0001 := range z.Contents {
		o, err = z.Contents[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Contents", za0001)
			return
		}
	}
	// string "Condition"
	o = append(o, 0xa9, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// map header, size 1
	// string "Expressions"
	o = append(o, 0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Condition.Expressions)))
	for za0002 := range z.Condition.Expressions {
		o, err = z.Condition.Expressions[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Condition", "Expressions", za0002)
			return
		}
	}
	// string "IfTrue"
	o = append(o, 0xa6, 0x49, 0x66, 0x54, 0x72, 0x75, 0x65)
	// map header, size 1
	// string "Expressions"
	o = append(o, 0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.IfTrue.Expressions)))
	for za0003 := range z.IfTrue.Expressions {
		o, err = z.IfTrue.Expressions[za0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "IfTrue", "Expressions", za0003)
			return
		}
	}
	// string "IfFalse"
	o = append(o, 0xa7, 0x49, 0x66, 0x46, 0x61, 0x6c, 0x73, 0x65)
	// map header, size 1
	// string "Expressions"
	o = append(o, 0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.IfFalse.Expressions)))
	for za0004 := range z.IfFalse.Expressions {
		o, err = z.IfFalse.Expressions[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "IfFalse", "Expressions", za0004)
			return
		}
	}
	// string "RParenPos"
	o = append(o, 0xa9, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x50, 0x6f, 0x73)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.RParenPos.Line)
	o = msgp.AppendInt(o, z.RParenPos.Col)
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *expressionItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "GoExpression":
			z.GoExpression, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GoExpression")
				return
			}
		case "Quote":
			z.Quote, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "Contents":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Contents")
				return
			}
			if cap(z.Contents) >= int(zb0002) {
				z.Contents = (z.Contents)[:zb0002]
			} else {
				z.Contents = make([]stringExpressionItem, zb0002)
			}
			for za0001 := range z.Contents {
				bts, err = z.Contents[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Contents", za0001)
					return
				}
			}
		case "Condition":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Condition")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Condition")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Condition", "Expressions")
						return
					}
					if cap(z.Condition.Expressions) >= int(zb0004) {
						z.Condition.Expressions = (z.Condition.Expressions)[:zb0004]
					} else {
						z.Condition.Expressions = make([]expressionItem, zb0004)
					}
					for za0002 := range z.Condition.Expressions {
						bts, err = z.Condition.Expressions[za0002].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Condition", "Expressions", za0002)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Condition")
						return
					}
				}
			}
		case "IfTrue":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IfTrue")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "IfTrue")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0006 uint32
					zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "IfTrue", "Expressions")
						return
					}
					if cap(z.IfTrue.Expressions) >= int(zb0006) {
						z.IfTrue.Expressions = (z.IfTrue.Expressions)[:zb0006]
					} else {
						z.IfTrue.Expressions = make([]expressionItem, zb0006)
					}
					for za0003 := range z.IfTrue.Expressions {
						bts, err = z.IfTrue.Expressions[za0003].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "IfTrue", "Expressions", za0003)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "IfTrue")
						return
					}
				}
			}
		case "IfFalse":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IfFalse")
				return
			}
			for zb0007 > 0 {
				zb0007--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "IfFalse")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0008 uint32
					zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "IfFalse", "Expressions")
						return
					}
					if cap(z.IfFalse.Expressions) >= int(zb0008) {
						z.IfFalse.Expressions = (z.IfFalse.Expressions)[:zb0008]
					} else {
						z.IfFalse.Expressions = make([]expressionItem, zb0008)
					}
					for za0004 := range z.IfFalse.Expressions {
						bts, err = z.IfFalse.Expressions[za0004].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "IfFalse", "Expressions", za0004)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "IfFalse")
						return
					}
				}
			}
		case "RParenPos":
			var zb0009 uint32
			zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RParenPos")
				return
			}
			if zb0009 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0009}
				return
			}
			z.RParenPos.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RParenPos", "Line")
				return
			}
			z.RParenPos.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RParenPos", "Col")
				return
			}
		case "Position":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0010 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0010}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *expressionItem) Msgsize() (s int) {
	s = 1 + 13 + msgp.StringPrefixSize + len(z.GoExpression) + 6 + msgp.ByteSize + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Contents {
		s += z.Contents[za0001].Msgsize()
	}
	s += 10 + 1 + 12 + msgp.ArrayHeaderSize
	for za0002 := range z.Condition.Expressions {
		s += z.Condition.Expressions[za0002].Msgsize()
	}
	s += 7 + 1 + 12 + msgp.ArrayHeaderSize
	for za0003 := range z.IfTrue.Expressions {
		s += z.IfTrue.Expressions[za0003].Msgsize()
	}
	s += 8 + 1 + 12 + msgp.ArrayHeaderSize
	for za0004 := range z.IfFalse.Expressions {
		s += z.IfFalse.Expressions[za0004].Msgsize()
	}
	s += 10 + 1 + msgp.IntSize + msgp.IntSize + 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *file) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Module":
			z.Module, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Module")
				return
			}
		case "ModulePath":
			z.ModulePath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ModulePath")
				return
			}
		case "Imports":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Imports")
				return
			}
			if cap(z.Imports) >= int(zb0002) {
				z.Imports = (z.Imports)[:zb0002]
			} else {
				z.Imports = make([]_import, zb0002)
			}
			for za0001 := range z.Imports {
				err = z.Imports[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Imports", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *file) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Name"
	err = en.Append(0x84, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Module"
	err = en.Append(0xa6, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Module)
	if err != nil {
		err = msgp.WrapError(err, "Module")
		return
	}
	// write "ModulePath"
	err = en.Append(0xaa, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.ModulePath)
	if err != nil {
		err = msgp.WrapError(err, "ModulePath")
		return
	}
	// write "Imports"
	err = en.Append(0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Imports)))
	if err != nil {
		err = msgp.WrapError(err, "Imports")
		return
	}
	for za0001 := range z.Imports {
		err = z.Imports[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Imports", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *file) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Name"
	o = append(o, 0x84, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Module"
	o = append(o, 0xa6, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Module)
	// string "ModulePath"
	o = append(o, 0xaa, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.ModulePath)
	// string "Imports"
	o = append(o, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Imports)))
	for za0001 := range z.Imports {
		o, err = z.Imports[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Imports", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *file) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Module":
			z.Module, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Module")
				return
			}
		case "ModulePath":
			z.ModulePath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModulePath")
				return
			}
		case "Imports":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Imports")
				return
			}
			if cap(z.Imports) >= int(zb0002) {
				z.Imports = (z.Imports)[:zb0002]
			} else {
				z.Imports = make([]_import, zb0002)
			}
			for za0001 := range z.Imports {
				bts, err = z.Imports[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Imports", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *file) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 7 + msgp.StringPrefixSize + len(z.Module) + 11 + msgp.StringPrefixSize + len(z.ModulePath) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Imports {
		s += z.Imports[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *goIdent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Ident":
			z.Ident, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Ident")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *goIdent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Ident"
	err = en.Append(0x82, 0xa5, 0x49, 0x64, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Ident)
	if err != nil {
		err = msgp.WrapError(err, "Ident")
		return
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *goIdent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Ident"
	o = append(o, 0x82, 0xa5, 0x49, 0x64, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Ident)
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *goIdent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Ident":
			z.Ident, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ident")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *goIdent) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Ident) + 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *goType) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *goType) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Type"
	err = en.Append(0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *goType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Type"
	o = append(o, 0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *goType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *goType) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *importSpec) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Alias":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Alias")
					return
				}
				z.Alias = nil
			} else {
				if z.Alias == nil {
					z.Alias = new(goIdent)
				}
				err = z.Alias.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Alias")
					return
				}
			}
		case "Path":
			err = z.Path.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *importSpec) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Alias"
	err = en.Append(0x83, 0xa5, 0x41, 0x6c, 0x69, 0x61, 0x73)
	if err != nil {
		return
	}
	if z.Alias == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Alias.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Alias")
			return
		}
	}
	// write "Path"
	err = en.Append(0xa4, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = z.Path.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *importSpec) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Alias"
	o = append(o, 0x83, 0xa5, 0x41, 0x6c, 0x69, 0x61, 0x73)
	if z.Alias == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Alias.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Alias")
			return
		}
	}
	// string "Path"
	o = append(o, 0xa4, 0x50, 0x61, 0x74, 0x68)
	o, err = z.Path.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *importSpec) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Alias":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Alias = nil
			} else {
				if z.Alias == nil {
					z.Alias = new(goIdent)
				}
				bts, err = z.Alias.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Alias")
					return
				}
			}
		case "Path":
			bts, err = z.Path.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "Position":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0002 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0002}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *importSpec) Msgsize() (s int) {
	s = 1 + 6
	if z.Alias == nil {
		s += msgp.NilSize
	} else {
		s += z.Alias.Msgsize()
	}
	s += 5 + z.Path.Msgsize() + 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *libDependency) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Module":
			z.Module, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Module")
				return
			}
		case "ModulePath":
			z.ModulePath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ModulePath")
				return
			}
		case "Mixins":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Mixins")
				return
			}
			if cap(z.Mixins) >= int(zb0002) {
				z.Mixins = (z.Mixins)[:zb0002]
			} else {
				z.Mixins = make([]mixinDependency, zb0002)
			}
			for za0001 := range z.Mixins {
				err = z.Mixins[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Mixins", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *libDependency) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Module"
	err = en.Append(0x83, 0xa6, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Module)
	if err != nil {
		err = msgp.WrapError(err, "Module")
		return
	}
	// write "ModulePath"
	err = en.Append(0xaa, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.ModulePath)
	if err != nil {
		err = msgp.WrapError(err, "ModulePath")
		return
	}
	// write "Mixins"
	err = en.Append(0xa6, 0x4d, 0x69, 0x78, 0x69, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Mixins)))
	if err != nil {
		err = msgp.WrapError(err, "Mixins")
		return
	}
	for za0001 := range z.Mixins {
		err = z.Mixins[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Mixins", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *libDependency) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Module"
	o = append(o, 0x83, 0xa6, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Module)
	// string "ModulePath"
	o = append(o, 0xaa, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.ModulePath)
	// string "Mixins"
	o = append(o, 0xa6, 0x4d, 0x69, 0x78, 0x69, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Mixins)))
	for za0001 := range z.Mixins {
		o, err = z.Mixins[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Mixins", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *libDependency) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Module":
			z.Module, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Module")
				return
			}
		case "ModulePath":
			z.ModulePath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModulePath")
				return
			}
		case "Mixins":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mixins")
				return
			}
			if cap(z.Mixins) >= int(zb0002) {
				z.Mixins = (z.Mixins)[:zb0002]
			} else {
				z.Mixins = make([]mixinDependency, zb0002)
			}
			for za0001 := range z.Mixins {
				bts, err = z.Mixins[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Mixins", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *libDependency) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Module) + 11 + msgp.StringPrefixSize + len(z.ModulePath) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Mixins {
		s += z.Mixins[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *library) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Module":
			z.Module, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Module")
				return
			}
		case "PathInModule":
			z.PathInModule, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PathInModule")
				return
			}
		case "Files":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]file, zb0002)
			}
			for za0001 := range z.Files {
				err = z.Files[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
			}
		case "Dependencies":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Dependencies")
				return
			}
			if cap(z.Dependencies) >= int(zb0003) {
				z.Dependencies = (z.Dependencies)[:zb0003]
			} else {
				z.Dependencies = make([]libDependency, zb0003)
			}
			for za0002 := range z.Dependencies {
				err = z.Dependencies[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Dependencies", za0002)
					return
				}
			}
		case "GlobalCode":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "GlobalCode")
				return
			}
			if cap(z.GlobalCode) >= int(zb0004) {
				z.GlobalCode = (z.GlobalCode)[:zb0004]
			} else {
				z.GlobalCode = make([]code, zb0004)
			}
			for za0003 := range z.GlobalCode {
				err = z.GlobalCode[za0003].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "GlobalCode", za0003)
					return
				}
			}
		case "Mixins":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Mixins")
				return
			}
			if cap(z.Mixins) >= int(zb0005) {
				z.Mixins = (z.Mixins)[:zb0005]
			} else {
				z.Mixins = make([]mixin, zb0005)
			}
			for za0004 := range z.Mixins {
				err = z.Mixins[za0004].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Mixins", za0004)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *library) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Module"
	err = en.Append(0x86, 0xa6, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Module)
	if err != nil {
		err = msgp.WrapError(err, "Module")
		return
	}
	// write "PathInModule"
	err = en.Append(0xac, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.PathInModule)
	if err != nil {
		err = msgp.WrapError(err, "PathInModule")
		return
	}
	// write "Files"
	err = en.Append(0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Files)))
	if err != nil {
		err = msgp.WrapError(err, "Files")
		return
	}
	for za0001 := range z.Files {
		err = z.Files[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001)
			return
		}
	}
	// write "Dependencies"
	err = en.Append(0xac, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Dependencies)))
	if err != nil {
		err = msgp.WrapError(err, "Dependencies")
		return
	}
	for za0002 := range z.Dependencies {
		err = z.Dependencies[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Dependencies", za0002)
			return
		}
	}
	// write "GlobalCode"
	err = en.Append(0xaa, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.GlobalCode)))
	if err != nil {
		err = msgp.WrapError(err, "GlobalCode")
		return
	}
	for za0003 := range z.GlobalCode {
		err = z.GlobalCode[za0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "GlobalCode", za0003)
			return
		}
	}
	// write "Mixins"
	err = en.Append(0xa6, 0x4d, 0x69, 0x78, 0x69, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Mixins)))
	if err != nil {
		err = msgp.WrapError(err, "Mixins")
		return
	}
	for za0004 := range z.Mixins {
		err = z.Mixins[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Mixins", za0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *library) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Module"
	o = append(o, 0x86, 0xa6, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Module)
	// string "PathInModule"
	o = append(o, 0xac, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65)
	o = msgp.AppendString(o, z.PathInModule)
	// string "Files"
	o = append(o, 0xa5, 0x46, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Files)))
	for za0001 := range z.Files {
		o, err = z.Files[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Files", za0001)
			return
		}
	}
	// string "Dependencies"
	o = append(o, 0xac, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Dependencies)))
	for za0002 := range z.Dependencies {
		o, err = z.Dependencies[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Dependencies", za0002)
			return
		}
	}
	// string "GlobalCode"
	o = append(o, 0xaa, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.GlobalCode)))
	for za0003 := range z.GlobalCode {
		o, err = z.GlobalCode[za0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "GlobalCode", za0003)
			return
		}
	}
	// string "Mixins"
	o = append(o, 0xa6, 0x4d, 0x69, 0x78, 0x69, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Mixins)))
	for za0004 := range z.Mixins {
		o, err = z.Mixins[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Mixins", za0004)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *library) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Module":
			z.Module, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Module")
				return
			}
		case "PathInModule":
			z.PathInModule, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PathInModule")
				return
			}
		case "Files":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if cap(z.Files) >= int(zb0002) {
				z.Files = (z.Files)[:zb0002]
			} else {
				z.Files = make([]file, zb0002)
			}
			for za0001 := range z.Files {
				bts, err = z.Files[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
			}
		case "Dependencies":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Dependencies")
				return
			}
			if cap(z.Dependencies) >= int(zb0003) {
				z.Dependencies = (z.Dependencies)[:zb0003]
			} else {
				z.Dependencies = make([]libDependency, zb0003)
			}
			for za0002 := range z.Dependencies {
				bts, err = z.Dependencies[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Dependencies", za0002)
					return
				}
			}
		case "GlobalCode":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GlobalCode")
				return
			}
			if cap(z.GlobalCode) >= int(zb0004) {
				z.GlobalCode = (z.GlobalCode)[:zb0004]
			} else {
				z.GlobalCode = make([]code, zb0004)
			}
			for za0003 := range z.GlobalCode {
				bts, err = z.GlobalCode[za0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "GlobalCode", za0003)
					return
				}
			}
		case "Mixins":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mixins")
				return
			}
			if cap(z.Mixins) >= int(zb0005) {
				z.Mixins = (z.Mixins)[:zb0005]
			} else {
				z.Mixins = make([]mixin, zb0005)
			}
			for za0004 := range z.Mixins {
				bts, err = z.Mixins[za0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Mixins", za0004)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *library) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Module) + 13 + msgp.StringPrefixSize + len(z.PathInModule) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Files {
		s += z.Files[za0001].Msgsize()
	}
	s += 13 + msgp.ArrayHeaderSize
	for za0002 := range z.Dependencies {
		s += z.Dependencies[za0002].Msgsize()
	}
	s += 11 + msgp.ArrayHeaderSize
	for za0003 := range z.GlobalCode {
		s += z.GlobalCode[za0003].Msgsize()
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0004 := range z.Mixins {
		s += z.Mixins[za0004].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *mixin) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FileIndex":
			z.FileIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "FileIndex")
				return
			}
		case "MachineComments":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "MachineComments")
				return
			}
			if cap(z.MachineComments) >= int(zb0002) {
				z.MachineComments = (z.MachineComments)[:zb0002]
			} else {
				z.MachineComments = make([]string, zb0002)
			}
			for za0001 := range z.MachineComments {
				z.MachineComments[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MachineComments", za0001)
					return
				}
			}
		case "Name":
			err = z.Name.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "LParenPos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "LParenPos")
					return
				}
				z.LParenPos = nil
			} else {
				if z.LParenPos == nil {
					z.LParenPos = new(position)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "LParenPos")
					return
				}
				if zb0003 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zb0003}
					return
				}
				z.LParenPos.Line, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "LParenPos", "Line")
					return
				}
				z.LParenPos.Col, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "LParenPos", "Col")
					return
				}
			}
		case "Params":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0004) {
				z.Params = (z.Params)[:zb0004]
			} else {
				z.Params = make([]mixinParam, zb0004)
			}
			for za0002 := range z.Params {
				err = z.Params[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0002)
					return
				}
			}
		case "RParenPos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RParenPos")
					return
				}
				z.RParenPos = nil
			} else {
				if z.RParenPos == nil {
					z.RParenPos = new(position)
				}
				var zb0005 uint32
				zb0005, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "RParenPos")
					return
				}
				if zb0005 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zb0005}
					return
				}
				z.RParenPos.Line, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "RParenPos", "Line")
					return
				}
				z.RParenPos.Col, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "RParenPos", "Col")
					return
				}
			}
		case "Position":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0006 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0006}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		case "Var":
			z.Var, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Var")
				return
			}
		case "Precompiled":
			z.Precompiled, err = dc.ReadBytes(z.Precompiled)
			if err != nil {
				err = msgp.WrapError(err, "Precompiled")
				return
			}
		case "RequiredBy":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RequiredBy")
				return
			}
			if cap(z.RequiredBy) >= int(zb0007) {
				z.RequiredBy = (z.RequiredBy)[:zb0007]
			} else {
				z.RequiredBy = make([]string, zb0007)
			}
			for za0003 := range z.RequiredBy {
				z.RequiredBy[za0003], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RequiredBy", za0003)
					return
				}
			}
		case "WritesBody":
			z.WritesBody, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WritesBody")
				return
			}
		case "WritesElements":
			z.WritesElements, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WritesElements")
				return
			}
		case "WritesTopLevelAttributes":
			z.WritesTopLevelAttributes, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WritesTopLevelAttributes")
				return
			}
		case "TopLevelAndPlaceholder":
			z.TopLevelAndPlaceholder, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "TopLevelAndPlaceholder")
				return
			}
		case "Blocks":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Blocks")
				return
			}
			if cap(z.Blocks) >= int(zb0008) {
				z.Blocks = (z.Blocks)[:zb0008]
			} else {
				z.Blocks = make([]mixinBlock, zb0008)
			}
			for za0004 := range z.Blocks {
				err = z.Blocks[za0004].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Blocks", za0004)
					return
				}
			}
		case "HasAndPlaceholders":
			z.HasAndPlaceholders, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "HasAndPlaceholders")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *mixin) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 16
	// write "FileIndex"
	err = en.Append(0xde, 0x0, 0x10, 0xa9, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FileIndex)
	if err != nil {
		err = msgp.WrapError(err, "FileIndex")
		return
	}
	// write "MachineComments"
	err = en.Append(0xaf, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MachineComments)))
	if err != nil {
		err = msgp.WrapError(err, "MachineComments")
		return
	}
	for za0001 := range z.MachineComments {
		err = en.WriteString(z.MachineComments[za0001])
		if err != nil {
			err = msgp.WrapError(err, "MachineComments", za0001)
			return
		}
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.Name.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "LParenPos"
	err = en.Append(0xa9, 0x4c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	if z.LParenPos == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteInt(z.LParenPos.Line)
		if err != nil {
			err = msgp.WrapError(err, "LParenPos", "Line")
			return
		}
		err = en.WriteInt(z.LParenPos.Col)
		if err != nil {
			err = msgp.WrapError(err, "LParenPos", "Col")
			return
		}
	}
	// write "Params"
	err = en.Append(0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	for za0002 := range z.Params {
		err = z.Params[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Params", za0002)
			return
		}
	}
	// write "RParenPos"
	err = en.Append(0xa9, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	if z.RParenPos == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteInt(z.RParenPos.Line)
		if err != nil {
			err = msgp.WrapError(err, "RParenPos", "Line")
			return
		}
		err = en.WriteInt(z.RParenPos.Col)
		if err != nil {
			err = msgp.WrapError(err, "RParenPos", "Col")
			return
		}
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	// write "Var"
	err = en.Append(0xa3, 0x56, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Var)
	if err != nil {
		err = msgp.WrapError(err, "Var")
		return
	}
	// write "Precompiled"
	err = en.Append(0xab, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Precompiled)
	if err != nil {
		err = msgp.WrapError(err, "Precompiled")
		return
	}
	// write "RequiredBy"
	err = en.Append(0xaa, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.RequiredBy)))
	if err != nil {
		err = msgp.WrapError(err, "RequiredBy")
		return
	}
	for za0003 := range z.RequiredBy {
		err = en.WriteString(z.RequiredBy[za0003])
		if err != nil {
			err = msgp.WrapError(err, "RequiredBy", za0003)
			return
		}
	}
	// write "WritesBody"
	err = en.Append(0xaa, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WritesBody)
	if err != nil {
		err = msgp.WrapError(err, "WritesBody")
		return
	}
	// write "WritesElements"
	err = en.Append(0xae, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WritesElements)
	if err != nil {
		err = msgp.WrapError(err, "WritesElements")
		return
	}
	// write "WritesTopLevelAttributes"
	err = en.Append(0xb8, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WritesTopLevelAttributes)
	if err != nil {
		err = msgp.WrapError(err, "WritesTopLevelAttributes")
		return
	}
	// write "TopLevelAndPlaceholder"
	err = en.Append(0xb6, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.TopLevelAndPlaceholder)
	if err != nil {
		err = msgp.WrapError(err, "TopLevelAndPlaceholder")
		return
	}
	// write "Blocks"
	err = en.Append(0xa6, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Blocks)))
	if err != nil {
		err = msgp.WrapError(err, "Blocks")
		return
	}
	for za0004 := range z.Blocks {
		err = z.Blocks[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Blocks", za0004)
			return
		}
	}
	// write "HasAndPlaceholders"
	err = en.Append(0xb2, 0x48, 0x61, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.HasAndPlaceholders)
	if err != nil {
		err = msgp.WrapError(err, "HasAndPlaceholders")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *mixin) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 16
	// string "FileIndex"
	o = append(o, 0xde, 0x0, 0x10, 0xa9, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.FileIndex)
	// string "MachineComments"
	o = append(o, 0xaf, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MachineComments)))
	for za0001 := range z.MachineComments {
		o = msgp.AppendString(o, z.MachineComments[za0001])
	}
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o, err = z.Name.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// string "LParenPos"
	o = append(o, 0xa9, 0x4c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x50, 0x6f, 0x73)
	if z.LParenPos == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendInt(o, z.LParenPos.Line)
		o = msgp.AppendInt(o, z.LParenPos.Col)
	}
	// string "Params"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Params)))
	for za0002 := range z.Params {
		o, err = z.Params[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Params", za0002)
			return
		}
	}
	// string "RParenPos"
	o = append(o, 0xa9, 0x52, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x50, 0x6f, 0x73)
	if z.RParenPos == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendInt(o, z.RParenPos.Line)
		o = msgp.AppendInt(o, z.RParenPos.Col)
	}
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	// string "Var"
	o = append(o, 0xa3, 0x56, 0x61, 0x72)
	o = msgp.AppendString(o, z.Var)
	// string "Precompiled"
	o = append(o, 0xab, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64)
	o = msgp.AppendBytes(o, z.Precompiled)
	// string "RequiredBy"
	o = append(o, 0xaa, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RequiredBy)))
	for za0003 := range z.RequiredBy {
		o = msgp.AppendString(o, z.RequiredBy[za0003])
	}
	// string "WritesBody"
	o = append(o, 0xaa, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendBool(o, z.WritesBody)
	// string "WritesElements"
	o = append(o, 0xae, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendBool(o, z.WritesElements)
	// string "WritesTopLevelAttributes"
	o = append(o, 0xb8, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	o = msgp.AppendBool(o, z.WritesTopLevelAttributes)
	// string "TopLevelAndPlaceholder"
	o = append(o, 0xb6, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.TopLevelAndPlaceholder)
	// string "Blocks"
	o = append(o, 0xa6, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Blocks)))
	for za0004 := range z.Blocks {
		o, err = z.Blocks[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Blocks", za0004)
			return
		}
	}
	// string "HasAndPlaceholders"
	o = append(o, 0xb2, 0x48, 0x61, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73)
	o = msgp.AppendBool(o, z.HasAndPlaceholders)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *mixin) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FileIndex":
			z.FileIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FileIndex")
				return
			}
		case "MachineComments":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MachineComments")
				return
			}
			if cap(z.MachineComments) >= int(zb0002) {
				z.MachineComments = (z.MachineComments)[:zb0002]
			} else {
				z.MachineComments = make([]string, zb0002)
			}
			for za0001 := range z.MachineComments {
				z.MachineComments[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MachineComments", za0001)
					return
				}
			}
		case "Name":
			bts, err = z.Name.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "LParenPos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LParenPos = nil
			} else {
				if z.LParenPos == nil {
					z.LParenPos = new(position)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LParenPos")
					return
				}
				if zb0003 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zb0003}
					return
				}
				z.LParenPos.Line, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LParenPos", "Line")
					return
				}
				z.LParenPos.Col, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LParenPos", "Col")
					return
				}
			}
		case "Params":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0004) {
				z.Params = (z.Params)[:zb0004]
			} else {
				z.Params = make([]mixinParam, zb0004)
			}
			for za0002 := range z.Params {
				bts, err = z.Params[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0002)
					return
				}
			}
		case "RParenPos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RParenPos = nil
			} else {
				if z.RParenPos == nil {
					z.RParenPos = new(position)
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RParenPos")
					return
				}
				if zb0005 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zb0005}
					return
				}
				z.RParenPos.Line, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RParenPos", "Line")
					return
				}
				z.RParenPos.Col, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RParenPos", "Col")
					return
				}
			}
		case "Position":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0006 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0006}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		case "Var":
			z.Var, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Var")
				return
			}
		case "Precompiled":
			z.Precompiled, bts, err = msgp.ReadBytesBytes(bts, z.Precompiled)
			if err != nil {
				err = msgp.WrapError(err, "Precompiled")
				return
			}
		case "RequiredBy":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequiredBy")
				return
			}
			if cap(z.RequiredBy) >= int(zb0007) {
				z.RequiredBy = (z.RequiredBy)[:zb0007]
			} else {
				z.RequiredBy = make([]string, zb0007)
			}
			for za0003 := range z.RequiredBy {
				z.RequiredBy[za0003], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RequiredBy", za0003)
					return
				}
			}
		case "WritesBody":
			z.WritesBody, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WritesBody")
				return
			}
		case "WritesElements":
			z.WritesElements, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WritesElements")
				return
			}
		case "WritesTopLevelAttributes":
			z.WritesTopLevelAttributes, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WritesTopLevelAttributes")
				return
			}
		case "TopLevelAndPlaceholder":
			z.TopLevelAndPlaceholder, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopLevelAndPlaceholder")
				return
			}
		case "Blocks":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Blocks")
				return
			}
			if cap(z.Blocks) >= int(zb0008) {
				z.Blocks = (z.Blocks)[:zb0008]
			} else {
				z.Blocks = make([]mixinBlock, zb0008)
			}
			for za0004 := range z.Blocks {
				bts, err = z.Blocks[za0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Blocks", za0004)
					return
				}
			}
		case "HasAndPlaceholders":
			z.HasAndPlaceholders, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HasAndPlaceholders")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *mixin) Msgsize() (s int) {
	s = 3 + 10 + msgp.IntSize + 16 + msgp.ArrayHeaderSize
	for za0001 := range z.MachineComments {
		s += msgp.StringPrefixSize + len(z.MachineComments[za0001])
	}
	s += 5 + z.Name.Msgsize() + 10
	if z.LParenPos == nil {
		s += msgp.NilSize
	} else {
		s += 1 + msgp.IntSize + msgp.IntSize
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0002 := range z.Params {
		s += z.Params[za0002].Msgsize()
	}
	s += 10
	if z.RParenPos == nil {
		s += msgp.NilSize
	} else {
		s += 1 + msgp.IntSize + msgp.IntSize
	}
	s += 9 + 1 + msgp.IntSize + msgp.IntSize + 4 + msgp.StringPrefixSize + len(z.Var) + 12 + msgp.BytesPrefixSize + len(z.Precompiled) + 11 + msgp.ArrayHeaderSize
	for za0003 := range z.RequiredBy {
		s += msgp.StringPrefixSize + len(z.RequiredBy[za0003])
	}
	s += 11 + msgp.BoolSize + 15 + msgp.BoolSize + 25 + msgp.BoolSize + 23 + msgp.BoolSize + 7 + msgp.ArrayHeaderSize
	for za0004 := range z.Blocks {
		s += z.Blocks[za0004].Msgsize()
	}
	s += 19 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *mixinBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "TopLevel":
			z.TopLevel, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "TopLevel")
				return
			}
		case "CanAttributes":
			z.CanAttributes, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "CanAttributes")
				return
			}
		case "DefaultWritesBody":
			z.DefaultWritesBody, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "DefaultWritesBody")
				return
			}
		case "DefaultWritesElements":
			z.DefaultWritesElements, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "DefaultWritesElements")
				return
			}
		case "DefaultWritesTopLevelAttributes":
			z.DefaultWritesTopLevelAttributes, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "DefaultWritesTopLevelAttributes")
				return
			}
		case "DefaultTopLevelAndPlaceholder":
			z.DefaultTopLevelAndPlaceholder, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "DefaultTopLevelAndPlaceholder")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *mixinBlock) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Name"
	err = en.Append(0x87, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "TopLevel"
	err = en.Append(0xa8, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.TopLevel)
	if err != nil {
		err = msgp.WrapError(err, "TopLevel")
		return
	}
	// write "CanAttributes"
	err = en.Append(0xad, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.CanAttributes)
	if err != nil {
		err = msgp.WrapError(err, "CanAttributes")
		return
	}
	// write "DefaultWritesBody"
	err = en.Append(0xb1, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.DefaultWritesBody)
	if err != nil {
		err = msgp.WrapError(err, "DefaultWritesBody")
		return
	}
	// write "DefaultWritesElements"
	err = en.Append(0xb5, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.DefaultWritesElements)
	if err != nil {
		err = msgp.WrapError(err, "DefaultWritesElements")
		return
	}
	// write "DefaultWritesTopLevelAttributes"
	err = en.Append(0xbf, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.DefaultWritesTopLevelAttributes)
	if err != nil {
		err = msgp.WrapError(err, "DefaultWritesTopLevelAttributes")
		return
	}
	// write "DefaultTopLevelAndPlaceholder"
	err = en.Append(0xbd, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.DefaultTopLevelAndPlaceholder)
	if err != nil {
		err = msgp.WrapError(err, "DefaultTopLevelAndPlaceholder")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *mixinBlock) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Name"
	o = append(o, 0x87, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "TopLevel"
	o = append(o, 0xa8, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c)
	o = msgp.AppendBool(o, z.TopLevel)
	// string "CanAttributes"
	o = append(o, 0xad, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	o = msgp.AppendBool(o, z.CanAttributes)
	// string "DefaultWritesBody"
	o = append(o, 0xb1, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendBool(o, z.DefaultWritesBody)
	// string "DefaultWritesElements"
	o = append(o, 0xb5, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendBool(o, z.DefaultWritesElements)
	// string "DefaultWritesTopLevelAttributes"
	o = append(o, 0xbf, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	o = msgp.AppendBool(o, z.DefaultWritesTopLevelAttributes)
	// string "DefaultTopLevelAndPlaceholder"
	o = append(o, 0xbd, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.DefaultTopLevelAndPlaceholder)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *mixinBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "TopLevel":
			z.TopLevel, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopLevel")
				return
			}
		case "CanAttributes":
			z.CanAttributes, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CanAttributes")
				return
			}
		case "DefaultWritesBody":
			z.DefaultWritesBody, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DefaultWritesBody")
				return
			}
		case "DefaultWritesElements":
			z.DefaultWritesElements, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DefaultWritesElements")
				return
			}
		case "DefaultWritesTopLevelAttributes":
			z.DefaultWritesTopLevelAttributes, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DefaultWritesTopLevelAttributes")
				return
			}
		case "DefaultTopLevelAndPlaceholder":
			z.DefaultTopLevelAndPlaceholder, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DefaultTopLevelAndPlaceholder")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *mixinBlock) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 9 + msgp.BoolSize + 14 + msgp.BoolSize + 18 + msgp.BoolSize + 22 + msgp.BoolSize + 32 + msgp.BoolSize + 30 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *mixinDependency) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Var":
			z.Var, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Var")
				return
			}
		case "RequiredBy":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RequiredBy")
				return
			}
			if cap(z.RequiredBy) >= int(zb0002) {
				z.RequiredBy = (z.RequiredBy)[:zb0002]
			} else {
				z.RequiredBy = make([]string, zb0002)
			}
			for za0001 := range z.RequiredBy {
				z.RequiredBy[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RequiredBy", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *mixinDependency) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Name"
	err = en.Append(0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Var"
	err = en.Append(0xa3, 0x56, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Var)
	if err != nil {
		err = msgp.WrapError(err, "Var")
		return
	}
	// write "RequiredBy"
	err = en.Append(0xaa, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.RequiredBy)))
	if err != nil {
		err = msgp.WrapError(err, "RequiredBy")
		return
	}
	for za0001 := range z.RequiredBy {
		err = en.WriteString(z.RequiredBy[za0001])
		if err != nil {
			err = msgp.WrapError(err, "RequiredBy", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *mixinDependency) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Name"
	o = append(o, 0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Var"
	o = append(o, 0xa3, 0x56, 0x61, 0x72)
	o = msgp.AppendString(o, z.Var)
	// string "RequiredBy"
	o = append(o, 0xaa, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RequiredBy)))
	for za0001 := range z.RequiredBy {
		o = msgp.AppendString(o, z.RequiredBy[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *mixinDependency) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Var":
			z.Var, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Var")
				return
			}
		case "RequiredBy":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequiredBy")
				return
			}
			if cap(z.RequiredBy) >= int(zb0002) {
				z.RequiredBy = (z.RequiredBy)[:zb0002]
			} else {
				z.RequiredBy = make([]string, zb0002)
			}
			for za0001 := range z.RequiredBy {
				z.RequiredBy[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RequiredBy", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *mixinDependency) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.StringPrefixSize + len(z.Var) + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.RequiredBy {
		s += msgp.StringPrefixSize + len(z.RequiredBy[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *mixinParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			err = z.Name.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Type":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = nil
			} else {
				if z.Type == nil {
					z.Type = new(goType)
				}
				err = z.Type.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
			}
		case "InferredType":
			z.InferredType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "InferredType")
				return
			}
		case "AssignPos":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AssignPos")
					return
				}
				z.AssignPos = nil
			} else {
				if z.AssignPos == nil {
					z.AssignPos = new(position)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "AssignPos")
					return
				}
				if zb0002 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zb0002}
					return
				}
				z.AssignPos.Line, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "AssignPos", "Line")
					return
				}
				z.AssignPos.Col, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "AssignPos", "Col")
					return
				}
			}
		case "Default":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Default")
					return
				}
				z.Default = nil
			} else {
				if z.Default == nil {
					z.Default = new(expression)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Default")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Default")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Expressions":
						var zb0004 uint32
						zb0004, err = dc.ReadArrayHeader()
						if err != nil {
							err = msgp.WrapError(err, "Default", "Expressions")
							return
						}
						if cap(z.Default.Expressions) >= int(zb0004) {
							z.Default.Expressions = (z.Default.Expressions)[:zb0004]
						} else {
							z.Default.Expressions = make([]expressionItem, zb0004)
						}
						for za0001 := range z.Default.Expressions {
							err = z.Default.Expressions[za0001].DecodeMsg(dc)
							if err != nil {
								err = msgp.WrapError(err, "Default", "Expressions", za0001)
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Default")
							return
						}
					}
				}
			}
		case "Position":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0005 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0005}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *mixinParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Name"
	err = en.Append(0x86, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.Name.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	if z.Type == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Type.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Type")
			return
		}
	}
	// write "InferredType"
	err = en.Append(0xac, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.InferredType)
	if err != nil {
		err = msgp.WrapError(err, "InferredType")
		return
	}
	// write "AssignPos"
	err = en.Append(0xa9, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	if z.AssignPos == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteInt(z.AssignPos.Line)
		if err != nil {
			err = msgp.WrapError(err, "AssignPos", "Line")
			return
		}
		err = en.WriteInt(z.AssignPos.Col)
		if err != nil {
			err = msgp.WrapError(err, "AssignPos", "Col")
			return
		}
	}
	// write "Default"
	err = en.Append(0xa7, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74)
	if err != nil {
		return
	}
	if z.Default == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "Expressions"
		err = en.Append(0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Default.Expressions)))
		if err != nil {
			err = msgp.WrapError(err, "Default", "Expressions")
			return
		}
		for za0001 := range z.Default.Expressions {
			err = z.Default.Expressions[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Default", "Expressions", za0001)
				return
			}
		}
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *mixinParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Name"
	o = append(o, 0x86, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o, err = z.Name.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if z.Type == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Type.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Type")
			return
		}
	}
	// string "InferredType"
	o = append(o, 0xac, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.InferredType)
	// string "AssignPos"
	o = append(o, 0xa9, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x73)
	if z.AssignPos == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendInt(o, z.AssignPos.Line)
		o = msgp.AppendInt(o, z.AssignPos.Col)
	}
	// string "Default"
	o = append(o, 0xa7, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74)
	if z.Default == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "Expressions"
		o = append(o, 0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Default.Expressions)))
		for za0001 := range z.Default.Expressions {
			o, err = z.Default.Expressions[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Default", "Expressions", za0001)
				return
			}
		}
	}
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *mixinParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			bts, err = z.Name.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Type":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Type = nil
			} else {
				if z.Type == nil {
					z.Type = new(goType)
				}
				bts, err = z.Type.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
			}
		case "InferredType":
			z.InferredType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InferredType")
				return
			}
		case "AssignPos":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AssignPos = nil
			} else {
				if z.AssignPos == nil {
					z.AssignPos = new(position)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssignPos")
					return
				}
				if zb0002 != 2 {
					err = msgp.ArrayError{Wanted: 2, Got: zb0002}
					return
				}
				z.AssignPos.Line, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssignPos", "Line")
					return
				}
				z.AssignPos.Col, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AssignPos", "Col")
					return
				}
			}
		case "Default":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Default = nil
			} else {
				if z.Default == nil {
					z.Default = new(expression)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Default")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Default")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Expressions":
						var zb0004 uint32
						zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Default", "Expressions")
							return
						}
						if cap(z.Default.Expressions) >= int(zb0004) {
							z.Default.Expressions = (z.Default.Expressions)[:zb0004]
						} else {
							z.Default.Expressions = make([]expressionItem, zb0004)
						}
						for za0001 := range z.Default.Expressions {
							bts, err = z.Default.Expressions[za0001].UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Default", "Expressions", za0001)
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Default")
							return
						}
					}
				}
			}
		case "Position":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0005 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0005}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *mixinParam) Msgsize() (s int) {
	s = 1 + 5 + z.Name.Msgsize() + 5
	if z.Type == nil {
		s += msgp.NilSize
	} else {
		s += z.Type.Msgsize()
	}
	s += 13 + msgp.StringPrefixSize + len(z.InferredType) + 10
	if z.AssignPos == nil {
		s += msgp.NilSize
	} else {
		s += 1 + msgp.IntSize + msgp.IntSize
	}
	s += 8
	if z.Default == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 12 + msgp.ArrayHeaderSize
		for za0001 := range z.Default.Expressions {
			s += z.Default.Expressions[za0001].Msgsize()
		}
	}
	s += 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *position) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Line, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Line")
		return
	}
	z.Col, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Col")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z position) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Line)
	if err != nil {
		err = msgp.WrapError(err, "Line")
		return
	}
	err = en.WriteInt(z.Col)
	if err != nil {
		err = msgp.WrapError(err, "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z position) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Line)
	o = msgp.AppendInt(o, z.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *position) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Line, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Line")
		return
	}
	z.Col, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Col")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z position) Msgsize() (s int) {
	s = 1 + msgp.IntSize + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *stringExpressionItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Text":
			z.Text, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		case "FormatDirective":
			z.FormatDirective, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FormatDirective")
				return
			}
		case "Expression":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Expression")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Expression")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0003 uint32
					zb0003, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Expression", "Expressions")
						return
					}
					if cap(z.Expression.Expressions) >= int(zb0003) {
						z.Expression.Expressions = (z.Expression.Expressions)[:zb0003]
					} else {
						z.Expression.Expressions = make([]expressionItem, zb0003)
					}
					for za0001 := range z.Expression.Expressions {
						err = z.Expression.Expressions[za0001].DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Expression", "Expressions", za0001)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Expression")
						return
					}
				}
			}
		case "Position":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0004 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0004}
				return
			}
			z.Position.Line, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *stringExpressionItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Text"
	err = en.Append(0x84, 0xa4, 0x54, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Text)
	if err != nil {
		err = msgp.WrapError(err, "Text")
		return
	}
	// write "FormatDirective"
	err = en.Append(0xaf, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FormatDirective)
	if err != nil {
		err = msgp.WrapError(err, "FormatDirective")
		return
	}
	// write "Expression"
	err = en.Append(0xaa, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// map header, size 1
	// write "Expressions"
	err = en.Append(0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Expression.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "Expression", "Expressions")
		return
	}
	for za0001 := range z.Expression.Expressions {
		err = z.Expression.Expressions[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Expression", "Expressions", za0001)
			return
		}
	}
	// write "Position"
	err = en.Append(0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Position.Line)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Line")
		return
	}
	err = en.WriteInt(z.Position.Col)
	if err != nil {
		err = msgp.WrapError(err, "Position", "Col")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *stringExpressionItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Text"
	o = append(o, 0x84, 0xa4, 0x54, 0x65, 0x78, 0x74)
	o = msgp.AppendString(o, z.Text)
	// string "FormatDirective"
	o = append(o, 0xaf, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendString(o, z.FormatDirective)
	// string "Expression"
	o = append(o, 0xaa, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	// map header, size 1
	// string "Expressions"
	o = append(o, 0x81, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Expression.Expressions)))
	for za0001 := range z.Expression.Expressions {
		o, err = z.Expression.Expressions[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Expression", "Expressions", za0001)
			return
		}
	}
	// string "Position"
	o = append(o, 0xa8, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt(o, z.Position.Line)
	o = msgp.AppendInt(o, z.Position.Col)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *stringExpressionItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Text":
			z.Text, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		case "FormatDirective":
			z.FormatDirective, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FormatDirective")
				return
			}
		case "Expression":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expression")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expression")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Expressions":
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Expression", "Expressions")
						return
					}
					if cap(z.Expression.Expressions) >= int(zb0003) {
						z.Expression.Expressions = (z.Expression.Expressions)[:zb0003]
					} else {
						z.Expression.Expressions = make([]expressionItem, zb0003)
					}
					for za0001 := range z.Expression.Expressions {
						bts, err = z.Expression.Expressions[za0001].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Expression", "Expressions", za0001)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Expression")
						return
					}
				}
			}
		case "Position":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position")
				return
			}
			if zb0004 != 2 {
				err = msgp.ArrayError{Wanted: 2, Got: zb0004}
				return
			}
			z.Position.Line, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Line")
				return
			}
			z.Position.Col, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Position", "Col")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *stringExpressionItem) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Text) + 16 + msgp.StringPrefixSize + len(z.FormatDirective) + 11 + 1 + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.Expression.Expressions {
		s += z.Expression.Expressions[za0001].Msgsize()
	}
	s += 9 + 1 + msgp.IntSize + msgp.IntSize
	return
}
