// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mavolin/corgi/corgierr"
	"github.com/mavolin/corgi/file"
	"github.com/mavolin/corgi/internal/stack"
)

// todo: rm these as soon as pigeon#115 is fixed
const lbrace = "{"
const rbrace = "}"

type ErrList = errList
type ParserError = parserError

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 12, col: 1, offset: 189},
			expr: &actionExpr{
				pos: position{line: 13, col: 5, offset: 201},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 13, col: 5, offset: 201},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 128, col: 9, offset: 3669},
							run: (*parser).callonFile3,
						},
						&zeroOrOneExpr{
							pos: position{line: 14, col: 5, offset: 210},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 15, col: 5, offset: 223},
							label: "extendComments",
							expr: &zeroOrOneExpr{
								pos: position{line: 15, col: 20, offset: 238},
								expr: &ruleRefExpr{
									pos:  position{line: 15, col: 20, offset: 238},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 15, col: 35, offset: 253},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 16, col: 5, offset: 266},
							label: "extendI",
							expr: &zeroOrOneExpr{
								pos: position{line: 16, col: 13, offset: 274},
								expr: &actionExpr{
									pos: position{line: 3181, col: 11, offset: 110426},
									run: (*parser).callonFile25,
									expr: &seqExpr{
										pos: position{line: 3181, col: 11, offset: 110426},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3181, col: 11, offset: 110426},
												val:        "extend",
												ignoreCase: false,
												want:       "\"extend\"",
											},
											&labeledExpr{
												pos:   position{line: 3181, col: 20, offset: 110435},
												label: "extendI",
												expr: &choiceExpr{
													pos: position{line: 3153, col: 18, offset: 109488},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3153, col: 18, offset: 109488},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 3153, col: 18, offset: 109488},
																	expr: &litMatcher{
																		pos:        position{line: 3153, col: 18, offset: 109488},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 743, col: 11, offset: 22871},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 749, col: 14, offset: 22958},
																			run: (*parser).callonFile34,
																			expr: &seqExpr{
																				pos: position{line: 749, col: 14, offset: 22958},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 749, col: 14, offset: 22958},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 749, col: 18, offset: 22962},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 749, col: 23, offset: 22967},
																							expr: &charClassMatcher{
																								pos:        position{line: 2691, col: 27, offset: 93866},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 749, col: 47, offset: 22991},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 751, col: 5, offset: 23083},
																			run: (*parser).callonFile41,
																			expr: &seqExpr{
																				pos: position{line: 751, col: 5, offset: 23083},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 751, col: 5, offset: 23083},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 751, col: 9, offset: 23087},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 751, col: 14, offset: 23092},
																							expr: &charClassMatcher{
																								pos:        position{line: 2691, col: 27, offset: 93866},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 751, col: 38, offset: 23116},
																						expr: &seqExpr{
																							pos: position{line: 3721, col: 12, offset: 127772},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3721, col: 12, offset: 127772},
																									expr: &charClassMatcher{
																										pos:        position{line: 3733, col: 36, offset: 128119},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3721, col: 16, offset: 127776},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3721, col: 16, offset: 127776},
																													expr: &litMatcher{
																														pos:        position{line: 3721, col: 16, offset: 127776},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3721, col: 22, offset: 127782},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3720, col: 12, offset: 127758},
																											expr: &anyMatcher{
																												line: 3720, col: 13, offset: 127759,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 770, col: 22, offset: 23520},
																			run: (*parser).callonFile58,
																			expr: &seqExpr{
																				pos: position{line: 770, col: 22, offset: 23520},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 770, col: 22, offset: 23520},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 770, col: 26, offset: 23524},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 770, col: 31, offset: 23529},
																							expr: &choiceExpr{
																								pos: position{line: 770, col: 32, offset: 23530},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2430, col: 24, offset: 83529},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2430, col: 24, offset: 83529},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2431, col: 24, offset: 83596},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2431, col: 24, offset: 83596},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2432, col: 5, offset: 83633},
																										run: (*parser).callonFile73,
																										expr: &seqExpr{
																											pos: position{line: 2432, col: 5, offset: 83633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2432, col: 5, offset: 83633},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 14, offset: 83642},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 26, offset: 83654},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2449, col: 19, offset: 84271},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2449, col: 19, offset: 84271},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2450, col: 5, offset: 84330},
																										run: (*parser).callonFile86,
																										expr: &seqExpr{
																											pos: position{line: 2450, col: 5, offset: 84330},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2450, col: 5, offset: 84330},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 14, offset: 84339},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 26, offset: 84351},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 38, offset: 84363},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 50, offset: 84375},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2479, col: 16, offset: 85511},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2479, col: 16, offset: 85511},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2480, col: 5, offset: 85614},
																										run: (*parser).callonFile107,
																										expr: &seqExpr{
																											pos: position{line: 2480, col: 5, offset: 85614},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2480, col: 5, offset: 85614},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 14, offset: 85623},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 26, offset: 85635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 38, offset: 85647},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 50, offset: 85659},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 62, offset: 85671},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 74, offset: 85683},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 86, offset: 85695},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 98, offset: 85707},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2707, col: 36, offset: 94644},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2707, col: 36, offset: 94644},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2707, col: 41, offset: 94649},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2705, col: 38, offset: 94536},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2594, col: 37, offset: 90294},
																										run: (*parser).callonFile130,
																										expr: &seqExpr{
																											pos: position{line: 2594, col: 37, offset: 90294},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2594, col: 37, offset: 90294},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2618, col: 5, offset: 91311},
																										run: (*parser).callonFile141,
																										expr: &seqExpr{
																											pos: position{line: 2618, col: 5, offset: 91311},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2618, col: 5, offset: 91311},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2639, col: 5, offset: 92153},
																										run: (*parser).callonFile148,
																										expr: &seqExpr{
																											pos: position{line: 2639, col: 5, offset: 92153},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2639, col: 5, offset: 92153},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2657, col: 5, offset: 92839},
																										run: (*parser).callonFile153,
																										expr: &seqExpr{
																											pos: position{line: 2657, col: 5, offset: 92839},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2657, col: 5, offset: 92839},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2657, col: 10, offset: 92844},
																													expr: &charClassMatcher{
																														pos:        position{line: 3722, col: 12, offset: 127805},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 770, col: 115, offset: 23613},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 772, col: 5, offset: 23705},
																			run: (*parser).callonFile159,
																			expr: &seqExpr{
																				pos: position{line: 772, col: 5, offset: 23705},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 772, col: 5, offset: 23705},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 772, col: 9, offset: 23709},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 772, col: 14, offset: 23714},
																							expr: &choiceExpr{
																								pos: position{line: 772, col: 15, offset: 23715},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2430, col: 24, offset: 83529},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2430, col: 24, offset: 83529},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2431, col: 24, offset: 83596},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2431, col: 24, offset: 83596},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2432, col: 5, offset: 83633},
																										run: (*parser).callonFile174,
																										expr: &seqExpr{
																											pos: position{line: 2432, col: 5, offset: 83633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2432, col: 5, offset: 83633},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 14, offset: 83642},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 26, offset: 83654},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2449, col: 19, offset: 84271},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2449, col: 19, offset: 84271},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2450, col: 5, offset: 84330},
																										run: (*parser).callonFile187,
																										expr: &seqExpr{
																											pos: position{line: 2450, col: 5, offset: 84330},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2450, col: 5, offset: 84330},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 14, offset: 84339},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 26, offset: 84351},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 38, offset: 84363},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 50, offset: 84375},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2479, col: 16, offset: 85511},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2479, col: 16, offset: 85511},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2480, col: 5, offset: 85614},
																										run: (*parser).callonFile208,
																										expr: &seqExpr{
																											pos: position{line: 2480, col: 5, offset: 85614},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2480, col: 5, offset: 85614},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 14, offset: 85623},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 26, offset: 85635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 38, offset: 85647},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 50, offset: 85659},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 62, offset: 85671},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 74, offset: 85683},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 86, offset: 85695},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 98, offset: 85707},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2707, col: 36, offset: 94644},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2707, col: 36, offset: 94644},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2707, col: 41, offset: 94649},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2705, col: 38, offset: 94536},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2594, col: 37, offset: 90294},
																										run: (*parser).callonFile231,
																										expr: &seqExpr{
																											pos: position{line: 2594, col: 37, offset: 90294},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2594, col: 37, offset: 90294},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2618, col: 5, offset: 91311},
																										run: (*parser).callonFile242,
																										expr: &seqExpr{
																											pos: position{line: 2618, col: 5, offset: 91311},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2618, col: 5, offset: 91311},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2639, col: 5, offset: 92153},
																										run: (*parser).callonFile249,
																										expr: &seqExpr{
																											pos: position{line: 2639, col: 5, offset: 92153},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2639, col: 5, offset: 92153},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2657, col: 5, offset: 92839},
																										run: (*parser).callonFile254,
																										expr: &seqExpr{
																											pos: position{line: 2657, col: 5, offset: 92839},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2657, col: 5, offset: 92839},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2657, col: 10, offset: 92844},
																													expr: &charClassMatcher{
																														pos:        position{line: 3722, col: 12, offset: 127805},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 772, col: 98, offset: 23798},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3724, col: 8, offset: 127821},
																							run: (*parser).callonFile260,
																							expr: &choiceExpr{
																								pos: position{line: 3724, col: 9, offset: 127822},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3724, col: 9, offset: 127822},
																										expr: &anyMatcher{
																											line: 3724, col: 10, offset: 127823,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3724, col: 14, offset: 127827},
																										expr: &anyMatcher{
																											line: 3724, col: 15, offset: 127828,
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 772, col: 110, offset: 23810},
																						expr: &seqExpr{
																							pos: position{line: 3721, col: 12, offset: 127772},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3721, col: 12, offset: 127772},
																									expr: &charClassMatcher{
																										pos:        position{line: 3733, col: 36, offset: 128119},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3721, col: 16, offset: 127776},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3721, col: 16, offset: 127776},
																													expr: &litMatcher{
																														pos:        position{line: 3721, col: 16, offset: 127776},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3721, col: 22, offset: 127782},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3720, col: 12, offset: 127758},
																											expr: &anyMatcher{
																												line: 3720, col: 13, offset: 127759,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 791, col: 22, offset: 24216},
																			run: (*parser).callonFile277,
																			expr: &seqExpr{
																				pos: position{line: 791, col: 22, offset: 24216},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 791, col: 22, offset: 24216},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 791, col: 27, offset: 24221},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 791, col: 32, offset: 24226},
																							expr: &charClassMatcher{
																								pos:        position{line: 791, col: 32, offset: 24226},
																								val:        "[^\\\\r\\n]",
																								chars:      []rune{'\'', '\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 791, col: 42, offset: 24236},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 791, col: 47, offset: 24241},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3724, col: 8, offset: 127821},
																							run: (*parser).callonFile285,
																							expr: &choiceExpr{
																								pos: position{line: 3724, col: 9, offset: 127822},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3724, col: 9, offset: 127822},
																										expr: &anyMatcher{
																											line: 3724, col: 10, offset: 127823,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3724, col: 14, offset: 127827},
																										expr: &anyMatcher{
																											line: 3724, col: 15, offset: 127828,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3153, col: 32, offset: 109502},
															run: (*parser).callonFile291,
															expr: &labeledExpr{
																pos:   position{line: 3153, col: 32, offset: 109502},
																label: "pathI",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 3153, col: 38, offset: 109508},
																	expr: &charClassMatcher{
																		pos:        position{line: 3722, col: 12, offset: 127805},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												expr: &charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3721, col: 16, offset: 127776},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																expr: &litMatcher{
																	pos:        position{line: 3721, col: 16, offset: 127776},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3721, col: 22, offset: 127782},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3720, col: 12, offset: 127758},
														expr: &anyMatcher{
															line: 3720, col: 13, offset: 127759,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 16, col: 21, offset: 282},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 295},
							label: "importsAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 25, offset: 315},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 25, offset: 315},
									name: "importsAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 17, col: 45, offset: 335},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 5, offset: 348},
							label: "usesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 22, offset: 365},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 22, offset: 365},
									name: "usesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 18, col: 39, offset: 382},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 395},
							label: "globalCodeAndFuncI",
							expr: &zeroOrOneExpr{
								pos: position{line: 19, col: 24, offset: 414},
								expr: &ruleRefExpr{
									pos:  position{line: 19, col: 24, offset: 414},
									name: "globalCodeAndFunc",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 19, col: 43, offset: 433},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 20, col: 5, offset: 446},
							label: "doctypeCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 20, col: 22, offset: 463},
								expr: &ruleRefExpr{
									pos:  position{line: 20, col: 22, offset: 463},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 20, col: 37, offset: 478},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 5, offset: 491},
							label: "doctypeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 14, offset: 500},
								expr: &choiceExpr{
									pos: position{line: 852, col: 12, offset: 26297},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 852, col: 12, offset: 26297},
											run: (*parser).callonFile359,
											expr: &seqExpr{
												pos: position{line: 852, col: 12, offset: 26297},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 852, col: 12, offset: 26297},
														val:        "doctype",
														ignoreCase: false,
														want:       "\"doctype\"",
													},
													&choiceExpr{
														pos: position{line: 865, col: 18, offset: 26720},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 865, col: 18, offset: 26720},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 865, col: 18, offset: 26720},
																		val:        " html",
																		ignoreCase: false,
																		want:       "\" html\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 866, col: 5, offset: 26738},
																run: (*parser).callonFile374,
																expr: &seqExpr{
																	pos: position{line: 866, col: 5, offset: 26738},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 866, col: 5, offset: 26738},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&labeledExpr{
																			pos:   position{line: 866, col: 9, offset: 26742},
																			label: "startPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonFile378,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 866, col: 23, offset: 26756},
																			expr: &charClassMatcher{
																				pos:        position{line: 3722, col: 12, offset: 127805},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3721, col: 12, offset: 127772},
																			expr: &charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							expr: &litMatcher{
																								pos:        position{line: 3721, col: 16, offset: 127776},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3721, col: 22, offset: 127782},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3720, col: 12, offset: 127758},
																					expr: &anyMatcher{
																						line: 3720, col: 13, offset: 127759,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 876, col: 9, offset: 27137},
																run: (*parser).callonFile395,
																expr: &seqExpr{
																	pos: position{line: 876, col: 9, offset: 27137},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 876, col: 9, offset: 27137},
																			expr: &litMatcher{
																				pos:        position{line: 876, col: 9, offset: 27137},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 876, col: 14, offset: 27142},
																			expr: &charClassMatcher{
																				pos:        position{line: 3722, col: 12, offset: 127805},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3721, col: 12, offset: 127772},
																			expr: &charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							expr: &litMatcher{
																								pos:        position{line: 3721, col: 16, offset: 127776},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3721, col: 22, offset: 127782},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3720, col: 12, offset: 127758},
																					expr: &anyMatcher{
																						line: 3720, col: 13, offset: 127759,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 854, col: 5, offset: 26374},
											run: (*parser).callonFile410,
											expr: &seqExpr{
												pos: position{line: 854, col: 5, offset: 26374},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 854, col: 5, offset: 26374},
														val:        "!doctype",
														ignoreCase: false,
														want:       "\"!doctype\"",
													},
													&choiceExpr{
														pos: position{line: 865, col: 18, offset: 26720},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 865, col: 18, offset: 26720},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 865, col: 18, offset: 26720},
																		val:        " html",
																		ignoreCase: false,
																		want:       "\" html\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 866, col: 5, offset: 26738},
																run: (*parser).callonFile425,
																expr: &seqExpr{
																	pos: position{line: 866, col: 5, offset: 26738},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 866, col: 5, offset: 26738},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&labeledExpr{
																			pos:   position{line: 866, col: 9, offset: 26742},
																			label: "startPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonFile429,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 866, col: 23, offset: 26756},
																			expr: &charClassMatcher{
																				pos:        position{line: 3722, col: 12, offset: 127805},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3721, col: 12, offset: 127772},
																			expr: &charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							expr: &litMatcher{
																								pos:        position{line: 3721, col: 16, offset: 127776},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3721, col: 22, offset: 127782},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3720, col: 12, offset: 127758},
																					expr: &anyMatcher{
																						line: 3720, col: 13, offset: 127759,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 876, col: 9, offset: 27137},
																run: (*parser).callonFile446,
																expr: &seqExpr{
																	pos: position{line: 876, col: 9, offset: 27137},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 876, col: 9, offset: 27137},
																			expr: &litMatcher{
																				pos:        position{line: 876, col: 9, offset: 27137},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 876, col: 14, offset: 27142},
																			expr: &charClassMatcher{
																				pos:        position{line: 3722, col: 12, offset: 127805},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3721, col: 12, offset: 127772},
																			expr: &charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							expr: &litMatcher{
																								pos:        position{line: 3721, col: 16, offset: 127776},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3721, col: 22, offset: 127782},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3720, col: 12, offset: 127758},
																					expr: &anyMatcher{
																						line: 3720, col: 13, offset: 127759,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 21, col: 23, offset: 509},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 22, col: 5, offset: 522},
							label: "scopeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 22, col: 12, offset: 529},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 12, offset: 529},
									name: "Scope",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 22, col: 19, offset: 536},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3720, col: 12, offset: 127758},
							expr: &anyMatcher{
								line: 3720, col: 13, offset: 127759,
							},
						},
					},
				},
			},
		},
		{
			name: "importsAndComments",
			pos:  position{line: 68, col: 1, offset: 1902},
			expr: &actionExpr{
				pos: position{line: 68, col: 23, offset: 1924},
				run: (*parser).callonimportsAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 68, col: 23, offset: 1924},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 68, col: 29, offset: 1930},
						expr: &seqExpr{
							pos: position{line: 68, col: 30, offset: 1931},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 68, col: 30, offset: 1931},
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 30, offset: 1931},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 68, col: 45, offset: 1946},
									expr: &oneOrMoreExpr{
										pos: position{line: 3735, col: 36, offset: 128206},
										expr: &seqExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													expr: &litMatcher{
														pos:        position{line: 3734, col: 36, offset: 128160},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3734, col: 42, offset: 128166},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3189, col: 12, offset: 110733},
									run: (*parser).callonimportsAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3189, col: 12, offset: 110733},
										label: "importsI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3189, col: 21, offset: 110742},
											expr: &seqExpr{
												pos: position{line: 3189, col: 22, offset: 110743},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3189, col: 22, offset: 110743},
														expr: &oneOrMoreExpr{
															pos: position{line: 3735, col: 36, offset: 128206},
															expr: &seqExpr{
																pos: position{line: 3735, col: 37, offset: 128207},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3735, col: 37, offset: 128207},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		expr: &litMatcher{
																			pos:        position{line: 3734, col: 36, offset: 128160},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3734, col: 42, offset: 128166},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3203, col: 11, offset: 111042},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3203, col: 11, offset: 111042},
																run: (*parser).callonimportsAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3203, col: 11, offset: 111042},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3203, col: 11, offset: 111042},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3203, col: 21, offset: 111052},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3224, col: 16, offset: 111706},
																				run: (*parser).callonimportsAndComments32,
																				expr: &seqExpr{
																					pos: position{line: 3224, col: 16, offset: 111706},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4201, col: 11, offset: 148402},
																							run: (*parser).callonimportsAndComments34,
																						},
																						&labeledExpr{
																							pos:   position{line: 3224, col: 23, offset: 111713},
																							label: "importsI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 3224, col: 32, offset: 111722},
																								expr: &seqExpr{
																									pos: position{line: 3224, col: 33, offset: 111723},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3224, col: 33, offset: 111723},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3735, col: 36, offset: 128206},
																												expr: &seqExpr{
																													pos: position{line: 3735, col: 37, offset: 128207},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3735, col: 37, offset: 128207},
																															expr: &charClassMatcher{
																																pos:        position{line: 3733, col: 36, offset: 128119},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3734, col: 36, offset: 128160},
																															expr: &litMatcher{
																																pos:        position{line: 3734, col: 36, offset: 128160},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3734, col: 42, offset: 128166},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3822, col: 17, offset: 132013},
																											run: (*parser).callonimportsAndComments46,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3822, col: 17, offset: 132013},
																												expr: &charClassMatcher{
																													pos:        position{line: 3733, col: 36, offset: 128119},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3822, col: 41, offset: 132037},
																											run: (*parser).callonimportsAndComments49,
																										},
																										&choiceExpr{
																											pos: position{line: 3874, col: 5, offset: 133947},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3874, col: 5, offset: 133947},
																													run: (*parser).callonimportsAndComments51,
																												},
																												&seqExpr{
																													pos: position{line: 3876, col: 9, offset: 134030},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3876, col: 9, offset: 134030},
																															run: (*parser).callonimportsAndComments53,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3878, col: 7, offset: 134134},
																															run: (*parser).callonimportsAndComments54,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3885, col: 9, offset: 134470},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3885, col: 9, offset: 134470},
																															run: (*parser).callonimportsAndComments56,
																														},
																														&choiceExpr{
																															pos: position{line: 3938, col: 9, offset: 136805},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 3938, col: 9, offset: 136805},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 3938, col: 9, offset: 136805},
																																			run: (*parser).callonimportsAndComments59,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 3942, col: 11, offset: 137055},
																																			run: (*parser).callonimportsAndComments60,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 4008, col: 11, offset: 140261},
																																			run: (*parser).callonimportsAndComments61,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 4016, col: 13, offset: 140614},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4016, col: 13, offset: 140614},
																																			run: (*parser).callonimportsAndComments63,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4020, col: 11, offset: 140869},
																																			run: (*parser).callonimportsAndComments64,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3228, col: 15, offset: 111851},
																											run: (*parser).callonimportsAndComments65,
																											expr: &seqExpr{
																												pos: position{line: 3228, col: 15, offset: 111851},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3228, col: 15, offset: 111851},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3228, col: 22, offset: 111858},
																															expr: &seqExpr{
																																pos: position{line: 3228, col: 23, offset: 111859},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3241, col: 16, offset: 112139},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3241, col: 16, offset: 112139},
																																				run: (*parser).callonimportsAndComments71,
																																				expr: &litMatcher{
																																					pos:        position{line: 3241, col: 16, offset: 112139},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 2306, col: 12, offset: 79446},
																																				run: (*parser).callonimportsAndComments73,
																																				expr: &labeledExpr{
																																					pos:   position{line: 2306, col: 12, offset: 79446},
																																					label: "ident",
																																					expr: &seqExpr{
																																						pos: position{line: 2354, col: 17, offset: 80792},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2337, col: 20, offset: 80547},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2354, col: 26, offset: 80801},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2337, col: 20, offset: 80547},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 2308, col: 5, offset: 79540},
																																				run: (*parser).callonimportsAndComments79,
																																				expr: &seqExpr{
																																					pos: position{line: 2308, col: 5, offset: 79540},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 2308, col: 5, offset: 79540},
																																							label: "identI",
																																							expr: &seqExpr{
																																								pos: position{line: 2308, col: 13, offset: 79548},
																																								exprs: []interface{}{
																																									&zeroOrOneExpr{
																																										pos: position{line: 2308, col: 13, offset: 79548},
																																										expr: &litMatcher{
																																											pos:        position{line: 2308, col: 13, offset: 79548},
																																											val:        "$",
																																											ignoreCase: false,
																																											want:       "\"$\"",
																																										},
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 2308, col: 18, offset: 79553},
																																										expr: &choiceExpr{
																																											pos: position{line: 2308, col: 19, offset: 79554},
																																											alternatives: []interface{}{
																																												&seqExpr{
																																													pos: position{line: 2308, col: 19, offset: 79554},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 2308, col: 19, offset: 79554},
																																															val:        "[\\pNd]",
																																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&charClassMatcher{
																																															pos:        position{line: 2308, col: 28, offset: 79563},
																																															val:        "[_-\\pL]",
																																															chars:      []rune{'_', '-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																												&charClassMatcher{
																																													pos:        position{line: 2308, col: 38, offset: 79573},
																																													val:        "[_-\\pL]",
																																													chars:      []rune{'_', '-'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 2308, col: 49, offset: 79584},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3724, col: 8, offset: 127821},
																																								run: (*parser).callonimportsAndComments92,
																																								expr: &choiceExpr{
																																									pos: position{line: 3724, col: 9, offset: 127822},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3724, col: 9, offset: 127822},
																																											expr: &anyMatcher{
																																												line: 3724, col: 10, offset: 127823,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3724, col: 14, offset: 127827},
																																											expr: &anyMatcher{
																																												line: 3724, col: 15, offset: 127828,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3243, col: 15, offset: 112218},
																																				run: (*parser).callonimportsAndComments98,
																																				expr: &seqExpr{
																																					pos: position{line: 3243, col: 15, offset: 112218},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3243, col: 15, offset: 112218},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3243, col: 15, offset: 112218},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3243, col: 24, offset: 112227},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3724, col: 8, offset: 127821},
																																								run: (*parser).callonimportsAndComments103,
																																								expr: &choiceExpr{
																																									pos: position{line: 3724, col: 9, offset: 127822},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3724, col: 9, offset: 127822},
																																											expr: &anyMatcher{
																																												line: 3724, col: 10, offset: 127823,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3724, col: 14, offset: 127827},
																																											expr: &anyMatcher{
																																												line: 3724, col: 15, offset: 127828,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3228, col: 35, offset: 111871},
																																		expr: &litMatcher{
																																			pos:        position{line: 3228, col: 35, offset: 111871},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3228, col: 42, offset: 111878},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3165, col: 12, offset: 109883},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 749, col: 14, offset: 22958},
																																	run: (*parser).callonimportsAndComments113,
																																	expr: &seqExpr{
																																		pos: position{line: 749, col: 14, offset: 22958},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 749, col: 14, offset: 22958},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 749, col: 18, offset: 22962},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 749, col: 23, offset: 22967},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2691, col: 27, offset: 93866},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 749, col: 47, offset: 22991},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 751, col: 5, offset: 23083},
																																	run: (*parser).callonimportsAndComments120,
																																	expr: &seqExpr{
																																		pos: position{line: 751, col: 5, offset: 23083},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 751, col: 5, offset: 23083},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 751, col: 9, offset: 23087},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 751, col: 14, offset: 23092},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2691, col: 27, offset: 93866},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 751, col: 38, offset: 23116},
																																				expr: &seqExpr{
																																					pos: position{line: 3721, col: 12, offset: 127772},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3721, col: 12, offset: 127772},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3733, col: 36, offset: 128119},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3721, col: 16, offset: 127776},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3721, col: 16, offset: 127776},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3721, col: 16, offset: 127776},
																																											expr: &litMatcher{
																																												pos:        position{line: 3721, col: 16, offset: 127776},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3721, col: 22, offset: 127782},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3720, col: 12, offset: 127758},
																																									expr: &anyMatcher{
																																										line: 3720, col: 13, offset: 127759,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 770, col: 22, offset: 23520},
																																	run: (*parser).callonimportsAndComments137,
																																	expr: &seqExpr{
																																		pos: position{line: 770, col: 22, offset: 23520},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 770, col: 22, offset: 23520},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 770, col: 26, offset: 23524},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 770, col: 31, offset: 23529},
																																					expr: &choiceExpr{
																																						pos: position{line: 770, col: 32, offset: 23530},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2430, col: 24, offset: 83529},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2430, col: 24, offset: 83529},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2431, col: 24, offset: 83596},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2431, col: 24, offset: 83596},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2432, col: 5, offset: 83633},
																																								run: (*parser).callonimportsAndComments152,
																																								expr: &seqExpr{
																																									pos: position{line: 2432, col: 5, offset: 83633},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2432, col: 5, offset: 83633},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 14, offset: 83642},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 26, offset: 83654},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2449, col: 19, offset: 84271},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2449, col: 19, offset: 84271},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2450, col: 5, offset: 84330},
																																								run: (*parser).callonimportsAndComments165,
																																								expr: &seqExpr{
																																									pos: position{line: 2450, col: 5, offset: 84330},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2450, col: 5, offset: 84330},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 14, offset: 84339},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 26, offset: 84351},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 38, offset: 84363},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 50, offset: 84375},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2479, col: 16, offset: 85511},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2479, col: 16, offset: 85511},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2480, col: 5, offset: 85614},
																																								run: (*parser).callonimportsAndComments186,
																																								expr: &seqExpr{
																																									pos: position{line: 2480, col: 5, offset: 85614},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2480, col: 5, offset: 85614},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 14, offset: 85623},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 26, offset: 85635},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 38, offset: 85647},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 50, offset: 85659},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 62, offset: 85671},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 74, offset: 85683},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 86, offset: 85695},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 98, offset: 85707},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2707, col: 36, offset: 94644},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2707, col: 36, offset: 94644},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2707, col: 41, offset: 94649},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2705, col: 38, offset: 94536},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2594, col: 37, offset: 90294},
																																								run: (*parser).callonimportsAndComments209,
																																								expr: &seqExpr{
																																									pos: position{line: 2594, col: 37, offset: 90294},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2594, col: 37, offset: 90294},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2618, col: 5, offset: 91311},
																																								run: (*parser).callonimportsAndComments220,
																																								expr: &seqExpr{
																																									pos: position{line: 2618, col: 5, offset: 91311},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2618, col: 5, offset: 91311},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2639, col: 5, offset: 92153},
																																								run: (*parser).callonimportsAndComments227,
																																								expr: &seqExpr{
																																									pos: position{line: 2639, col: 5, offset: 92153},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2639, col: 5, offset: 92153},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2657, col: 5, offset: 92839},
																																								run: (*parser).callonimportsAndComments232,
																																								expr: &seqExpr{
																																									pos: position{line: 2657, col: 5, offset: 92839},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2657, col: 5, offset: 92839},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2657, col: 10, offset: 92844},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3722, col: 12, offset: 127805},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 770, col: 115, offset: 23613},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 772, col: 5, offset: 23705},
																																	run: (*parser).callonimportsAndComments238,
																																	expr: &seqExpr{
																																		pos: position{line: 772, col: 5, offset: 23705},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 772, col: 5, offset: 23705},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 772, col: 9, offset: 23709},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 772, col: 14, offset: 23714},
																																					expr: &choiceExpr{
																																						pos: position{line: 772, col: 15, offset: 23715},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2430, col: 24, offset: 83529},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2430, col: 24, offset: 83529},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2431, col: 24, offset: 83596},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2431, col: 24, offset: 83596},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2432, col: 5, offset: 83633},
																																								run: (*parser).callonimportsAndComments253,
																																								expr: &seqExpr{
																																									pos: position{line: 2432, col: 5, offset: 83633},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2432, col: 5, offset: 83633},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 14, offset: 83642},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 26, offset: 83654},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2449, col: 19, offset: 84271},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2449, col: 19, offset: 84271},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2450, col: 5, offset: 84330},
																																								run: (*parser).callonimportsAndComments266,
																																								expr: &seqExpr{
																																									pos: position{line: 2450, col: 5, offset: 84330},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2450, col: 5, offset: 84330},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 14, offset: 84339},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 26, offset: 84351},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 38, offset: 84363},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 50, offset: 84375},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2479, col: 16, offset: 85511},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2479, col: 16, offset: 85511},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2480, col: 5, offset: 85614},
																																								run: (*parser).callonimportsAndComments287,
																																								expr: &seqExpr{
																																									pos: position{line: 2480, col: 5, offset: 85614},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2480, col: 5, offset: 85614},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 14, offset: 85623},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 26, offset: 85635},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 38, offset: 85647},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 50, offset: 85659},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 62, offset: 85671},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 74, offset: 85683},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 86, offset: 85695},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 98, offset: 85707},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2707, col: 36, offset: 94644},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2707, col: 36, offset: 94644},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2707, col: 41, offset: 94649},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2705, col: 38, offset: 94536},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2594, col: 37, offset: 90294},
																																								run: (*parser).callonimportsAndComments310,
																																								expr: &seqExpr{
																																									pos: position{line: 2594, col: 37, offset: 90294},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2594, col: 37, offset: 90294},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2618, col: 5, offset: 91311},
																																								run: (*parser).callonimportsAndComments321,
																																								expr: &seqExpr{
																																									pos: position{line: 2618, col: 5, offset: 91311},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2618, col: 5, offset: 91311},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2639, col: 5, offset: 92153},
																																								run: (*parser).callonimportsAndComments328,
																																								expr: &seqExpr{
																																									pos: position{line: 2639, col: 5, offset: 92153},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2639, col: 5, offset: 92153},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2657, col: 5, offset: 92839},
																																								run: (*parser).callonimportsAndComments333,
																																								expr: &seqExpr{
																																									pos: position{line: 2657, col: 5, offset: 92839},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2657, col: 5, offset: 92839},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2657, col: 10, offset: 92844},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3722, col: 12, offset: 127805},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 772, col: 98, offset: 23798},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3724, col: 8, offset: 127821},
																																					run: (*parser).callonimportsAndComments339,
																																					expr: &choiceExpr{
																																						pos: position{line: 3724, col: 9, offset: 127822},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3724, col: 9, offset: 127822},
																																								expr: &anyMatcher{
																																									line: 3724, col: 10, offset: 127823,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3724, col: 14, offset: 127827},
																																								expr: &anyMatcher{
																																									line: 3724, col: 15, offset: 127828,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 772, col: 110, offset: 23810},
																																				expr: &seqExpr{
																																					pos: position{line: 3721, col: 12, offset: 127772},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3721, col: 12, offset: 127772},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3733, col: 36, offset: 128119},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3721, col: 16, offset: 127776},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3721, col: 16, offset: 127776},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3721, col: 16, offset: 127776},
																																											expr: &litMatcher{
																																												pos:        position{line: 3721, col: 16, offset: 127776},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3721, col: 22, offset: 127782},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3720, col: 12, offset: 127758},
																																									expr: &anyMatcher{
																																										line: 3720, col: 13, offset: 127759,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 791, col: 22, offset: 24216},
																																	run: (*parser).callonimportsAndComments356,
																																	expr: &seqExpr{
																																		pos: position{line: 791, col: 22, offset: 24216},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 791, col: 22, offset: 24216},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 791, col: 27, offset: 24221},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 791, col: 32, offset: 24226},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 791, col: 32, offset: 24226},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 791, col: 42, offset: 24236},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 791, col: 47, offset: 24241},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3724, col: 8, offset: 127821},
																																					run: (*parser).callonimportsAndComments364,
																																					expr: &choiceExpr{
																																						pos: position{line: 3724, col: 9, offset: 127822},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3724, col: 9, offset: 127822},
																																								expr: &anyMatcher{
																																									line: 3724, col: 10, offset: 127823,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3724, col: 14, offset: 127827},
																																								expr: &anyMatcher{
																																									line: 3724, col: 15, offset: 127828,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3165, col: 21, offset: 109892},
																																	run: (*parser).callonimportsAndComments370,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3165, col: 21, offset: 109892},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3165, col: 27, offset: 109898},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3722, col: 12, offset: 127805},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3721, col: 12, offset: 127772},
																														expr: &charClassMatcher{
																															pos:        position{line: 3733, col: 36, offset: 128119},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3721, col: 16, offset: 127776},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3721, col: 16, offset: 127776},
																																		expr: &litMatcher{
																																			pos:        position{line: 3721, col: 16, offset: 127776},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3721, col: 22, offset: 127782},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3720, col: 12, offset: 127758},
																																expr: &anyMatcher{
																																	line: 3720, col: 13, offset: 127759,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4206, col: 11, offset: 148507},
																							run: (*parser).callonimportsAndComments383,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3208, col: 5, offset: 111183},
																run: (*parser).callonimportsAndComments384,
																expr: &seqExpr{
																	pos: position{line: 3208, col: 5, offset: 111183},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3208, col: 5, offset: 111183},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3208, col: 14, offset: 111192},
																			expr: &litMatcher{
																				pos:        position{line: 3208, col: 14, offset: 111192},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3208, col: 19, offset: 111197},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3228, col: 15, offset: 111851},
																				run: (*parser).callonimportsAndComments390,
																				expr: &seqExpr{
																					pos: position{line: 3228, col: 15, offset: 111851},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3228, col: 15, offset: 111851},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3228, col: 22, offset: 111858},
																								expr: &seqExpr{
																									pos: position{line: 3228, col: 23, offset: 111859},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3241, col: 16, offset: 112139},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3241, col: 16, offset: 112139},
																													run: (*parser).callonimportsAndComments396,
																													expr: &litMatcher{
																														pos:        position{line: 3241, col: 16, offset: 112139},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2306, col: 12, offset: 79446},
																													run: (*parser).callonimportsAndComments398,
																													expr: &labeledExpr{
																														pos:   position{line: 2306, col: 12, offset: 79446},
																														label: "ident",
																														expr: &seqExpr{
																															pos: position{line: 2354, col: 17, offset: 80792},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2337, col: 20, offset: 80547},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2354, col: 26, offset: 80801},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2337, col: 20, offset: 80547},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2308, col: 5, offset: 79540},
																													run: (*parser).callonimportsAndComments404,
																													expr: &seqExpr{
																														pos: position{line: 2308, col: 5, offset: 79540},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 2308, col: 5, offset: 79540},
																																label: "identI",
																																expr: &seqExpr{
																																	pos: position{line: 2308, col: 13, offset: 79548},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 2308, col: 13, offset: 79548},
																																			expr: &litMatcher{
																																				pos:        position{line: 2308, col: 13, offset: 79548},
																																				val:        "$",
																																				ignoreCase: false,
																																				want:       "\"$\"",
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 2308, col: 18, offset: 79553},
																																			expr: &choiceExpr{
																																				pos: position{line: 2308, col: 19, offset: 79554},
																																				alternatives: []interface{}{
																																					&seqExpr{
																																						pos: position{line: 2308, col: 19, offset: 79554},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2308, col: 19, offset: 79554},
																																								val:        "[\\pNd]",
																																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2308, col: 28, offset: 79563},
																																								val:        "[_-\\pL]",
																																								chars:      []rune{'_', '-'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 2308, col: 38, offset: 79573},
																																						val:        "[_-\\pL]",
																																						chars:      []rune{'_', '-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 2308, col: 49, offset: 79584},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3724, col: 8, offset: 127821},
																																	run: (*parser).callonimportsAndComments417,
																																	expr: &choiceExpr{
																																		pos: position{line: 3724, col: 9, offset: 127822},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3724, col: 9, offset: 127822},
																																				expr: &anyMatcher{
																																					line: 3724, col: 10, offset: 127823,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3724, col: 14, offset: 127827},
																																				expr: &anyMatcher{
																																					line: 3724, col: 15, offset: 127828,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3243, col: 15, offset: 112218},
																													run: (*parser).callonimportsAndComments423,
																													expr: &seqExpr{
																														pos: position{line: 3243, col: 15, offset: 112218},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3243, col: 15, offset: 112218},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3243, col: 15, offset: 112218},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3243, col: 24, offset: 112227},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3724, col: 8, offset: 127821},
																																	run: (*parser).callonimportsAndComments428,
																																	expr: &choiceExpr{
																																		pos: position{line: 3724, col: 9, offset: 127822},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3724, col: 9, offset: 127822},
																																				expr: &anyMatcher{
																																					line: 3724, col: 10, offset: 127823,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3724, col: 14, offset: 127827},
																																				expr: &anyMatcher{
																																					line: 3724, col: 15, offset: 127828,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3228, col: 35, offset: 111871},
																											expr: &litMatcher{
																												pos:        position{line: 3228, col: 35, offset: 111871},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3228, col: 42, offset: 111878},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3165, col: 12, offset: 109883},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 749, col: 14, offset: 22958},
																										run: (*parser).callonimportsAndComments438,
																										expr: &seqExpr{
																											pos: position{line: 749, col: 14, offset: 22958},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 749, col: 14, offset: 22958},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 749, col: 18, offset: 22962},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 749, col: 23, offset: 22967},
																														expr: &charClassMatcher{
																															pos:        position{line: 2691, col: 27, offset: 93866},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 749, col: 47, offset: 22991},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 751, col: 5, offset: 23083},
																										run: (*parser).callonimportsAndComments445,
																										expr: &seqExpr{
																											pos: position{line: 751, col: 5, offset: 23083},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 751, col: 5, offset: 23083},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 751, col: 9, offset: 23087},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 751, col: 14, offset: 23092},
																														expr: &charClassMatcher{
																															pos:        position{line: 2691, col: 27, offset: 93866},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 751, col: 38, offset: 23116},
																													expr: &seqExpr{
																														pos: position{line: 3721, col: 12, offset: 127772},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3721, col: 12, offset: 127772},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3733, col: 36, offset: 128119},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3721, col: 16, offset: 127776},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3721, col: 16, offset: 127776},
																																				expr: &litMatcher{
																																					pos:        position{line: 3721, col: 16, offset: 127776},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3721, col: 22, offset: 127782},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3720, col: 12, offset: 127758},
																																		expr: &anyMatcher{
																																			line: 3720, col: 13, offset: 127759,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 770, col: 22, offset: 23520},
																										run: (*parser).callonimportsAndComments462,
																										expr: &seqExpr{
																											pos: position{line: 770, col: 22, offset: 23520},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 770, col: 22, offset: 23520},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 770, col: 26, offset: 23524},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 770, col: 31, offset: 23529},
																														expr: &choiceExpr{
																															pos: position{line: 770, col: 32, offset: 23530},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2430, col: 24, offset: 83529},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2430, col: 24, offset: 83529},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2431, col: 24, offset: 83596},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2431, col: 24, offset: 83596},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2432, col: 5, offset: 83633},
																																	run: (*parser).callonimportsAndComments477,
																																	expr: &seqExpr{
																																		pos: position{line: 2432, col: 5, offset: 83633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2432, col: 5, offset: 83633},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 14, offset: 83642},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 26, offset: 83654},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2449, col: 19, offset: 84271},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2449, col: 19, offset: 84271},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2450, col: 5, offset: 84330},
																																	run: (*parser).callonimportsAndComments490,
																																	expr: &seqExpr{
																																		pos: position{line: 2450, col: 5, offset: 84330},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2450, col: 5, offset: 84330},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 14, offset: 84339},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 26, offset: 84351},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 38, offset: 84363},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 50, offset: 84375},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2479, col: 16, offset: 85511},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2479, col: 16, offset: 85511},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2480, col: 5, offset: 85614},
																																	run: (*parser).callonimportsAndComments511,
																																	expr: &seqExpr{
																																		pos: position{line: 2480, col: 5, offset: 85614},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2480, col: 5, offset: 85614},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 14, offset: 85623},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 26, offset: 85635},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 38, offset: 85647},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 50, offset: 85659},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 62, offset: 85671},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 74, offset: 85683},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 86, offset: 85695},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 98, offset: 85707},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2707, col: 36, offset: 94644},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2707, col: 36, offset: 94644},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2707, col: 41, offset: 94649},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2705, col: 38, offset: 94536},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2594, col: 37, offset: 90294},
																																	run: (*parser).callonimportsAndComments534,
																																	expr: &seqExpr{
																																		pos: position{line: 2594, col: 37, offset: 90294},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2594, col: 37, offset: 90294},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2618, col: 5, offset: 91311},
																																	run: (*parser).callonimportsAndComments545,
																																	expr: &seqExpr{
																																		pos: position{line: 2618, col: 5, offset: 91311},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2618, col: 5, offset: 91311},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2639, col: 5, offset: 92153},
																																	run: (*parser).callonimportsAndComments552,
																																	expr: &seqExpr{
																																		pos: position{line: 2639, col: 5, offset: 92153},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2639, col: 5, offset: 92153},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2657, col: 5, offset: 92839},
																																	run: (*parser).callonimportsAndComments557,
																																	expr: &seqExpr{
																																		pos: position{line: 2657, col: 5, offset: 92839},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2657, col: 5, offset: 92839},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2657, col: 10, offset: 92844},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3722, col: 12, offset: 127805},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 770, col: 115, offset: 23613},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 772, col: 5, offset: 23705},
																										run: (*parser).callonimportsAndComments563,
																										expr: &seqExpr{
																											pos: position{line: 772, col: 5, offset: 23705},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 772, col: 5, offset: 23705},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 772, col: 9, offset: 23709},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 772, col: 14, offset: 23714},
																														expr: &choiceExpr{
																															pos: position{line: 772, col: 15, offset: 23715},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2430, col: 24, offset: 83529},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2430, col: 24, offset: 83529},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2431, col: 24, offset: 83596},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2431, col: 24, offset: 83596},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2432, col: 5, offset: 83633},
																																	run: (*parser).callonimportsAndComments578,
																																	expr: &seqExpr{
																																		pos: position{line: 2432, col: 5, offset: 83633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2432, col: 5, offset: 83633},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 14, offset: 83642},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 26, offset: 83654},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2449, col: 19, offset: 84271},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2449, col: 19, offset: 84271},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2450, col: 5, offset: 84330},
																																	run: (*parser).callonimportsAndComments591,
																																	expr: &seqExpr{
																																		pos: position{line: 2450, col: 5, offset: 84330},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2450, col: 5, offset: 84330},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 14, offset: 84339},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 26, offset: 84351},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 38, offset: 84363},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 50, offset: 84375},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2479, col: 16, offset: 85511},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2479, col: 16, offset: 85511},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2480, col: 5, offset: 85614},
																																	run: (*parser).callonimportsAndComments612,
																																	expr: &seqExpr{
																																		pos: position{line: 2480, col: 5, offset: 85614},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2480, col: 5, offset: 85614},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 14, offset: 85623},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 26, offset: 85635},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 38, offset: 85647},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 50, offset: 85659},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 62, offset: 85671},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 74, offset: 85683},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 86, offset: 85695},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 98, offset: 85707},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2707, col: 36, offset: 94644},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2707, col: 36, offset: 94644},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2707, col: 41, offset: 94649},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2705, col: 38, offset: 94536},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2594, col: 37, offset: 90294},
																																	run: (*parser).callonimportsAndComments635,
																																	expr: &seqExpr{
																																		pos: position{line: 2594, col: 37, offset: 90294},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2594, col: 37, offset: 90294},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2618, col: 5, offset: 91311},
																																	run: (*parser).callonimportsAndComments646,
																																	expr: &seqExpr{
																																		pos: position{line: 2618, col: 5, offset: 91311},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2618, col: 5, offset: 91311},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2639, col: 5, offset: 92153},
																																	run: (*parser).callonimportsAndComments653,
																																	expr: &seqExpr{
																																		pos: position{line: 2639, col: 5, offset: 92153},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2639, col: 5, offset: 92153},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2657, col: 5, offset: 92839},
																																	run: (*parser).callonimportsAndComments658,
																																	expr: &seqExpr{
																																		pos: position{line: 2657, col: 5, offset: 92839},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2657, col: 5, offset: 92839},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2657, col: 10, offset: 92844},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3722, col: 12, offset: 127805},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 772, col: 98, offset: 23798},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3724, col: 8, offset: 127821},
																														run: (*parser).callonimportsAndComments664,
																														expr: &choiceExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3724, col: 9, offset: 127822},
																																	expr: &anyMatcher{
																																		line: 3724, col: 10, offset: 127823,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3724, col: 14, offset: 127827},
																																	expr: &anyMatcher{
																																		line: 3724, col: 15, offset: 127828,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 772, col: 110, offset: 23810},
																													expr: &seqExpr{
																														pos: position{line: 3721, col: 12, offset: 127772},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3721, col: 12, offset: 127772},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3733, col: 36, offset: 128119},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3721, col: 16, offset: 127776},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3721, col: 16, offset: 127776},
																																				expr: &litMatcher{
																																					pos:        position{line: 3721, col: 16, offset: 127776},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3721, col: 22, offset: 127782},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3720, col: 12, offset: 127758},
																																		expr: &anyMatcher{
																																			line: 3720, col: 13, offset: 127759,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 791, col: 22, offset: 24216},
																										run: (*parser).callonimportsAndComments681,
																										expr: &seqExpr{
																											pos: position{line: 791, col: 22, offset: 24216},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 791, col: 22, offset: 24216},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 791, col: 27, offset: 24221},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 791, col: 32, offset: 24226},
																														expr: &charClassMatcher{
																															pos:        position{line: 791, col: 32, offset: 24226},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 791, col: 42, offset: 24236},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 791, col: 47, offset: 24241},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3724, col: 8, offset: 127821},
																														run: (*parser).callonimportsAndComments689,
																														expr: &choiceExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3724, col: 9, offset: 127822},
																																	expr: &anyMatcher{
																																		line: 3724, col: 10, offset: 127823,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3724, col: 14, offset: 127827},
																																	expr: &anyMatcher{
																																		line: 3724, col: 15, offset: 127828,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3165, col: 21, offset: 109892},
																										run: (*parser).callonimportsAndComments695,
																										expr: &labeledExpr{
																											pos:   position{line: 3165, col: 21, offset: 109892},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3165, col: 27, offset: 109898},
																												expr: &charClassMatcher{
																													pos:        position{line: 3722, col: 12, offset: 127805},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3721, col: 12, offset: 127772},
																							expr: &charClassMatcher{
																								pos:        position{line: 3733, col: 36, offset: 128119},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3721, col: 16, offset: 127776},
																											expr: &litMatcher{
																												pos:        position{line: 3721, col: 16, offset: 127776},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3721, col: 22, offset: 127782},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3720, col: 12, offset: 127758},
																									expr: &anyMatcher{
																										line: 3720, col: 13, offset: 127759,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3213, col: 5, offset: 111342},
																run: (*parser).callonimportsAndComments708,
																expr: &seqExpr{
																	pos: position{line: 3213, col: 5, offset: 111342},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3213, col: 5, offset: 111342},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3213, col: 14, offset: 111351},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonimportsAndComments712,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3721, col: 12, offset: 127772},
																			expr: &charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							expr: &litMatcher{
																								pos:        position{line: 3721, col: 16, offset: 127776},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3721, col: 22, offset: 127782},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3720, col: 12, offset: 127758},
																					expr: &anyMatcher{
																						line: 3720, col: 13, offset: 127759,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "usesAndComments",
			pos:  position{line: 82, col: 1, offset: 2315},
			expr: &actionExpr{
				pos: position{line: 82, col: 20, offset: 2334},
				run: (*parser).callonusesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 82, col: 20, offset: 2334},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 82, col: 26, offset: 2340},
						expr: &seqExpr{
							pos: position{line: 82, col: 27, offset: 2341},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 82, col: 27, offset: 2341},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 27, offset: 2341},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 82, col: 42, offset: 2356},
									expr: &oneOrMoreExpr{
										pos: position{line: 3735, col: 36, offset: 128206},
										expr: &seqExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													expr: &litMatcher{
														pos:        position{line: 3734, col: 36, offset: 128160},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3734, col: 42, offset: 128166},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3261, col: 9, offset: 112813},
									run: (*parser).callonusesAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3261, col: 9, offset: 112813},
										label: "usesI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3261, col: 15, offset: 112819},
											expr: &seqExpr{
												pos: position{line: 3261, col: 16, offset: 112820},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3261, col: 16, offset: 112820},
														expr: &oneOrMoreExpr{
															pos: position{line: 3735, col: 36, offset: 128206},
															expr: &seqExpr{
																pos: position{line: 3735, col: 37, offset: 128207},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3735, col: 37, offset: 128207},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		expr: &litMatcher{
																			pos:        position{line: 3734, col: 36, offset: 128160},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3734, col: 42, offset: 128166},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3275, col: 8, offset: 113101},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3275, col: 8, offset: 113101},
																run: (*parser).callonusesAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3275, col: 8, offset: 113101},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3275, col: 8, offset: 113101},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3275, col: 15, offset: 113108},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3296, col: 13, offset: 113714},
																				run: (*parser).callonusesAndComments32,
																				expr: &seqExpr{
																					pos: position{line: 3296, col: 13, offset: 113714},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4201, col: 11, offset: 148402},
																							run: (*parser).callonusesAndComments34,
																						},
																						&labeledExpr{
																							pos:   position{line: 3296, col: 20, offset: 113721},
																							label: "usesI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 3296, col: 26, offset: 113727},
																								expr: &seqExpr{
																									pos: position{line: 3296, col: 27, offset: 113728},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3296, col: 27, offset: 113728},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3735, col: 36, offset: 128206},
																												expr: &seqExpr{
																													pos: position{line: 3735, col: 37, offset: 128207},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3735, col: 37, offset: 128207},
																															expr: &charClassMatcher{
																																pos:        position{line: 3733, col: 36, offset: 128119},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3734, col: 36, offset: 128160},
																															expr: &litMatcher{
																																pos:        position{line: 3734, col: 36, offset: 128160},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3734, col: 42, offset: 128166},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3822, col: 17, offset: 132013},
																											run: (*parser).callonusesAndComments46,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3822, col: 17, offset: 132013},
																												expr: &charClassMatcher{
																													pos:        position{line: 3733, col: 36, offset: 128119},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3822, col: 41, offset: 132037},
																											run: (*parser).callonusesAndComments49,
																										},
																										&choiceExpr{
																											pos: position{line: 3874, col: 5, offset: 133947},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3874, col: 5, offset: 133947},
																													run: (*parser).callonusesAndComments51,
																												},
																												&seqExpr{
																													pos: position{line: 3876, col: 9, offset: 134030},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3876, col: 9, offset: 134030},
																															run: (*parser).callonusesAndComments53,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3878, col: 7, offset: 134134},
																															run: (*parser).callonusesAndComments54,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3885, col: 9, offset: 134470},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3885, col: 9, offset: 134470},
																															run: (*parser).callonusesAndComments56,
																														},
																														&choiceExpr{
																															pos: position{line: 3938, col: 9, offset: 136805},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 3938, col: 9, offset: 136805},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 3938, col: 9, offset: 136805},
																																			run: (*parser).callonusesAndComments59,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 3942, col: 11, offset: 137055},
																																			run: (*parser).callonusesAndComments60,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 4008, col: 11, offset: 140261},
																																			run: (*parser).callonusesAndComments61,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 4016, col: 13, offset: 140614},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4016, col: 13, offset: 140614},
																																			run: (*parser).callonusesAndComments63,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4020, col: 11, offset: 140869},
																																			run: (*parser).callonusesAndComments64,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3300, col: 12, offset: 113844},
																											run: (*parser).callonusesAndComments65,
																											expr: &seqExpr{
																												pos: position{line: 3300, col: 12, offset: 113844},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3300, col: 12, offset: 113844},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3300, col: 19, offset: 113851},
																															expr: &seqExpr{
																																pos: position{line: 3300, col: 20, offset: 113852},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3313, col: 13, offset: 114121},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3313, col: 13, offset: 114121},
																																				run: (*parser).callonusesAndComments71,
																																				expr: &litMatcher{
																																					pos:        position{line: 3313, col: 13, offset: 114121},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 697, col: 10, offset: 21290},
																																				run: (*parser).callonusesAndComments73,
																																				expr: &labeledExpr{
																																					pos:   position{line: 697, col: 10, offset: 21290},
																																					label: "identI",
																																					expr: &seqExpr{
																																						pos: position{line: 2354, col: 17, offset: 80792},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2337, col: 20, offset: 80547},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2354, col: 26, offset: 80801},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2337, col: 20, offset: 80547},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 699, col: 5, offset: 21384},
																																				run: (*parser).callonusesAndComments79,
																																				expr: &seqExpr{
																																					pos: position{line: 699, col: 5, offset: 21384},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 699, col: 5, offset: 21384},
																																							label: "identI",
																																							expr: &seqExpr{
																																								pos: position{line: 699, col: 13, offset: 21392},
																																								exprs: []interface{}{
																																									&zeroOrOneExpr{
																																										pos: position{line: 699, col: 13, offset: 21392},
																																										expr: &litMatcher{
																																											pos:        position{line: 699, col: 13, offset: 21392},
																																											val:        "$",
																																											ignoreCase: false,
																																											want:       "\"$\"",
																																										},
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 699, col: 18, offset: 21397},
																																										expr: &choiceExpr{
																																											pos: position{line: 699, col: 19, offset: 21398},
																																											alternatives: []interface{}{
																																												&seqExpr{
																																													pos: position{line: 699, col: 19, offset: 21398},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 699, col: 19, offset: 21398},
																																															val:        "[\\pNd]",
																																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&charClassMatcher{
																																															pos:        position{line: 699, col: 28, offset: 21407},
																																															val:        "[_-\\pL]",
																																															chars:      []rune{'_', '-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																												&charClassMatcher{
																																													pos:        position{line: 699, col: 38, offset: 21417},
																																													val:        "[_-\\pL]",
																																													chars:      []rune{'_', '-'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 699, col: 49, offset: 21428},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3724, col: 8, offset: 127821},
																																								run: (*parser).callonusesAndComments92,
																																								expr: &choiceExpr{
																																									pos: position{line: 3724, col: 9, offset: 127822},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3724, col: 9, offset: 127822},
																																											expr: &anyMatcher{
																																												line: 3724, col: 10, offset: 127823,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3724, col: 14, offset: 127827},
																																											expr: &anyMatcher{
																																												line: 3724, col: 15, offset: 127828,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3315, col: 13, offset: 114196},
																																				run: (*parser).callonusesAndComments98,
																																				expr: &seqExpr{
																																					pos: position{line: 3315, col: 13, offset: 114196},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3315, col: 13, offset: 114196},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3315, col: 13, offset: 114196},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3315, col: 22, offset: 114205},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3724, col: 8, offset: 127821},
																																								run: (*parser).callonusesAndComments103,
																																								expr: &choiceExpr{
																																									pos: position{line: 3724, col: 9, offset: 127822},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3724, col: 9, offset: 127822},
																																											expr: &anyMatcher{
																																												line: 3724, col: 10, offset: 127823,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3724, col: 14, offset: 127827},
																																											expr: &anyMatcher{
																																												line: 3724, col: 15, offset: 127828,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3300, col: 29, offset: 113861},
																																		expr: &litMatcher{
																																			pos:        position{line: 3300, col: 29, offset: 113861},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3300, col: 36, offset: 113868},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3165, col: 12, offset: 109883},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 749, col: 14, offset: 22958},
																																	run: (*parser).callonusesAndComments113,
																																	expr: &seqExpr{
																																		pos: position{line: 749, col: 14, offset: 22958},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 749, col: 14, offset: 22958},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 749, col: 18, offset: 22962},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 749, col: 23, offset: 22967},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2691, col: 27, offset: 93866},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 749, col: 47, offset: 22991},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 751, col: 5, offset: 23083},
																																	run: (*parser).callonusesAndComments120,
																																	expr: &seqExpr{
																																		pos: position{line: 751, col: 5, offset: 23083},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 751, col: 5, offset: 23083},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 751, col: 9, offset: 23087},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 751, col: 14, offset: 23092},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2691, col: 27, offset: 93866},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 751, col: 38, offset: 23116},
																																				expr: &seqExpr{
																																					pos: position{line: 3721, col: 12, offset: 127772},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3721, col: 12, offset: 127772},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3733, col: 36, offset: 128119},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3721, col: 16, offset: 127776},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3721, col: 16, offset: 127776},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3721, col: 16, offset: 127776},
																																											expr: &litMatcher{
																																												pos:        position{line: 3721, col: 16, offset: 127776},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3721, col: 22, offset: 127782},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3720, col: 12, offset: 127758},
																																									expr: &anyMatcher{
																																										line: 3720, col: 13, offset: 127759,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 770, col: 22, offset: 23520},
																																	run: (*parser).callonusesAndComments137,
																																	expr: &seqExpr{
																																		pos: position{line: 770, col: 22, offset: 23520},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 770, col: 22, offset: 23520},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 770, col: 26, offset: 23524},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 770, col: 31, offset: 23529},
																																					expr: &choiceExpr{
																																						pos: position{line: 770, col: 32, offset: 23530},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2430, col: 24, offset: 83529},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2430, col: 24, offset: 83529},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2431, col: 24, offset: 83596},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2431, col: 24, offset: 83596},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2432, col: 5, offset: 83633},
																																								run: (*parser).callonusesAndComments152,
																																								expr: &seqExpr{
																																									pos: position{line: 2432, col: 5, offset: 83633},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2432, col: 5, offset: 83633},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 14, offset: 83642},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 26, offset: 83654},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2449, col: 19, offset: 84271},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2449, col: 19, offset: 84271},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2450, col: 5, offset: 84330},
																																								run: (*parser).callonusesAndComments165,
																																								expr: &seqExpr{
																																									pos: position{line: 2450, col: 5, offset: 84330},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2450, col: 5, offset: 84330},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 14, offset: 84339},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 26, offset: 84351},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 38, offset: 84363},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 50, offset: 84375},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2479, col: 16, offset: 85511},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2479, col: 16, offset: 85511},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2480, col: 5, offset: 85614},
																																								run: (*parser).callonusesAndComments186,
																																								expr: &seqExpr{
																																									pos: position{line: 2480, col: 5, offset: 85614},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2480, col: 5, offset: 85614},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 14, offset: 85623},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 26, offset: 85635},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 38, offset: 85647},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 50, offset: 85659},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 62, offset: 85671},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 74, offset: 85683},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 86, offset: 85695},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 98, offset: 85707},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2707, col: 36, offset: 94644},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2707, col: 36, offset: 94644},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2707, col: 41, offset: 94649},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2705, col: 38, offset: 94536},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2594, col: 37, offset: 90294},
																																								run: (*parser).callonusesAndComments209,
																																								expr: &seqExpr{
																																									pos: position{line: 2594, col: 37, offset: 90294},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2594, col: 37, offset: 90294},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2618, col: 5, offset: 91311},
																																								run: (*parser).callonusesAndComments220,
																																								expr: &seqExpr{
																																									pos: position{line: 2618, col: 5, offset: 91311},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2618, col: 5, offset: 91311},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2639, col: 5, offset: 92153},
																																								run: (*parser).callonusesAndComments227,
																																								expr: &seqExpr{
																																									pos: position{line: 2639, col: 5, offset: 92153},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2639, col: 5, offset: 92153},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2657, col: 5, offset: 92839},
																																								run: (*parser).callonusesAndComments232,
																																								expr: &seqExpr{
																																									pos: position{line: 2657, col: 5, offset: 92839},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2657, col: 5, offset: 92839},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2657, col: 10, offset: 92844},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3722, col: 12, offset: 127805},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 770, col: 115, offset: 23613},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 772, col: 5, offset: 23705},
																																	run: (*parser).callonusesAndComments238,
																																	expr: &seqExpr{
																																		pos: position{line: 772, col: 5, offset: 23705},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 772, col: 5, offset: 23705},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 772, col: 9, offset: 23709},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 772, col: 14, offset: 23714},
																																					expr: &choiceExpr{
																																						pos: position{line: 772, col: 15, offset: 23715},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2430, col: 24, offset: 83529},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2430, col: 24, offset: 83529},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2347, col: 19, offset: 80717},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2431, col: 24, offset: 83596},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2431, col: 24, offset: 83596},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2432, col: 5, offset: 83633},
																																								run: (*parser).callonusesAndComments253,
																																								expr: &seqExpr{
																																									pos: position{line: 2432, col: 5, offset: 83633},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2432, col: 5, offset: 83633},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 14, offset: 83642},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2432, col: 26, offset: 83654},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2449, col: 19, offset: 84271},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2449, col: 19, offset: 84271},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2450, col: 5, offset: 84330},
																																								run: (*parser).callonusesAndComments266,
																																								expr: &seqExpr{
																																									pos: position{line: 2450, col: 5, offset: 84330},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2450, col: 5, offset: 84330},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 14, offset: 84339},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 26, offset: 84351},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 38, offset: 84363},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2450, col: 50, offset: 84375},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2479, col: 16, offset: 85511},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2479, col: 16, offset: 85511},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2348, col: 19, offset: 80741},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2480, col: 5, offset: 85614},
																																								run: (*parser).callonusesAndComments287,
																																								expr: &seqExpr{
																																									pos: position{line: 2480, col: 5, offset: 85614},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2480, col: 5, offset: 85614},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 14, offset: 85623},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 26, offset: 85635},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 38, offset: 85647},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 50, offset: 85659},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 62, offset: 85671},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 74, offset: 85683},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 86, offset: 85695},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2480, col: 98, offset: 85707},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2348, col: 19, offset: 80741},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2707, col: 36, offset: 94644},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2707, col: 36, offset: 94644},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2707, col: 41, offset: 94649},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2705, col: 38, offset: 94536},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2594, col: 37, offset: 90294},
																																								run: (*parser).callonusesAndComments310,
																																								expr: &seqExpr{
																																									pos: position{line: 2594, col: 37, offset: 90294},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2594, col: 37, offset: 90294},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2618, col: 5, offset: 91311},
																																								run: (*parser).callonusesAndComments321,
																																								expr: &seqExpr{
																																									pos: position{line: 2618, col: 5, offset: 91311},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2618, col: 5, offset: 91311},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2639, col: 5, offset: 92153},
																																								run: (*parser).callonusesAndComments328,
																																								expr: &seqExpr{
																																									pos: position{line: 2639, col: 5, offset: 92153},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2639, col: 5, offset: 92153},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2348, col: 19, offset: 80741},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2657, col: 5, offset: 92839},
																																								run: (*parser).callonusesAndComments333,
																																								expr: &seqExpr{
																																									pos: position{line: 2657, col: 5, offset: 92839},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2657, col: 5, offset: 92839},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2657, col: 10, offset: 92844},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3722, col: 12, offset: 127805},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 772, col: 98, offset: 23798},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3724, col: 8, offset: 127821},
																																					run: (*parser).callonusesAndComments339,
																																					expr: &choiceExpr{
																																						pos: position{line: 3724, col: 9, offset: 127822},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3724, col: 9, offset: 127822},
																																								expr: &anyMatcher{
																																									line: 3724, col: 10, offset: 127823,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3724, col: 14, offset: 127827},
																																								expr: &anyMatcher{
																																									line: 3724, col: 15, offset: 127828,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 772, col: 110, offset: 23810},
																																				expr: &seqExpr{
																																					pos: position{line: 3721, col: 12, offset: 127772},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3721, col: 12, offset: 127772},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3733, col: 36, offset: 128119},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3721, col: 16, offset: 127776},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3721, col: 16, offset: 127776},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3721, col: 16, offset: 127776},
																																											expr: &litMatcher{
																																												pos:        position{line: 3721, col: 16, offset: 127776},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3721, col: 22, offset: 127782},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3720, col: 12, offset: 127758},
																																									expr: &anyMatcher{
																																										line: 3720, col: 13, offset: 127759,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 791, col: 22, offset: 24216},
																																	run: (*parser).callonusesAndComments356,
																																	expr: &seqExpr{
																																		pos: position{line: 791, col: 22, offset: 24216},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 791, col: 22, offset: 24216},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 791, col: 27, offset: 24221},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 791, col: 32, offset: 24226},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 791, col: 32, offset: 24226},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 791, col: 42, offset: 24236},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 791, col: 47, offset: 24241},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3724, col: 8, offset: 127821},
																																					run: (*parser).callonusesAndComments364,
																																					expr: &choiceExpr{
																																						pos: position{line: 3724, col: 9, offset: 127822},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3724, col: 9, offset: 127822},
																																								expr: &anyMatcher{
																																									line: 3724, col: 10, offset: 127823,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3724, col: 14, offset: 127827},
																																								expr: &anyMatcher{
																																									line: 3724, col: 15, offset: 127828,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3165, col: 21, offset: 109892},
																																	run: (*parser).callonusesAndComments370,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3165, col: 21, offset: 109892},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3165, col: 27, offset: 109898},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3722, col: 12, offset: 127805},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3721, col: 12, offset: 127772},
																														expr: &charClassMatcher{
																															pos:        position{line: 3733, col: 36, offset: 128119},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3721, col: 16, offset: 127776},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3721, col: 16, offset: 127776},
																																		expr: &litMatcher{
																																			pos:        position{line: 3721, col: 16, offset: 127776},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3721, col: 22, offset: 127782},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3720, col: 12, offset: 127758},
																																expr: &anyMatcher{
																																	line: 3720, col: 13, offset: 127759,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4206, col: 11, offset: 148507},
																							run: (*parser).callonusesAndComments383,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3280, col: 5, offset: 113227},
																run: (*parser).callonusesAndComments384,
																expr: &seqExpr{
																	pos: position{line: 3280, col: 5, offset: 113227},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3280, col: 5, offset: 113227},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3280, col: 11, offset: 113233},
																			expr: &litMatcher{
																				pos:        position{line: 3280, col: 11, offset: 113233},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3280, col: 16, offset: 113238},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3300, col: 12, offset: 113844},
																				run: (*parser).callonusesAndComments390,
																				expr: &seqExpr{
																					pos: position{line: 3300, col: 12, offset: 113844},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3300, col: 12, offset: 113844},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3300, col: 19, offset: 113851},
																								expr: &seqExpr{
																									pos: position{line: 3300, col: 20, offset: 113852},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3313, col: 13, offset: 114121},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3313, col: 13, offset: 114121},
																													run: (*parser).callonusesAndComments396,
																													expr: &litMatcher{
																														pos:        position{line: 3313, col: 13, offset: 114121},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 697, col: 10, offset: 21290},
																													run: (*parser).callonusesAndComments398,
																													expr: &labeledExpr{
																														pos:   position{line: 697, col: 10, offset: 21290},
																														label: "identI",
																														expr: &seqExpr{
																															pos: position{line: 2354, col: 17, offset: 80792},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2337, col: 20, offset: 80547},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2354, col: 26, offset: 80801},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2337, col: 20, offset: 80547},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 699, col: 5, offset: 21384},
																													run: (*parser).callonusesAndComments404,
																													expr: &seqExpr{
																														pos: position{line: 699, col: 5, offset: 21384},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 699, col: 5, offset: 21384},
																																label: "identI",
																																expr: &seqExpr{
																																	pos: position{line: 699, col: 13, offset: 21392},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 699, col: 13, offset: 21392},
																																			expr: &litMatcher{
																																				pos:        position{line: 699, col: 13, offset: 21392},
																																				val:        "$",
																																				ignoreCase: false,
																																				want:       "\"$\"",
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 699, col: 18, offset: 21397},
																																			expr: &choiceExpr{
																																				pos: position{line: 699, col: 19, offset: 21398},
																																				alternatives: []interface{}{
																																					&seqExpr{
																																						pos: position{line: 699, col: 19, offset: 21398},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 699, col: 19, offset: 21398},
																																								val:        "[\\pNd]",
																																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 699, col: 28, offset: 21407},
																																								val:        "[_-\\pL]",
																																								chars:      []rune{'_', '-'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 699, col: 38, offset: 21417},
																																						val:        "[_-\\pL]",
																																						chars:      []rune{'_', '-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 699, col: 49, offset: 21428},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3724, col: 8, offset: 127821},
																																	run: (*parser).callonusesAndComments417,
																																	expr: &choiceExpr{
																																		pos: position{line: 3724, col: 9, offset: 127822},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3724, col: 9, offset: 127822},
																																				expr: &anyMatcher{
																																					line: 3724, col: 10, offset: 127823,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3724, col: 14, offset: 127827},
																																				expr: &anyMatcher{
																																					line: 3724, col: 15, offset: 127828,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3315, col: 13, offset: 114196},
																													run: (*parser).callonusesAndComments423,
																													expr: &seqExpr{
																														pos: position{line: 3315, col: 13, offset: 114196},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3315, col: 13, offset: 114196},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3315, col: 13, offset: 114196},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3315, col: 22, offset: 114205},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3724, col: 8, offset: 127821},
																																	run: (*parser).callonusesAndComments428,
																																	expr: &choiceExpr{
																																		pos: position{line: 3724, col: 9, offset: 127822},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3724, col: 9, offset: 127822},
																																				expr: &anyMatcher{
																																					line: 3724, col: 10, offset: 127823,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3724, col: 14, offset: 127827},
																																				expr: &anyMatcher{
																																					line: 3724, col: 15, offset: 127828,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3300, col: 29, offset: 113861},
																											expr: &litMatcher{
																												pos:        position{line: 3300, col: 29, offset: 113861},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3300, col: 36, offset: 113868},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3165, col: 12, offset: 109883},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 749, col: 14, offset: 22958},
																										run: (*parser).callonusesAndComments438,
																										expr: &seqExpr{
																											pos: position{line: 749, col: 14, offset: 22958},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 749, col: 14, offset: 22958},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 749, col: 18, offset: 22962},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 749, col: 23, offset: 22967},
																														expr: &charClassMatcher{
																															pos:        position{line: 2691, col: 27, offset: 93866},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 749, col: 47, offset: 22991},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 751, col: 5, offset: 23083},
																										run: (*parser).callonusesAndComments445,
																										expr: &seqExpr{
																											pos: position{line: 751, col: 5, offset: 23083},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 751, col: 5, offset: 23083},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 751, col: 9, offset: 23087},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 751, col: 14, offset: 23092},
																														expr: &charClassMatcher{
																															pos:        position{line: 2691, col: 27, offset: 93866},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 751, col: 38, offset: 23116},
																													expr: &seqExpr{
																														pos: position{line: 3721, col: 12, offset: 127772},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3721, col: 12, offset: 127772},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3733, col: 36, offset: 128119},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3721, col: 16, offset: 127776},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3721, col: 16, offset: 127776},
																																				expr: &litMatcher{
																																					pos:        position{line: 3721, col: 16, offset: 127776},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3721, col: 22, offset: 127782},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3720, col: 12, offset: 127758},
																																		expr: &anyMatcher{
																																			line: 3720, col: 13, offset: 127759,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 770, col: 22, offset: 23520},
																										run: (*parser).callonusesAndComments462,
																										expr: &seqExpr{
																											pos: position{line: 770, col: 22, offset: 23520},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 770, col: 22, offset: 23520},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 770, col: 26, offset: 23524},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 770, col: 31, offset: 23529},
																														expr: &choiceExpr{
																															pos: position{line: 770, col: 32, offset: 23530},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2430, col: 24, offset: 83529},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2430, col: 24, offset: 83529},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2431, col: 24, offset: 83596},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2431, col: 24, offset: 83596},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2432, col: 5, offset: 83633},
																																	run: (*parser).callonusesAndComments477,
																																	expr: &seqExpr{
																																		pos: position{line: 2432, col: 5, offset: 83633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2432, col: 5, offset: 83633},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 14, offset: 83642},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 26, offset: 83654},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2449, col: 19, offset: 84271},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2449, col: 19, offset: 84271},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2450, col: 5, offset: 84330},
																																	run: (*parser).callonusesAndComments490,
																																	expr: &seqExpr{
																																		pos: position{line: 2450, col: 5, offset: 84330},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2450, col: 5, offset: 84330},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 14, offset: 84339},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 26, offset: 84351},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 38, offset: 84363},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 50, offset: 84375},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2479, col: 16, offset: 85511},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2479, col: 16, offset: 85511},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2480, col: 5, offset: 85614},
																																	run: (*parser).callonusesAndComments511,
																																	expr: &seqExpr{
																																		pos: position{line: 2480, col: 5, offset: 85614},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2480, col: 5, offset: 85614},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 14, offset: 85623},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 26, offset: 85635},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 38, offset: 85647},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 50, offset: 85659},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 62, offset: 85671},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 74, offset: 85683},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 86, offset: 85695},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 98, offset: 85707},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2707, col: 36, offset: 94644},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2707, col: 36, offset: 94644},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2707, col: 41, offset: 94649},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2705, col: 38, offset: 94536},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2594, col: 37, offset: 90294},
																																	run: (*parser).callonusesAndComments534,
																																	expr: &seqExpr{
																																		pos: position{line: 2594, col: 37, offset: 90294},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2594, col: 37, offset: 90294},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2618, col: 5, offset: 91311},
																																	run: (*parser).callonusesAndComments545,
																																	expr: &seqExpr{
																																		pos: position{line: 2618, col: 5, offset: 91311},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2618, col: 5, offset: 91311},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2639, col: 5, offset: 92153},
																																	run: (*parser).callonusesAndComments552,
																																	expr: &seqExpr{
																																		pos: position{line: 2639, col: 5, offset: 92153},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2639, col: 5, offset: 92153},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2657, col: 5, offset: 92839},
																																	run: (*parser).callonusesAndComments557,
																																	expr: &seqExpr{
																																		pos: position{line: 2657, col: 5, offset: 92839},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2657, col: 5, offset: 92839},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2657, col: 10, offset: 92844},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3722, col: 12, offset: 127805},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 770, col: 115, offset: 23613},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 772, col: 5, offset: 23705},
																										run: (*parser).callonusesAndComments563,
																										expr: &seqExpr{
																											pos: position{line: 772, col: 5, offset: 23705},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 772, col: 5, offset: 23705},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 772, col: 9, offset: 23709},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 772, col: 14, offset: 23714},
																														expr: &choiceExpr{
																															pos: position{line: 772, col: 15, offset: 23715},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2430, col: 24, offset: 83529},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2430, col: 24, offset: 83529},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2347, col: 19, offset: 80717},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2431, col: 24, offset: 83596},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2431, col: 24, offset: 83596},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2432, col: 5, offset: 83633},
																																	run: (*parser).callonusesAndComments578,
																																	expr: &seqExpr{
																																		pos: position{line: 2432, col: 5, offset: 83633},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2432, col: 5, offset: 83633},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 14, offset: 83642},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2432, col: 26, offset: 83654},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2449, col: 19, offset: 84271},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2449, col: 19, offset: 84271},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2450, col: 5, offset: 84330},
																																	run: (*parser).callonusesAndComments591,
																																	expr: &seqExpr{
																																		pos: position{line: 2450, col: 5, offset: 84330},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2450, col: 5, offset: 84330},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 14, offset: 84339},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 26, offset: 84351},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 38, offset: 84363},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2450, col: 50, offset: 84375},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2479, col: 16, offset: 85511},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2479, col: 16, offset: 85511},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2348, col: 19, offset: 80741},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2480, col: 5, offset: 85614},
																																	run: (*parser).callonusesAndComments612,
																																	expr: &seqExpr{
																																		pos: position{line: 2480, col: 5, offset: 85614},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2480, col: 5, offset: 85614},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 14, offset: 85623},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 26, offset: 85635},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 38, offset: 85647},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 50, offset: 85659},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 62, offset: 85671},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 74, offset: 85683},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 86, offset: 85695},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2480, col: 98, offset: 85707},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2348, col: 19, offset: 80741},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2707, col: 36, offset: 94644},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2707, col: 36, offset: 94644},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2707, col: 41, offset: 94649},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2705, col: 38, offset: 94536},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2594, col: 37, offset: 90294},
																																	run: (*parser).callonusesAndComments635,
																																	expr: &seqExpr{
																																		pos: position{line: 2594, col: 37, offset: 90294},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2594, col: 37, offset: 90294},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2618, col: 5, offset: 91311},
																																	run: (*parser).callonusesAndComments646,
																																	expr: &seqExpr{
																																		pos: position{line: 2618, col: 5, offset: 91311},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2618, col: 5, offset: 91311},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2639, col: 5, offset: 92153},
																																	run: (*parser).callonusesAndComments653,
																																	expr: &seqExpr{
																																		pos: position{line: 2639, col: 5, offset: 92153},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2639, col: 5, offset: 92153},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2348, col: 19, offset: 80741},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2657, col: 5, offset: 92839},
																																	run: (*parser).callonusesAndComments658,
																																	expr: &seqExpr{
																																		pos: position{line: 2657, col: 5, offset: 92839},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2657, col: 5, offset: 92839},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2657, col: 10, offset: 92844},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3722, col: 12, offset: 127805},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 772, col: 98, offset: 23798},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3724, col: 8, offset: 127821},
																														run: (*parser).callonusesAndComments664,
																														expr: &choiceExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3724, col: 9, offset: 127822},
																																	expr: &anyMatcher{
																																		line: 3724, col: 10, offset: 127823,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3724, col: 14, offset: 127827},
																																	expr: &anyMatcher{
																																		line: 3724, col: 15, offset: 127828,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 772, col: 110, offset: 23810},
																													expr: &seqExpr{
																														pos: position{line: 3721, col: 12, offset: 127772},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3721, col: 12, offset: 127772},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3733, col: 36, offset: 128119},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3721, col: 16, offset: 127776},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3721, col: 16, offset: 127776},
																																				expr: &litMatcher{
																																					pos:        position{line: 3721, col: 16, offset: 127776},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3721, col: 22, offset: 127782},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3720, col: 12, offset: 127758},
																																		expr: &anyMatcher{
																																			line: 3720, col: 13, offset: 127759,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 791, col: 22, offset: 24216},
																										run: (*parser).callonusesAndComments681,
																										expr: &seqExpr{
																											pos: position{line: 791, col: 22, offset: 24216},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 791, col: 22, offset: 24216},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 791, col: 27, offset: 24221},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 791, col: 32, offset: 24226},
																														expr: &charClassMatcher{
																															pos:        position{line: 791, col: 32, offset: 24226},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 791, col: 42, offset: 24236},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 791, col: 47, offset: 24241},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3724, col: 8, offset: 127821},
																														run: (*parser).callonusesAndComments689,
																														expr: &choiceExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3724, col: 9, offset: 127822},
																																	expr: &anyMatcher{
																																		line: 3724, col: 10, offset: 127823,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3724, col: 14, offset: 127827},
																																	expr: &anyMatcher{
																																		line: 3724, col: 15, offset: 127828,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3165, col: 21, offset: 109892},
																										run: (*parser).callonusesAndComments695,
																										expr: &labeledExpr{
																											pos:   position{line: 3165, col: 21, offset: 109892},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3165, col: 27, offset: 109898},
																												expr: &charClassMatcher{
																													pos:        position{line: 3722, col: 12, offset: 127805},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3721, col: 12, offset: 127772},
																							expr: &charClassMatcher{
																								pos:        position{line: 3733, col: 36, offset: 128119},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3721, col: 16, offset: 127776},
																											expr: &litMatcher{
																												pos:        position{line: 3721, col: 16, offset: 127776},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3721, col: 22, offset: 127782},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3720, col: 12, offset: 127758},
																									expr: &anyMatcher{
																										line: 3720, col: 13, offset: 127759,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3285, col: 5, offset: 113368},
																run: (*parser).callonusesAndComments708,
																expr: &seqExpr{
																	pos: position{line: 3285, col: 5, offset: 113368},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3285, col: 5, offset: 113368},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3285, col: 11, offset: 113374},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonusesAndComments712,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3721, col: 12, offset: 127772},
																			expr: &charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							expr: &litMatcher{
																								pos:        position{line: 3721, col: 16, offset: 127776},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3721, col: 22, offset: 127782},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3720, col: 12, offset: 127758},
																					expr: &anyMatcher{
																						line: 3720, col: 13, offset: 127759,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "codesAndComments",
			pos:  position{line: 96, col: 1, offset: 2704},
			expr: &actionExpr{
				pos: position{line: 96, col: 21, offset: 2724},
				run: (*parser).calloncodesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 96, col: 21, offset: 2724},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 96, col: 27, offset: 2730},
						expr: &seqExpr{
							pos: position{line: 96, col: 28, offset: 2731},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 96, col: 28, offset: 2731},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 28, offset: 2731},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 96, col: 43, offset: 2746},
									expr: &oneOrMoreExpr{
										pos: position{line: 3735, col: 36, offset: 128206},
										expr: &seqExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													expr: &litMatcher{
														pos:        position{line: 3734, col: 36, offset: 128160},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3734, col: 42, offset: 128166},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 52, offset: 2755},
									name: "Codes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "globalCodeAndFunc",
			pos:  position{line: 110, col: 1, offset: 3101},
			expr: &actionExpr{
				pos: position{line: 110, col: 22, offset: 3122},
				run: (*parser).callonglobalCodeAndFunc1,
				expr: &seqExpr{
					pos: position{line: 110, col: 22, offset: 3122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 110, col: 22, offset: 3122},
							label: "codesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 40, offset: 3140},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 40, offset: 3140},
									name: "codesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 110, col: 58, offset: 3158},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 67, offset: 3167},
							label: "commentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 77, offset: 3177},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 77, offset: 3177},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 110, col: 92, offset: 3192},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 101, offset: 3201},
							label: "funcI",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 107, offset: 3207},
								name: "Func",
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 148, col: 1, offset: 4584},
			expr: &actionExpr{
				pos: position{line: 148, col: 10, offset: 4593},
				run: (*parser).callonScope1,
				expr: &labeledExpr{
					pos:   position{line: 148, col: 10, offset: 4593},
					label: "itemsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 148, col: 17, offset: 4600},
						expr: &seqExpr{
							pos: position{line: 148, col: 18, offset: 4601},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 148, col: 18, offset: 4601},
									expr: &oneOrMoreExpr{
										pos: position{line: 3735, col: 36, offset: 128206},
										expr: &seqExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													expr: &litMatcher{
														pos:        position{line: 3734, col: 36, offset: 128160},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3734, col: 42, offset: 128166},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3822, col: 17, offset: 132013},
									run: (*parser).callonScope13,
									expr: &zeroOrMoreExpr{
										pos: position{line: 3822, col: 17, offset: 132013},
										expr: &charClassMatcher{
											pos:        position{line: 3733, col: 36, offset: 128119},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 3822, col: 41, offset: 132037},
									run: (*parser).callonScope16,
								},
								&choiceExpr{
									pos: position{line: 3874, col: 5, offset: 133947},
									alternatives: []interface{}{
										&andCodeExpr{
											pos: position{line: 3874, col: 5, offset: 133947},
											run: (*parser).callonScope18,
										},
										&seqExpr{
											pos: position{line: 3876, col: 9, offset: 134030},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3876, col: 9, offset: 134030},
													run: (*parser).callonScope20,
												},
												&stateCodeExpr{
													pos: position{line: 3878, col: 7, offset: 134134},
													run: (*parser).callonScope21,
												},
											},
										},
										&seqExpr{
											pos: position{line: 3885, col: 9, offset: 134470},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3885, col: 9, offset: 134470},
													run: (*parser).callonScope23,
												},
												&choiceExpr{
													pos: position{line: 3938, col: 9, offset: 136805},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3938, col: 9, offset: 136805},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 3938, col: 9, offset: 136805},
																	run: (*parser).callonScope26,
																},
																&andCodeExpr{
																	pos: position{line: 3942, col: 11, offset: 137055},
																	run: (*parser).callonScope27,
																},
																&stateCodeExpr{
																	pos: position{line: 4008, col: 11, offset: 140261},
																	run: (*parser).callonScope28,
																},
															},
														},
														&seqExpr{
															pos: position{line: 4016, col: 13, offset: 140614},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 4016, col: 13, offset: 140614},
																	run: (*parser).callonScope30,
																},
																&andCodeExpr{
																	pos: position{line: 4020, col: 11, offset: 140869},
																	run: (*parser).callonScope31,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 39, offset: 4622},
									name: "scopeItem",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "scopeItem",
			pos:  position{line: 161, col: 1, offset: 4894},
			expr: &choiceExpr{
				pos: position{line: 162, col: 5, offset: 4913},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 4913},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 162, col: 13, offset: 4921},
						name: "Prepend",
					},
					&ruleRefExpr{
						pos:  position{line: 162, col: 23, offset: 4931},
						name: "Append",
					},
					&ruleRefExpr{
						pos:  position{line: 163, col: 5, offset: 4959},
						name: "Code",
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 5, offset: 5004},
						name: "If",
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 10, offset: 5009},
						name: "IfBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 20, offset: 5019},
						name: "Switch",
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 5, offset: 5063},
						name: "HTMLComment",
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 19, offset: 5077},
						name: "And",
					},
					&actionExpr{
						pos: position{line: 2239, col: 14, offset: 77273},
						run: (*parser).callonscopeItem11,
						expr: &seqExpr{
							pos: position{line: 2239, col: 14, offset: 77273},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2239, col: 14, offset: 77273},
									val:        ":raw",
									ignoreCase: false,
									want:       "\":raw\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2239, col: 25, offset: 77284},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2239, col: 31, offset: 77290},
										expr: &actionExpr{
											pos: position{line: 2291, col: 15, offset: 78985},
											run: (*parser).callonscopeItem25,
											expr: &seqExpr{
												pos: position{line: 2291, col: 15, offset: 78985},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4201, col: 11, offset: 148402},
														run: (*parser).callonscopeItem27,
													},
													&labeledExpr{
														pos:   position{line: 2291, col: 22, offset: 78992},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2291, col: 29, offset: 78999},
															expr: &seqExpr{
																pos: position{line: 2291, col: 30, offset: 79000},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2291, col: 30, offset: 79000},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3735, col: 36, offset: 128206},
																			expr: &seqExpr{
																				pos: position{line: 3735, col: 37, offset: 128207},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3735, col: 37, offset: 128207},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3734, col: 36, offset: 128160},
																						expr: &litMatcher{
																							pos:        position{line: 3734, col: 36, offset: 128160},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3734, col: 42, offset: 128166},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2295, col: 15, offset: 79114},
																		run: (*parser).callonscopeItem39,
																		expr: &seqExpr{
																			pos: position{line: 2295, col: 15, offset: 79114},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3822, col: 17, offset: 132013},
																					run: (*parser).callonscopeItem41,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3822, col: 17, offset: 132013},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3822, col: 41, offset: 132037},
																					run: (*parser).callonscopeItem44,
																				},
																				&choiceExpr{
																					pos: position{line: 3874, col: 5, offset: 133947},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3874, col: 5, offset: 133947},
																							run: (*parser).callonscopeItem46,
																						},
																						&seqExpr{
																							pos: position{line: 3876, col: 9, offset: 134030},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3876, col: 9, offset: 134030},
																									run: (*parser).callonscopeItem48,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3878, col: 7, offset: 134134},
																									run: (*parser).callonscopeItem49,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3885, col: 9, offset: 134470},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3885, col: 9, offset: 134470},
																									run: (*parser).callonscopeItem51,
																								},
																								&choiceExpr{
																									pos: position{line: 3938, col: 9, offset: 136805},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3938, col: 9, offset: 136805},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3938, col: 9, offset: 136805},
																													run: (*parser).callonscopeItem54,
																												},
																												&andCodeExpr{
																													pos: position{line: 3942, col: 11, offset: 137055},
																													run: (*parser).callonscopeItem55,
																												},
																												&stateCodeExpr{
																													pos: position{line: 4008, col: 11, offset: 140261},
																													run: (*parser).callonscopeItem56,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 4016, col: 13, offset: 140614},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4016, col: 13, offset: 140614},
																													run: (*parser).callonscopeItem58,
																												},
																												&andCodeExpr{
																													pos: position{line: 4020, col: 11, offset: 140869},
																													run: (*parser).callonscopeItem59,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2295, col: 27, offset: 79126},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3724, col: 8, offset: 127821},
																						run: (*parser).callonscopeItem61,
																						expr: &choiceExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									expr: &anyMatcher{
																										line: 3724, col: 10, offset: 127823,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3724, col: 14, offset: 127827},
																									expr: &anyMatcher{
																										line: 3724, col: 15, offset: 127828,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2295, col: 36, offset: 79135},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2295, col: 42, offset: 79141},
																						expr: &charClassMatcher{
																							pos:        position{line: 3722, col: 12, offset: 127805},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3721, col: 12, offset: 127772},
																					expr: &charClassMatcher{
																						pos:        position{line: 3733, col: 36, offset: 128119},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									expr: &litMatcher{
																										pos:        position{line: 3721, col: 16, offset: 127776},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3721, col: 22, offset: 127782},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3720, col: 12, offset: 127758},
																							expr: &anyMatcher{
																								line: 3720, col: 13, offset: 127759,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4206, col: 11, offset: 148507},
														run: (*parser).callonscopeItem79,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2250, col: 18, offset: 77631},
						run: (*parser).callonscopeItem80,
						expr: &seqExpr{
							pos: position{line: 2250, col: 18, offset: 77631},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2250, col: 18, offset: 77631},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 2250, col: 22, offset: 77635},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 2250, col: 28, offset: 77641},
										expr: &charClassMatcher{
											pos:        position{line: 2250, col: 28, offset: 77641},
											val:        "[^ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2250, col: 40, offset: 77653},
									label: "argsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2250, col: 46, offset: 77659},
										expr: &seqExpr{
											pos: position{line: 2250, col: 47, offset: 77660},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2250, col: 47, offset: 77660},
													expr: &litMatcher{
														pos:        position{line: 2250, col: 47, offset: 77660},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&choiceExpr{
													pos: position{line: 2259, col: 21, offset: 77952},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2261, col: 27, offset: 78015},
															run: (*parser).callonscopeItem92,
															expr: &labeledExpr{
																pos:   position{line: 2261, col: 27, offset: 78015},
																label: "stringI",
																expr: &choiceExpr{
																	pos: position{line: 743, col: 11, offset: 22871},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 749, col: 14, offset: 22958},
																			run: (*parser).callonscopeItem95,
																			expr: &seqExpr{
																				pos: position{line: 749, col: 14, offset: 22958},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 749, col: 14, offset: 22958},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 749, col: 18, offset: 22962},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 749, col: 23, offset: 22967},
																							expr: &charClassMatcher{
																								pos:        position{line: 2691, col: 27, offset: 93866},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 749, col: 47, offset: 22991},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 751, col: 5, offset: 23083},
																			run: (*parser).callonscopeItem102,
																			expr: &seqExpr{
																				pos: position{line: 751, col: 5, offset: 23083},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 751, col: 5, offset: 23083},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 751, col: 9, offset: 23087},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 751, col: 14, offset: 23092},
																							expr: &charClassMatcher{
																								pos:        position{line: 2691, col: 27, offset: 93866},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 751, col: 38, offset: 23116},
																						expr: &seqExpr{
																							pos: position{line: 3721, col: 12, offset: 127772},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3721, col: 12, offset: 127772},
																									expr: &charClassMatcher{
																										pos:        position{line: 3733, col: 36, offset: 128119},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3721, col: 16, offset: 127776},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3721, col: 16, offset: 127776},
																													expr: &litMatcher{
																														pos:        position{line: 3721, col: 16, offset: 127776},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3721, col: 22, offset: 127782},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3720, col: 12, offset: 127758},
																											expr: &anyMatcher{
																												line: 3720, col: 13, offset: 127759,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 770, col: 22, offset: 23520},
																			run: (*parser).callonscopeItem119,
																			expr: &seqExpr{
																				pos: position{line: 770, col: 22, offset: 23520},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 770, col: 22, offset: 23520},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 770, col: 26, offset: 23524},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 770, col: 31, offset: 23529},
																							expr: &choiceExpr{
																								pos: position{line: 770, col: 32, offset: 23530},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2430, col: 24, offset: 83529},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2430, col: 24, offset: 83529},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2431, col: 24, offset: 83596},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2431, col: 24, offset: 83596},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2432, col: 5, offset: 83633},
																										run: (*parser).callonscopeItem134,
																										expr: &seqExpr{
																											pos: position{line: 2432, col: 5, offset: 83633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2432, col: 5, offset: 83633},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 14, offset: 83642},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 26, offset: 83654},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2449, col: 19, offset: 84271},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2449, col: 19, offset: 84271},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2450, col: 5, offset: 84330},
																										run: (*parser).callonscopeItem147,
																										expr: &seqExpr{
																											pos: position{line: 2450, col: 5, offset: 84330},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2450, col: 5, offset: 84330},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 14, offset: 84339},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 26, offset: 84351},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 38, offset: 84363},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 50, offset: 84375},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2479, col: 16, offset: 85511},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2479, col: 16, offset: 85511},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2480, col: 5, offset: 85614},
																										run: (*parser).callonscopeItem168,
																										expr: &seqExpr{
																											pos: position{line: 2480, col: 5, offset: 85614},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2480, col: 5, offset: 85614},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 14, offset: 85623},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 26, offset: 85635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 38, offset: 85647},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 50, offset: 85659},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 62, offset: 85671},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 74, offset: 85683},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 86, offset: 85695},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 98, offset: 85707},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2707, col: 36, offset: 94644},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2707, col: 36, offset: 94644},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2707, col: 41, offset: 94649},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2705, col: 38, offset: 94536},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2594, col: 37, offset: 90294},
																										run: (*parser).callonscopeItem191,
																										expr: &seqExpr{
																											pos: position{line: 2594, col: 37, offset: 90294},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2594, col: 37, offset: 90294},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2618, col: 5, offset: 91311},
																										run: (*parser).callonscopeItem202,
																										expr: &seqExpr{
																											pos: position{line: 2618, col: 5, offset: 91311},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2618, col: 5, offset: 91311},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2639, col: 5, offset: 92153},
																										run: (*parser).callonscopeItem209,
																										expr: &seqExpr{
																											pos: position{line: 2639, col: 5, offset: 92153},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2639, col: 5, offset: 92153},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2657, col: 5, offset: 92839},
																										run: (*parser).callonscopeItem214,
																										expr: &seqExpr{
																											pos: position{line: 2657, col: 5, offset: 92839},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2657, col: 5, offset: 92839},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2657, col: 10, offset: 92844},
																													expr: &charClassMatcher{
																														pos:        position{line: 3722, col: 12, offset: 127805},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 770, col: 115, offset: 23613},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 772, col: 5, offset: 23705},
																			run: (*parser).callonscopeItem220,
																			expr: &seqExpr{
																				pos: position{line: 772, col: 5, offset: 23705},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 772, col: 5, offset: 23705},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 772, col: 9, offset: 23709},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 772, col: 14, offset: 23714},
																							expr: &choiceExpr{
																								pos: position{line: 772, col: 15, offset: 23715},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2430, col: 24, offset: 83529},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2430, col: 24, offset: 83529},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2347, col: 19, offset: 80717},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2431, col: 24, offset: 83596},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2431, col: 24, offset: 83596},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2432, col: 5, offset: 83633},
																										run: (*parser).callonscopeItem235,
																										expr: &seqExpr{
																											pos: position{line: 2432, col: 5, offset: 83633},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2432, col: 5, offset: 83633},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 14, offset: 83642},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2432, col: 26, offset: 83654},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2449, col: 19, offset: 84271},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2449, col: 19, offset: 84271},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2450, col: 5, offset: 84330},
																										run: (*parser).callonscopeItem248,
																										expr: &seqExpr{
																											pos: position{line: 2450, col: 5, offset: 84330},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2450, col: 5, offset: 84330},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 14, offset: 84339},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 26, offset: 84351},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 38, offset: 84363},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2450, col: 50, offset: 84375},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2479, col: 16, offset: 85511},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2479, col: 16, offset: 85511},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2348, col: 19, offset: 80741},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2480, col: 5, offset: 85614},
																										run: (*parser).callonscopeItem269,
																										expr: &seqExpr{
																											pos: position{line: 2480, col: 5, offset: 85614},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2480, col: 5, offset: 85614},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 14, offset: 85623},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 26, offset: 85635},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 38, offset: 85647},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 50, offset: 85659},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 62, offset: 85671},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 74, offset: 85683},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 86, offset: 85695},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2480, col: 98, offset: 85707},
																													expr: &charClassMatcher{
																														pos:        position{line: 2348, col: 19, offset: 80741},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2707, col: 36, offset: 94644},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2707, col: 36, offset: 94644},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2707, col: 41, offset: 94649},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2705, col: 38, offset: 94536},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2594, col: 37, offset: 90294},
																										run: (*parser).callonscopeItem292,
																										expr: &seqExpr{
																											pos: position{line: 2594, col: 37, offset: 90294},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2594, col: 37, offset: 90294},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2618, col: 5, offset: 91311},
																										run: (*parser).callonscopeItem303,
																										expr: &seqExpr{
																											pos: position{line: 2618, col: 5, offset: 91311},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2618, col: 5, offset: 91311},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2639, col: 5, offset: 92153},
																										run: (*parser).callonscopeItem310,
																										expr: &seqExpr{
																											pos: position{line: 2639, col: 5, offset: 92153},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2639, col: 5, offset: 92153},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2348, col: 19, offset: 80741},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2657, col: 5, offset: 92839},
																										run: (*parser).callonscopeItem315,
																										expr: &seqExpr{
																											pos: position{line: 2657, col: 5, offset: 92839},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2657, col: 5, offset: 92839},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2657, col: 10, offset: 92844},
																													expr: &charClassMatcher{
																														pos:        position{line: 3722, col: 12, offset: 127805},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 772, col: 98, offset: 23798},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3724, col: 8, offset: 127821},
																							run: (*parser).callonscopeItem321,
																							expr: &choiceExpr{
																								pos: position{line: 3724, col: 9, offset: 127822},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3724, col: 9, offset: 127822},
																										expr: &anyMatcher{
																											line: 3724, col: 10, offset: 127823,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3724, col: 14, offset: 127827},
																										expr: &anyMatcher{
																											line: 3724, col: 15, offset: 127828,
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 772, col: 110, offset: 23810},
																						expr: &seqExpr{
																							pos: position{line: 3721, col: 12, offset: 127772},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3721, col: 12, offset: 127772},
																									expr: &charClassMatcher{
																										pos:        position{line: 3733, col: 36, offset: 128119},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3721, col: 16, offset: 127776},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3721, col: 16, offset: 127776},
																													expr: &litMatcher{
																														pos:        position{line: 3721, col: 16, offset: 127776},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3721, col: 22, offset: 127782},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3720, col: 12, offset: 127758},
																											expr: &anyMatcher{
																												line: 3720, col: 13, offset: 127759,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 791, col: 22, offset: 24216},
																			run: (*parser).callonscopeItem338,
																			expr: &seqExpr{
																				pos: position{line: 791, col: 22, offset: 24216},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 791, col: 22, offset: 24216},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 791, col: 27, offset: 24221},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 791, col: 32, offset: 24226},
																							expr: &charClassMatcher{
																								pos:        position{line: 791, col: 32, offset: 24226},
																								val:        "[^\\\\r\\n]",
																								chars:      []rune{'\'', '\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 791, col: 42, offset: 24236},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 791, col: 47, offset: 24241},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3724, col: 8, offset: 127821},
																							run: (*parser).callonscopeItem346,
																							expr: &choiceExpr{
																								pos: position{line: 3724, col: 9, offset: 127822},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3724, col: 9, offset: 127822},
																										expr: &anyMatcher{
																											line: 3724, col: 10, offset: 127823,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3724, col: 14, offset: 127827},
																										expr: &anyMatcher{
																											line: 3724, col: 15, offset: 127828,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2265, col: 15, offset: 78116},
															run: (*parser).callonscopeItem352,
															expr: &labeledExpr{
																pos:   position{line: 2265, col: 15, offset: 78116},
																label: "argI",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2265, col: 20, offset: 78121},
																	expr: &charClassMatcher{
																		pos:        position{line: 2265, col: 20, offset: 78121},
																		val:        "[^ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2250, col: 75, offset: 77688},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2250, col: 81, offset: 77694},
										expr: &actionExpr{
											pos: position{line: 2291, col: 15, offset: 78985},
											run: (*parser).callonscopeItem367,
											expr: &seqExpr{
												pos: position{line: 2291, col: 15, offset: 78985},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4201, col: 11, offset: 148402},
														run: (*parser).callonscopeItem369,
													},
													&labeledExpr{
														pos:   position{line: 2291, col: 22, offset: 78992},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2291, col: 29, offset: 78999},
															expr: &seqExpr{
																pos: position{line: 2291, col: 30, offset: 79000},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2291, col: 30, offset: 79000},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3735, col: 36, offset: 128206},
																			expr: &seqExpr{
																				pos: position{line: 3735, col: 37, offset: 128207},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3735, col: 37, offset: 128207},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3734, col: 36, offset: 128160},
																						expr: &litMatcher{
																							pos:        position{line: 3734, col: 36, offset: 128160},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3734, col: 42, offset: 128166},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2295, col: 15, offset: 79114},
																		run: (*parser).callonscopeItem381,
																		expr: &seqExpr{
																			pos: position{line: 2295, col: 15, offset: 79114},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3822, col: 17, offset: 132013},
																					run: (*parser).callonscopeItem383,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3822, col: 17, offset: 132013},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3822, col: 41, offset: 132037},
																					run: (*parser).callonscopeItem386,
																				},
																				&choiceExpr{
																					pos: position{line: 3874, col: 5, offset: 133947},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3874, col: 5, offset: 133947},
																							run: (*parser).callonscopeItem388,
																						},
																						&seqExpr{
																							pos: position{line: 3876, col: 9, offset: 134030},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3876, col: 9, offset: 134030},
																									run: (*parser).callonscopeItem390,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3878, col: 7, offset: 134134},
																									run: (*parser).callonscopeItem391,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3885, col: 9, offset: 134470},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3885, col: 9, offset: 134470},
																									run: (*parser).callonscopeItem393,
																								},
																								&choiceExpr{
																									pos: position{line: 3938, col: 9, offset: 136805},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3938, col: 9, offset: 136805},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3938, col: 9, offset: 136805},
																													run: (*parser).callonscopeItem396,
																												},
																												&andCodeExpr{
																													pos: position{line: 3942, col: 11, offset: 137055},
																													run: (*parser).callonscopeItem397,
																												},
																												&stateCodeExpr{
																													pos: position{line: 4008, col: 11, offset: 140261},
																													run: (*parser).callonscopeItem398,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 4016, col: 13, offset: 140614},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4016, col: 13, offset: 140614},
																													run: (*parser).callonscopeItem400,
																												},
																												&andCodeExpr{
																													pos: position{line: 4020, col: 11, offset: 140869},
																													run: (*parser).callonscopeItem401,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2295, col: 27, offset: 79126},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3724, col: 8, offset: 127821},
																						run: (*parser).callonscopeItem403,
																						expr: &choiceExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									expr: &anyMatcher{
																										line: 3724, col: 10, offset: 127823,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3724, col: 14, offset: 127827},
																									expr: &anyMatcher{
																										line: 3724, col: 15, offset: 127828,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2295, col: 36, offset: 79135},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2295, col: 42, offset: 79141},
																						expr: &charClassMatcher{
																							pos:        position{line: 3722, col: 12, offset: 127805},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3721, col: 12, offset: 127772},
																					expr: &charClassMatcher{
																						pos:        position{line: 3733, col: 36, offset: 128119},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									expr: &litMatcher{
																										pos:        position{line: 3721, col: 16, offset: 127776},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3721, col: 22, offset: 127782},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3720, col: 12, offset: 127758},
																							expr: &anyMatcher{
																								line: 3720, col: 13, offset: 127759,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4206, col: 11, offset: 148507},
														run: (*parser).callonscopeItem421,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2273, col: 14, offset: 78416},
						run: (*parser).callonscopeItem422,
						expr: &seqExpr{
							pos: position{line: 2273, col: 14, offset: 78416},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2273, col: 14, offset: 78416},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2273, col: 22, offset: 78424},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2273, col: 28, offset: 78430},
										expr: &actionExpr{
											pos: position{line: 2291, col: 15, offset: 78985},
											run: (*parser).callonscopeItem436,
											expr: &seqExpr{
												pos: position{line: 2291, col: 15, offset: 78985},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4201, col: 11, offset: 148402},
														run: (*parser).callonscopeItem438,
													},
													&labeledExpr{
														pos:   position{line: 2291, col: 22, offset: 78992},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2291, col: 29, offset: 78999},
															expr: &seqExpr{
																pos: position{line: 2291, col: 30, offset: 79000},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2291, col: 30, offset: 79000},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3735, col: 36, offset: 128206},
																			expr: &seqExpr{
																				pos: position{line: 3735, col: 37, offset: 128207},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3735, col: 37, offset: 128207},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3734, col: 36, offset: 128160},
																						expr: &litMatcher{
																							pos:        position{line: 3734, col: 36, offset: 128160},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3734, col: 42, offset: 128166},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2295, col: 15, offset: 79114},
																		run: (*parser).callonscopeItem450,
																		expr: &seqExpr{
																			pos: position{line: 2295, col: 15, offset: 79114},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3822, col: 17, offset: 132013},
																					run: (*parser).callonscopeItem452,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3822, col: 17, offset: 132013},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3822, col: 41, offset: 132037},
																					run: (*parser).callonscopeItem455,
																				},
																				&choiceExpr{
																					pos: position{line: 3874, col: 5, offset: 133947},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3874, col: 5, offset: 133947},
																							run: (*parser).callonscopeItem457,
																						},
																						&seqExpr{
																							pos: position{line: 3876, col: 9, offset: 134030},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3876, col: 9, offset: 134030},
																									run: (*parser).callonscopeItem459,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3878, col: 7, offset: 134134},
																									run: (*parser).callonscopeItem460,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3885, col: 9, offset: 134470},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3885, col: 9, offset: 134470},
																									run: (*parser).callonscopeItem462,
																								},
																								&choiceExpr{
																									pos: position{line: 3938, col: 9, offset: 136805},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3938, col: 9, offset: 136805},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3938, col: 9, offset: 136805},
																													run: (*parser).callonscopeItem465,
																												},
																												&andCodeExpr{
																													pos: position{line: 3942, col: 11, offset: 137055},
																													run: (*parser).callonscopeItem466,
																												},
																												&stateCodeExpr{
																													pos: position{line: 4008, col: 11, offset: 140261},
																													run: (*parser).callonscopeItem467,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 4016, col: 13, offset: 140614},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4016, col: 13, offset: 140614},
																													run: (*parser).callonscopeItem469,
																												},
																												&andCodeExpr{
																													pos: position{line: 4020, col: 11, offset: 140869},
																													run: (*parser).callonscopeItem470,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2295, col: 27, offset: 79126},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3724, col: 8, offset: 127821},
																						run: (*parser).callonscopeItem472,
																						expr: &choiceExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									expr: &anyMatcher{
																										line: 3724, col: 10, offset: 127823,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3724, col: 14, offset: 127827},
																									expr: &anyMatcher{
																										line: 3724, col: 15, offset: 127828,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2295, col: 36, offset: 79135},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2295, col: 42, offset: 79141},
																						expr: &charClassMatcher{
																							pos:        position{line: 3722, col: 12, offset: 127805},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3721, col: 12, offset: 127772},
																					expr: &charClassMatcher{
																						pos:        position{line: 3733, col: 36, offset: 128119},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3721, col: 16, offset: 127776},
																									expr: &litMatcher{
																										pos:        position{line: 3721, col: 16, offset: 127776},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3721, col: 22, offset: 127782},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3720, col: 12, offset: 127758},
																							expr: &anyMatcher{
																								line: 3720, col: 13, offset: 127759,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4206, col: 11, offset: 148507},
														run: (*parser).callonscopeItem490,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2831, col: 12, offset: 98842},
						run: (*parser).callonscopeItem491,
						expr: &seqExpr{
							pos: position{line: 2831, col: 12, offset: 98842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2831, col: 12, offset: 98842},
									val:        "include",
									ignoreCase: false,
									want:       "\"include\"",
								},
								&labeledExpr{
									pos:   position{line: 2831, col: 22, offset: 98852},
									label: "pathI",
									expr: &choiceExpr{
										pos: position{line: 3153, col: 18, offset: 109488},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3153, col: 18, offset: 109488},
												exprs: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 3153, col: 18, offset: 109488},
														expr: &litMatcher{
															pos:        position{line: 3153, col: 18, offset: 109488},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
													},
													&choiceExpr{
														pos: position{line: 743, col: 11, offset: 22871},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 749, col: 14, offset: 22958},
																run: (*parser).callonscopeItem500,
																expr: &seqExpr{
																	pos: position{line: 749, col: 14, offset: 22958},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 749, col: 14, offset: 22958},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 749, col: 18, offset: 22962},
																			label: "strI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 749, col: 23, offset: 22967},
																				expr: &charClassMatcher{
																					pos:        position{line: 2691, col: 27, offset: 93866},
																					val:        "[^\\n`]",
																					chars:      []rune{'\n', '`'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 749, col: 47, offset: 22991},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 751, col: 5, offset: 23083},
																run: (*parser).callonscopeItem507,
																expr: &seqExpr{
																	pos: position{line: 751, col: 5, offset: 23083},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 751, col: 5, offset: 23083},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 751, col: 9, offset: 23087},
																			label: "strI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 751, col: 14, offset: 23092},
																				expr: &charClassMatcher{
																					pos:        position{line: 2691, col: 27, offset: 93866},
																					val:        "[^\\n`]",
																					chars:      []rune{'\n', '`'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 751, col: 38, offset: 23116},
																			expr: &seqExpr{
																				pos: position{line: 3721, col: 12, offset: 127772},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3721, col: 12, offset: 127772},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3721, col: 16, offset: 127776},
																										expr: &litMatcher{
																											pos:        position{line: 3721, col: 16, offset: 127776},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 3721, col: 22, offset: 127782},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3720, col: 12, offset: 127758},
																								expr: &anyMatcher{
																									line: 3720, col: 13, offset: 127759,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 770, col: 22, offset: 23520},
																run: (*parser).callonscopeItem524,
																expr: &seqExpr{
																	pos: position{line: 770, col: 22, offset: 23520},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 770, col: 22, offset: 23520},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 770, col: 26, offset: 23524},
																			label: "strI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 770, col: 31, offset: 23529},
																				expr: &choiceExpr{
																					pos: position{line: 770, col: 32, offset: 23530},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2430, col: 24, offset: 83529},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2430, col: 24, offset: 83529},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2347, col: 19, offset: 80717},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2347, col: 19, offset: 80717},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2347, col: 19, offset: 80717},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2431, col: 24, offset: 83596},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2431, col: 24, offset: 83596},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2432, col: 5, offset: 83633},
																							run: (*parser).callonscopeItem539,
																							expr: &seqExpr{
																								pos: position{line: 2432, col: 5, offset: 83633},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2432, col: 5, offset: 83633},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2432, col: 14, offset: 83642},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2432, col: 26, offset: 83654},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2449, col: 19, offset: 84271},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2449, col: 19, offset: 84271},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2450, col: 5, offset: 84330},
																							run: (*parser).callonscopeItem552,
																							expr: &seqExpr{
																								pos: position{line: 2450, col: 5, offset: 84330},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2450, col: 5, offset: 84330},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 14, offset: 84339},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 26, offset: 84351},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 38, offset: 84363},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 50, offset: 84375},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2479, col: 16, offset: 85511},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2479, col: 16, offset: 85511},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2480, col: 5, offset: 85614},
																							run: (*parser).callonscopeItem573,
																							expr: &seqExpr{
																								pos: position{line: 2480, col: 5, offset: 85614},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2480, col: 5, offset: 85614},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 14, offset: 85623},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 26, offset: 85635},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 38, offset: 85647},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 50, offset: 85659},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 62, offset: 85671},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 74, offset: 85683},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 86, offset: 85695},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 98, offset: 85707},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2707, col: 36, offset: 94644},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2707, col: 36, offset: 94644},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2707, col: 41, offset: 94649},
																									val:        "[abfnrtv\\\\\"]",
																									chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 2705, col: 38, offset: 94536},
																							val:        "[^\"\\\\\\n]",
																							chars:      []rune{'"', '\\', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																						&actionExpr{
																							pos: position{line: 2594, col: 37, offset: 90294},
																							run: (*parser).callonscopeItem596,
																							expr: &seqExpr{
																								pos: position{line: 2594, col: 37, offset: 90294},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2594, col: 37, offset: 90294},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2618, col: 5, offset: 91311},
																							run: (*parser).callonscopeItem607,
																							expr: &seqExpr{
																								pos: position{line: 2618, col: 5, offset: 91311},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2618, col: 5, offset: 91311},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2639, col: 5, offset: 92153},
																							run: (*parser).callonscopeItem614,
																							expr: &seqExpr{
																								pos: position{line: 2639, col: 5, offset: 92153},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2639, col: 5, offset: 92153},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2657, col: 5, offset: 92839},
																							run: (*parser).callonscopeItem619,
																							expr: &seqExpr{
																								pos: position{line: 2657, col: 5, offset: 92839},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2657, col: 5, offset: 92839},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2657, col: 10, offset: 92844},
																										expr: &charClassMatcher{
																											pos:        position{line: 3722, col: 12, offset: 127805},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 770, col: 115, offset: 23613},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 772, col: 5, offset: 23705},
																run: (*parser).callonscopeItem625,
																expr: &seqExpr{
																	pos: position{line: 772, col: 5, offset: 23705},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 772, col: 5, offset: 23705},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 772, col: 9, offset: 23709},
																			label: "strI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 772, col: 14, offset: 23714},
																				expr: &choiceExpr{
																					pos: position{line: 772, col: 15, offset: 23715},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2430, col: 24, offset: 83529},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2430, col: 24, offset: 83529},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2347, col: 19, offset: 80717},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2347, col: 19, offset: 80717},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2347, col: 19, offset: 80717},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2431, col: 24, offset: 83596},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2431, col: 24, offset: 83596},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2432, col: 5, offset: 83633},
																							run: (*parser).callonscopeItem640,
																							expr: &seqExpr{
																								pos: position{line: 2432, col: 5, offset: 83633},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2432, col: 5, offset: 83633},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2432, col: 14, offset: 83642},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2432, col: 26, offset: 83654},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2449, col: 19, offset: 84271},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2449, col: 19, offset: 84271},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2450, col: 5, offset: 84330},
																							run: (*parser).callonscopeItem653,
																							expr: &seqExpr{
																								pos: position{line: 2450, col: 5, offset: 84330},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2450, col: 5, offset: 84330},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 14, offset: 84339},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 26, offset: 84351},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 38, offset: 84363},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2450, col: 50, offset: 84375},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2479, col: 16, offset: 85511},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2479, col: 16, offset: 85511},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2480, col: 5, offset: 85614},
																							run: (*parser).callonscopeItem674,
																							expr: &seqExpr{
																								pos: position{line: 2480, col: 5, offset: 85614},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2480, col: 5, offset: 85614},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 14, offset: 85623},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 26, offset: 85635},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 38, offset: 85647},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 50, offset: 85659},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 62, offset: 85671},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 74, offset: 85683},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 86, offset: 85695},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2480, col: 98, offset: 85707},
																										expr: &charClassMatcher{
																											pos:        position{line: 2348, col: 19, offset: 80741},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2707, col: 36, offset: 94644},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2707, col: 36, offset: 94644},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2707, col: 41, offset: 94649},
																									val:        "[abfnrtv\\\\\"]",
																									chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 2705, col: 38, offset: 94536},
																							val:        "[^\"\\\\\\n]",
																							chars:      []rune{'"', '\\', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																						&actionExpr{
																							pos: position{line: 2594, col: 37, offset: 90294},
																							run: (*parser).callonscopeItem697,
																							expr: &seqExpr{
																								pos: position{line: 2594, col: 37, offset: 90294},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2594, col: 37, offset: 90294},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2618, col: 5, offset: 91311},
																							run: (*parser).callonscopeItem708,
																							expr: &seqExpr{
																								pos: position{line: 2618, col: 5, offset: 91311},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2618, col: 5, offset: 91311},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2639, col: 5, offset: 92153},
																							run: (*parser).callonscopeItem715,
																							expr: &seqExpr{
																								pos: position{line: 2639, col: 5, offset: 92153},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2639, col: 5, offset: 92153},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2657, col: 5, offset: 92839},
																							run: (*parser).callonscopeItem720,
																							expr: &seqExpr{
																								pos: position{line: 2657, col: 5, offset: 92839},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2657, col: 5, offset: 92839},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2657, col: 10, offset: 92844},
																										expr: &charClassMatcher{
																											pos:        position{line: 3722, col: 12, offset: 127805},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 772, col: 98, offset: 23798},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonscopeItem726,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 772, col: 110, offset: 23810},
																			expr: &seqExpr{
																				pos: position{line: 3721, col: 12, offset: 127772},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3721, col: 12, offset: 127772},
																						expr: &charClassMatcher{
																							pos:        position{line: 3733, col: 36, offset: 128119},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3721, col: 16, offset: 127776},
																										expr: &litMatcher{
																											pos:        position{line: 3721, col: 16, offset: 127776},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 3721, col: 22, offset: 127782},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3720, col: 12, offset: 127758},
																								expr: &anyMatcher{
																									line: 3720, col: 13, offset: 127759,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 791, col: 22, offset: 24216},
																run: (*parser).callonscopeItem743,
																expr: &seqExpr{
																	pos: position{line: 791, col: 22, offset: 24216},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 791, col: 22, offset: 24216},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 791, col: 27, offset: 24221},
																			label: "strI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 791, col: 32, offset: 24226},
																				expr: &charClassMatcher{
																					pos:        position{line: 791, col: 32, offset: 24226},
																					val:        "[^\\\\r\\n]",
																					chars:      []rune{'\'', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 791, col: 42, offset: 24236},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 791, col: 47, offset: 24241},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonscopeItem751,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3153, col: 32, offset: 109502},
												run: (*parser).callonscopeItem757,
												expr: &labeledExpr{
													pos:   position{line: 3153, col: 32, offset: 109502},
													label: "pathI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 3153, col: 38, offset: 109508},
														expr: &charClassMatcher{
															pos:        position{line: 3722, col: 12, offset: 127805},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 168, col: 5, offset: 5236},
						name: "Mixin",
					},
					&ruleRefExpr{
						pos:  position{line: 168, col: 13, offset: 5244},
						name: "Return",
					},
					&ruleRefExpr{
						pos:  position{line: 168, col: 22, offset: 5253},
						name: "MixinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 169, col: 5, offset: 5284},
						name: "Assign",
					},
					&ruleRefExpr{
						pos:  position{line: 169, col: 14, offset: 5293},
						name: "ArrowBlock",
					},
					&actionExpr{
						pos: position{line: 176, col: 17, offset: 5431},
						run: (*parser).callonscopeItem766,
						expr: &labeledExpr{
							pos:   position{line: 176, col: 17, offset: 5431},
							label: "doctypeI",
							expr: &choiceExpr{
								pos: position{line: 852, col: 12, offset: 26297},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 852, col: 12, offset: 26297},
										run: (*parser).callonscopeItem769,
										expr: &seqExpr{
											pos: position{line: 852, col: 12, offset: 26297},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 852, col: 12, offset: 26297},
													val:        "doctype",
													ignoreCase: false,
													want:       "\"doctype\"",
												},
												&choiceExpr{
													pos: position{line: 865, col: 18, offset: 26720},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 865, col: 18, offset: 26720},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 865, col: 18, offset: 26720},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3721, col: 12, offset: 127772},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					expr: &litMatcher{
																						pos:        position{line: 3721, col: 16, offset: 127776},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3721, col: 22, offset: 127782},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3720, col: 12, offset: 127758},
																			expr: &anyMatcher{
																				line: 3720, col: 13, offset: 127759,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 866, col: 5, offset: 26738},
															run: (*parser).callonscopeItem784,
															expr: &seqExpr{
																pos: position{line: 866, col: 5, offset: 26738},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 866, col: 5, offset: 26738},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 866, col: 9, offset: 26742},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3724, col: 8, offset: 127821},
																			run: (*parser).callonscopeItem788,
																			expr: &choiceExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3724, col: 9, offset: 127822},
																						expr: &anyMatcher{
																							line: 3724, col: 10, offset: 127823,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3724, col: 14, offset: 127827},
																						expr: &anyMatcher{
																							line: 3724, col: 15, offset: 127828,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 866, col: 23, offset: 26756},
																		expr: &charClassMatcher{
																			pos:        position{line: 3722, col: 12, offset: 127805},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 876, col: 9, offset: 27137},
															run: (*parser).callonscopeItem805,
															expr: &seqExpr{
																pos: position{line: 876, col: 9, offset: 27137},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 876, col: 9, offset: 27137},
																		expr: &litMatcher{
																			pos:        position{line: 876, col: 9, offset: 27137},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 876, col: 14, offset: 27142},
																		expr: &charClassMatcher{
																			pos:        position{line: 3722, col: 12, offset: 127805},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 854, col: 5, offset: 26374},
										run: (*parser).callonscopeItem820,
										expr: &seqExpr{
											pos: position{line: 854, col: 5, offset: 26374},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 854, col: 5, offset: 26374},
													val:        "!doctype",
													ignoreCase: false,
													want:       "\"!doctype\"",
												},
												&choiceExpr{
													pos: position{line: 865, col: 18, offset: 26720},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 865, col: 18, offset: 26720},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 865, col: 18, offset: 26720},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3721, col: 12, offset: 127772},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					expr: &litMatcher{
																						pos:        position{line: 3721, col: 16, offset: 127776},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3721, col: 22, offset: 127782},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3720, col: 12, offset: 127758},
																			expr: &anyMatcher{
																				line: 3720, col: 13, offset: 127759,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 866, col: 5, offset: 26738},
															run: (*parser).callonscopeItem835,
															expr: &seqExpr{
																pos: position{line: 866, col: 5, offset: 26738},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 866, col: 5, offset: 26738},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 866, col: 9, offset: 26742},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3724, col: 8, offset: 127821},
																			run: (*parser).callonscopeItem839,
																			expr: &choiceExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3724, col: 9, offset: 127822},
																						expr: &anyMatcher{
																							line: 3724, col: 10, offset: 127823,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3724, col: 14, offset: 127827},
																						expr: &anyMatcher{
																							line: 3724, col: 15, offset: 127828,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 866, col: 23, offset: 26756},
																		expr: &charClassMatcher{
																			pos:        position{line: 3722, col: 12, offset: 127805},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 876, col: 9, offset: 27137},
															run: (*parser).callonscopeItem856,
															expr: &seqExpr{
																pos: position{line: 876, col: 9, offset: 27137},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 876, col: 9, offset: 27137},
																		expr: &litMatcher{
																			pos:        position{line: 876, col: 9, offset: 27137},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 876, col: 14, offset: 27142},
																		expr: &charClassMatcher{
																			pos:        position{line: 3722, col: 12, offset: 127805},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 172, col: 5, offset: 5349},
						name: "DivShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 172, col: 20, offset: 5364},
						name: "Element",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 5404},
						name: "BadItem",
					},
				},
			},
		},
		{
			name: "Body",
			pos:  position{line: 198, col: 1, offset: 6259},
			expr: &actionExpr{
				pos: position{line: 198, col: 9, offset: 6267},
				run: (*parser).callonBody1,
				expr: &seqExpr{
					pos: position{line: 198, col: 9, offset: 6267},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4201, col: 11, offset: 148402},
							run: (*parser).callonBody3,
						},
						&labeledExpr{
							pos:   position{line: 198, col: 16, offset: 6274},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 23, offset: 6281},
								name: "Scope",
							},
						},
						&stateCodeExpr{
							pos: position{line: 4206, col: 11, offset: 148507},
							run: (*parser).callonBody6,
						},
					},
				},
			},
		},
		{
			name: "Beaitb",
			pos:  position{line: 202, col: 1, offset: 6322},
			expr: &actionExpr{
				pos: position{line: 202, col: 11, offset: 6332},
				run: (*parser).callonBeaitb1,
				expr: &seqExpr{
					pos: position{line: 202, col: 11, offset: 6332},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 202, col: 11, offset: 6332},
							expr: &actionExpr{
								pos: position{line: 203, col: 5, offset: 6338},
								run: (*parser).callonBeaitb4,
								expr: &seqExpr{
									pos: position{line: 203, col: 5, offset: 6338},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 203, col: 5, offset: 6338},
											expr: &charClassMatcher{
												pos:        position{line: 203, col: 5, offset: 6338},
												val:        "[^:!= \\r\\n]",
												chars:      []rune{':', '!', '=', ' ', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&labeledExpr{
											pos:   position{line: 203, col: 18, offset: 6351},
											label: "endPosI",
											expr: &actionExpr{
												pos: position{line: 3724, col: 8, offset: 127821},
												run: (*parser).callonBeaitb9,
												expr: &choiceExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															expr: &anyMatcher{
																line: 3724, col: 10, offset: 127823,
															},
														},
														&notExpr{
															pos: position{line: 3724, col: 14, offset: 127827},
															expr: &anyMatcher{
																line: 3724, col: 15, offset: 127828,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 4, offset: 6763},
							label: "scopeI",
							expr: &choiceExpr{
								pos: position{line: 215, col: 5, offset: 6776},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 215, col: 5, offset: 6776},
										run: (*parser).callonBeaitb17,
										expr: &labeledExpr{
											pos:   position{line: 215, col: 5, offset: 6776},
											label: "scopeItemI",
											expr: &choiceExpr{
												pos: position{line: 215, col: 17, offset: 6788},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 215, col: 17, offset: 6788},
														name: "BlockExpansion",
													},
													&ruleRefExpr{
														pos:  position{line: 215, col: 34, offset: 6805},
														name: "Assign",
													},
													&ruleRefExpr{
														pos:  position{line: 215, col: 43, offset: 6814},
														name: "InlineText",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 217, col: 9, offset: 6896},
										run: (*parser).callonBeaitb23,
										expr: &seqExpr{
											pos: position{line: 217, col: 9, offset: 6896},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3721, col: 12, offset: 127772},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	expr: &litMatcher{
																		pos:        position{line: 3721, col: 16, offset: 127776},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3721, col: 22, offset: 127782},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3720, col: 12, offset: 127758},
															expr: &anyMatcher{
																line: 3720, col: 13, offset: 127759,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 217, col: 13, offset: 6900},
													label: "bodyI",
													expr: &ruleRefExpr{
														pos:  position{line: 217, col: 19, offset: 6906},
														name: "Body",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 219, col: 9, offset: 6947},
										run: (*parser).callonBeaitb36,
										expr: &seqExpr{
											pos: position{line: 3721, col: 12, offset: 127772},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3721, col: 12, offset: 127772},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	expr: &litMatcher{
																		pos:        position{line: 3721, col: 16, offset: 127776},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3721, col: 22, offset: 127782},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3720, col: 12, offset: 127758},
															expr: &anyMatcher{
																line: 3720, col: 13, offset: 127759,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Beait",
			pos:  position{line: 226, col: 1, offset: 7025},
			expr: &actionExpr{
				pos: position{line: 226, col: 10, offset: 7034},
				run: (*parser).callonBeait1,
				expr: &seqExpr{
					pos: position{line: 226, col: 10, offset: 7034},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 226, col: 10, offset: 7034},
							expr: &actionExpr{
								pos: position{line: 227, col: 5, offset: 7040},
								run: (*parser).callonBeait4,
								expr: &seqExpr{
									pos: position{line: 227, col: 5, offset: 7040},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 227, col: 5, offset: 7040},
											expr: &charClassMatcher{
												pos:        position{line: 227, col: 5, offset: 7040},
												val:        "[^:= \\r\\n]",
												chars:      []rune{':', '=', ' ', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&labeledExpr{
											pos:   position{line: 227, col: 17, offset: 7052},
											label: "endPosI",
											expr: &actionExpr{
												pos: position{line: 3724, col: 8, offset: 127821},
												run: (*parser).callonBeait9,
												expr: &choiceExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															expr: &anyMatcher{
																line: 3724, col: 10, offset: 127823,
															},
														},
														&notExpr{
															pos: position{line: 3724, col: 14, offset: 127827},
															expr: &anyMatcher{
																line: 3724, col: 15, offset: 127828,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 4, offset: 7420},
							label: "scopeI",
							expr: &choiceExpr{
								pos: position{line: 238, col: 5, offset: 7433},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 238, col: 5, offset: 7433},
										run: (*parser).callonBeait17,
										expr: &labeledExpr{
											pos:   position{line: 238, col: 5, offset: 7433},
											label: "scopeItemI",
											expr: &choiceExpr{
												pos: position{line: 238, col: 17, offset: 7445},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 238, col: 17, offset: 7445},
														name: "BlockExpansion",
													},
													&ruleRefExpr{
														pos:  position{line: 238, col: 34, offset: 7462},
														name: "Assign",
													},
													&ruleRefExpr{
														pos:  position{line: 238, col: 43, offset: 7471},
														name: "InlineText",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 240, col: 9, offset: 7553},
										run: (*parser).callonBeait23,
										expr: &seqExpr{
											pos: position{line: 3721, col: 12, offset: 127772},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3721, col: 12, offset: 127772},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	expr: &litMatcher{
																		pos:        position{line: 3721, col: 16, offset: 127776},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3721, col: 22, offset: 127782},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3720, col: 12, offset: 127758},
															expr: &anyMatcher{
																line: 3720, col: 13, offset: 127759,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BadItem",
			pos:  position{line: 246, col: 1, offset: 7630},
			expr: &actionExpr{
				pos: position{line: 246, col: 12, offset: 7641},
				run: (*parser).callonBadItem1,
				expr: &seqExpr{
					pos: position{line: 246, col: 12, offset: 7641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 246, col: 12, offset: 7641},
							label: "lineI",
							expr: &oneOrMoreExpr{
								pos: position{line: 246, col: 18, offset: 7647},
								expr: &charClassMatcher{
									pos:        position{line: 3722, col: 12, offset: 127805},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3721, col: 12, offset: 127772},
							expr: &charClassMatcher{
								pos:        position{line: 3733, col: 36, offset: 128119},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3721, col: 16, offset: 127776},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											expr: &litMatcher{
												pos:        position{line: 3721, col: 16, offset: 127776},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3721, col: 22, offset: 127782},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3720, col: 12, offset: 127758},
									expr: &anyMatcher{
										line: 3720, col: 13, offset: 127759,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 31, offset: 7660},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 246, col: 37, offset: 7666},
								expr: &ruleRefExpr{
									pos:  position{line: 246, col: 37, offset: 7666},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 281, col: 1, offset: 9107},
			expr: &actionExpr{
				pos: position{line: 281, col: 10, offset: 9116},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 281, col: 10, offset: 9116},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 281, col: 10, offset: 9116},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 302, col: 19, offset: 9712},
								run: (*parser).callonBlock4,
								expr: &seqExpr{
									pos: position{line: 302, col: 19, offset: 9712},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 302, col: 19, offset: 9712},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 302, col: 27, offset: 9720},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 327, col: 14, offset: 10293},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 327, col: 14, offset: 10293},
														run: (*parser).callonBlock9,
														expr: &seqExpr{
															pos: position{line: 327, col: 14, offset: 10293},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 327, col: 14, offset: 10293},
																	expr: &litMatcher{
																		pos:        position{line: 327, col: 14, offset: 10293},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 327, col: 19, offset: 10298},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21845},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21845},
																				run: (*parser).callonBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21845},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21290},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21290},
																								run: (*parser).callonBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21290},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2354, col: 17, offset: 80792},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2337, col: 20, offset: 80547},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2354, col: 26, offset: 80801},
																												expr: &charClassMatcher{
																													pos:        position{line: 2337, col: 20, offset: 80547},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21384},
																								run: (*parser).callonBlock24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21384},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21384},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21392},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21392},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21392},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21397},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21398},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21398},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21398},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21407},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21417},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21428},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3724, col: 8, offset: 127821},
																												run: (*parser).callonBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3724, col: 9, offset: 127822},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															expr: &anyMatcher{
																																line: 3724, col: 10, offset: 127823,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3724, col: 14, offset: 127827},
																															expr: &anyMatcher{
																																line: 3724, col: 15, offset: 127828,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21887},
																				run: (*parser).callonBlock43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21887},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21887},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21896},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21898},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3721, col: 12, offset: 127772},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3721, col: 12, offset: 127772},
																												expr: &charClassMatcher{
																													pos:        position{line: 3733, col: 36, offset: 128119},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3721, col: 16, offset: 127776},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3721, col: 16, offset: 127776},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																expr: &litMatcher{
																																	pos:        position{line: 3721, col: 16, offset: 127776},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3721, col: 22, offset: 127782},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3720, col: 12, offset: 127758},
																														expr: &anyMatcher{
																															line: 3720, col: 13, offset: 127759,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21904},
																										val:        "[:!=(]",
																										chars:      []rune{':', '!', '=', '('},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonBlock65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=(]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 28, offset: 22253},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 329, col: 5, offset: 10344},
														run: (*parser).callonBlock77,
														expr: &andExpr{
															pos: position{line: 329, col: 5, offset: 10344},
															expr: &seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 32, offset: 9138},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 38, offset: 9144},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineBlock",
			pos:  position{line: 286, col: 1, offset: 9246},
			expr: &actionExpr{
				pos: position{line: 286, col: 16, offset: 9261},
				run: (*parser).callonInlineBlock1,
				expr: &seqExpr{
					pos: position{line: 286, col: 16, offset: 9261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 286, col: 16, offset: 9261},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 302, col: 19, offset: 9712},
								run: (*parser).callonInlineBlock4,
								expr: &seqExpr{
									pos: position{line: 302, col: 19, offset: 9712},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 302, col: 19, offset: 9712},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 302, col: 27, offset: 9720},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 327, col: 14, offset: 10293},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 327, col: 14, offset: 10293},
														run: (*parser).callonInlineBlock9,
														expr: &seqExpr{
															pos: position{line: 327, col: 14, offset: 10293},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 327, col: 14, offset: 10293},
																	expr: &litMatcher{
																		pos:        position{line: 327, col: 14, offset: 10293},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 327, col: 19, offset: 10298},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21845},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21845},
																				run: (*parser).callonInlineBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21845},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21290},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21290},
																								run: (*parser).callonInlineBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21290},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2354, col: 17, offset: 80792},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2337, col: 20, offset: 80547},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2354, col: 26, offset: 80801},
																												expr: &charClassMatcher{
																													pos:        position{line: 2337, col: 20, offset: 80547},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21384},
																								run: (*parser).callonInlineBlock24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21384},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21384},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21392},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21392},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21392},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21397},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21398},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21398},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21398},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21407},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21417},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21428},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3724, col: 8, offset: 127821},
																												run: (*parser).callonInlineBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3724, col: 9, offset: 127822},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															expr: &anyMatcher{
																																line: 3724, col: 10, offset: 127823,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3724, col: 14, offset: 127827},
																															expr: &anyMatcher{
																																line: 3724, col: 15, offset: 127828,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21887},
																				run: (*parser).callonInlineBlock43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21887},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21887},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonInlineBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21896},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21898},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3721, col: 12, offset: 127772},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3721, col: 12, offset: 127772},
																												expr: &charClassMatcher{
																													pos:        position{line: 3733, col: 36, offset: 128119},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3721, col: 16, offset: 127776},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3721, col: 16, offset: 127776},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																expr: &litMatcher{
																																	pos:        position{line: 3721, col: 16, offset: 127776},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3721, col: 22, offset: 127782},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3720, col: 12, offset: 127758},
																														expr: &anyMatcher{
																															line: 3720, col: 13, offset: 127759,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21904},
																										val:        "[:!=(]",
																										chars:      []rune{':', '!', '=', '('},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonInlineBlock65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=(]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 28, offset: 22253},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonInlineBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 329, col: 5, offset: 10344},
														run: (*parser).callonInlineBlock77,
														expr: &andExpr{
															pos: position{line: 329, col: 5, offset: 10344},
															expr: &seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 38, offset: 9283},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 45, offset: 9290},
								name: "Beait",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3721, col: 12, offset: 127772},
							expr: &charClassMatcher{
								pos:        position{line: 3733, col: 36, offset: 128119},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3721, col: 16, offset: 127776},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											expr: &litMatcher{
												pos:        position{line: 3721, col: 16, offset: 127776},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3721, col: 22, offset: 127782},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3720, col: 12, offset: 127758},
									expr: &anyMatcher{
										line: 3720, col: 13, offset: 127759,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Prepend",
			pos:  position{line: 291, col: 1, offset: 9409},
			expr: &actionExpr{
				pos: position{line: 291, col: 12, offset: 9420},
				run: (*parser).callonPrepend1,
				expr: &seqExpr{
					pos: position{line: 291, col: 12, offset: 9420},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 291, col: 12, offset: 9420},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 310, col: 21, offset: 9906},
								run: (*parser).callonPrepend4,
								expr: &seqExpr{
									pos: position{line: 310, col: 21, offset: 9906},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 310, col: 21, offset: 9906},
											val:        "prepend",
											ignoreCase: false,
											want:       "\"prepend\"",
										},
										&labeledExpr{
											pos:   position{line: 310, col: 31, offset: 9916},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 327, col: 14, offset: 10293},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 327, col: 14, offset: 10293},
														run: (*parser).callonPrepend9,
														expr: &seqExpr{
															pos: position{line: 327, col: 14, offset: 10293},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 327, col: 14, offset: 10293},
																	expr: &litMatcher{
																		pos:        position{line: 327, col: 14, offset: 10293},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 327, col: 19, offset: 10298},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21845},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21845},
																				run: (*parser).callonPrepend15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21845},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21290},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21290},
																								run: (*parser).callonPrepend18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21290},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2354, col: 17, offset: 80792},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2337, col: 20, offset: 80547},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2354, col: 26, offset: 80801},
																												expr: &charClassMatcher{
																													pos:        position{line: 2337, col: 20, offset: 80547},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21384},
																								run: (*parser).callonPrepend24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21384},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21384},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21392},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21392},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21392},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21397},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21398},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21398},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21398},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21407},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21417},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21428},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3724, col: 8, offset: 127821},
																												run: (*parser).callonPrepend37,
																												expr: &choiceExpr{
																													pos: position{line: 3724, col: 9, offset: 127822},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															expr: &anyMatcher{
																																line: 3724, col: 10, offset: 127823,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3724, col: 14, offset: 127827},
																															expr: &anyMatcher{
																																line: 3724, col: 15, offset: 127828,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21887},
																				run: (*parser).callonPrepend43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21887},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21887},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonPrepend46,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21896},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21898},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3721, col: 12, offset: 127772},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3721, col: 12, offset: 127772},
																												expr: &charClassMatcher{
																													pos:        position{line: 3733, col: 36, offset: 128119},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3721, col: 16, offset: 127776},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3721, col: 16, offset: 127776},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																expr: &litMatcher{
																																	pos:        position{line: 3721, col: 16, offset: 127776},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3721, col: 22, offset: 127782},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3720, col: 12, offset: 127758},
																														expr: &anyMatcher{
																															line: 3720, col: 13, offset: 127759,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21904},
																										val:        "[:!=(]",
																										chars:      []rune{':', '!', '=', '('},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonPrepend65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=(]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 28, offset: 22253},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonPrepend71,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 329, col: 5, offset: 10344},
														run: (*parser).callonPrepend77,
														expr: &andExpr{
															pos: position{line: 329, col: 5, offset: 10344},
															expr: &seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 36, offset: 9444},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 42, offset: 9450},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "Append",
			pos:  position{line: 296, col: 1, offset: 9552},
			expr: &actionExpr{
				pos: position{line: 296, col: 11, offset: 9562},
				run: (*parser).callonAppend1,
				expr: &seqExpr{
					pos: position{line: 296, col: 11, offset: 9562},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 296, col: 11, offset: 9562},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 318, col: 20, offset: 10103},
								run: (*parser).callonAppend4,
								expr: &seqExpr{
									pos: position{line: 318, col: 20, offset: 10103},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 318, col: 20, offset: 10103},
											val:        "append",
											ignoreCase: false,
											want:       "\"append\"",
										},
										&labeledExpr{
											pos:   position{line: 318, col: 29, offset: 10112},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 327, col: 14, offset: 10293},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 327, col: 14, offset: 10293},
														run: (*parser).callonAppend9,
														expr: &seqExpr{
															pos: position{line: 327, col: 14, offset: 10293},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 327, col: 14, offset: 10293},
																	expr: &litMatcher{
																		pos:        position{line: 327, col: 14, offset: 10293},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 327, col: 19, offset: 10298},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21845},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21845},
																				run: (*parser).callonAppend15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21845},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21290},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21290},
																								run: (*parser).callonAppend18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21290},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2354, col: 17, offset: 80792},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2337, col: 20, offset: 80547},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2354, col: 26, offset: 80801},
																												expr: &charClassMatcher{
																													pos:        position{line: 2337, col: 20, offset: 80547},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21384},
																								run: (*parser).callonAppend24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21384},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21384},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21392},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21392},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21392},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21397},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21398},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21398},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21398},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21407},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21417},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21428},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3724, col: 8, offset: 127821},
																												run: (*parser).callonAppend37,
																												expr: &choiceExpr{
																													pos: position{line: 3724, col: 9, offset: 127822},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3724, col: 9, offset: 127822},
																															expr: &anyMatcher{
																																line: 3724, col: 10, offset: 127823,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3724, col: 14, offset: 127827},
																															expr: &anyMatcher{
																																line: 3724, col: 15, offset: 127828,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21887},
																				run: (*parser).callonAppend43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21887},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21887},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonAppend46,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21896},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21898},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3721, col: 12, offset: 127772},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3721, col: 12, offset: 127772},
																												expr: &charClassMatcher{
																													pos:        position{line: 3733, col: 36, offset: 128119},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3721, col: 16, offset: 127776},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3721, col: 16, offset: 127776},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3721, col: 16, offset: 127776},
																																expr: &litMatcher{
																																	pos:        position{line: 3721, col: 16, offset: 127776},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3721, col: 22, offset: 127782},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3720, col: 12, offset: 127758},
																														expr: &anyMatcher{
																															line: 3720, col: 13, offset: 127759,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21904},
																										val:        "[:!=(]",
																										chars:      []rune{':', '!', '=', '('},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonAppend65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=(]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 28, offset: 22253},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonAppend71,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 329, col: 5, offset: 10344},
														run: (*parser).callonAppend77,
														expr: &andExpr{
															pos: position{line: 329, col: 5, offset: 10344},
															expr: &seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 296, col: 34, offset: 9585},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 40, offset: 9591},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockExpansion",
			pos:  position{line: 344, col: 1, offset: 10791},
			expr: &choiceExpr{
				pos: position{line: 344, col: 19, offset: 10809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 344, col: 19, offset: 10809},
						run: (*parser).callonBlockExpansion2,
						expr: &seqExpr{
							pos: position{line: 344, col: 19, offset: 10809},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 344, col: 19, offset: 10809},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 23, offset: 10813},
									label: "abI",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 27, offset: 10817},
										name: "InlineArrowBlock",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 349, col: 5, offset: 10946},
						run: (*parser).callonBlockExpansion7,
						expr: &seqExpr{
							pos: position{line: 349, col: 5, offset: 10946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 349, col: 5, offset: 10946},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 349, col: 9, offset: 10950},
									expr: &litMatcher{
										pos:        position{line: 349, col: 9, offset: 10950},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 349, col: 14, offset: 10955},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 349, col: 17, offset: 10958},
										name: "blockExpansionItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 354, col: 5, offset: 11087},
						run: (*parser).callonBlockExpansion14,
						expr: &seqExpr{
							pos: position{line: 354, col: 5, offset: 11087},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 354, col: 5, offset: 11087},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 11460},
						run: (*parser).callonBlockExpansion26,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 11460},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 365, col: 5, offset: 11460},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 365, col: 9, offset: 11464},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonBlockExpansion30,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 18, offset: 11473},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 21, offset: 11476},
										name: "blockExpansionItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "blockExpansionItem",
			pos:  position{line: 392, col: 1, offset: 12156},
			expr: &choiceExpr{
				pos: position{line: 392, col: 23, offset: 12178},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 392, col: 23, offset: 12178},
						name: "InlineBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 37, offset: 12192},
						name: "InlineElement",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 53, offset: 12208},
						name: "InlineDivShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 74, offset: 12229},
						name: "InlineMixinCall",
					},
					&actionExpr{
						pos: position{line: 394, col: 22, offset: 12287},
						run: (*parser).callonblockExpansionItem6,
						expr: &seqExpr{
							pos: position{line: 394, col: 22, offset: 12287},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 394, col: 22, offset: 12287},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 394, col: 28, offset: 12293},
										expr: &charClassMatcher{
											pos:        position{line: 3722, col: 12, offset: 127805},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Codes",
			pos:  position{line: 416, col: 1, offset: 13005},
			expr: &actionExpr{
				pos: position{line: 416, col: 10, offset: 13014},
				run: (*parser).callonCodes1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 10, offset: 13014},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 416, col: 17, offset: 13021},
						expr: &seqExpr{
							pos: position{line: 416, col: 18, offset: 13022},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 416, col: 18, offset: 13022},
									expr: &oneOrMoreExpr{
										pos: position{line: 3735, col: 36, offset: 128206},
										expr: &seqExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													expr: &litMatcher{
														pos:        position{line: 3734, col: 36, offset: 128160},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3734, col: 42, offset: 128166},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 27, offset: 13031},
									name: "Code",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 420, col: 1, offset: 13102},
			expr: &choiceExpr{
				pos: position{line: 420, col: 9, offset: 13110},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 420, col: 9, offset: 13110},
						run: (*parser).callonCode2,
						expr: &seqExpr{
							pos: position{line: 420, col: 9, offset: 13110},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 420, col: 9, offset: 13110},
									val:        "- ",
									ignoreCase: false,
									want:       "\"- \"",
								},
								&labeledExpr{
									pos:   position{line: 420, col: 14, offset: 13115},
									label: "firstLineI",
									expr: &actionExpr{
										pos: position{line: 446, col: 13, offset: 13945},
										run: (*parser).callonCode6,
										expr: &seqExpr{
											pos: position{line: 446, col: 13, offset: 13945},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 446, col: 13, offset: 13945},
													label: "code",
													expr: &oneOrMoreExpr{
														pos: position{line: 446, col: 18, offset: 13950},
														expr: &charClassMatcher{
															pos:        position{line: 3722, col: 12, offset: 127805},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 3721, col: 12, offset: 127772},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	expr: &litMatcher{
																		pos:        position{line: 3721, col: 16, offset: 127776},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3721, col: 22, offset: 127782},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3720, col: 12, offset: 127758},
															expr: &anyMatcher{
																line: 3720, col: 13, offset: 127759,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 420, col: 34, offset: 13135},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 420, col: 51, offset: 13152},
										expr: &seqExpr{
											pos: position{line: 420, col: 52, offset: 13153},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 420, col: 52, offset: 13153},
													expr: &oneOrMoreExpr{
														pos: position{line: 3735, col: 36, offset: 128206},
														expr: &seqExpr{
															pos: position{line: 3735, col: 37, offset: 128207},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3735, col: 37, offset: 128207},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 420, col: 61, offset: 13162},
													name: "INDENTATION2",
												},
												&actionExpr{
													pos: position{line: 446, col: 13, offset: 13945},
													run: (*parser).callonCode32,
													expr: &seqExpr{
														pos: position{line: 446, col: 13, offset: 13945},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 446, col: 13, offset: 13945},
																label: "code",
																expr: &oneOrMoreExpr{
																	pos: position{line: 446, col: 18, offset: 13950},
																	expr: &charClassMatcher{
																		pos:        position{line: 3722, col: 12, offset: 127805},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																expr: &charClassMatcher{
																	pos:        position{line: 3733, col: 36, offset: 128119},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				expr: &litMatcher{
																					pos:        position{line: 3721, col: 16, offset: 127776},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3721, col: 22, offset: 127782},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3720, col: 12, offset: 127758},
																		expr: &anyMatcher{
																			line: 3720, col: 13, offset: 127759,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 433, col: 5, offset: 13539},
						run: (*parser).callonCode46,
						expr: &seqExpr{
							pos: position{line: 433, col: 5, offset: 13539},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 433, col: 5, offset: 13539},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&labeledExpr{
									pos:   position{line: 433, col: 9, offset: 13543},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonCode50,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "condition",
			pos:  position{line: 449, col: 1, offset: 14035},
			expr: &choiceExpr{
				pos: position{line: 449, col: 14, offset: 14048},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 449, col: 14, offset: 14048},
						run: (*parser).calloncondition2,
						expr: &seqExpr{
							pos: position{line: 449, col: 14, offset: 14048},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 449, col: 14, offset: 14048},
									expr: &litMatcher{
										pos:        position{line: 449, col: 14, offset: 14048},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 449, col: 19, offset: 14053},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 25, offset: 14059},
										name: "IfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 451, col: 5, offset: 14100},
						run: (*parser).calloncondition8,
						expr: &seqExpr{
							pos: position{line: 451, col: 5, offset: 14100},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 451, col: 5, offset: 14100},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).calloncondition11,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 451, col: 14, offset: 14109},
									expr: &seqExpr{
										pos: position{line: 3721, col: 12, offset: 127772},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												expr: &charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3721, col: 16, offset: 127776},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																expr: &litMatcher{
																	pos:        position{line: 3721, col: 16, offset: 127776},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3721, col: 22, offset: 127782},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3720, col: 12, offset: 127758},
														expr: &anyMatcher{
															line: 3720, col: 13, offset: 127759,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 14392},
						run: (*parser).calloncondition28,
						expr: &labeledExpr{
							pos:   position{line: 460, col: 5, offset: 14392},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).calloncondition30,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "then",
			pos:  position{line: 470, col: 1, offset: 14650},
			expr: &choiceExpr{
				pos: position{line: 470, col: 9, offset: 14658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 470, col: 9, offset: 14658},
						run: (*parser).callonthen2,
						expr: &seqExpr{
							pos: position{line: 470, col: 9, offset: 14658},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 470, col: 13, offset: 14662},
									label: "scopeI",
									expr: &ruleRefExpr{
										pos:  position{line: 470, col: 20, offset: 14669},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 14703},
						run: (*parser).callonthen15,
						expr: &seqExpr{
							pos: position{line: 3721, col: 12, offset: 127772},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 480, col: 5, offset: 14955},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 481, col: 6, offset: 14962},
								run: (*parser).callonthen27,
								expr: &oneOrMoreExpr{
									pos: position{line: 481, col: 6, offset: 14962},
									expr: &charClassMatcher{
										pos:        position{line: 481, col: 6, offset: 14962},
										val:        "[^:\\r\\n]",
										chars:      []rune{':', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 481, col: 40, offset: 14996},
								run: (*parser).callonthen30,
							},
							&ruleRefExpr{
								pos:  position{line: 490, col: 3, offset: 15271},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "If",
			pos:  position{line: 499, col: 1, offset: 15472},
			expr: &actionExpr{
				pos: position{line: 499, col: 7, offset: 15478},
				run: (*parser).callonIf1,
				expr: &seqExpr{
					pos: position{line: 499, col: 7, offset: 15478},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 499, col: 7, offset: 15478},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&notExpr{
							pos: position{line: 499, col: 12, offset: 15483},
							expr: &litMatcher{
								pos:        position{line: 499, col: 13, offset: 15484},
								val:        " block",
								ignoreCase: false,
								want:       "\" block\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 22, offset: 15493},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 28, offset: 15499},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 38, offset: 15509},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 44, offset: 15515},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 49, offset: 15520},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 499, col: 58, offset: 15529},
								expr: &ruleRefExpr{
									pos:  position{line: 499, col: 58, offset: 15529},
									name: "ElseIf",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 66, offset: 15537},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 499, col: 72, offset: 15543},
								expr: &ruleRefExpr{
									pos:  position{line: 499, col: 72, offset: 15543},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIf",
			pos:  position{line: 509, col: 1, offset: 15783},
			expr: &actionExpr{
				pos: position{line: 509, col: 11, offset: 15793},
				run: (*parser).callonElseIf1,
				expr: &seqExpr{
					pos: position{line: 509, col: 11, offset: 15793},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 509, col: 11, offset: 15793},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3822, col: 17, offset: 132013},
							run: (*parser).callonElseIf11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3822, col: 17, offset: 132013},
								expr: &charClassMatcher{
									pos:        position{line: 3733, col: 36, offset: 128119},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3822, col: 41, offset: 132037},
							run: (*parser).callonElseIf14,
						},
						&choiceExpr{
							pos: position{line: 3874, col: 5, offset: 133947},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3874, col: 5, offset: 133947},
									run: (*parser).callonElseIf16,
								},
								&seqExpr{
									pos: position{line: 3876, col: 9, offset: 134030},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3876, col: 9, offset: 134030},
											run: (*parser).callonElseIf18,
										},
										&stateCodeExpr{
											pos: position{line: 3878, col: 7, offset: 134134},
											run: (*parser).callonElseIf19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3885, col: 9, offset: 134470},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3885, col: 9, offset: 134470},
											run: (*parser).callonElseIf21,
										},
										&choiceExpr{
											pos: position{line: 3938, col: 9, offset: 136805},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3938, col: 9, offset: 136805},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3938, col: 9, offset: 136805},
															run: (*parser).callonElseIf24,
														},
														&andCodeExpr{
															pos: position{line: 3942, col: 11, offset: 137055},
															run: (*parser).callonElseIf25,
														},
														&stateCodeExpr{
															pos: position{line: 4008, col: 11, offset: 140261},
															run: (*parser).callonElseIf26,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4016, col: 13, offset: 140614},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4016, col: 13, offset: 140614},
															run: (*parser).callonElseIf28,
														},
														&andCodeExpr{
															pos: position{line: 4020, col: 11, offset: 140869},
															run: (*parser).callonElseIf29,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 32, offset: 15814},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).callonElseIf31,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 509, col: 41, offset: 15823},
							val:        "else if",
							ignoreCase: false,
							want:       "\"else if\"",
						},
						&labeledExpr{
							pos:   position{line: 509, col: 51, offset: 15833},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 57, offset: 15839},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 67, offset: 15849},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 73, offset: 15855},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Else",
			pos:  position{line: 517, col: 1, offset: 16018},
			expr: &actionExpr{
				pos: position{line: 517, col: 9, offset: 16026},
				run: (*parser).callonElse1,
				expr: &seqExpr{
					pos: position{line: 517, col: 9, offset: 16026},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 517, col: 9, offset: 16026},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3822, col: 17, offset: 132013},
							run: (*parser).callonElse11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3822, col: 17, offset: 132013},
								expr: &charClassMatcher{
									pos:        position{line: 3733, col: 36, offset: 128119},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3822, col: 41, offset: 132037},
							run: (*parser).callonElse14,
						},
						&choiceExpr{
							pos: position{line: 3874, col: 5, offset: 133947},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3874, col: 5, offset: 133947},
									run: (*parser).callonElse16,
								},
								&seqExpr{
									pos: position{line: 3876, col: 9, offset: 134030},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3876, col: 9, offset: 134030},
											run: (*parser).callonElse18,
										},
										&stateCodeExpr{
											pos: position{line: 3878, col: 7, offset: 134134},
											run: (*parser).callonElse19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3885, col: 9, offset: 134470},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3885, col: 9, offset: 134470},
											run: (*parser).callonElse21,
										},
										&choiceExpr{
											pos: position{line: 3938, col: 9, offset: 136805},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3938, col: 9, offset: 136805},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3938, col: 9, offset: 136805},
															run: (*parser).callonElse24,
														},
														&andCodeExpr{
															pos: position{line: 3942, col: 11, offset: 137055},
															run: (*parser).callonElse25,
														},
														&stateCodeExpr{
															pos: position{line: 4008, col: 11, offset: 140261},
															run: (*parser).callonElse26,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4016, col: 13, offset: 140614},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4016, col: 13, offset: 140614},
															run: (*parser).callonElse28,
														},
														&andCodeExpr{
															pos: position{line: 4020, col: 11, offset: 140869},
															run: (*parser).callonElse29,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 517, col: 30, offset: 16047},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 37, offset: 16054},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 43, offset: 16060},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "IfBlock",
			pos:  position{line: 528, col: 1, offset: 16182},
			expr: &actionExpr{
				pos: position{line: 528, col: 12, offset: 16193},
				run: (*parser).callonIfBlock1,
				expr: &seqExpr{
					pos: position{line: 528, col: 12, offset: 16193},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 528, col: 12, offset: 16193},
							val:        "if block",
							ignoreCase: false,
							want:       "\"if block\"",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 23, offset: 16204},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 327, col: 14, offset: 10293},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 327, col: 14, offset: 10293},
										run: (*parser).callonIfBlock6,
										expr: &seqExpr{
											pos: position{line: 327, col: 14, offset: 10293},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 327, col: 14, offset: 10293},
													expr: &litMatcher{
														pos:        position{line: 327, col: 14, offset: 10293},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 327, col: 19, offset: 10298},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 711, col: 14, offset: 21845},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 711, col: 14, offset: 21845},
																run: (*parser).callonIfBlock12,
																expr: &labeledExpr{
																	pos:   position{line: 711, col: 14, offset: 21845},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 697, col: 10, offset: 21290},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 697, col: 10, offset: 21290},
																				run: (*parser).callonIfBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 697, col: 10, offset: 21290},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2354, col: 17, offset: 80792},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2337, col: 20, offset: 80547},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2354, col: 26, offset: 80801},
																								expr: &charClassMatcher{
																									pos:        position{line: 2337, col: 20, offset: 80547},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 699, col: 5, offset: 21384},
																				run: (*parser).callonIfBlock21,
																				expr: &seqExpr{
																					pos: position{line: 699, col: 5, offset: 21384},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 699, col: 5, offset: 21384},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 699, col: 13, offset: 21392},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 699, col: 13, offset: 21392},
																										expr: &litMatcher{
																											pos:        position{line: 699, col: 13, offset: 21392},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 699, col: 18, offset: 21397},
																										expr: &choiceExpr{
																											pos: position{line: 699, col: 19, offset: 21398},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 699, col: 19, offset: 21398},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 699, col: 19, offset: 21398},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 699, col: 28, offset: 21407},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 699, col: 38, offset: 21417},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 699, col: 49, offset: 21428},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonIfBlock34,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 713, col: 5, offset: 21887},
																run: (*parser).callonIfBlock40,
																expr: &seqExpr{
																	pos: position{line: 713, col: 5, offset: 21887},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 713, col: 5, offset: 21887},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonIfBlock43,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 713, col: 14, offset: 21896},
																			expr: &choiceExpr{
																				pos: position{line: 713, col: 16, offset: 21898},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3721, col: 12, offset: 127772},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3721, col: 12, offset: 127772},
																								expr: &charClassMatcher{
																									pos:        position{line: 3733, col: 36, offset: 128119},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3721, col: 16, offset: 127776},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3721, col: 16, offset: 127776},
																												expr: &litMatcher{
																													pos:        position{line: 3721, col: 16, offset: 127776},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3721, col: 22, offset: 127782},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3720, col: 12, offset: 127758},
																										expr: &anyMatcher{
																											line: 3720, col: 13, offset: 127759,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 713, col: 22, offset: 21904},
																						val:        "[:!=(]",
																						chars:      []rune{':', '!', '=', '('},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 724, col: 5, offset: 22230},
																run: (*parser).callonIfBlock62,
																expr: &seqExpr{
																	pos: position{line: 724, col: 5, offset: 22230},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 724, col: 5, offset: 22230},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 724, col: 12, offset: 22237},
																				expr: &charClassMatcher{
																					pos:        position{line: 724, col: 12, offset: 22237},
																					val:        "[^ \\t\\r\\n:!=(]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 724, col: 28, offset: 22253},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonIfBlock68,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 329, col: 5, offset: 10344},
										run: (*parser).callonIfBlock74,
										expr: &andExpr{
											pos: position{line: 329, col: 5, offset: 10344},
											expr: &seqExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 528, col: 39, offset: 16220},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 45, offset: 16226},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 528, col: 50, offset: 16231},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 528, col: 59, offset: 16240},
								expr: &ruleRefExpr{
									pos:  position{line: 528, col: 59, offset: 16240},
									name: "ElseIfBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 528, col: 72, offset: 16253},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 528, col: 78, offset: 16259},
								expr: &ruleRefExpr{
									pos:  position{line: 528, col: 78, offset: 16259},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIfBlock",
			pos:  position{line: 538, col: 1, offset: 16499},
			expr: &actionExpr{
				pos: position{line: 538, col: 16, offset: 16514},
				run: (*parser).callonElseIfBlock1,
				expr: &seqExpr{
					pos: position{line: 538, col: 16, offset: 16514},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 538, col: 16, offset: 16514},
							expr: &oneOrMoreExpr{
								pos: position{line: 3735, col: 36, offset: 128206},
								expr: &seqExpr{
									pos: position{line: 3735, col: 37, offset: 128207},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3822, col: 17, offset: 132013},
							run: (*parser).callonElseIfBlock11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3822, col: 17, offset: 132013},
								expr: &charClassMatcher{
									pos:        position{line: 3733, col: 36, offset: 128119},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3822, col: 41, offset: 132037},
							run: (*parser).callonElseIfBlock14,
						},
						&choiceExpr{
							pos: position{line: 3874, col: 5, offset: 133947},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3874, col: 5, offset: 133947},
									run: (*parser).callonElseIfBlock16,
								},
								&seqExpr{
									pos: position{line: 3876, col: 9, offset: 134030},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3876, col: 9, offset: 134030},
											run: (*parser).callonElseIfBlock18,
										},
										&stateCodeExpr{
											pos: position{line: 3878, col: 7, offset: 134134},
											run: (*parser).callonElseIfBlock19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3885, col: 9, offset: 134470},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3885, col: 9, offset: 134470},
											run: (*parser).callonElseIfBlock21,
										},
										&choiceExpr{
											pos: position{line: 3938, col: 9, offset: 136805},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3938, col: 9, offset: 136805},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3938, col: 9, offset: 136805},
															run: (*parser).callonElseIfBlock24,
														},
														&andCodeExpr{
															pos: position{line: 3942, col: 11, offset: 137055},
															run: (*parser).callonElseIfBlock25,
														},
														&stateCodeExpr{
															pos: position{line: 4008, col: 11, offset: 140261},
															run: (*parser).callonElseIfBlock26,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4016, col: 13, offset: 140614},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4016, col: 13, offset: 140614},
															run: (*parser).callonElseIfBlock28,
														},
														&andCodeExpr{
															pos: position{line: 4020, col: 11, offset: 140869},
															run: (*parser).callonElseIfBlock29,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 37, offset: 16535},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).callonElseIfBlock31,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 538, col: 46, offset: 16544},
							val:        "else if block",
							ignoreCase: false,
							want:       "\"else if block\"",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 62, offset: 16560},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 327, col: 14, offset: 10293},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 327, col: 14, offset: 10293},
										run: (*parser).callonElseIfBlock40,
										expr: &seqExpr{
											pos: position{line: 327, col: 14, offset: 10293},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 327, col: 14, offset: 10293},
													expr: &litMatcher{
														pos:        position{line: 327, col: 14, offset: 10293},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 327, col: 19, offset: 10298},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 711, col: 14, offset: 21845},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 711, col: 14, offset: 21845},
																run: (*parser).callonElseIfBlock46,
																expr: &labeledExpr{
																	pos:   position{line: 711, col: 14, offset: 21845},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 697, col: 10, offset: 21290},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 697, col: 10, offset: 21290},
																				run: (*parser).callonElseIfBlock49,
																				expr: &labeledExpr{
																					pos:   position{line: 697, col: 10, offset: 21290},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2354, col: 17, offset: 80792},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2337, col: 20, offset: 80547},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2354, col: 26, offset: 80801},
																								expr: &charClassMatcher{
																									pos:        position{line: 2337, col: 20, offset: 80547},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 699, col: 5, offset: 21384},
																				run: (*parser).callonElseIfBlock55,
																				expr: &seqExpr{
																					pos: position{line: 699, col: 5, offset: 21384},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 699, col: 5, offset: 21384},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 699, col: 13, offset: 21392},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 699, col: 13, offset: 21392},
																										expr: &litMatcher{
																											pos:        position{line: 699, col: 13, offset: 21392},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 699, col: 18, offset: 21397},
																										expr: &choiceExpr{
																											pos: position{line: 699, col: 19, offset: 21398},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 699, col: 19, offset: 21398},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 699, col: 19, offset: 21398},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 699, col: 28, offset: 21407},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 699, col: 38, offset: 21417},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 699, col: 49, offset: 21428},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3724, col: 8, offset: 127821},
																								run: (*parser).callonElseIfBlock68,
																								expr: &choiceExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3724, col: 9, offset: 127822},
																											expr: &anyMatcher{
																												line: 3724, col: 10, offset: 127823,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3724, col: 14, offset: 127827},
																											expr: &anyMatcher{
																												line: 3724, col: 15, offset: 127828,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 713, col: 5, offset: 21887},
																run: (*parser).callonElseIfBlock74,
																expr: &seqExpr{
																	pos: position{line: 713, col: 5, offset: 21887},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 713, col: 5, offset: 21887},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonElseIfBlock77,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 713, col: 14, offset: 21896},
																			expr: &choiceExpr{
																				pos: position{line: 713, col: 16, offset: 21898},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3721, col: 12, offset: 127772},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3721, col: 12, offset: 127772},
																								expr: &charClassMatcher{
																									pos:        position{line: 3733, col: 36, offset: 128119},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3721, col: 16, offset: 127776},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3721, col: 16, offset: 127776},
																												expr: &litMatcher{
																													pos:        position{line: 3721, col: 16, offset: 127776},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3721, col: 22, offset: 127782},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3720, col: 12, offset: 127758},
																										expr: &anyMatcher{
																											line: 3720, col: 13, offset: 127759,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 713, col: 22, offset: 21904},
																						val:        "[:!=(]",
																						chars:      []rune{':', '!', '=', '('},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 724, col: 5, offset: 22230},
																run: (*parser).callonElseIfBlock96,
																expr: &seqExpr{
																	pos: position{line: 724, col: 5, offset: 22230},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 724, col: 5, offset: 22230},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 724, col: 12, offset: 22237},
																				expr: &charClassMatcher{
																					pos:        position{line: 724, col: 12, offset: 22237},
																					val:        "[^ \\t\\r\\n:!=(]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 724, col: 28, offset: 22253},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonElseIfBlock102,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 329, col: 5, offset: 10344},
										run: (*parser).callonElseIfBlock108,
										expr: &andExpr{
											pos: position{line: 329, col: 5, offset: 10344},
											expr: &seqExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 78, offset: 16576},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 84, offset: 16582},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 557, col: 1, offset: 17071},
			expr: &actionExpr{
				pos: position{line: 557, col: 11, offset: 17081},
				run: (*parser).callonSwitch1,
				expr: &seqExpr{
					pos: position{line: 557, col: 11, offset: 17081},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 557, col: 11, offset: 17081},
							val:        "switch",
							ignoreCase: false,
							want:       "\"switch\"",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 20, offset: 17090},
							label: "comparatorI",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 32, offset: 17102},
								name: "switchComparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 49, offset: 17119},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 55, offset: 17125},
								name: "switchBody",
							},
						},
					},
				},
			},
		},
		{
			name: "switchComparator",
			pos:  position{line: 582, col: 1, offset: 17742},
			expr: &choiceExpr{
				pos: position{line: 582, col: 21, offset: 17762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 582, col: 21, offset: 17762},
						run: (*parser).callonswitchComparator2,
						expr: &seqExpr{
							pos: position{line: 3721, col: 12, offset: 127772},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 584, col: 5, offset: 17812},
						run: (*parser).callonswitchComparator13,
						expr: &seqExpr{
							pos: position{line: 584, col: 5, offset: 17812},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 584, col: 5, offset: 17812},
									expr: &litMatcher{
										pos:        position{line: 584, col: 5, offset: 17812},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 584, col: 10, offset: 17817},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 584, col: 16, offset: 17823},
										name: "IfExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 587, col: 5, offset: 17904},
						run: (*parser).callonswitchComparator28,
						expr: &seqExpr{
							pos: position{line: 587, col: 5, offset: 17904},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 587, col: 5, offset: 17904},
									expr: &litMatcher{
										pos:        position{line: 587, col: 5, offset: 17904},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 587, col: 10, offset: 17909},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 587, col: 16, offset: 17915},
										name: "IfExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 587, col: 29, offset: 17928},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonswitchComparator35,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 587, col: 43, offset: 17942},
									expr: &charClassMatcher{
										pos:        position{line: 3722, col: 12, offset: 127805},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchBody",
			pos:  position{line: 598, col: 1, offset: 18265},
			expr: &actionExpr{
				pos: position{line: 598, col: 15, offset: 18279},
				run: (*parser).callonswitchBody1,
				expr: &seqExpr{
					pos: position{line: 598, col: 15, offset: 18279},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4201, col: 11, offset: 148402},
							run: (*parser).callonswitchBody3,
						},
						&labeledExpr{
							pos:   position{line: 598, col: 22, offset: 18286},
							label: "itms",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 27, offset: 18291},
								expr: &seqExpr{
									pos: position{line: 598, col: 28, offset: 18292},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 598, col: 28, offset: 18292},
											expr: &oneOrMoreExpr{
												pos: position{line: 3735, col: 36, offset: 128206},
												expr: &seqExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3735, col: 37, offset: 128207},
															expr: &charClassMatcher{
																pos:        position{line: 3733, col: 36, offset: 128119},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															expr: &litMatcher{
																pos:        position{line: 3734, col: 36, offset: 128160},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3734, col: 42, offset: 128166},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 3822, col: 17, offset: 132013},
											run: (*parser).callonswitchBody15,
											expr: &zeroOrMoreExpr{
												pos: position{line: 3822, col: 17, offset: 132013},
												expr: &charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 3822, col: 41, offset: 132037},
											run: (*parser).callonswitchBody18,
										},
										&choiceExpr{
											pos: position{line: 3874, col: 5, offset: 133947},
											alternatives: []interface{}{
												&andCodeExpr{
													pos: position{line: 3874, col: 5, offset: 133947},
													run: (*parser).callonswitchBody20,
												},
												&seqExpr{
													pos: position{line: 3876, col: 9, offset: 134030},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3876, col: 9, offset: 134030},
															run: (*parser).callonswitchBody22,
														},
														&stateCodeExpr{
															pos: position{line: 3878, col: 7, offset: 134134},
															run: (*parser).callonswitchBody23,
														},
													},
												},
												&seqExpr{
													pos: position{line: 3885, col: 9, offset: 134470},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3885, col: 9, offset: 134470},
															run: (*parser).callonswitchBody25,
														},
														&choiceExpr{
															pos: position{line: 3938, col: 9, offset: 136805},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3938, col: 9, offset: 136805},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 3938, col: 9, offset: 136805},
																			run: (*parser).callonswitchBody28,
																		},
																		&andCodeExpr{
																			pos: position{line: 3942, col: 11, offset: 137055},
																			run: (*parser).callonswitchBody29,
																		},
																		&stateCodeExpr{
																			pos: position{line: 4008, col: 11, offset: 140261},
																			run: (*parser).callonswitchBody30,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 4016, col: 13, offset: 140614},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 4016, col: 13, offset: 140614},
																			run: (*parser).callonswitchBody32,
																		},
																		&andCodeExpr{
																			pos: position{line: 4020, col: 11, offset: 140869},
																			run: (*parser).callonswitchBody33,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 598, col: 49, offset: 18313},
											name: "switchBodyItem",
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4206, col: 11, offset: 148507},
							run: (*parser).callonswitchBody35,
						},
					},
				},
			},
		},
		{
			name: "switchBodyItem",
			pos:  position{line: 636, col: 1, offset: 19570},
			expr: &choiceExpr{
				pos: position{line: 636, col: 19, offset: 19588},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 636, col: 19, offset: 19588},
						run: (*parser).callonswitchBodyItem2,
						expr: &labeledExpr{
							pos:   position{line: 636, col: 19, offset: 19588},
							label: "caseI",
							expr: &choiceExpr{
								pos: position{line: 636, col: 26, offset: 19595},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 636, col: 26, offset: 19595},
										name: "Case",
									},
									&ruleRefExpr{
										pos:  position{line: 636, col: 33, offset: 19602},
										name: "Default",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 5, offset: 19652},
						run: (*parser).callonswitchBodyItem7,
						expr: &labeledExpr{
							pos:   position{line: 638, col: 5, offset: 19652},
							label: "caseI",
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 11, offset: 19658},
								name: "BadCase",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 642, col: 1, offset: 19707},
			expr: &actionExpr{
				pos: position{line: 642, col: 9, offset: 19715},
				run: (*parser).callonCase1,
				expr: &seqExpr{
					pos: position{line: 642, col: 9, offset: 19715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 642, col: 9, offset: 19715},
							val:        "case",
							ignoreCase: false,
							want:       "\"case\"",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 16, offset: 19722},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 22, offset: 19728},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 642, col: 32, offset: 19738},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 38, offset: 19744},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 650, col: 1, offset: 19901},
			expr: &actionExpr{
				pos: position{line: 650, col: 12, offset: 19912},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 650, col: 12, offset: 19912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 650, col: 12, offset: 19912},
							val:        "default",
							ignoreCase: false,
							want:       "\"default\"",
						},
						&labeledExpr{
							pos:   position{line: 650, col: 22, offset: 19922},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 28, offset: 19928},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "BadCase",
			pos:  position{line: 657, col: 1, offset: 20031},
			expr: &actionExpr{
				pos: position{line: 657, col: 12, offset: 20042},
				run: (*parser).callonBadCase1,
				expr: &seqExpr{
					pos: position{line: 657, col: 12, offset: 20042},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 657, col: 12, offset: 20042},
							expr: &charClassMatcher{
								pos:        position{line: 3722, col: 12, offset: 127805},
								val:        "[^\\r\\n]",
								chars:      []rune{'\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3721, col: 12, offset: 127772},
							expr: &charClassMatcher{
								pos:        position{line: 3733, col: 36, offset: 128119},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3721, col: 16, offset: 127776},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											expr: &litMatcher{
												pos:        position{line: 3721, col: 16, offset: 127776},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3721, col: 22, offset: 127782},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3720, col: 12, offset: 127758},
									expr: &anyMatcher{
										line: 3720, col: 13, offset: 127759,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 25, offset: 20055},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 657, col: 31, offset: 20061},
								expr: &ruleRefExpr{
									pos:  position{line: 657, col: 31, offset: 20061},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComments",
			pos:  position{line: 824, col: 1, offset: 25332},
			expr: &actionExpr{
				pos: position{line: 824, col: 18, offset: 25349},
				run: (*parser).callonCorgiComments1,
				expr: &labeledExpr{
					pos:   position{line: 824, col: 18, offset: 25349},
					label: "commentsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 824, col: 28, offset: 25359},
						expr: &seqExpr{
							pos: position{line: 824, col: 29, offset: 25360},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 824, col: 29, offset: 25360},
									expr: &oneOrMoreExpr{
										pos: position{line: 3735, col: 36, offset: 128206},
										expr: &seqExpr{
											pos: position{line: 3735, col: 37, offset: 128207},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													expr: &litMatcher{
														pos:        position{line: 3734, col: 36, offset: 128160},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3734, col: 42, offset: 128166},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 38, offset: 25369},
									name: "CorgiComment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComment",
			pos:  position{line: 828, col: 1, offset: 25460},
			expr: &actionExpr{
				pos: position{line: 828, col: 17, offset: 25476},
				run: (*parser).callonCorgiComment1,
				expr: &seqExpr{
					pos: position{line: 828, col: 17, offset: 25476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 828, col: 17, offset: 25476},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&notExpr{
							pos: position{line: 828, col: 22, offset: 25481},
							expr: &litMatcher{
								pos:        position{line: 828, col: 23, offset: 25482},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 828, col: 27, offset: 25486},
							label: "linesI",
							expr: &choiceExpr{
								pos: position{line: 829, col: 5, offset: 25499},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 829, col: 5, offset: 25499},
										run: (*parser).callonCorgiComment8,
										expr: &seqExpr{
											pos: position{line: 829, col: 5, offset: 25499},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 829, col: 5, offset: 25499},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 3721, col: 12, offset: 127772},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	expr: &litMatcher{
																		pos:        position{line: 3721, col: 16, offset: 127776},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3721, col: 22, offset: 127782},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3720, col: 12, offset: 127758},
															expr: &anyMatcher{
																line: 3720, col: 13, offset: 127759,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 829, col: 12, offset: 25506},
													label: "linesI",
													expr: &ruleRefExpr{
														pos:  position{line: 829, col: 19, offset: 25513},
														name: "corgiCommentBlock",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 831, col: 9, offset: 25568},
										run: (*parser).callonCorgiComment23,
										expr: &labeledExpr{
											pos:   position{line: 831, col: 9, offset: 25568},
											label: "lineI",
											expr: &actionExpr{
												pos: position{line: 845, col: 21, offset: 25995},
												run: (*parser).callonCorgiComment25,
												expr: &seqExpr{
													pos: position{line: 845, col: 21, offset: 25995},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 845, col: 21, offset: 25995},
															label: "commentI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 845, col: 30, offset: 26004},
																expr: &charClassMatcher{
																	pos:        position{line: 3722, col: 12, offset: 127805},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3721, col: 12, offset: 127772},
															expr: &charClassMatcher{
																pos:        position{line: 3733, col: 36, offset: 128119},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			expr: &litMatcher{
																				pos:        position{line: 3721, col: 16, offset: 127776},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3721, col: 22, offset: 127782},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3720, col: 12, offset: 127758},
																	expr: &anyMatcher{
																		line: 3720, col: 13, offset: 127759,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "corgiCommentBlock",
			pos:  position{line: 841, col: 1, offset: 25797},
			expr: &actionExpr{
				pos: position{line: 841, col: 22, offset: 25818},
				run: (*parser).calloncorgiCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 841, col: 22, offset: 25818},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4201, col: 11, offset: 148402},
							run: (*parser).calloncorgiCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 841, col: 29, offset: 25825},
							label: "linesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 841, col: 36, offset: 25832},
								expr: &seqExpr{
									pos: position{line: 841, col: 37, offset: 25833},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 841, col: 37, offset: 25833},
											expr: &oneOrMoreExpr{
												pos: position{line: 3735, col: 36, offset: 128206},
												expr: &seqExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3735, col: 37, offset: 128207},
															expr: &charClassMatcher{
																pos:        position{line: 3733, col: 36, offset: 128119},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															expr: &litMatcher{
																pos:        position{line: 3734, col: 36, offset: 128160},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3734, col: 42, offset: 128166},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 841, col: 46, offset: 25842},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 845, col: 21, offset: 25995},
											run: (*parser).calloncorgiCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 845, col: 21, offset: 25995},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 845, col: 21, offset: 25995},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 845, col: 30, offset: 26004},
															expr: &charClassMatcher{
																pos:        position{line: 3722, col: 12, offset: 127805},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4206, col: 11, offset: 148507},
							run: (*parser).calloncorgiCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "HTMLComment",
			pos:  position{line: 893, col: 1, offset: 27676},
			expr: &actionExpr{
				pos: position{line: 893, col: 16, offset: 27691},
				run: (*parser).callonHTMLComment1,
				expr: &seqExpr{
					pos: position{line: 893, col: 16, offset: 27691},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 893, col: 16, offset: 27691},
							val:        "//-",
							ignoreCase: false,
							want:       "\"//-\"",
						},
						&labeledExpr{
							pos:   position{line: 893, col: 22, offset: 27697},
							label: "linesI",
							expr: &choiceExpr{
								pos: position{line: 894, col: 5, offset: 27710},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 894, col: 5, offset: 27710},
										run: (*parser).callonHTMLComment6,
										expr: &seqExpr{
											pos: position{line: 894, col: 5, offset: 27710},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3721, col: 12, offset: 127772},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	expr: &litMatcher{
																		pos:        position{line: 3721, col: 16, offset: 127776},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3721, col: 22, offset: 127782},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3720, col: 12, offset: 127758},
															expr: &anyMatcher{
																line: 3720, col: 13, offset: 127759,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 894, col: 9, offset: 27714},
													label: "linesI",
													expr: &ruleRefExpr{
														pos:  position{line: 894, col: 16, offset: 27721},
														name: "htmlCommentBlock",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 896, col: 9, offset: 27775},
										run: (*parser).callonHTMLComment19,
										expr: &labeledExpr{
											pos:   position{line: 896, col: 9, offset: 27775},
											label: "lineI",
											expr: &actionExpr{
												pos: position{line: 910, col: 20, offset: 28193},
												run: (*parser).callonHTMLComment21,
												expr: &seqExpr{
													pos: position{line: 910, col: 20, offset: 28193},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 910, col: 20, offset: 28193},
															label: "commentI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 910, col: 29, offset: 28202},
																expr: &charClassMatcher{
																	pos:        position{line: 3722, col: 12, offset: 127805},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3721, col: 12, offset: 127772},
															expr: &charClassMatcher{
																pos:        position{line: 3733, col: 36, offset: 128119},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			expr: &litMatcher{
																				pos:        position{line: 3721, col: 16, offset: 127776},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3721, col: 22, offset: 127782},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3720, col: 12, offset: 127758},
																	expr: &anyMatcher{
																		line: 3720, col: 13, offset: 127759,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "htmlCommentBlock",
			pos:  position{line: 906, col: 1, offset: 27999},
			expr: &actionExpr{
				pos: position{line: 906, col: 21, offset: 28019},
				run: (*parser).callonhtmlCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 906, col: 21, offset: 28019},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4201, col: 11, offset: 148402},
							run: (*parser).callonhtmlCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 906, col: 28, offset: 28026},
							label: "linesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 906, col: 35, offset: 28033},
								expr: &seqExpr{
									pos: position{line: 906, col: 36, offset: 28034},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 906, col: 36, offset: 28034},
											expr: &oneOrMoreExpr{
												pos: position{line: 3735, col: 36, offset: 128206},
												expr: &seqExpr{
													pos: position{line: 3735, col: 37, offset: 128207},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3735, col: 37, offset: 128207},
															expr: &charClassMatcher{
																pos:        position{line: 3733, col: 36, offset: 128119},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															expr: &litMatcher{
																pos:        position{line: 3734, col: 36, offset: 128160},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3734, col: 42, offset: 128166},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 906, col: 45, offset: 28043},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 910, col: 20, offset: 28193},
											run: (*parser).callonhtmlCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 910, col: 20, offset: 28193},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 910, col: 20, offset: 28193},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 910, col: 29, offset: 28202},
															expr: &charClassMatcher{
																pos:        position{line: 3722, col: 12, offset: 127805},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4206, col: 11, offset: 148507},
							run: (*parser).callonhtmlCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 918, col: 1, offset: 28484},
			expr: &actionExpr{
				pos: position{line: 918, col: 12, offset: 28495},
				run: (*parser).callonElement1,
				expr: &seqExpr{
					pos: position{line: 918, col: 12, offset: 28495},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 12, offset: 28495},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2823, col: 16, offset: 98474},
								expr: &charClassMatcher{
									pos:        position{line: 2809, col: 27, offset: 97814},
									val:        "[09A-Za-z]",
									chars:      []rune{'0', '9'},
									ranges:     []rune{'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 30, offset: 28513},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 918, col: 37, offset: 28520},
								expr: &ruleRefExpr{
									pos:  position{line: 918, col: 37, offset: 28520},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 58, offset: 28541},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 918, col: 64, offset: 28547},
								expr: &litMatcher{
									pos:        position{line: 918, col: 64, offset: 28547},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 69, offset: 28552},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 75, offset: 28558},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 928, col: 1, offset: 28789},
			expr: &actionExpr{
				pos: position{line: 928, col: 18, offset: 28806},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 928, col: 18, offset: 28806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 928, col: 18, offset: 28806},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2823, col: 16, offset: 98474},
								expr: &charClassMatcher{
									pos:        position{line: 2809, col: 27, offset: 97814},
									val:        "[09A-Za-z]",
									chars:      []rune{'0', '9'},
									ranges:     []rune{'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 36, offset: 28824},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 928, col: 43, offset: 28831},
								expr: &ruleRefExpr{
									pos:  position{line: 928, col: 43, offset: 28831},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 74, offset: 28862},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 928, col: 80, offset: 28868},
								expr: &litMatcher{
									pos:        position{line: 928, col: 80, offset: 28868},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 85, offset: 28873},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 91, offset: 28879},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "DivShorthand",
			pos:  position{line: 942, col: 1, offset: 29296},
			expr: &actionExpr{
				pos: position{line: 942, col: 17, offset: 29312},
				run: (*parser).callonDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 942, col: 17, offset: 29312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 942, col: 17, offset: 29312},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 942, col: 29, offset: 29324},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1035, col: 19, offset: 32771},
										run: (*parser).callonDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1035, col: 19, offset: 32771},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1035, col: 19, offset: 32771},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1035, col: 23, offset: 32775},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1035, col: 29, offset: 32781},
														expr: &charClassMatcher{
															pos:        position{line: 1035, col: 29, offset: 32781},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1040, col: 5, offset: 32900},
										run: (*parser).callonDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1040, col: 5, offset: 32900},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1040, col: 5, offset: 32900},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1040, col: 9, offset: 32904},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1016, col: 16, offset: 32330},
										run: (*parser).callonDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1016, col: 16, offset: 32330},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1016, col: 16, offset: 32330},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1016, col: 20, offset: 32334},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1016, col: 24, offset: 32338},
														expr: &charClassMatcher{
															pos:        position{line: 1016, col: 24, offset: 32338},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1021, col: 5, offset: 32450},
										run: (*parser).callonDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1021, col: 5, offset: 32450},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1021, col: 5, offset: 32450},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1021, col: 9, offset: 32454},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 942, col: 59, offset: 29354},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 942, col: 70, offset: 29365},
								expr: &ruleRefExpr{
									pos:  position{line: 942, col: 70, offset: 29365},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 942, col: 91, offset: 29386},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 97, offset: 29392},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDivShorthand",
			pos:  position{line: 951, col: 1, offset: 29677},
			expr: &actionExpr{
				pos: position{line: 951, col: 23, offset: 29699},
				run: (*parser).callonInlineDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 951, col: 23, offset: 29699},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 951, col: 23, offset: 29699},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 951, col: 35, offset: 29711},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1035, col: 19, offset: 32771},
										run: (*parser).callonInlineDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1035, col: 19, offset: 32771},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1035, col: 19, offset: 32771},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1035, col: 23, offset: 32775},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1035, col: 29, offset: 32781},
														expr: &charClassMatcher{
															pos:        position{line: 1035, col: 29, offset: 32781},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1040, col: 5, offset: 32900},
										run: (*parser).callonInlineDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1040, col: 5, offset: 32900},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1040, col: 5, offset: 32900},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1040, col: 9, offset: 32904},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonInlineDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1016, col: 16, offset: 32330},
										run: (*parser).callonInlineDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1016, col: 16, offset: 32330},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1016, col: 16, offset: 32330},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1016, col: 20, offset: 32334},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1016, col: 24, offset: 32338},
														expr: &charClassMatcher{
															pos:        position{line: 1016, col: 24, offset: 32338},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1021, col: 5, offset: 32450},
										run: (*parser).callonInlineDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1021, col: 5, offset: 32450},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1021, col: 5, offset: 32450},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1021, col: 9, offset: 32454},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonInlineDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 951, col: 65, offset: 29741},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 951, col: 76, offset: 29752},
								expr: &ruleRefExpr{
									pos:  position{line: 951, col: 76, offset: 29752},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 951, col: 107, offset: 29783},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 113, offset: 29789},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 964, col: 1, offset: 30251},
			expr: &choiceExpr{
				pos: position{line: 964, col: 8, offset: 30258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 964, col: 8, offset: 30258},
						run: (*parser).callonAnd2,
						expr: &seqExpr{
							pos: position{line: 964, col: 8, offset: 30258},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 964, col: 8, offset: 30258},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 964, col: 12, offset: 30262},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 964, col: 19, offset: 30269},
										expr: &ruleRefExpr{
											pos:  position{line: 964, col: 19, offset: 30269},
											name: "AttributeCollection",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 30424},
						run: (*parser).callonAnd17,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 30424},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 969, col: 5, offset: 30424},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 969, col: 9, offset: 30428},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonAnd21,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 984, col: 5, offset: 31024},
						run: (*parser).callonAnd36,
						expr: &seqExpr{
							pos: position{line: 984, col: 5, offset: 31024},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 984, col: 5, offset: 31024},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 984, col: 9, offset: 31028},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 984, col: 16, offset: 31035},
										expr: &ruleRefExpr{
											pos:  position{line: 984, col: 16, offset: 31035},
											name: "AttributeCollection",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 984, col: 37, offset: 31056},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonAnd43,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 984, col: 46, offset: 31065},
									expr: &charClassMatcher{
										pos:        position{line: 3722, col: 12, offset: 127805},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeCollection",
			pos:  position{line: 1010, col: 1, offset: 32129},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 34, offset: 32162},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1016, col: 16, offset: 32330},
						run: (*parser).callonAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1016, col: 16, offset: 32330},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1016, col: 16, offset: 32330},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1016, col: 20, offset: 32334},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1016, col: 24, offset: 32338},
										expr: &charClassMatcher{
											pos:        position{line: 1016, col: 24, offset: 32338},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 32450},
						run: (*parser).callonAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1021, col: 5, offset: 32450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1021, col: 5, offset: 32450},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 9, offset: 32454},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 19, offset: 32771},
						run: (*parser).callonAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1035, col: 19, offset: 32771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1035, col: 19, offset: 32771},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1035, col: 23, offset: 32775},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1035, col: 29, offset: 32781},
										expr: &charClassMatcher{
											pos:        position{line: 1035, col: 29, offset: 32781},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1040, col: 5, offset: 32900},
						run: (*parser).callonAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1040, col: 5, offset: 32900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1040, col: 5, offset: 32900},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1040, col: 9, offset: 32904},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 65, offset: 32193},
						name: "AttributeList",
					},
				},
			},
		},
		{
			name: "SingleLineAttributeCollection",
			pos:  position{line: 1011, col: 1, offset: 32207},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 34, offset: 32240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1016, col: 16, offset: 32330},
						run: (*parser).callonSingleLineAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1016, col: 16, offset: 32330},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1016, col: 16, offset: 32330},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1016, col: 20, offset: 32334},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1016, col: 24, offset: 32338},
										expr: &charClassMatcher{
											pos:        position{line: 1016, col: 24, offset: 32338},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 32450},
						run: (*parser).callonSingleLineAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1021, col: 5, offset: 32450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1021, col: 5, offset: 32450},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 9, offset: 32454},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonSingleLineAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 19, offset: 32771},
						run: (*parser).callonSingleLineAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1035, col: 19, offset: 32771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1035, col: 19, offset: 32771},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1035, col: 23, offset: 32775},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1035, col: 29, offset: 32781},
										expr: &charClassMatcher{
											pos:        position{line: 1035, col: 29, offset: 32781},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1040, col: 5, offset: 32900},
						run: (*parser).callonSingleLineAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1040, col: 5, offset: 32900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1040, col: 5, offset: 32900},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1040, col: 9, offset: 32904},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonSingleLineAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1011, col: 65, offset: 32271},
						name: "SingleLineAttributeList",
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 1054, col: 1, offset: 33223},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 18, offset: 33240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1054, col: 18, offset: 33240},
						run: (*parser).callonAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1054, col: 18, offset: 33240},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1054, col: 18, offset: 33240},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1054, col: 22, offset: 33244},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1054, col: 26, offset: 33248},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1054, col: 38, offset: 33260},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 38, offset: 33260},
											name: "attributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1054, col: 50, offset: 33272},
									expr: &litMatcher{
										pos:        position{line: 1054, col: 50, offset: 33272},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1054, col: 55, offset: 33277},
									expr: &seqExpr{
										pos: position{line: 1054, col: 56, offset: 33278},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1054, col: 56, offset: 33278},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1054, col: 60, offset: 33282},
												expr: &choiceExpr{
													pos: position{line: 3737, col: 20, offset: 128237},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1054, col: 66, offset: 33288},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonAttributeList28,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 33494},
						run: (*parser).callonAttributeList30,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 33494},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 33494},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1060, col: 9, offset: 33498},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 13, offset: 33502},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1060, col: 25, offset: 33514},
										expr: &ruleRefExpr{
											pos:  position{line: 1060, col: 25, offset: 33514},
											name: "attributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1060, col: 37, offset: 33526},
									expr: &seqExpr{
										pos: position{line: 1060, col: 38, offset: 33527},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1060, col: 38, offset: 33527},
												expr: &litMatcher{
													pos:        position{line: 1060, col: 38, offset: 33527},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1060, col: 43, offset: 33532},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 49, offset: 33538},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonAttributeList49,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attributes",
			pos:  position{line: 1079, col: 1, offset: 34091},
			expr: &actionExpr{
				pos: position{line: 1079, col: 15, offset: 34105},
				run: (*parser).callonattributes1,
				expr: &seqExpr{
					pos: position{line: 1079, col: 15, offset: 34105},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1079, col: 15, offset: 34105},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1079, col: 22, offset: 34112},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1079, col: 32, offset: 34122},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1079, col: 38, offset: 34128},
								expr: &seqExpr{
									pos: position{line: 1079, col: 39, offset: 34129},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1079, col: 39, offset: 34129},
											expr: &litMatcher{
												pos:        position{line: 1079, col: 39, offset: 34129},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1079, col: 44, offset: 34134},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1079, col: 48, offset: 34138},
											expr: &choiceExpr{
												pos: position{line: 3737, col: 20, offset: 128237},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																expr: &litMatcher{
																	pos:        position{line: 3734, col: 36, offset: 128160},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3734, col: 42, offset: 128166},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1079, col: 52, offset: 34142},
											name: "Attribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineAttributeList",
			pos:  position{line: 1090, col: 1, offset: 34412},
			expr: &choiceExpr{
				pos: position{line: 1090, col: 28, offset: 34439},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1090, col: 28, offset: 34439},
						run: (*parser).callonSingleLineAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1090, col: 28, offset: 34439},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1090, col: 28, offset: 34439},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1090, col: 32, offset: 34443},
									expr: &litMatcher{
										pos:        position{line: 1090, col: 32, offset: 34443},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1090, col: 37, offset: 34448},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1090, col: 49, offset: 34460},
										expr: &ruleRefExpr{
											pos:  position{line: 1090, col: 49, offset: 34460},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1090, col: 71, offset: 34482},
									expr: &litMatcher{
										pos:        position{line: 1090, col: 71, offset: 34482},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1090, col: 76, offset: 34487},
									expr: &seqExpr{
										pos: position{line: 1090, col: 77, offset: 34488},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1090, col: 77, offset: 34488},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1090, col: 81, offset: 34492},
												expr: &litMatcher{
													pos:        position{line: 1090, col: 81, offset: 34492},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1090, col: 88, offset: 34499},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonSingleLineAttributeList18,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1096, col: 5, offset: 34705},
						run: (*parser).callonSingleLineAttributeList20,
						expr: &seqExpr{
							pos: position{line: 1096, col: 5, offset: 34705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1096, col: 5, offset: 34705},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1096, col: 9, offset: 34709},
									expr: &litMatcher{
										pos:        position{line: 1096, col: 9, offset: 34709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1096, col: 14, offset: 34714},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1096, col: 26, offset: 34726},
										expr: &ruleRefExpr{
											pos:  position{line: 1096, col: 26, offset: 34726},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1096, col: 48, offset: 34748},
									expr: &seqExpr{
										pos: position{line: 1096, col: 49, offset: 34749},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1096, col: 49, offset: 34749},
												expr: &litMatcher{
													pos:        position{line: 1096, col: 49, offset: 34749},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1096, col: 54, offset: 34754},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1096, col: 60, offset: 34760},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonSingleLineAttributeList34,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineAttributes",
			pos:  position{line: 1115, col: 1, offset: 35313},
			expr: &actionExpr{
				pos: position{line: 1115, col: 25, offset: 35337},
				run: (*parser).callonsingleLineAttributes1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 25, offset: 35337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1115, col: 25, offset: 35337},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 32, offset: 35344},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1115, col: 42, offset: 35354},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1115, col: 48, offset: 35360},
								expr: &seqExpr{
									pos: position{line: 1115, col: 49, offset: 35361},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1115, col: 49, offset: 35361},
											expr: &litMatcher{
												pos:        position{line: 1115, col: 49, offset: 35361},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1115, col: 54, offset: 35366},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1115, col: 58, offset: 35370},
											expr: &litMatcher{
												pos:        position{line: 1115, col: 58, offset: 35370},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1115, col: 63, offset: 35375},
											name: "SingleLineAttribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 1130, col: 1, offset: 35839},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 24, offset: 35862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1130, col: 24, offset: 35862},
						name: "MixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1194, col: 19, offset: 38066},
						run: (*parser).callonAttribute3,
						expr: &seqExpr{
							pos: position{line: 1194, col: 19, offset: 38066},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1194, col: 19, offset: 38066},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1194, col: 24, offset: 38071},
									expr: &choiceExpr{
										pos: position{line: 1194, col: 26, offset: 38073},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1194, col: 31, offset: 38078},
												val:        "[,(]",
												chars:      []rune{',', '('},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 62, offset: 35900},
						name: "SimpleAttribute",
					},
				},
			},
		},
		{
			name: "SingleLineAttribute",
			pos:  position{line: 1131, col: 1, offset: 35916},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 24, offset: 35939},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1131, col: 24, offset: 35939},
						name: "SingleLineMixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1194, col: 19, offset: 38066},
						run: (*parser).callonSingleLineAttribute3,
						expr: &seqExpr{
							pos: position{line: 1194, col: 19, offset: 38066},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1194, col: 19, offset: 38066},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1194, col: 24, offset: 38071},
									expr: &choiceExpr{
										pos: position{line: 1194, col: 26, offset: 38073},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1194, col: 31, offset: 38078},
												val:        "[,(]",
												chars:      []rune{',', '('},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 72, offset: 35987},
						name: "SingleLineSimpleAttribute",
					},
				},
			},
		},
		{
			name: "SimpleAttribute",
			pos:  position{line: 1138, col: 1, offset: 36087},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 30, offset: 36116},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1138, col: 30, offset: 36116},
						name: "simpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1183, col: 27, offset: 37886},
						run: (*parser).callonSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1183, col: 27, offset: 37886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1183, col: 27, offset: 37886},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1133, col: 18, offset: 36031},
										expr: &seqExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1133, col: 19, offset: 36032},
													expr: &charClassMatcher{
														pos:        position{line: 1133, col: 20, offset: 36033},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2830, col: 26, offset: 98754},
													expr: &charClassMatcher{
														pos:        position{line: 2806, col: 27, offset: 97663},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2830, col: 101, offset: 98829,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1183, col: 47, offset: 37906},
									expr: &seqExpr{
										pos: position{line: 1183, col: 49, offset: 37908},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1183, col: 49, offset: 37908},
												expr: &litMatcher{
													pos:        position{line: 1183, col: 49, offset: 37908},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1183, col: 54, offset: 37913},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineSimpleAttribute",
			pos:  position{line: 1139, col: 1, offset: 36162},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 30, offset: 36191},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 30, offset: 36191},
						name: "singleLineSimpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1183, col: 27, offset: 37886},
						run: (*parser).callonSingleLineSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1183, col: 27, offset: 37886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1183, col: 27, offset: 37886},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1133, col: 18, offset: 36031},
										expr: &seqExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1133, col: 19, offset: 36032},
													expr: &charClassMatcher{
														pos:        position{line: 1133, col: 20, offset: 36033},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2830, col: 26, offset: 98754},
													expr: &charClassMatcher{
														pos:        position{line: 2806, col: 27, offset: 97663},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2830, col: 101, offset: 98829,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1183, col: 47, offset: 37906},
									expr: &seqExpr{
										pos: position{line: 1183, col: 49, offset: 37908},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1183, col: 49, offset: 37908},
												expr: &litMatcher{
													pos:        position{line: 1183, col: 49, offset: 37908},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1183, col: 54, offset: 37913},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleValueAttribute",
			pos:  position{line: 1141, col: 1, offset: 36248},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 25, offset: 36272},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1141, col: 25, offset: 36272},
						run: (*parser).callonsimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1141, col: 25, offset: 36272},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1141, col: 25, offset: 36272},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1133, col: 18, offset: 36031},
										expr: &seqExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1133, col: 19, offset: 36032},
													expr: &charClassMatcher{
														pos:        position{line: 1133, col: 20, offset: 36033},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2830, col: 26, offset: 98754},
													expr: &charClassMatcher{
														pos:        position{line: 2806, col: 27, offset: 97663},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2830, col: 101, offset: 98829,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1141, col: 45, offset: 36292},
									expr: &litMatcher{
										pos:        position{line: 1141, col: 45, offset: 36292},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 50, offset: 36297},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 65, offset: 36312},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1141, col: 75, offset: 36322},
										expr: &litMatcher{
											pos:        position{line: 1141, col: 75, offset: 36322},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1141, col: 80, offset: 36327},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1141, col: 84, offset: 36331},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 88, offset: 36335},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsimpleValueAttribute33,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 97, offset: 36344},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1141, col: 103, offset: 36350},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 36577},
						run: (*parser).callonsimpleValueAttribute41,
						expr: &seqExpr{
							pos: position{line: 1148, col: 5, offset: 36577},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 5, offset: 36577},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1133, col: 18, offset: 36031},
										expr: &seqExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1133, col: 19, offset: 36032},
													expr: &charClassMatcher{
														pos:        position{line: 1133, col: 20, offset: 36033},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2830, col: 26, offset: 98754},
													expr: &charClassMatcher{
														pos:        position{line: 2806, col: 27, offset: 97663},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2830, col: 101, offset: 98829,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1148, col: 25, offset: 36597},
									expr: &litMatcher{
										pos:        position{line: 1148, col: 25, offset: 36597},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 30, offset: 36602},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsimpleValueAttribute54,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 45, offset: 36617},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1148, col: 55, offset: 36627},
										expr: &litMatcher{
											pos:        position{line: 1148, col: 55, offset: 36627},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 60, offset: 36632},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 64, offset: 36636},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsimpleValueAttribute65,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineSimpleValueAttribute",
			pos:  position{line: 1162, col: 1, offset: 37043},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 35, offset: 37077},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1162, col: 35, offset: 37077},
						run: (*parser).callonsingleLineSimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1162, col: 35, offset: 37077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 35, offset: 37077},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1133, col: 18, offset: 36031},
										expr: &seqExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1133, col: 19, offset: 36032},
													expr: &charClassMatcher{
														pos:        position{line: 1133, col: 20, offset: 36033},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2830, col: 26, offset: 98754},
													expr: &charClassMatcher{
														pos:        position{line: 2806, col: 27, offset: 97663},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2830, col: 101, offset: 98829,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1162, col: 55, offset: 37097},
									expr: &litMatcher{
										pos:        position{line: 1162, col: 55, offset: 37097},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 60, offset: 37102},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsingleLineSimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 75, offset: 37117},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1162, col: 85, offset: 37127},
										expr: &litMatcher{
											pos:        position{line: 1162, col: 85, offset: 37127},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1162, col: 90, offset: 37132},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1162, col: 94, offset: 37136},
									expr: &litMatcher{
										pos:        position{line: 1162, col: 94, offset: 37136},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 99, offset: 37141},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1162, col: 105, offset: 37147},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 5, offset: 37378},
						run: (*parser).callonsingleLineSimpleValueAttribute29,
						expr: &seqExpr{
							pos: position{line: 1169, col: 5, offset: 37378},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1169, col: 5, offset: 37378},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1133, col: 18, offset: 36031},
										expr: &seqExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1133, col: 19, offset: 36032},
													expr: &charClassMatcher{
														pos:        position{line: 1133, col: 20, offset: 36033},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2830, col: 26, offset: 98754},
													expr: &charClassMatcher{
														pos:        position{line: 2806, col: 27, offset: 97663},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2830, col: 101, offset: 98829,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1169, col: 25, offset: 37398},
									expr: &litMatcher{
										pos:        position{line: 1169, col: 25, offset: 37398},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 30, offset: 37403},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsingleLineSimpleValueAttribute42,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 45, offset: 37418},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1169, col: 55, offset: 37428},
										expr: &litMatcher{
											pos:        position{line: 1169, col: 55, offset: 37428},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 60, offset: 37433},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 64, offset: 37437},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsingleLineSimpleValueAttribute53,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCallAttribute",
			pos:  position{line: 1202, col: 1, offset: 38177},
			expr: &actionExpr{
				pos: position{line: 1202, col: 23, offset: 38199},
				run: (*parser).callonMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 23, offset: 38199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1202, col: 23, offset: 38199},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1133, col: 18, offset: 36031},
								expr: &seqExpr{
									pos: position{line: 1133, col: 19, offset: 36032},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											expr: &charClassMatcher{
												pos:        position{line: 1133, col: 20, offset: 36033},
												val:        "[()]",
												chars:      []rune{'(', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2830, col: 26, offset: 98754},
											expr: &charClassMatcher{
												pos:        position{line: 2806, col: 27, offset: 97663},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2830, col: 101, offset: 98829,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1202, col: 43, offset: 38219},
							expr: &litMatcher{
								pos:        position{line: 1202, col: 43, offset: 38219},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 48, offset: 38224},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).callonMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 63, offset: 38239},
							label: "noEscapeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1202, col: 73, offset: 38249},
								expr: &litMatcher{
									pos:        position{line: 1202, col: 73, offset: 38249},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1202, col: 78, offset: 38254},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1202, col: 82, offset: 38258},
							expr: &choiceExpr{
								pos: position{line: 3737, col: 20, offset: 128237},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3734, col: 36, offset: 128160},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												expr: &litMatcher{
													pos:        position{line: 3734, col: 36, offset: 128160},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3734, col: 42, offset: 128166},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 86, offset: 38262},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 92, offset: 38268},
								name: "mixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineMixinCallAttribute",
			pos:  position{line: 1213, col: 1, offset: 38586},
			expr: &actionExpr{
				pos: position{line: 1213, col: 33, offset: 38618},
				run: (*parser).callonSingleLineMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 33, offset: 38618},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1213, col: 33, offset: 38618},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1133, col: 18, offset: 36031},
								expr: &seqExpr{
									pos: position{line: 1133, col: 19, offset: 36032},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1133, col: 19, offset: 36032},
											expr: &charClassMatcher{
												pos:        position{line: 1133, col: 20, offset: 36033},
												val:        "[()]",
												chars:      []rune{'(', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2830, col: 26, offset: 98754},
											expr: &charClassMatcher{
												pos:        position{line: 2806, col: 27, offset: 97663},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2830, col: 101, offset: 98829,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1213, col: 53, offset: 38638},
							expr: &litMatcher{
								pos:        position{line: 1213, col: 53, offset: 38638},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 58, offset: 38643},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).callonSingleLineMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 73, offset: 38658},
							label: "noEscapeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1213, col: 83, offset: 38668},
								expr: &litMatcher{
									pos:        position{line: 1213, col: 83, offset: 38668},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1213, col: 88, offset: 38673},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1213, col: 92, offset: 38677},
							expr: &litMatcher{
								pos:        position{line: 1213, col: 92, offset: 38677},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 97, offset: 38682},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 103, offset: 38688},
								name: "singleLineMixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeCall",
			pos:  position{line: 1225, col: 1, offset: 39017},
			expr: &actionExpr{
				pos: position{line: 1225, col: 27, offset: 39043},
				run: (*parser).callonmixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1225, col: 27, offset: 39043},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1225, col: 27, offset: 39043},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1225, col: 31, offset: 39047},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1225, col: 42, offset: 39058},
								expr: &seqExpr{
									pos: position{line: 1225, col: 43, offset: 39059},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21290},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21290},
													run: (*parser).callonmixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21290},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2354, col: 17, offset: 80792},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2354, col: 26, offset: 80801},
																	expr: &charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21384},
													run: (*parser).callonmixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21384},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21392},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21392},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21392},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21397},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21398},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21398},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21398},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21407},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21417},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21428},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonmixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1225, col: 49, offset: 39065},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1225, col: 55, offset: 39071},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21845},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										run: (*parser).callonmixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21845},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21290},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														run: (*parser).callonmixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21290},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2354, col: 17, offset: 80792},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2354, col: 26, offset: 80801},
																		expr: &charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														run: (*parser).callonmixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21384},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21384},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21392},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21392},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21397},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21398},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21398},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21407},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21417},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21428},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3724, col: 8, offset: 127821},
																		run: (*parser).callonmixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					expr: &anyMatcher{
																						line: 3724, col: 10, offset: 127823,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3724, col: 14, offset: 127827},
																					expr: &anyMatcher{
																						line: 3724, col: 15, offset: 127828,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21887},
										run: (*parser).callonmixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21887},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21887},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonmixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21896},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21898},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21904},
																val:        "[:!=(]",
																chars:      []rune{':', '!', '=', '('},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonmixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=(]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 28, offset: 22253},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonmixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1225, col: 71, offset: 39087},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1225, col: 77, offset: 39093},
								expr: &ruleRefExpr{
									pos:  position{line: 1225, col: 77, offset: 39093},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1225, col: 91, offset: 39107},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1225, col: 98, offset: 39114},
								expr: &ruleRefExpr{
									pos:  position{line: 1225, col: 98, offset: 39114},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinCallAttributeCall",
			pos:  position{line: 1238, col: 1, offset: 39521},
			expr: &actionExpr{
				pos: position{line: 1238, col: 37, offset: 39557},
				run: (*parser).callonsingleLineMixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 37, offset: 39557},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1238, col: 37, offset: 39557},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 41, offset: 39561},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1238, col: 52, offset: 39572},
								expr: &seqExpr{
									pos: position{line: 1238, col: 53, offset: 39573},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21290},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21290},
													run: (*parser).callonsingleLineMixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21290},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2354, col: 17, offset: 80792},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2354, col: 26, offset: 80801},
																	expr: &charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21384},
													run: (*parser).callonsingleLineMixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21384},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21392},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21392},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21392},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21397},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21398},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21398},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21398},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21407},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21417},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21428},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonsingleLineMixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1238, col: 59, offset: 39579},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 65, offset: 39585},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21845},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										run: (*parser).callonsingleLineMixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21845},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21290},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														run: (*parser).callonsingleLineMixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21290},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2354, col: 17, offset: 80792},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2354, col: 26, offset: 80801},
																		expr: &charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														run: (*parser).callonsingleLineMixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21384},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21384},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21392},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21392},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21397},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21398},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21398},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21407},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21417},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21428},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3724, col: 8, offset: 127821},
																		run: (*parser).callonsingleLineMixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					expr: &anyMatcher{
																						line: 3724, col: 10, offset: 127823,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3724, col: 14, offset: 127827},
																					expr: &anyMatcher{
																						line: 3724, col: 15, offset: 127828,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21887},
										run: (*parser).callonsingleLineMixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21887},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21887},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonsingleLineMixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21896},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21898},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21904},
																val:        "[:!=(]",
																chars:      []rune{':', '!', '=', '('},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonsingleLineMixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=(]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 28, offset: 22253},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonsingleLineMixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 81, offset: 39601},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1238, col: 87, offset: 39607},
								expr: &ruleRefExpr{
									pos:  position{line: 1238, col: 87, offset: 39607},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 111, offset: 39631},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1238, col: 118, offset: 39638},
								expr: &ruleRefExpr{
									pos:  position{line: 1238, col: 118, offset: 39638},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeValue",
			pos:  position{line: 1252, col: 1, offset: 40046},
			expr: &choiceExpr{
				pos: position{line: 1252, col: 28, offset: 40073},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3686, col: 27, offset: 126501},
						run: (*parser).callonmixinCallAttributeValue2,
						expr: &seqExpr{
							pos: position{line: 3686, col: 27, offset: 126501},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3686, col: 27, offset: 126501},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3749, col: 14, offset: 128613},
										run: (*parser).callonmixinCallAttributeValue5,
										expr: &litMatcher{
											pos:        position{line: 3749, col: 14, offset: 128613},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3686, col: 50, offset: 126524},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3686, col: 56, offset: 126530},
										expr: &charClassMatcher{
											pos:        position{line: 3686, col: 56, offset: 126530},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3686, col: 67, offset: 126541},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3750, col: 14, offset: 128653},
										run: (*parser).callonmixinCallAttributeValue11,
										expr: &litMatcher{
											pos:        position{line: 3750, col: 14, offset: 128653},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3692, col: 5, offset: 126752},
						run: (*parser).callonmixinCallAttributeValue13,
						expr: &seqExpr{
							pos: position{line: 3692, col: 5, offset: 126752},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3692, col: 5, offset: 126752},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3749, col: 14, offset: 128613},
										run: (*parser).callonmixinCallAttributeValue16,
										expr: &litMatcher{
											pos:        position{line: 3749, col: 14, offset: 128613},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3692, col: 28, offset: 126775},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3692, col: 34, offset: 126781},
										expr: &charClassMatcher{
											pos:        position{line: 3692, col: 34, offset: 126781},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 53, offset: 40098},
						name: "expressionInterpolationValue",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 1263, col: 1, offset: 40381},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 15, offset: 40395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1263, col: 15, offset: 40395},
						run: (*parser).callonExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1263, col: 15, offset: 40395},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 22, offset: 40402},
								name: "ChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 5, offset: 40523},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "SingleLineExpression",
			pos:  position{line: 1267, col: 1, offset: 40537},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 25, offset: 40561},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1267, col: 25, offset: 40561},
						run: (*parser).callonSingleLineExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1267, col: 25, offset: 40561},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 32, offset: 40568},
								name: "SingleLineChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 5, offset: 40699},
						name: "SingleLineGoExpression",
					},
				},
			},
		},
		{
			name: "GoExpression",
			pos:  position{line: 1279, col: 1, offset: 41107},
			expr: &actionExpr{
				pos: position{line: 1279, col: 17, offset: 41123},
				run: (*parser).callonGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1279, col: 17, offset: 41123},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1279, col: 24, offset: 41130},
						expr: &choiceExpr{
							pos: position{line: 1280, col: 5, offset: 41136},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1280, col: 5, offset: 41136},
									run: (*parser).callonGoExpression5,
									expr: &labeledExpr{
										pos:   position{line: 1280, col: 5, offset: 41136},
										label: "exprI",
										expr: &choiceExpr{
											pos: position{line: 1280, col: 12, offset: 41143},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1280, col: 12, offset: 41143},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1280, col: 12, offset: 41143},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&zeroOrOneExpr{
															pos: position{line: 1280, col: 16, offset: 41147},
															expr: &ruleRefExpr{
																pos:  position{line: 1280, col: 16, offset: 41147},
																name: "goSubExpression",
															},
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonGoExpression12,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1280, col: 37, offset: 41168},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1280, col: 43, offset: 41174},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1280, col: 43, offset: 41174},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&zeroOrOneExpr{
															pos: position{line: 1280, col: 47, offset: 41178},
															expr: &ruleRefExpr{
																pos:  position{line: 1280, col: 47, offset: 41178},
																name: "goSubExpression",
															},
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonGoExpression23,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1280, col: 68, offset: 41199},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1280, col: 74, offset: 41205},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1280, col: 74, offset: 41205},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&zeroOrOneExpr{
															pos: position{line: 1280, col: 78, offset: 41209},
															expr: &ruleRefExpr{
																pos:  position{line: 1280, col: 78, offset: 41209},
																name: "goSubExpression",
															},
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonGoExpression34,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1280, col: 99, offset: 41230},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1303, col: 9, offset: 41959},
									run: (*parser).callonGoExpression41,
									expr: &seqExpr{
										pos: position{line: 1303, col: 9, offset: 41959},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1303, col: 9, offset: 41959},
												label: "parenI",
												expr: &charClassMatcher{
													pos:        position{line: 1303, col: 16, offset: 41966},
													val:        "[([{]",
													chars:      []rune{'(', '[', '{'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1303, col: 22, offset: 41972},
												label: "startPosI",
												expr: &actionExpr{
													pos: position{line: 3724, col: 8, offset: 127821},
													run: (*parser).callonGoExpression46,
													expr: &choiceExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																expr: &anyMatcher{
																	line: 3724, col: 10, offset: 127823,
																},
															},
															&notExpr{
																pos: position{line: 3724, col: 14, offset: 127827},
																expr: &anyMatcher{
																	line: 3724, col: 15, offset: 127828,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1303, col: 36, offset: 41986},
												label: "exprI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1303, col: 42, offset: 41992},
													expr: &ruleRefExpr{
														pos:  position{line: 1303, col: 42, offset: 41992},
														name: "goSubExpression",
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 1333, col: 10, offset: 43034},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonGoExpression56,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2401, col: 14, offset: 82120},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 2401, col: 14, offset: 82120},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2401, col: 14, offset: 82120},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&choiceExpr{
															pos: position{line: 2401, col: 20, offset: 82126},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 2449, col: 19, offset: 84271},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2449, col: 19, offset: 84271},
																			val:        "\\u",
																			ignoreCase: false,
																			want:       "\"\\\\u\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2450, col: 5, offset: 84330},
																	run: (*parser).callonGoExpression72,
																	expr: &seqExpr{
																		pos: position{line: 2450, col: 5, offset: 84330},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2450, col: 5, offset: 84330},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 14, offset: 84339},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 26, offset: 84351},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 38, offset: 84363},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 50, offset: 84375},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2479, col: 16, offset: 85511},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2479, col: 16, offset: 85511},
																			val:        "\\U",
																			ignoreCase: false,
																			want:       "\"\\\\U\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2480, col: 5, offset: 85614},
																	run: (*parser).callonGoExpression93,
																	expr: &seqExpr{
																		pos: position{line: 2480, col: 5, offset: 85614},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2480, col: 5, offset: 85614},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 14, offset: 85623},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 26, offset: 85635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 38, offset: 85647},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 50, offset: 85659},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 62, offset: 85671},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 74, offset: 85683},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 86, offset: 85695},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 98, offset: 85707},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2514, col: 24, offset: 87092},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2514, col: 24, offset: 87092},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2514, col: 29, offset: 87097},
																			val:        "[abfnrtv\\\\\\]",
																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2428, col: 75, offset: 83383},
																	val:        "[^\\\\\\\\n]",
																	chars:      []rune{'\'', '\\', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
																&seqExpr{
																	pos: position{line: 2430, col: 24, offset: 83529},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2430, col: 24, offset: 83529},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2431, col: 24, offset: 83596},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2431, col: 24, offset: 83596},
																			val:        "\\x",
																			ignoreCase: false,
																			want:       "\"\\\\x\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2432, col: 5, offset: 83633},
																	run: (*parser).callonGoExpression125,
																	expr: &seqExpr{
																		pos: position{line: 2432, col: 5, offset: 83633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2432, col: 5, offset: 83633},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 14, offset: 83642},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 26, offset: 83654},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2515, col: 24, offset: 87175},
																	run: (*parser).callonGoExpression132,
																	expr: &seqExpr{
																		pos: position{line: 2515, col: 24, offset: 87175},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2515, col: 24, offset: 87175},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2539, col: 5, offset: 88191},
																	run: (*parser).callonGoExpression143,
																	expr: &seqExpr{
																		pos: position{line: 2539, col: 5, offset: 88191},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 5, offset: 88191},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2560, col: 5, offset: 89032},
																	run: (*parser).callonGoExpression150,
																	expr: &seqExpr{
																		pos: position{line: 2560, col: 5, offset: 89032},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2560, col: 5, offset: 89032},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2578, col: 5, offset: 89717},
																	run: (*parser).callonGoExpression155,
																	expr: &seqExpr{
																		pos: position{line: 2578, col: 5, offset: 89717},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2578, col: 5, offset: 89717},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2578, col: 10, offset: 89722},
																				expr: &charClassMatcher{
																					pos:        position{line: 3722, col: 12, offset: 127805},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2401, col: 76, offset: 82182},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
													},
												},
												&actionExpr{
													pos: position{line: 2402, col: 5, offset: 82193},
													run: (*parser).callonGoExpression161,
													expr: &seqExpr{
														pos: position{line: 2402, col: 5, offset: 82193},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2402, col: 5, offset: 82193},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 10, offset: 82198},
																label: "valsI",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 2402, col: 16, offset: 82204},
																	expr: &choiceExpr{
																		pos: position{line: 2402, col: 17, offset: 82205},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2449, col: 19, offset: 84271},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2449, col: 19, offset: 84271},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2450, col: 5, offset: 84330},
																				run: (*parser).callonGoExpression173,
																				expr: &seqExpr{
																					pos: position{line: 2450, col: 5, offset: 84330},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2450, col: 5, offset: 84330},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 14, offset: 84339},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 26, offset: 84351},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 38, offset: 84363},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 50, offset: 84375},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2479, col: 16, offset: 85511},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2479, col: 16, offset: 85511},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2480, col: 5, offset: 85614},
																				run: (*parser).callonGoExpression194,
																				expr: &seqExpr{
																					pos: position{line: 2480, col: 5, offset: 85614},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2480, col: 5, offset: 85614},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 14, offset: 85623},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 26, offset: 85635},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 38, offset: 85647},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 50, offset: 85659},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 62, offset: 85671},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 74, offset: 85683},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 86, offset: 85695},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 98, offset: 85707},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2514, col: 24, offset: 87092},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2514, col: 24, offset: 87092},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2514, col: 29, offset: 87097},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2428, col: 75, offset: 83383},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2430, col: 24, offset: 83529},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2430, col: 24, offset: 83529},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2431, col: 24, offset: 83596},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2431, col: 24, offset: 83596},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2432, col: 5, offset: 83633},
																				run: (*parser).callonGoExpression226,
																				expr: &seqExpr{
																					pos: position{line: 2432, col: 5, offset: 83633},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2432, col: 5, offset: 83633},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 14, offset: 83642},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 26, offset: 83654},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2515, col: 24, offset: 87175},
																				run: (*parser).callonGoExpression233,
																				expr: &seqExpr{
																					pos: position{line: 2515, col: 24, offset: 87175},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2515, col: 24, offset: 87175},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2539, col: 5, offset: 88191},
																				run: (*parser).callonGoExpression244,
																				expr: &seqExpr{
																					pos: position{line: 2539, col: 5, offset: 88191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 5, offset: 88191},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2560, col: 5, offset: 89032},
																				run: (*parser).callonGoExpression251,
																				expr: &seqExpr{
																					pos: position{line: 2560, col: 5, offset: 89032},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2560, col: 5, offset: 89032},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2578, col: 5, offset: 89717},
																				run: (*parser).callonGoExpression256,
																				expr: &seqExpr{
																					pos: position{line: 2578, col: 5, offset: 89717},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2578, col: 5, offset: 89717},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2578, col: 10, offset: 89722},
																							expr: &charClassMatcher{
																								pos:        position{line: 3722, col: 12, offset: 127805},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2402, col: 74, offset: 82262},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 79, offset: 82267},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonGoExpression263,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1333, col: 27, offset: 43051},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1333, col: 46, offset: 43070},
									name: "TernaryExpression",
								},
								&seqExpr{
									pos: position{line: 1334, col: 6, offset: 43095},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonGoExpression272,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 1334, col: 11, offset: 43100},
											expr: &choiceExpr{
												pos: position{line: 1271, col: 25, offset: 40747},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 1271, col: 25, offset: 40747},
														val:        "[)}],]",
														chars:      []rune{')', '}', ']', ','},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 1271, col: 40, offset: 40762},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1271, col: 40, offset: 40762},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&notExpr{
																pos: position{line: 1271, col: 44, offset: 40766},
																expr: &litMatcher{
																	pos:        position{line: 1271, col: 45, offset: 40767},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 3722, col: 12, offset: 127805},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1334, col: 41, offset: 43130},
											expr: &seqExpr{
												pos: position{line: 1334, col: 42, offset: 43131},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1334, col: 42, offset: 43131},
														expr: &choiceExpr{
															pos: position{line: 1271, col: 25, offset: 40747},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1271, col: 25, offset: 40747},
																	val:        "[)}],]",
																	chars:      []rune{')', '}', ']', ','},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1271, col: 40, offset: 40762},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1271, col: 40, offset: 40762},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1271, col: 44, offset: 40766},
																			expr: &litMatcher{
																				pos:        position{line: 1271, col: 45, offset: 40767},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 1334, col: 64, offset: 43153},
														expr: &seqExpr{
															pos: position{line: 3721, col: 12, offset: 127772},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3721, col: 12, offset: 127772},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					expr: &litMatcher{
																						pos:        position{line: 3721, col: 16, offset: 127776},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3721, col: 22, offset: 127782},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3720, col: 12, offset: 127758},
																			expr: &anyMatcher{
																				line: 3720, col: 13, offset: 127759,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1334, col: 69, offset: 43158},
														val:        "[^\\\"`?([{]",
														chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goSubExpression",
			pos:  position{line: 1339, col: 1, offset: 43219},
			expr: &actionExpr{
				pos: position{line: 1339, col: 20, offset: 43238},
				run: (*parser).callongoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1339, col: 20, offset: 43238},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1339, col: 27, offset: 43245},
						expr: &choiceExpr{
							pos: position{line: 1340, col: 5, offset: 43251},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1340, col: 5, offset: 43251},
									run: (*parser).callongoSubExpression5,
									expr: &labeledExpr{
										pos:   position{line: 1340, col: 5, offset: 43251},
										label: "exprI",
										expr: &choiceExpr{
											pos: position{line: 1340, col: 12, offset: 43258},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1340, col: 12, offset: 43258},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1340, col: 12, offset: 43258},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1340, col: 16, offset: 43262},
															name: "goSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callongoSubExpression11,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1340, col: 36, offset: 43282},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1340, col: 42, offset: 43288},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1340, col: 42, offset: 43288},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1340, col: 46, offset: 43292},
															name: "goSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callongoSubExpression21,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1340, col: 66, offset: 43312},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1340, col: 72, offset: 43318},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1340, col: 72, offset: 43318},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1340, col: 76, offset: 43322},
															name: "goSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callongoSubExpression31,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1340, col: 96, offset: 43342},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1363, col: 9, offset: 44071},
									run: (*parser).callongoSubExpression38,
									expr: &seqExpr{
										pos: position{line: 1363, col: 9, offset: 44071},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1363, col: 9, offset: 44071},
												label: "parenI",
												expr: &charClassMatcher{
													pos:        position{line: 1363, col: 16, offset: 44078},
													val:        "[([{]",
													chars:      []rune{'(', '[', '{'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1363, col: 22, offset: 44084},
												label: "startPosI",
												expr: &actionExpr{
													pos: position{line: 3724, col: 8, offset: 127821},
													run: (*parser).callongoSubExpression43,
													expr: &choiceExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																expr: &anyMatcher{
																	line: 3724, col: 10, offset: 127823,
																},
															},
															&notExpr{
																pos: position{line: 3724, col: 14, offset: 127827},
																expr: &anyMatcher{
																	line: 3724, col: 15, offset: 127828,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1363, col: 36, offset: 44098},
												label: "exprI",
												expr: &ruleRefExpr{
													pos:  position{line: 1363, col: 42, offset: 44104},
													name: "goSubExpression",
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 1393, col: 10, offset: 45145},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callongoSubExpression52,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2401, col: 14, offset: 82120},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 2401, col: 14, offset: 82120},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2401, col: 14, offset: 82120},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&choiceExpr{
															pos: position{line: 2401, col: 20, offset: 82126},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 2449, col: 19, offset: 84271},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2449, col: 19, offset: 84271},
																			val:        "\\u",
																			ignoreCase: false,
																			want:       "\"\\\\u\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2450, col: 5, offset: 84330},
																	run: (*parser).callongoSubExpression68,
																	expr: &seqExpr{
																		pos: position{line: 2450, col: 5, offset: 84330},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2450, col: 5, offset: 84330},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 14, offset: 84339},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 26, offset: 84351},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 38, offset: 84363},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 50, offset: 84375},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2479, col: 16, offset: 85511},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2479, col: 16, offset: 85511},
																			val:        "\\U",
																			ignoreCase: false,
																			want:       "\"\\\\U\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2480, col: 5, offset: 85614},
																	run: (*parser).callongoSubExpression89,
																	expr: &seqExpr{
																		pos: position{line: 2480, col: 5, offset: 85614},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2480, col: 5, offset: 85614},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 14, offset: 85623},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 26, offset: 85635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 38, offset: 85647},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 50, offset: 85659},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 62, offset: 85671},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 74, offset: 85683},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 86, offset: 85695},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 98, offset: 85707},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2514, col: 24, offset: 87092},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2514, col: 24, offset: 87092},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2514, col: 29, offset: 87097},
																			val:        "[abfnrtv\\\\\\]",
																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2428, col: 75, offset: 83383},
																	val:        "[^\\\\\\\\n]",
																	chars:      []rune{'\'', '\\', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
																&seqExpr{
																	pos: position{line: 2430, col: 24, offset: 83529},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2430, col: 24, offset: 83529},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2431, col: 24, offset: 83596},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2431, col: 24, offset: 83596},
																			val:        "\\x",
																			ignoreCase: false,
																			want:       "\"\\\\x\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2432, col: 5, offset: 83633},
																	run: (*parser).callongoSubExpression121,
																	expr: &seqExpr{
																		pos: position{line: 2432, col: 5, offset: 83633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2432, col: 5, offset: 83633},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 14, offset: 83642},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 26, offset: 83654},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2515, col: 24, offset: 87175},
																	run: (*parser).callongoSubExpression128,
																	expr: &seqExpr{
																		pos: position{line: 2515, col: 24, offset: 87175},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2515, col: 24, offset: 87175},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2539, col: 5, offset: 88191},
																	run: (*parser).callongoSubExpression139,
																	expr: &seqExpr{
																		pos: position{line: 2539, col: 5, offset: 88191},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 5, offset: 88191},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2560, col: 5, offset: 89032},
																	run: (*parser).callongoSubExpression146,
																	expr: &seqExpr{
																		pos: position{line: 2560, col: 5, offset: 89032},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2560, col: 5, offset: 89032},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2578, col: 5, offset: 89717},
																	run: (*parser).callongoSubExpression151,
																	expr: &seqExpr{
																		pos: position{line: 2578, col: 5, offset: 89717},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2578, col: 5, offset: 89717},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2578, col: 10, offset: 89722},
																				expr: &charClassMatcher{
																					pos:        position{line: 3722, col: 12, offset: 127805},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2401, col: 76, offset: 82182},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
													},
												},
												&actionExpr{
													pos: position{line: 2402, col: 5, offset: 82193},
													run: (*parser).callongoSubExpression157,
													expr: &seqExpr{
														pos: position{line: 2402, col: 5, offset: 82193},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2402, col: 5, offset: 82193},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 10, offset: 82198},
																label: "valsI",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 2402, col: 16, offset: 82204},
																	expr: &choiceExpr{
																		pos: position{line: 2402, col: 17, offset: 82205},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2449, col: 19, offset: 84271},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2449, col: 19, offset: 84271},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2450, col: 5, offset: 84330},
																				run: (*parser).callongoSubExpression169,
																				expr: &seqExpr{
																					pos: position{line: 2450, col: 5, offset: 84330},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2450, col: 5, offset: 84330},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 14, offset: 84339},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 26, offset: 84351},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 38, offset: 84363},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 50, offset: 84375},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2479, col: 16, offset: 85511},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2479, col: 16, offset: 85511},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2480, col: 5, offset: 85614},
																				run: (*parser).callongoSubExpression190,
																				expr: &seqExpr{
																					pos: position{line: 2480, col: 5, offset: 85614},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2480, col: 5, offset: 85614},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 14, offset: 85623},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 26, offset: 85635},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 38, offset: 85647},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 50, offset: 85659},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 62, offset: 85671},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 74, offset: 85683},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 86, offset: 85695},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 98, offset: 85707},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2514, col: 24, offset: 87092},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2514, col: 24, offset: 87092},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2514, col: 29, offset: 87097},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2428, col: 75, offset: 83383},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2430, col: 24, offset: 83529},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2430, col: 24, offset: 83529},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2431, col: 24, offset: 83596},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2431, col: 24, offset: 83596},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2432, col: 5, offset: 83633},
																				run: (*parser).callongoSubExpression222,
																				expr: &seqExpr{
																					pos: position{line: 2432, col: 5, offset: 83633},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2432, col: 5, offset: 83633},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 14, offset: 83642},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 26, offset: 83654},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2515, col: 24, offset: 87175},
																				run: (*parser).callongoSubExpression229,
																				expr: &seqExpr{
																					pos: position{line: 2515, col: 24, offset: 87175},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2515, col: 24, offset: 87175},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2539, col: 5, offset: 88191},
																				run: (*parser).callongoSubExpression240,
																				expr: &seqExpr{
																					pos: position{line: 2539, col: 5, offset: 88191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 5, offset: 88191},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2560, col: 5, offset: 89032},
																				run: (*parser).callongoSubExpression247,
																				expr: &seqExpr{
																					pos: position{line: 2560, col: 5, offset: 89032},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2560, col: 5, offset: 89032},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2578, col: 5, offset: 89717},
																				run: (*parser).callongoSubExpression252,
																				expr: &seqExpr{
																					pos: position{line: 2578, col: 5, offset: 89717},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2578, col: 5, offset: 89717},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2578, col: 10, offset: 89722},
																							expr: &charClassMatcher{
																								pos:        position{line: 3722, col: 12, offset: 127805},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2402, col: 74, offset: 82262},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 79, offset: 82267},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callongoSubExpression259,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1393, col: 27, offset: 45162},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1393, col: 46, offset: 45181},
									name: "TernaryExpression",
								},
								&seqExpr{
									pos: position{line: 1394, col: 6, offset: 45206},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callongoSubExpression268,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 1394, col: 11, offset: 45211},
											val:        "[^)}]]",
											chars:      []rune{')', '}', ']'},
											ignoreCase: false,
											inverted:   true,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1394, col: 19, offset: 45219},
											expr: &charClassMatcher{
												pos:        position{line: 1394, col: 19, offset: 45219},
												val:        "[^\\\"`?([{}])]",
												chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "multiLineGoExpression",
			pos:  position{line: 1399, col: 1, offset: 45283},
			expr: &actionExpr{
				pos: position{line: 1399, col: 26, offset: 45308},
				run: (*parser).callonmultiLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1399, col: 26, offset: 45308},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1399, col: 33, offset: 45315},
						expr: &choiceExpr{
							pos: position{line: 1400, col: 5, offset: 45321},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1400, col: 5, offset: 45321},
									run: (*parser).callonmultiLineGoExpression5,
									expr: &labeledExpr{
										pos:   position{line: 1400, col: 5, offset: 45321},
										label: "exprI",
										expr: &choiceExpr{
											pos: position{line: 1400, col: 12, offset: 45328},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1400, col: 12, offset: 45328},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1400, col: 12, offset: 45328},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1400, col: 16, offset: 45332},
															name: "goSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonmultiLineGoExpression11,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1400, col: 36, offset: 45352},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1400, col: 42, offset: 45358},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1400, col: 42, offset: 45358},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1400, col: 46, offset: 45362},
															name: "goSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonmultiLineGoExpression21,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1400, col: 66, offset: 45382},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1400, col: 72, offset: 45388},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1400, col: 72, offset: 45388},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1400, col: 76, offset: 45392},
															name: "goSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonmultiLineGoExpression31,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1400, col: 96, offset: 45412},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1423, col: 9, offset: 46141},
									run: (*parser).callonmultiLineGoExpression38,
									expr: &seqExpr{
										pos: position{line: 1423, col: 9, offset: 46141},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1423, col: 9, offset: 46141},
												label: "parenI",
												expr: &charClassMatcher{
													pos:        position{line: 1423, col: 16, offset: 46148},
													val:        "[([{]",
													chars:      []rune{'(', '[', '{'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1423, col: 22, offset: 46154},
												label: "startPosI",
												expr: &actionExpr{
													pos: position{line: 3724, col: 8, offset: 127821},
													run: (*parser).callonmultiLineGoExpression43,
													expr: &choiceExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																expr: &anyMatcher{
																	line: 3724, col: 10, offset: 127823,
																},
															},
															&notExpr{
																pos: position{line: 3724, col: 14, offset: 127827},
																expr: &anyMatcher{
																	line: 3724, col: 15, offset: 127828,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1423, col: 36, offset: 46168},
												label: "exprI",
												expr: &ruleRefExpr{
													pos:  position{line: 1423, col: 42, offset: 46174},
													name: "goSubExpression",
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 1453, col: 10, offset: 47215},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonmultiLineGoExpression52,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2401, col: 14, offset: 82120},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 2401, col: 14, offset: 82120},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2401, col: 14, offset: 82120},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&choiceExpr{
															pos: position{line: 2401, col: 20, offset: 82126},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 2449, col: 19, offset: 84271},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2449, col: 19, offset: 84271},
																			val:        "\\u",
																			ignoreCase: false,
																			want:       "\"\\\\u\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2450, col: 5, offset: 84330},
																	run: (*parser).callonmultiLineGoExpression68,
																	expr: &seqExpr{
																		pos: position{line: 2450, col: 5, offset: 84330},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2450, col: 5, offset: 84330},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 14, offset: 84339},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 26, offset: 84351},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 38, offset: 84363},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 50, offset: 84375},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2479, col: 16, offset: 85511},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2479, col: 16, offset: 85511},
																			val:        "\\U",
																			ignoreCase: false,
																			want:       "\"\\\\U\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2480, col: 5, offset: 85614},
																	run: (*parser).callonmultiLineGoExpression89,
																	expr: &seqExpr{
																		pos: position{line: 2480, col: 5, offset: 85614},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2480, col: 5, offset: 85614},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 14, offset: 85623},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 26, offset: 85635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 38, offset: 85647},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 50, offset: 85659},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 62, offset: 85671},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 74, offset: 85683},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 86, offset: 85695},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 98, offset: 85707},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2514, col: 24, offset: 87092},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2514, col: 24, offset: 87092},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2514, col: 29, offset: 87097},
																			val:        "[abfnrtv\\\\\\]",
																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2428, col: 75, offset: 83383},
																	val:        "[^\\\\\\\\n]",
																	chars:      []rune{'\'', '\\', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
																&seqExpr{
																	pos: position{line: 2430, col: 24, offset: 83529},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2430, col: 24, offset: 83529},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2431, col: 24, offset: 83596},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2431, col: 24, offset: 83596},
																			val:        "\\x",
																			ignoreCase: false,
																			want:       "\"\\\\x\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2432, col: 5, offset: 83633},
																	run: (*parser).callonmultiLineGoExpression121,
																	expr: &seqExpr{
																		pos: position{line: 2432, col: 5, offset: 83633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2432, col: 5, offset: 83633},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 14, offset: 83642},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 26, offset: 83654},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2515, col: 24, offset: 87175},
																	run: (*parser).callonmultiLineGoExpression128,
																	expr: &seqExpr{
																		pos: position{line: 2515, col: 24, offset: 87175},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2515, col: 24, offset: 87175},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2539, col: 5, offset: 88191},
																	run: (*parser).callonmultiLineGoExpression139,
																	expr: &seqExpr{
																		pos: position{line: 2539, col: 5, offset: 88191},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 5, offset: 88191},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2560, col: 5, offset: 89032},
																	run: (*parser).callonmultiLineGoExpression146,
																	expr: &seqExpr{
																		pos: position{line: 2560, col: 5, offset: 89032},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2560, col: 5, offset: 89032},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2578, col: 5, offset: 89717},
																	run: (*parser).callonmultiLineGoExpression151,
																	expr: &seqExpr{
																		pos: position{line: 2578, col: 5, offset: 89717},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2578, col: 5, offset: 89717},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2578, col: 10, offset: 89722},
																				expr: &charClassMatcher{
																					pos:        position{line: 3722, col: 12, offset: 127805},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2401, col: 76, offset: 82182},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
													},
												},
												&actionExpr{
													pos: position{line: 2402, col: 5, offset: 82193},
													run: (*parser).callonmultiLineGoExpression157,
													expr: &seqExpr{
														pos: position{line: 2402, col: 5, offset: 82193},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2402, col: 5, offset: 82193},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 10, offset: 82198},
																label: "valsI",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 2402, col: 16, offset: 82204},
																	expr: &choiceExpr{
																		pos: position{line: 2402, col: 17, offset: 82205},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2449, col: 19, offset: 84271},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2449, col: 19, offset: 84271},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2450, col: 5, offset: 84330},
																				run: (*parser).callonmultiLineGoExpression169,
																				expr: &seqExpr{
																					pos: position{line: 2450, col: 5, offset: 84330},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2450, col: 5, offset: 84330},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 14, offset: 84339},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 26, offset: 84351},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 38, offset: 84363},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 50, offset: 84375},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2479, col: 16, offset: 85511},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2479, col: 16, offset: 85511},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2480, col: 5, offset: 85614},
																				run: (*parser).callonmultiLineGoExpression190,
																				expr: &seqExpr{
																					pos: position{line: 2480, col: 5, offset: 85614},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2480, col: 5, offset: 85614},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 14, offset: 85623},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 26, offset: 85635},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 38, offset: 85647},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 50, offset: 85659},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 62, offset: 85671},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 74, offset: 85683},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 86, offset: 85695},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 98, offset: 85707},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2514, col: 24, offset: 87092},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2514, col: 24, offset: 87092},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2514, col: 29, offset: 87097},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2428, col: 75, offset: 83383},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2430, col: 24, offset: 83529},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2430, col: 24, offset: 83529},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2431, col: 24, offset: 83596},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2431, col: 24, offset: 83596},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2432, col: 5, offset: 83633},
																				run: (*parser).callonmultiLineGoExpression222,
																				expr: &seqExpr{
																					pos: position{line: 2432, col: 5, offset: 83633},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2432, col: 5, offset: 83633},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 14, offset: 83642},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 26, offset: 83654},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2515, col: 24, offset: 87175},
																				run: (*parser).callonmultiLineGoExpression229,
																				expr: &seqExpr{
																					pos: position{line: 2515, col: 24, offset: 87175},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2515, col: 24, offset: 87175},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2539, col: 5, offset: 88191},
																				run: (*parser).callonmultiLineGoExpression240,
																				expr: &seqExpr{
																					pos: position{line: 2539, col: 5, offset: 88191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 5, offset: 88191},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2560, col: 5, offset: 89032},
																				run: (*parser).callonmultiLineGoExpression247,
																				expr: &seqExpr{
																					pos: position{line: 2560, col: 5, offset: 89032},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2560, col: 5, offset: 89032},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2578, col: 5, offset: 89717},
																				run: (*parser).callonmultiLineGoExpression252,
																				expr: &seqExpr{
																					pos: position{line: 2578, col: 5, offset: 89717},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2578, col: 5, offset: 89717},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2578, col: 10, offset: 89722},
																							expr: &charClassMatcher{
																								pos:        position{line: 3722, col: 12, offset: 127805},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2402, col: 74, offset: 82262},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 79, offset: 82267},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonmultiLineGoExpression259,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1453, col: 27, offset: 47232},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1453, col: 46, offset: 47251},
									name: "TernaryExpression",
								},
								&seqExpr{
									pos: position{line: 1454, col: 6, offset: 47276},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonmultiLineGoExpression268,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 1454, col: 11, offset: 47281},
											expr: &choiceExpr{
												pos: position{line: 1271, col: 25, offset: 40747},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 1271, col: 25, offset: 40747},
														val:        "[)}],]",
														chars:      []rune{')', '}', ']', ','},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 1271, col: 40, offset: 40762},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1271, col: 40, offset: 40762},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&notExpr{
																pos: position{line: 1271, col: 44, offset: 40766},
																expr: &litMatcher{
																	pos:        position{line: 1271, col: 45, offset: 40767},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
												},
											},
										},
										&anyMatcher{
											line: 1454, col: 33, offset: 47303,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1454, col: 35, offset: 47305},
											expr: &seqExpr{
												pos: position{line: 1454, col: 36, offset: 47306},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1454, col: 36, offset: 47306},
														expr: &choiceExpr{
															pos: position{line: 1271, col: 25, offset: 40747},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1271, col: 25, offset: 40747},
																	val:        "[)}],]",
																	chars:      []rune{')', '}', ']', ','},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1271, col: 40, offset: 40762},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1271, col: 40, offset: 40762},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1271, col: 44, offset: 40766},
																			expr: &litMatcher{
																				pos:        position{line: 1271, col: 45, offset: 40767},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1454, col: 58, offset: 47328},
														val:        "[^\\\"`?([{]",
														chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineGoExpression",
			pos:  position{line: 1459, col: 1, offset: 47389},
			expr: &actionExpr{
				pos: position{line: 1459, col: 27, offset: 47415},
				run: (*parser).callonSingleLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1459, col: 27, offset: 47415},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1459, col: 34, offset: 47422},
						expr: &choiceExpr{
							pos: position{line: 1460, col: 5, offset: 47428},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1460, col: 5, offset: 47428},
									run: (*parser).callonSingleLineGoExpression5,
									expr: &labeledExpr{
										pos:   position{line: 1460, col: 5, offset: 47428},
										label: "exprI",
										expr: &choiceExpr{
											pos: position{line: 1460, col: 12, offset: 47435},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1460, col: 12, offset: 47435},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1460, col: 12, offset: 47435},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1460, col: 16, offset: 47439},
															name: "singleLineGoSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonSingleLineGoExpression11,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1460, col: 46, offset: 47469},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1460, col: 52, offset: 47475},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1460, col: 52, offset: 47475},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1460, col: 56, offset: 47479},
															name: "singleLineGoSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonSingleLineGoExpression21,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1460, col: 86, offset: 47509},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1460, col: 92, offset: 47515},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1460, col: 92, offset: 47515},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1460, col: 96, offset: 47519},
															name: "singleLineGoSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonSingleLineGoExpression31,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1460, col: 126, offset: 47549},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1483, col: 9, offset: 48278},
									run: (*parser).callonSingleLineGoExpression38,
									expr: &seqExpr{
										pos: position{line: 1483, col: 9, offset: 48278},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1483, col: 9, offset: 48278},
												label: "parenI",
												expr: &charClassMatcher{
													pos:        position{line: 1483, col: 16, offset: 48285},
													val:        "[([{]",
													chars:      []rune{'(', '[', '{'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1483, col: 22, offset: 48291},
												label: "startPosI",
												expr: &actionExpr{
													pos: position{line: 3724, col: 8, offset: 127821},
													run: (*parser).callonSingleLineGoExpression43,
													expr: &choiceExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																expr: &anyMatcher{
																	line: 3724, col: 10, offset: 127823,
																},
															},
															&notExpr{
																pos: position{line: 3724, col: 14, offset: 127827},
																expr: &anyMatcher{
																	line: 3724, col: 15, offset: 127828,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1483, col: 36, offset: 48305},
												label: "exprI",
												expr: &ruleRefExpr{
													pos:  position{line: 1483, col: 42, offset: 48311},
													name: "singleLineGoSubExpression",
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 1512, col: 10, offset: 49312},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonSingleLineGoExpression52,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2401, col: 14, offset: 82120},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 2401, col: 14, offset: 82120},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2401, col: 14, offset: 82120},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&choiceExpr{
															pos: position{line: 2401, col: 20, offset: 82126},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 2449, col: 19, offset: 84271},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2449, col: 19, offset: 84271},
																			val:        "\\u",
																			ignoreCase: false,
																			want:       "\"\\\\u\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2450, col: 5, offset: 84330},
																	run: (*parser).callonSingleLineGoExpression68,
																	expr: &seqExpr{
																		pos: position{line: 2450, col: 5, offset: 84330},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2450, col: 5, offset: 84330},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 14, offset: 84339},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 26, offset: 84351},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 38, offset: 84363},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 50, offset: 84375},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2479, col: 16, offset: 85511},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2479, col: 16, offset: 85511},
																			val:        "\\U",
																			ignoreCase: false,
																			want:       "\"\\\\U\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2480, col: 5, offset: 85614},
																	run: (*parser).callonSingleLineGoExpression89,
																	expr: &seqExpr{
																		pos: position{line: 2480, col: 5, offset: 85614},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2480, col: 5, offset: 85614},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 14, offset: 85623},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 26, offset: 85635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 38, offset: 85647},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 50, offset: 85659},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 62, offset: 85671},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 74, offset: 85683},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 86, offset: 85695},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 98, offset: 85707},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2514, col: 24, offset: 87092},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2514, col: 24, offset: 87092},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2514, col: 29, offset: 87097},
																			val:        "[abfnrtv\\\\\\]",
																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2428, col: 75, offset: 83383},
																	val:        "[^\\\\\\\\n]",
																	chars:      []rune{'\'', '\\', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
																&seqExpr{
																	pos: position{line: 2430, col: 24, offset: 83529},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2430, col: 24, offset: 83529},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2431, col: 24, offset: 83596},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2431, col: 24, offset: 83596},
																			val:        "\\x",
																			ignoreCase: false,
																			want:       "\"\\\\x\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2432, col: 5, offset: 83633},
																	run: (*parser).callonSingleLineGoExpression121,
																	expr: &seqExpr{
																		pos: position{line: 2432, col: 5, offset: 83633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2432, col: 5, offset: 83633},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 14, offset: 83642},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 26, offset: 83654},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2515, col: 24, offset: 87175},
																	run: (*parser).callonSingleLineGoExpression128,
																	expr: &seqExpr{
																		pos: position{line: 2515, col: 24, offset: 87175},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2515, col: 24, offset: 87175},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2539, col: 5, offset: 88191},
																	run: (*parser).callonSingleLineGoExpression139,
																	expr: &seqExpr{
																		pos: position{line: 2539, col: 5, offset: 88191},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 5, offset: 88191},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2560, col: 5, offset: 89032},
																	run: (*parser).callonSingleLineGoExpression146,
																	expr: &seqExpr{
																		pos: position{line: 2560, col: 5, offset: 89032},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2560, col: 5, offset: 89032},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2578, col: 5, offset: 89717},
																	run: (*parser).callonSingleLineGoExpression151,
																	expr: &seqExpr{
																		pos: position{line: 2578, col: 5, offset: 89717},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2578, col: 5, offset: 89717},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2578, col: 10, offset: 89722},
																				expr: &charClassMatcher{
																					pos:        position{line: 3722, col: 12, offset: 127805},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2401, col: 76, offset: 82182},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
													},
												},
												&actionExpr{
													pos: position{line: 2402, col: 5, offset: 82193},
													run: (*parser).callonSingleLineGoExpression157,
													expr: &seqExpr{
														pos: position{line: 2402, col: 5, offset: 82193},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2402, col: 5, offset: 82193},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 10, offset: 82198},
																label: "valsI",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 2402, col: 16, offset: 82204},
																	expr: &choiceExpr{
																		pos: position{line: 2402, col: 17, offset: 82205},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2449, col: 19, offset: 84271},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2449, col: 19, offset: 84271},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2450, col: 5, offset: 84330},
																				run: (*parser).callonSingleLineGoExpression169,
																				expr: &seqExpr{
																					pos: position{line: 2450, col: 5, offset: 84330},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2450, col: 5, offset: 84330},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 14, offset: 84339},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 26, offset: 84351},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 38, offset: 84363},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 50, offset: 84375},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2479, col: 16, offset: 85511},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2479, col: 16, offset: 85511},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2480, col: 5, offset: 85614},
																				run: (*parser).callonSingleLineGoExpression190,
																				expr: &seqExpr{
																					pos: position{line: 2480, col: 5, offset: 85614},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2480, col: 5, offset: 85614},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 14, offset: 85623},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 26, offset: 85635},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 38, offset: 85647},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 50, offset: 85659},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 62, offset: 85671},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 74, offset: 85683},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 86, offset: 85695},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 98, offset: 85707},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2514, col: 24, offset: 87092},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2514, col: 24, offset: 87092},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2514, col: 29, offset: 87097},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2428, col: 75, offset: 83383},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2430, col: 24, offset: 83529},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2430, col: 24, offset: 83529},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2431, col: 24, offset: 83596},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2431, col: 24, offset: 83596},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2432, col: 5, offset: 83633},
																				run: (*parser).callonSingleLineGoExpression222,
																				expr: &seqExpr{
																					pos: position{line: 2432, col: 5, offset: 83633},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2432, col: 5, offset: 83633},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 14, offset: 83642},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 26, offset: 83654},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2515, col: 24, offset: 87175},
																				run: (*parser).callonSingleLineGoExpression229,
																				expr: &seqExpr{
																					pos: position{line: 2515, col: 24, offset: 87175},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2515, col: 24, offset: 87175},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2539, col: 5, offset: 88191},
																				run: (*parser).callonSingleLineGoExpression240,
																				expr: &seqExpr{
																					pos: position{line: 2539, col: 5, offset: 88191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 5, offset: 88191},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2560, col: 5, offset: 89032},
																				run: (*parser).callonSingleLineGoExpression247,
																				expr: &seqExpr{
																					pos: position{line: 2560, col: 5, offset: 89032},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2560, col: 5, offset: 89032},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2578, col: 5, offset: 89717},
																				run: (*parser).callonSingleLineGoExpression252,
																				expr: &seqExpr{
																					pos: position{line: 2578, col: 5, offset: 89717},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2578, col: 5, offset: 89717},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2578, col: 10, offset: 89722},
																							expr: &charClassMatcher{
																								pos:        position{line: 3722, col: 12, offset: 127805},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2402, col: 74, offset: 82262},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 79, offset: 82267},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonSingleLineGoExpression259,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1512, col: 27, offset: 49329},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1512, col: 46, offset: 49348},
									name: "SingleLineTernaryExpression",
								},
								&seqExpr{
									pos: position{line: 1513, col: 6, offset: 49383},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonSingleLineGoExpression268,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 1513, col: 11, offset: 49388},
											expr: &choiceExpr{
												pos: position{line: 1271, col: 25, offset: 40747},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 1271, col: 25, offset: 40747},
														val:        "[)}],]",
														chars:      []rune{')', '}', ']', ','},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 1271, col: 40, offset: 40762},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1271, col: 40, offset: 40762},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&notExpr{
																pos: position{line: 1271, col: 44, offset: 40766},
																expr: &litMatcher{
																	pos:        position{line: 1271, col: 45, offset: 40767},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 3722, col: 12, offset: 127805},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1513, col: 41, offset: 49418},
											expr: &seqExpr{
												pos: position{line: 1513, col: 42, offset: 49419},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1513, col: 42, offset: 49419},
														expr: &choiceExpr{
															pos: position{line: 1271, col: 25, offset: 40747},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1271, col: 25, offset: 40747},
																	val:        "[)}],]",
																	chars:      []rune{')', '}', ']', ','},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1271, col: 40, offset: 40762},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1271, col: 40, offset: 40762},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1271, col: 44, offset: 40766},
																			expr: &litMatcher{
																				pos:        position{line: 1271, col: 45, offset: 40767},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 1513, col: 64, offset: 49441},
														expr: &seqExpr{
															pos: position{line: 3721, col: 12, offset: 127772},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3721, col: 12, offset: 127772},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					expr: &litMatcher{
																						pos:        position{line: 3721, col: 16, offset: 127776},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3721, col: 22, offset: 127782},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3720, col: 12, offset: 127758},
																			expr: &anyMatcher{
																				line: 3720, col: 13, offset: 127759,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1513, col: 69, offset: 49446},
														val:        "[^\\\"`?([{]",
														chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineGoSubExpression",
			pos:  position{line: 1518, col: 1, offset: 49507},
			expr: &actionExpr{
				pos: position{line: 1518, col: 30, offset: 49536},
				run: (*parser).callonsingleLineGoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1518, col: 30, offset: 49536},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1518, col: 37, offset: 49543},
						expr: &choiceExpr{
							pos: position{line: 1519, col: 5, offset: 49549},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 1519, col: 5, offset: 49549},
									run: (*parser).callonsingleLineGoSubExpression5,
									expr: &labeledExpr{
										pos:   position{line: 1519, col: 5, offset: 49549},
										label: "exprI",
										expr: &choiceExpr{
											pos: position{line: 1519, col: 12, offset: 49556},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 1519, col: 12, offset: 49556},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1519, col: 12, offset: 49556},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1519, col: 16, offset: 49560},
															name: "singleLineGoSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonsingleLineGoSubExpression11,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1519, col: 46, offset: 49590},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1519, col: 52, offset: 49596},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1519, col: 52, offset: 49596},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1519, col: 56, offset: 49600},
															name: "singleLineGoSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonsingleLineGoSubExpression21,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1519, col: 86, offset: 49630},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 1519, col: 92, offset: 49636},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1519, col: 92, offset: 49636},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&ruleRefExpr{
															pos:  position{line: 1519, col: 96, offset: 49640},
															name: "singleLineGoSubExpression",
														},
														&actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonsingleLineGoSubExpression31,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1519, col: 126, offset: 49670},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1542, col: 9, offset: 50399},
									run: (*parser).callonsingleLineGoSubExpression38,
									expr: &seqExpr{
										pos: position{line: 1542, col: 9, offset: 50399},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1542, col: 9, offset: 50399},
												label: "parenI",
												expr: &charClassMatcher{
													pos:        position{line: 1542, col: 16, offset: 50406},
													val:        "[([{]",
													chars:      []rune{'(', '[', '{'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1542, col: 22, offset: 50412},
												label: "startPosI",
												expr: &actionExpr{
													pos: position{line: 3724, col: 8, offset: 127821},
													run: (*parser).callonsingleLineGoSubExpression43,
													expr: &choiceExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																expr: &anyMatcher{
																	line: 3724, col: 10, offset: 127823,
																},
															},
															&notExpr{
																pos: position{line: 3724, col: 14, offset: 127827},
																expr: &anyMatcher{
																	line: 3724, col: 15, offset: 127828,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1542, col: 36, offset: 50426},
												label: "exprI",
												expr: &ruleRefExpr{
													pos:  position{line: 1542, col: 42, offset: 50432},
													name: "singleLineGoSubExpression",
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 1571, col: 10, offset: 51433},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonsingleLineGoSubExpression52,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2401, col: 14, offset: 82120},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 2401, col: 14, offset: 82120},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2401, col: 14, offset: 82120},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&choiceExpr{
															pos: position{line: 2401, col: 20, offset: 82126},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 2449, col: 19, offset: 84271},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2449, col: 19, offset: 84271},
																			val:        "\\u",
																			ignoreCase: false,
																			want:       "\"\\\\u\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2450, col: 5, offset: 84330},
																	run: (*parser).callonsingleLineGoSubExpression68,
																	expr: &seqExpr{
																		pos: position{line: 2450, col: 5, offset: 84330},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2450, col: 5, offset: 84330},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 14, offset: 84339},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 26, offset: 84351},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 38, offset: 84363},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2450, col: 50, offset: 84375},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2479, col: 16, offset: 85511},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2479, col: 16, offset: 85511},
																			val:        "\\U",
																			ignoreCase: false,
																			want:       "\"\\\\U\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2480, col: 5, offset: 85614},
																	run: (*parser).callonsingleLineGoSubExpression89,
																	expr: &seqExpr{
																		pos: position{line: 2480, col: 5, offset: 85614},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2480, col: 5, offset: 85614},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 14, offset: 85623},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 26, offset: 85635},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 38, offset: 85647},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 50, offset: 85659},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 62, offset: 85671},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 74, offset: 85683},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 86, offset: 85695},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2480, col: 98, offset: 85707},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2514, col: 24, offset: 87092},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2514, col: 24, offset: 87092},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2514, col: 29, offset: 87097},
																			val:        "[abfnrtv\\\\\\]",
																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 2428, col: 75, offset: 83383},
																	val:        "[^\\\\\\\\n]",
																	chars:      []rune{'\'', '\\', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
																&seqExpr{
																	pos: position{line: 2430, col: 24, offset: 83529},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2430, col: 24, offset: 83529},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2347, col: 19, offset: 80717},
																			val:        "[0-7]",
																			ranges:     []rune{'0', '7'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2431, col: 24, offset: 83596},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2431, col: 24, offset: 83596},
																			val:        "\\x",
																			ignoreCase: false,
																			want:       "\"\\\\x\"",
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2432, col: 5, offset: 83633},
																	run: (*parser).callonsingleLineGoSubExpression121,
																	expr: &seqExpr{
																		pos: position{line: 2432, col: 5, offset: 83633},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2432, col: 5, offset: 83633},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 14, offset: 83642},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2432, col: 26, offset: 83654},
																				expr: &charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2515, col: 24, offset: 87175},
																	run: (*parser).callonsingleLineGoSubExpression128,
																	expr: &seqExpr{
																		pos: position{line: 2515, col: 24, offset: 87175},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2515, col: 24, offset: 87175},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2539, col: 5, offset: 88191},
																	run: (*parser).callonsingleLineGoSubExpression139,
																	expr: &seqExpr{
																		pos: position{line: 2539, col: 5, offset: 88191},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 5, offset: 88191},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2560, col: 5, offset: 89032},
																	run: (*parser).callonsingleLineGoSubExpression146,
																	expr: &seqExpr{
																		pos: position{line: 2560, col: 5, offset: 89032},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2560, col: 5, offset: 89032},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2348, col: 19, offset: 80741},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2578, col: 5, offset: 89717},
																	run: (*parser).callonsingleLineGoSubExpression151,
																	expr: &seqExpr{
																		pos: position{line: 2578, col: 5, offset: 89717},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2578, col: 5, offset: 89717},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2578, col: 10, offset: 89722},
																				expr: &charClassMatcher{
																					pos:        position{line: 3722, col: 12, offset: 127805},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2401, col: 76, offset: 82182},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
													},
												},
												&actionExpr{
													pos: position{line: 2402, col: 5, offset: 82193},
													run: (*parser).callonsingleLineGoSubExpression157,
													expr: &seqExpr{
														pos: position{line: 2402, col: 5, offset: 82193},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2402, col: 5, offset: 82193},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 10, offset: 82198},
																label: "valsI",
																expr: &zeroOrMoreExpr{
																	pos: position{line: 2402, col: 16, offset: 82204},
																	expr: &choiceExpr{
																		pos: position{line: 2402, col: 17, offset: 82205},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2449, col: 19, offset: 84271},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2449, col: 19, offset: 84271},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2450, col: 5, offset: 84330},
																				run: (*parser).callonsingleLineGoSubExpression169,
																				expr: &seqExpr{
																					pos: position{line: 2450, col: 5, offset: 84330},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2450, col: 5, offset: 84330},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 14, offset: 84339},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 26, offset: 84351},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 38, offset: 84363},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2450, col: 50, offset: 84375},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2479, col: 16, offset: 85511},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2479, col: 16, offset: 85511},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2480, col: 5, offset: 85614},
																				run: (*parser).callonsingleLineGoSubExpression190,
																				expr: &seqExpr{
																					pos: position{line: 2480, col: 5, offset: 85614},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2480, col: 5, offset: 85614},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 14, offset: 85623},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 26, offset: 85635},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 38, offset: 85647},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 50, offset: 85659},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 62, offset: 85671},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 74, offset: 85683},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 86, offset: 85695},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2480, col: 98, offset: 85707},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2514, col: 24, offset: 87092},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2514, col: 24, offset: 87092},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2514, col: 29, offset: 87097},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2428, col: 75, offset: 83383},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2430, col: 24, offset: 83529},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2430, col: 24, offset: 83529},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2347, col: 19, offset: 80717},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2431, col: 24, offset: 83596},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2431, col: 24, offset: 83596},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2432, col: 5, offset: 83633},
																				run: (*parser).callonsingleLineGoSubExpression222,
																				expr: &seqExpr{
																					pos: position{line: 2432, col: 5, offset: 83633},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2432, col: 5, offset: 83633},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 14, offset: 83642},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2432, col: 26, offset: 83654},
																							expr: &charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2515, col: 24, offset: 87175},
																				run: (*parser).callonsingleLineGoSubExpression229,
																				expr: &seqExpr{
																					pos: position{line: 2515, col: 24, offset: 87175},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2515, col: 24, offset: 87175},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2539, col: 5, offset: 88191},
																				run: (*parser).callonsingleLineGoSubExpression240,
																				expr: &seqExpr{
																					pos: position{line: 2539, col: 5, offset: 88191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 5, offset: 88191},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2560, col: 5, offset: 89032},
																				run: (*parser).callonsingleLineGoSubExpression247,
																				expr: &seqExpr{
																					pos: position{line: 2560, col: 5, offset: 89032},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2560, col: 5, offset: 89032},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2578, col: 5, offset: 89717},
																				run: (*parser).callonsingleLineGoSubExpression252,
																				expr: &seqExpr{
																					pos: position{line: 2578, col: 5, offset: 89717},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2578, col: 5, offset: 89717},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2578, col: 10, offset: 89722},
																							expr: &charClassMatcher{
																								pos:        position{line: 3722, col: 12, offset: 127805},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2402, col: 74, offset: 82262},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&labeledExpr{
																pos:   position{line: 2402, col: 79, offset: 82267},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonsingleLineGoSubExpression259,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1571, col: 27, offset: 51450},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1571, col: 46, offset: 51469},
									name: "SingleLineTernaryExpression",
								},
								&seqExpr{
									pos: position{line: 1572, col: 6, offset: 51504},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 3724, col: 8, offset: 127821},
											run: (*parser).callonsingleLineGoSubExpression268,
											expr: &choiceExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												alternatives: []interface{}{
													&andExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														expr: &anyMatcher{
															line: 3724, col: 10, offset: 127823,
														},
													},
													&notExpr{
														pos: position{line: 3724, col: 14, offset: 127827},
														expr: &anyMatcher{
															line: 3724, col: 15, offset: 127828,
														},
													},
												},
											},
										},
										&notExpr{
											pos: position{line: 1572, col: 11, offset: 51509},
											expr: &seqExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 1572, col: 16, offset: 51514},
											val:        "[^)}]]",
											chars:      []rune{')', '}', ']'},
											ignoreCase: false,
											inverted:   true,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1572, col: 24, offset: 51522},
											expr: &seqExpr{
												pos: position{line: 1572, col: 25, offset: 51523},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1572, col: 25, offset: 51523},
														expr: &seqExpr{
															pos: position{line: 3721, col: 12, offset: 127772},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3721, col: 12, offset: 127772},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					expr: &litMatcher{
																						pos:        position{line: 3721, col: 16, offset: 127776},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3721, col: 22, offset: 127782},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3720, col: 12, offset: 127758},
																			expr: &anyMatcher{
																				line: 3720, col: 13, offset: 127759,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1572, col: 30, offset: 51528},
														val:        "[^\\\"`?([{}])]",
														chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfExpression",
			pos:  position{line: 1583, col: 1, offset: 51826},
			expr: &choiceExpr{
				pos: position{line: 1583, col: 17, offset: 51842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1583, col: 17, offset: 51842},
						run: (*parser).callonIfExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1583, col: 17, offset: 51842},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 24, offset: 51849},
								name: "ChainExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1585, col: 5, offset: 51970},
						run: (*parser).callonIfExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1585, col: 5, offset: 51970},
							label: "exprsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1585, col: 12, offset: 51977},
								expr: &choiceExpr{
									pos: position{line: 1586, col: 5, offset: 51983},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1586, col: 5, offset: 51983},
											run: (*parser).callonIfExpression9,
											expr: &labeledExpr{
												pos:   position{line: 1586, col: 5, offset: 51983},
												label: "exprI",
												expr: &choiceExpr{
													pos: position{line: 1586, col: 12, offset: 51990},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 1586, col: 12, offset: 51990},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1586, col: 12, offset: 51990},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1586, col: 16, offset: 51994},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1586, col: 16, offset: 51994},
																		name: "goSubExpression",
																	},
																},
																&actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonIfExpression16,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1586, col: 37, offset: 52015},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
														&seqExpr{
															pos: position{line: 1586, col: 43, offset: 52021},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1586, col: 43, offset: 52021},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1586, col: 47, offset: 52025},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1586, col: 47, offset: 52025},
																		name: "goSubExpression",
																	},
																},
																&actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonIfExpression27,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1586, col: 68, offset: 52046},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
														&seqExpr{
															pos: position{line: 1586, col: 74, offset: 52052},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1586, col: 74, offset: 52052},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1586, col: 78, offset: 52056},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1586, col: 78, offset: 52056},
																		name: "goSubExpression",
																	},
																},
																&actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonIfExpression38,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1586, col: 99, offset: 52077},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1609, col: 9, offset: 52806},
											run: (*parser).callonIfExpression45,
											expr: &seqExpr{
												pos: position{line: 1609, col: 9, offset: 52806},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1609, col: 9, offset: 52806},
														label: "parenI",
														expr: &charClassMatcher{
															pos:        position{line: 1609, col: 16, offset: 52813},
															val:        "[([{]",
															chars:      []rune{'(', '[', '{'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&labeledExpr{
														pos:   position{line: 1609, col: 22, offset: 52819},
														label: "startPosI",
														expr: &actionExpr{
															pos: position{line: 3724, col: 8, offset: 127821},
															run: (*parser).callonIfExpression50,
															expr: &choiceExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		expr: &anyMatcher{
																			line: 3724, col: 10, offset: 127823,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3724, col: 14, offset: 127827},
																		expr: &anyMatcher{
																			line: 3724, col: 15, offset: 127828,
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1609, col: 36, offset: 52833},
														label: "exprI",
														expr: &zeroOrOneExpr{
															pos: position{line: 1609, col: 42, offset: 52839},
															expr: &ruleRefExpr{
																pos:  position{line: 1609, col: 42, offset: 52839},
																name: "goSubExpression",
															},
														},
													},
												},
											},
										},
										&seqExpr{
											pos: position{line: 1639, col: 10, offset: 53881},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 3724, col: 8, offset: 127821},
													run: (*parser).callonIfExpression60,
													expr: &choiceExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																expr: &anyMatcher{
																	line: 3724, col: 10, offset: 127823,
																},
															},
															&notExpr{
																pos: position{line: 3724, col: 14, offset: 127827},
																expr: &anyMatcher{
																	line: 3724, col: 15, offset: 127828,
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2401, col: 14, offset: 82120},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2401, col: 14, offset: 82120},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2401, col: 14, offset: 82120},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 2401, col: 20, offset: 82126},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 2449, col: 19, offset: 84271},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2449, col: 19, offset: 84271},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2450, col: 5, offset: 84330},
																			run: (*parser).callonIfExpression76,
																			expr: &seqExpr{
																				pos: position{line: 2450, col: 5, offset: 84330},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2450, col: 5, offset: 84330},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2450, col: 14, offset: 84339},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2450, col: 26, offset: 84351},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2450, col: 38, offset: 84363},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2450, col: 50, offset: 84375},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2479, col: 16, offset: 85511},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2479, col: 16, offset: 85511},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2480, col: 5, offset: 85614},
																			run: (*parser).callonIfExpression97,
																			expr: &seqExpr{
																				pos: position{line: 2480, col: 5, offset: 85614},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2480, col: 5, offset: 85614},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 14, offset: 85623},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 26, offset: 85635},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 38, offset: 85647},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 50, offset: 85659},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 62, offset: 85671},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 74, offset: 85683},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 86, offset: 85695},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2480, col: 98, offset: 85707},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2514, col: 24, offset: 87092},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2514, col: 24, offset: 87092},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2514, col: 29, offset: 87097},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 2428, col: 75, offset: 83383},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 2430, col: 24, offset: 83529},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2430, col: 24, offset: 83529},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2347, col: 19, offset: 80717},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2347, col: 19, offset: 80717},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2347, col: 19, offset: 80717},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2431, col: 24, offset: 83596},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2431, col: 24, offset: 83596},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2348, col: 19, offset: 80741},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2432, col: 5, offset: 83633},
																			run: (*parser).callonIfExpression129,
																			expr: &seqExpr{
																				pos: position{line: 2432, col: 5, offset: 83633},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2432, col: 5, offset: 83633},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2432, col: 14, offset: 83642},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2432, col: 26, offset: 83654},
																						expr: &charClassMatcher{
																							pos:        position{line: 2348, col: 19, offset: 80741},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2515, col: 24, offset: 87175},
																			run: (*parser).callonIfExpression136,
																			expr: &seqExpr{
																				pos: position{line: 2515, col: 24, offset: 87175},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2515, col: 24, offset: 87175},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2539, col: 5, offset: 88191},
																			run: (*parser).callonIfExpression147,
																			expr: &seqExpr{
																				pos: position{line: 2539, col: 5, offset: 88191},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2539, col: 5, offset: 88191},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2560, col: 5, offset: 89032},
																			run: (*parser).callonIfExpression154,
																			expr: &seqExpr{
																				pos: position{line: 2560, col: 5, offset: 89032},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2560, col: 5, offset: 89032},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2348, col: 19, offset: 80741},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2578, col: 5, offset: 89717},
																			run: (*parser).callonIfExpression159,
																			expr: &seqExpr{
																				pos: position{line: 2578, col: 5, offset: 89717},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2578, col: 5, offset: 89717},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2578, col: 10, offset: 89722},
																						expr: &charClassMatcher{
																							pos:        position{line: 3722, col: 12, offset: 127805},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2401, col: 76, offset: 82182},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 2402, col: 5, offset: 82193},
															run: (*parser).callonIfExpression165,
															expr: &seqExpr{
																pos: position{line: 2402, col: 5, offset: 82193},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2402, col: 5, offset: 82193},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 2402, col: 10, offset: 82198},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 2402, col: 16, offset: 82204},
																			expr: &choiceExpr{
																				pos: position{line: 2402, col: 17, offset: 82205},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 2449, col: 19, offset: 84271},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2449, col: 19, offset: 84271},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2450, col: 5, offset: 84330},
																						run: (*parser).callonIfExpression177,
																						expr: &seqExpr{
																							pos: position{line: 2450, col: 5, offset: 84330},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2450, col: 5, offset: 84330},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2450, col: 14, offset: 84339},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2450, col: 26, offset: 84351},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2450, col: 38, offset: 84363},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2450, col: 50, offset: 84375},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2479, col: 16, offset: 85511},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2479, col: 16, offset: 85511},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2480, col: 5, offset: 85614},
																						run: (*parser).callonIfExpression198,
																						expr: &seqExpr{
																							pos: position{line: 2480, col: 5, offset: 85614},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2480, col: 5, offset: 85614},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 14, offset: 85623},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 26, offset: 85635},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 38, offset: 85647},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 50, offset: 85659},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 62, offset: 85671},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 74, offset: 85683},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 86, offset: 85695},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2480, col: 98, offset: 85707},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2514, col: 24, offset: 87092},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2514, col: 24, offset: 87092},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2514, col: 29, offset: 87097},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 2428, col: 75, offset: 83383},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 2430, col: 24, offset: 83529},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2430, col: 24, offset: 83529},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2347, col: 19, offset: 80717},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2347, col: 19, offset: 80717},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2347, col: 19, offset: 80717},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2431, col: 24, offset: 83596},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2431, col: 24, offset: 83596},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2348, col: 19, offset: 80741},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2432, col: 5, offset: 83633},
																						run: (*parser).callonIfExpression230,
																						expr: &seqExpr{
																							pos: position{line: 2432, col: 5, offset: 83633},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2432, col: 5, offset: 83633},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2432, col: 14, offset: 83642},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2432, col: 26, offset: 83654},
																									expr: &charClassMatcher{
																										pos:        position{line: 2348, col: 19, offset: 80741},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2515, col: 24, offset: 87175},
																						run: (*parser).callonIfExpression237,
																						expr: &seqExpr{
																							pos: position{line: 2515, col: 24, offset: 87175},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2515, col: 24, offset: 87175},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2539, col: 5, offset: 88191},
																						run: (*parser).callonIfExpression248,
																						expr: &seqExpr{
																							pos: position{line: 2539, col: 5, offset: 88191},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2539, col: 5, offset: 88191},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2560, col: 5, offset: 89032},
																						run: (*parser).callonIfExpression255,
																						expr: &seqExpr{
																							pos: position{line: 2560, col: 5, offset: 89032},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2560, col: 5, offset: 89032},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2348, col: 19, offset: 80741},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2578, col: 5, offset: 89717},
																						run: (*parser).callonIfExpression260,
																						expr: &seqExpr{
																							pos: position{line: 2578, col: 5, offset: 89717},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2578, col: 5, offset: 89717},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2578, col: 10, offset: 89722},
																									expr: &charClassMatcher{
																										pos:        position{line: 3722, col: 12, offset: 127805},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2402, col: 74, offset: 82262},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 2402, col: 79, offset: 82267},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 3724, col: 8, offset: 127821},
																			run: (*parser).callonIfExpression267,
																			expr: &choiceExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3724, col: 9, offset: 127822},
																						expr: &anyMatcher{
																							line: 3724, col: 10, offset: 127823,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3724, col: 14, offset: 127827},
																						expr: &anyMatcher{
																							line: 3724, col: 15, offset: 127828,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 27, offset: 53898},
											name: "StringExpression",
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 46, offset: 53917},
											name: "TernaryExpression",
										},
										&seqExpr{
											pos: position{line: 1640, col: 6, offset: 53942},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 3724, col: 8, offset: 127821},
													run: (*parser).callonIfExpression276,
													expr: &choiceExpr{
														pos: position{line: 3724, col: 9, offset: 127822},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3724, col: 9, offset: 127822},
																expr: &anyMatcher{
																	line: 3724, col: 10, offset: 127823,
																},
															},
															&notExpr{
																pos: position{line: 3724, col: 14, offset: 127827},
																expr: &anyMatcher{
																	line: 3724, col: 15, offset: 127828,
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1640, col: 11, offset: 53947},
													expr: &choiceExpr{
														pos: position{line: 1581, col: 27, offset: 51807},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1581, col: 27, offset: 51807},
																val:        "[)}]]",
																chars:      []rune{')', '}', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 1581, col: 36, offset: 51816},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1581, col: 36, offset: 51816},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																	&notExpr{
																		pos: position{line: 1581, col: 40, offset: 51820},
																		expr: &litMatcher{
																			pos:        position{line: 1581, col: 41, offset: 51821},
																			val:        "=",
																			ignoreCase: false,
																			want:       "\"=\"",
																		},
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 3722, col: 12, offset: 127805},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1640, col: 43, offset: 53979},
													expr: &seqExpr{
														pos: position{line: 1640, col: 44, offset: 53980},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1640, col: 44, offset: 53980},
																expr: &choiceExpr{
																	pos: position{line: 1581, col: 27, offset: 51807},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1581, col: 27, offset: 51807},
																			val:        "[)}]]",
																			chars:      []rune{')', '}', ']'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 1581, col: 36, offset: 51816},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1581, col: 36, offset: 51816},
																					val:        ":",
																					ignoreCase: false,
																					want:       "\":\"",
																				},
																				&notExpr{
																					pos: position{line: 1581, col: 40, offset: 51820},
																					expr: &litMatcher{
																						pos:        position{line: 1581, col: 41, offset: 51821},
																						val:        "=",
																						ignoreCase: false,
																						want:       "\"=\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 1640, col: 68, offset: 54004},
																expr: &seqExpr{
																	pos: position{line: 3721, col: 12, offset: 127772},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 3721, col: 12, offset: 127772},
																			expr: &charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3721, col: 16, offset: 127776},
																							expr: &litMatcher{
																								pos:        position{line: 3721, col: 16, offset: 127776},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3721, col: 22, offset: 127782},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3720, col: 12, offset: 127758},
																					expr: &anyMatcher{
																						line: 3720, col: 13, offset: 127759,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 1640, col: 73, offset: 54009},
																val:        "[^\\\"`?([{]",
																chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpression",
			pos:  position{line: 1687, col: 1, offset: 55372},
			expr: &choiceExpr{
				pos: position{line: 1687, col: 21, offset: 55392},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1687, col: 21, offset: 55392},
						name: "InterpretedStringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1687, col: 51, offset: 55422},
						name: "RawStringExpression",
					},
				},
			},
		},
		{
			name: "InterpretedStringExpression",
			pos:  position{line: 1689, col: 1, offset: 55443},
			expr: &choiceExpr{
				pos: position{line: 1689, col: 32, offset: 55474},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1689, col: 32, offset: 55474},
						run: (*parser).callonInterpretedStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1689, col: 32, offset: 55474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1689, col: 32, offset: 55474},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1689, col: 36, offset: 55478},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1689, col: 46, offset: 55488},
										expr: &ruleRefExpr{
											pos:  position{line: 1689, col: 46, offset: 55488},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1689, col: 79, offset: 55521},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1695, col: 5, offset: 55690},
						run: (*parser).callonInterpretedStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1695, col: 5, offset: 55690},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1695, col: 5, offset: 55690},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1695, col: 9, offset: 55694},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonInterpretedStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1695, col: 23, offset: 55708},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1695, col: 33, offset: 55718},
										expr: &ruleRefExpr{
											pos:  position{line: 1695, col: 33, offset: 55718},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawStringExpression",
			pos:  position{line: 1715, col: 1, offset: 56368},
			expr: &choiceExpr{
				pos: position{line: 1715, col: 24, offset: 56391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1715, col: 24, offset: 56391},
						run: (*parser).callonRawStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1715, col: 24, offset: 56391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1715, col: 24, offset: 56391},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1715, col: 28, offset: 56395},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1715, col: 38, offset: 56405},
										expr: &ruleRefExpr{
											pos:  position{line: 1715, col: 38, offset: 56405},
											name: "RawStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1715, col: 63, offset: 56430},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1721, col: 5, offset: 56599},
						run: (*parser).callonRawStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1721, col: 5, offset: 56599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1721, col: 5, offset: 56599},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1721, col: 9, offset: 56603},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonRawStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1721, col: 23, offset: 56617},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1721, col: 33, offset: 56627},
										expr: &ruleRefExpr{
											pos:  position{line: 1721, col: 33, offset: 56627},
											name: "RawStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpretedStringExpressionItem",
			pos:  position{line: 1742, col: 1, offset: 57269},
			expr: &choiceExpr{
				pos: position{line: 1742, col: 36, offset: 57304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1745, col: 36, offset: 57495},
						run: (*parser).callonInterpretedStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1745, col: 36, offset: 57495},
							expr: &choiceExpr{
								pos: position{line: 1745, col: 37, offset: 57496},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1745, col: 37, offset: 57496},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1745, col: 44, offset: 57503},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1745, col: 44, offset: 57503},
												expr: &litMatcher{
													pos:        position{line: 1745, col: 45, offset: 57504},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&choiceExpr{
												pos: position{line: 2704, col: 36, offset: 94468},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2449, col: 19, offset: 84271},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2449, col: 19, offset: 84271},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2450, col: 5, offset: 84330},
														run: (*parser).callonInterpretedStringExpressionItem16,
														expr: &seqExpr{
															pos: position{line: 2450, col: 5, offset: 84330},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2450, col: 5, offset: 84330},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 14, offset: 84339},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 26, offset: 84351},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 38, offset: 84363},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 50, offset: 84375},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2479, col: 16, offset: 85511},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2479, col: 16, offset: 85511},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2480, col: 5, offset: 85614},
														run: (*parser).callonInterpretedStringExpressionItem37,
														expr: &seqExpr{
															pos: position{line: 2480, col: 5, offset: 85614},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2480, col: 5, offset: 85614},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 14, offset: 85623},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 26, offset: 85635},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 38, offset: 85647},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 50, offset: 85659},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 62, offset: 85671},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 74, offset: 85683},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 86, offset: 85695},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 98, offset: 85707},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2707, col: 36, offset: 94644},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2707, col: 36, offset: 94644},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2707, col: 41, offset: 94649},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2705, col: 38, offset: 94536},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2430, col: 24, offset: 83529},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2430, col: 24, offset: 83529},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&charClassMatcher{
												pos:        position{line: 2347, col: 19, offset: 80717},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2347, col: 19, offset: 80717},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2347, col: 19, offset: 80717},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2431, col: 24, offset: 83596},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2431, col: 24, offset: 83596},
												val:        "\\x",
												ignoreCase: false,
												want:       "\"\\\\x\"",
											},
											&charClassMatcher{
												pos:        position{line: 2348, col: 19, offset: 80741},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2348, col: 19, offset: 80741},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2432, col: 5, offset: 83633},
										run: (*parser).callonInterpretedStringExpressionItem69,
										expr: &seqExpr{
											pos: position{line: 2432, col: 5, offset: 83633},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2432, col: 5, offset: 83633},
													val:        "\\x",
													ignoreCase: false,
													want:       "\"\\\\x\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2432, col: 14, offset: 83642},
													expr: &charClassMatcher{
														pos:        position{line: 2348, col: 19, offset: 80741},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2432, col: 26, offset: 83654},
													expr: &charClassMatcher{
														pos:        position{line: 2348, col: 19, offset: 80741},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2594, col: 37, offset: 90294},
										run: (*parser).callonInterpretedStringExpressionItem76,
										expr: &seqExpr{
											pos: position{line: 2594, col: 37, offset: 90294},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2594, col: 37, offset: 90294},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2618, col: 5, offset: 91311},
										run: (*parser).callonInterpretedStringExpressionItem87,
										expr: &seqExpr{
											pos: position{line: 2618, col: 5, offset: 91311},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2618, col: 5, offset: 91311},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2639, col: 5, offset: 92153},
										run: (*parser).callonInterpretedStringExpressionItem94,
										expr: &seqExpr{
											pos: position{line: 2639, col: 5, offset: 92153},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2639, col: 5, offset: 92153},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2348, col: 19, offset: 80741},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2657, col: 5, offset: 92839},
										run: (*parser).callonInterpretedStringExpressionItem99,
										expr: &seqExpr{
											pos: position{line: 2657, col: 5, offset: 92839},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2657, col: 5, offset: 92839},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2657, col: 10, offset: 92844},
													expr: &charClassMatcher{
														pos:        position{line: 3722, col: 12, offset: 127805},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1742, col: 70, offset: 57338},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "RawStringExpressionItem",
			pos:  position{line: 1743, col: 1, offset: 57368},
			expr: &choiceExpr{
				pos: position{line: 1743, col: 36, offset: 57403},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1751, col: 28, offset: 57727},
						run: (*parser).callonRawStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1751, col: 28, offset: 57727},
							expr: &choiceExpr{
								pos: position{line: 1751, col: 29, offset: 57728},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1751, col: 29, offset: 57728},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1751, col: 36, offset: 57735},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1751, col: 36, offset: 57735},
												expr: &litMatcher{
													pos:        position{line: 1751, col: 37, offset: 57736},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 2691, col: 27, offset: 93866},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1743, col: 62, offset: 57429},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "StringExpressionInterpolation",
			pos:  position{line: 1758, col: 1, offset: 57875},
			expr: &choiceExpr{
				pos: position{line: 1758, col: 34, offset: 57908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1758, col: 34, offset: 57908},
						run: (*parser).callonStringExpressionInterpolation2,
						expr: &seqExpr{
							pos: position{line: 1758, col: 34, offset: 57908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1758, col: 34, offset: 57908},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 38, offset: 57912},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1758, col: 48, offset: 57922},
										expr: &litMatcher{
											pos:        position{line: 1758, col: 48, offset: 57922},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 53, offset: 57927},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1758, col: 67, offset: 57941},
										expr: &choiceExpr{
											pos: position{line: 1823, col: 17, offset: 60435},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1823, col: 17, offset: 60435},
													run: (*parser).callonStringExpressionInterpolation11,
													expr: &seqExpr{
														pos: position{line: 1823, col: 17, offset: 60435},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1823, col: 17, offset: 60435},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1823, col: 21, offset: 60439},
																expr: &charClassMatcher{
																	pos:        position{line: 1845, col: 12, offset: 61353},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1823, col: 30, offset: 60448},
																expr: &seqExpr{
																	pos: position{line: 1823, col: 31, offset: 60449},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1823, col: 31, offset: 60449},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1823, col: 36, offset: 60454},
																			expr: &charClassMatcher{
																				pos:        position{line: 1823, col: 36, offset: 60454},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1823, col: 45, offset: 60463},
																expr: &seqExpr{
																	pos: position{line: 1823, col: 46, offset: 60464},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1823, col: 46, offset: 60464},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1823, col: 50, offset: 60468},
																			expr: &charClassMatcher{
																				pos:        position{line: 1823, col: 50, offset: 60468},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1846, col: 12, offset: 61372},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1846, col: 12, offset: 61372},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1846, col: 74, offset: 61434},
																		run: (*parser).callonStringExpressionInterpolation28,
																		expr: &andExpr{
																			pos: position{line: 1846, col: 74, offset: 61434},
																			expr: &charClassMatcher{
																				pos:        position{line: 1846, col: 76, offset: 61436},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1858, col: 5, offset: 61973},
																		run: (*parser).callonStringExpressionInterpolation31,
																		expr: &anyMatcher{
																			line: 1858, col: 5, offset: 61973,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1825, col: 5, offset: 60526},
													run: (*parser).callonStringExpressionInterpolation33,
													expr: &seqExpr{
														pos: position{line: 1825, col: 5, offset: 60526},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1825, col: 5, offset: 60526},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1825, col: 9, offset: 60530},
																expr: &charClassMatcher{
																	pos:        position{line: 1825, col: 9, offset: 60530},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1825, col: 17, offset: 60538},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonStringExpressionInterpolation39,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1758, col: 81, offset: 57955},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 85, offset: 57959},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1758, col: 91, offset: 57965},
										name: "SingleLineExpression",
									},
								},
								&litMatcher{
									pos:        position{line: 1758, col: 112, offset: 57986},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1765, col: 5, offset: 58209},
						run: (*parser).callonStringExpressionInterpolation49,
						expr: &seqExpr{
							pos: position{line: 1765, col: 5, offset: 58209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1765, col: 5, offset: 58209},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1765, col: 9, offset: 58213},
									label: "noEscapeI",
									expr: &litMatcher{
										pos:        position{line: 1765, col: 19, offset: 58223},
										val:        "!",
										ignoreCase: false,
										want:       "\"!\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1765, col: 23, offset: 58227},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1765, col: 37, offset: 58241},
										expr: &choiceExpr{
											pos: position{line: 1823, col: 17, offset: 60435},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1823, col: 17, offset: 60435},
													run: (*parser).callonStringExpressionInterpolation57,
													expr: &seqExpr{
														pos: position{line: 1823, col: 17, offset: 60435},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1823, col: 17, offset: 60435},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1823, col: 21, offset: 60439},
																expr: &charClassMatcher{
																	pos:        position{line: 1845, col: 12, offset: 61353},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1823, col: 30, offset: 60448},
																expr: &seqExpr{
																	pos: position{line: 1823, col: 31, offset: 60449},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1823, col: 31, offset: 60449},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1823, col: 36, offset: 60454},
																			expr: &charClassMatcher{
																				pos:        position{line: 1823, col: 36, offset: 60454},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1823, col: 45, offset: 60463},
																expr: &seqExpr{
																	pos: position{line: 1823, col: 46, offset: 60464},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1823, col: 46, offset: 60464},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1823, col: 50, offset: 60468},
																			expr: &charClassMatcher{
																				pos:        position{line: 1823, col: 50, offset: 60468},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1846, col: 12, offset: 61372},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1846, col: 12, offset: 61372},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1846, col: 74, offset: 61434},
																		run: (*parser).callonStringExpressionInterpolation74,
																		expr: &andExpr{
																			pos: position{line: 1846, col: 74, offset: 61434},
																			expr: &charClassMatcher{
																				pos:        position{line: 1846, col: 76, offset: 61436},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1858, col: 5, offset: 61973},
																		run: (*parser).callonStringExpressionInterpolation77,
																		expr: &anyMatcher{
																			line: 1858, col: 5, offset: 61973,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1825, col: 5, offset: 60526},
													run: (*parser).callonStringExpressionInterpolation79,
													expr: &seqExpr{
														pos: position{line: 1825, col: 5, offset: 60526},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1825, col: 5, offset: 60526},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1825, col: 9, offset: 60530},
																expr: &charClassMatcher{
																	pos:        position{line: 1825, col: 9, offset: 60530},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1825, col: 17, offset: 60538},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonStringExpressionInterpolation85,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1765, col: 51, offset: 58255},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonStringExpressionInterpolation92,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1793, col: 5, offset: 59280},
						run: (*parser).callonStringExpressionInterpolation98,
						expr: &seqExpr{
							pos: position{line: 1793, col: 5, offset: 59280},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1793, col: 5, offset: 59280},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1793, col: 9, offset: 59284},
									label: "noEscapeI",
									expr: &litMatcher{
										pos:        position{line: 1793, col: 19, offset: 59294},
										val:        "!",
										ignoreCase: false,
										want:       "\"!\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1793, col: 23, offset: 59298},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1793, col: 37, offset: 59312},
										expr: &choiceExpr{
											pos: position{line: 1823, col: 17, offset: 60435},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1823, col: 17, offset: 60435},
													run: (*parser).callonStringExpressionInterpolation106,
													expr: &seqExpr{
														pos: position{line: 1823, col: 17, offset: 60435},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1823, col: 17, offset: 60435},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1823, col: 21, offset: 60439},
																expr: &charClassMatcher{
																	pos:        position{line: 1845, col: 12, offset: 61353},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1823, col: 30, offset: 60448},
																expr: &seqExpr{
																	pos: position{line: 1823, col: 31, offset: 60449},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1823, col: 31, offset: 60449},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1823, col: 36, offset: 60454},
																			expr: &charClassMatcher{
																				pos:        position{line: 1823, col: 36, offset: 60454},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1823, col: 45, offset: 60463},
																expr: &seqExpr{
																	pos: position{line: 1823, col: 46, offset: 60464},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1823, col: 46, offset: 60464},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1823, col: 50, offset: 60468},
																			expr: &charClassMatcher{
																				pos:        position{line: 1823, col: 50, offset: 60468},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1846, col: 12, offset: 61372},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1846, col: 12, offset: 61372},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1846, col: 74, offset: 61434},
																		run: (*parser).callonStringExpressionInterpolation123,
																		expr: &andExpr{
																			pos: position{line: 1846, col: 74, offset: 61434},
																			expr: &charClassMatcher{
																				pos:        position{line: 1846, col: 76, offset: 61436},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1858, col: 5, offset: 61973},
																		run: (*parser).callonStringExpressionInterpolation126,
																		expr: &anyMatcher{
																			line: 1858, col: 5, offset: 61973,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1825, col: 5, offset: 60526},
													run: (*parser).callonStringExpressionInterpolation128,
													expr: &seqExpr{
														pos: position{line: 1825, col: 5, offset: 60526},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1825, col: 5, offset: 60526},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1825, col: 9, offset: 60530},
																expr: &charClassMatcher{
																	pos:        position{line: 1825, col: 9, offset: 60530},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1825, col: 17, offset: 60538},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonStringExpressionInterpolation134,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1793, col: 51, offset: 59326},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonStringExpressionInterpolation141,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1793, col: 65, offset: 59340},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&labeledExpr{
									pos:   position{line: 1793, col: 69, offset: 59344},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonStringExpressionInterpolation149,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1793, col: 83, offset: 59358},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1793, col: 89, offset: 59364},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TernaryExpression",
			pos:  position{line: 1882, col: 1, offset: 62788},
			expr: &choiceExpr{
				pos: position{line: 1882, col: 22, offset: 62809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1882, col: 22, offset: 62809},
						run: (*parser).callonTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1882, col: 22, offset: 62809},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1882, col: 22, offset: 62809},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1882, col: 27, offset: 62814},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1882, col: 31, offset: 62818},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1882, col: 42, offset: 62829},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1882, col: 64, offset: 62851},
									expr: &litMatcher{
										pos:        position{line: 1882, col: 64, offset: 62851},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1882, col: 69, offset: 62856},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1882, col: 73, offset: 62860},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1882, col: 77, offset: 62864},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1882, col: 85, offset: 62872},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1882, col: 107, offset: 62894},
									expr: &litMatcher{
										pos:        position{line: 1882, col: 107, offset: 62894},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1882, col: 112, offset: 62899},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1882, col: 116, offset: 62903},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1882, col: 120, offset: 62907},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1882, col: 129, offset: 62916},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1882, col: 151, offset: 62938},
									expr: &litMatcher{
										pos:        position{line: 1882, col: 151, offset: 62938},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1882, col: 156, offset: 62943},
									expr: &seqExpr{
										pos: position{line: 1882, col: 157, offset: 62944},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1882, col: 157, offset: 62944},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1882, col: 161, offset: 62948},
												expr: &choiceExpr{
													pos: position{line: 3737, col: 20, offset: 128237},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1882, col: 167, offset: 62954},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonTernaryExpression51,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1890, col: 5, offset: 63235},
						run: (*parser).callonTernaryExpression53,
						expr: &seqExpr{
							pos: position{line: 1890, col: 5, offset: 63235},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1890, col: 5, offset: 63235},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1890, col: 10, offset: 63240},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonTernaryExpression57,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1890, col: 24, offset: 63254},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1890, col: 28, offset: 63258},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonTernaryExpression71,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1904, col: 5, offset: 63849},
						run: (*parser).callonTernaryExpression73,
						expr: &seqExpr{
							pos: position{line: 1904, col: 5, offset: 63849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1904, col: 5, offset: 63849},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1904, col: 10, offset: 63854},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1904, col: 14, offset: 63858},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1904, col: 25, offset: 63869},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1904, col: 47, offset: 63891},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1876, col: 13, offset: 62699},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1876, col: 13, offset: 62699},
												run: (*parser).callonTernaryExpression87,
												expr: &seqExpr{
													pos: position{line: 1876, col: 13, offset: 62699},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 13, offset: 62699},
															expr: &litMatcher{
																pos:        position{line: 1876, col: 13, offset: 62699},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1876, col: 18, offset: 62704},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1876, col: 22, offset: 62708},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonTernaryExpression93,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 31, offset: 62717},
															expr: &choiceExpr{
																pos: position{line: 3737, col: 20, offset: 128237},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3734, col: 36, offset: 128160},
																				expr: &litMatcher{
																					pos:        position{line: 3734, col: 36, offset: 128160},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3734, col: 42, offset: 128166},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1878, col: 5, offset: 62748},
												run: (*parser).callonTernaryExpression106,
												expr: &seqExpr{
													pos: position{line: 1878, col: 5, offset: 62748},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1878, col: 5, offset: 62748},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonTernaryExpression109,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1878, col: 14, offset: 62757},
															expr: &litMatcher{
																pos:        position{line: 1878, col: 14, offset: 62757},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1904, col: 66, offset: 63910},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonTernaryExpression118,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1919, col: 5, offset: 64536},
						run: (*parser).callonTernaryExpression120,
						expr: &seqExpr{
							pos: position{line: 1919, col: 5, offset: 64536},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1919, col: 5, offset: 64536},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1919, col: 10, offset: 64541},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 14, offset: 64545},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1919, col: 25, offset: 64556},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1919, col: 47, offset: 64578},
									expr: &litMatcher{
										pos:        position{line: 1919, col: 47, offset: 64578},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1919, col: 52, offset: 64583},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1919, col: 56, offset: 64587},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 60, offset: 64591},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1919, col: 68, offset: 64599},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 90, offset: 64621},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1876, col: 13, offset: 62699},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1876, col: 13, offset: 62699},
												run: (*parser).callonTernaryExpression146,
												expr: &seqExpr{
													pos: position{line: 1876, col: 13, offset: 62699},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 13, offset: 62699},
															expr: &litMatcher{
																pos:        position{line: 1876, col: 13, offset: 62699},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1876, col: 18, offset: 62704},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1876, col: 22, offset: 62708},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonTernaryExpression152,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 31, offset: 62717},
															expr: &choiceExpr{
																pos: position{line: 3737, col: 20, offset: 128237},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3734, col: 36, offset: 128160},
																				expr: &litMatcher{
																					pos:        position{line: 3734, col: 36, offset: 128160},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3734, col: 42, offset: 128166},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1878, col: 5, offset: 62748},
												run: (*parser).callonTernaryExpression165,
												expr: &seqExpr{
													pos: position{line: 1878, col: 5, offset: 62748},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1878, col: 5, offset: 62748},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonTernaryExpression168,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1878, col: 14, offset: 62757},
															expr: &litMatcher{
																pos:        position{line: 1878, col: 14, offset: 62757},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 109, offset: 64640},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonTernaryExpression177,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineTernaryExpression",
			pos:  position{line: 1937, col: 1, offset: 65287},
			expr: &choiceExpr{
				pos: position{line: 1937, col: 32, offset: 65318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1937, col: 32, offset: 65318},
						run: (*parser).callonSingleLineTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1937, col: 32, offset: 65318},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1937, col: 32, offset: 65318},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1937, col: 37, offset: 65323},
									expr: &litMatcher{
										pos:        position{line: 1937, col: 37, offset: 65323},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1937, col: 42, offset: 65328},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1937, col: 53, offset: 65339},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1937, col: 76, offset: 65362},
									expr: &litMatcher{
										pos:        position{line: 1937, col: 76, offset: 65362},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1937, col: 81, offset: 65367},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1937, col: 85, offset: 65371},
									expr: &litMatcher{
										pos:        position{line: 1937, col: 85, offset: 65371},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1937, col: 90, offset: 65376},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1937, col: 98, offset: 65384},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1937, col: 121, offset: 65407},
									expr: &litMatcher{
										pos:        position{line: 1937, col: 121, offset: 65407},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1937, col: 126, offset: 65412},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1937, col: 130, offset: 65416},
									expr: &litMatcher{
										pos:        position{line: 1937, col: 130, offset: 65416},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1937, col: 135, offset: 65421},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1937, col: 144, offset: 65430},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1937, col: 167, offset: 65453},
									expr: &litMatcher{
										pos:        position{line: 1937, col: 167, offset: 65453},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1937, col: 172, offset: 65458},
									expr: &seqExpr{
										pos: position{line: 1937, col: 173, offset: 65459},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1937, col: 173, offset: 65459},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1937, col: 177, offset: 65463},
												expr: &litMatcher{
													pos:        position{line: 1937, col: 177, offset: 65463},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1937, col: 184, offset: 65470},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonSingleLineTernaryExpression31,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1945, col: 5, offset: 65751},
						run: (*parser).callonSingleLineTernaryExpression33,
						expr: &seqExpr{
							pos: position{line: 1945, col: 5, offset: 65751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1945, col: 5, offset: 65751},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1945, col: 10, offset: 65756},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonSingleLineTernaryExpression37,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1945, col: 24, offset: 65770},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1945, col: 28, offset: 65774},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonSingleLineTernaryExpression51,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1959, col: 5, offset: 66365},
						run: (*parser).callonSingleLineTernaryExpression53,
						expr: &seqExpr{
							pos: position{line: 1959, col: 5, offset: 66365},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1959, col: 5, offset: 66365},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1959, col: 10, offset: 66370},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1959, col: 14, offset: 66374},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1959, col: 25, offset: 66385},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1959, col: 48, offset: 66408},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1876, col: 13, offset: 62699},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1876, col: 13, offset: 62699},
												run: (*parser).callonSingleLineTernaryExpression67,
												expr: &seqExpr{
													pos: position{line: 1876, col: 13, offset: 62699},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 13, offset: 62699},
															expr: &litMatcher{
																pos:        position{line: 1876, col: 13, offset: 62699},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1876, col: 18, offset: 62704},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1876, col: 22, offset: 62708},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonSingleLineTernaryExpression73,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 31, offset: 62717},
															expr: &choiceExpr{
																pos: position{line: 3737, col: 20, offset: 128237},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3734, col: 36, offset: 128160},
																				expr: &litMatcher{
																					pos:        position{line: 3734, col: 36, offset: 128160},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3734, col: 42, offset: 128166},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1878, col: 5, offset: 62748},
												run: (*parser).callonSingleLineTernaryExpression86,
												expr: &seqExpr{
													pos: position{line: 1878, col: 5, offset: 62748},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1878, col: 5, offset: 62748},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonSingleLineTernaryExpression89,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1878, col: 14, offset: 62757},
															expr: &litMatcher{
																pos:        position{line: 1878, col: 14, offset: 62757},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1959, col: 67, offset: 66427},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonSingleLineTernaryExpression98,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1974, col: 5, offset: 67053},
						run: (*parser).callonSingleLineTernaryExpression100,
						expr: &seqExpr{
							pos: position{line: 1974, col: 5, offset: 67053},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1974, col: 5, offset: 67053},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1974, col: 10, offset: 67058},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1974, col: 14, offset: 67062},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1974, col: 25, offset: 67073},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1974, col: 48, offset: 67096},
									expr: &litMatcher{
										pos:        position{line: 1974, col: 48, offset: 67096},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1974, col: 53, offset: 67101},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1974, col: 57, offset: 67105},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1974, col: 61, offset: 67109},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1974, col: 69, offset: 67117},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1974, col: 92, offset: 67140},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1876, col: 13, offset: 62699},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1876, col: 13, offset: 62699},
												run: (*parser).callonSingleLineTernaryExpression126,
												expr: &seqExpr{
													pos: position{line: 1876, col: 13, offset: 62699},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 13, offset: 62699},
															expr: &litMatcher{
																pos:        position{line: 1876, col: 13, offset: 62699},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1876, col: 18, offset: 62704},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1876, col: 22, offset: 62708},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonSingleLineTernaryExpression132,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1876, col: 31, offset: 62717},
															expr: &choiceExpr{
																pos: position{line: 3737, col: 20, offset: 128237},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3734, col: 36, offset: 128160},
																				expr: &litMatcher{
																					pos:        position{line: 3734, col: 36, offset: 128160},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3734, col: 42, offset: 128166},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1878, col: 5, offset: 62748},
												run: (*parser).callonSingleLineTernaryExpression145,
												expr: &seqExpr{
													pos: position{line: 1878, col: 5, offset: 62748},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1878, col: 5, offset: 62748},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonSingleLineTernaryExpression148,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1878, col: 14, offset: 62757},
															expr: &litMatcher{
																pos:        position{line: 1878, col: 14, offset: 62757},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1974, col: 111, offset: 67159},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonSingleLineTernaryExpression157,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpression",
			pos:  position{line: 1996, col: 1, offset: 67997},
			expr: &choiceExpr{
				pos: position{line: 1996, col: 20, offset: 68016},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1996, col: 20, offset: 68016},
						run: (*parser).callonChainExpression2,
						expr: &seqExpr{
							pos: position{line: 1996, col: 20, offset: 68016},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1996, col: 20, offset: 68016},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1996, col: 28, offset: 68024},
										expr: &litMatcher{
											pos:        position{line: 1996, col: 28, offset: 68024},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1996, col: 33, offset: 68029},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 1996, col: 39, offset: 68035},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 1996, col: 59, offset: 68055},
									label: "checkRootI",
									expr: &litMatcher{
										pos:        position{line: 1996, col: 70, offset: 68066},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1996, col: 74, offset: 68070},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1996, col: 81, offset: 68077},
										expr: &ruleRefExpr{
											pos:  position{line: 1996, col: 81, offset: 68077},
											name: "ChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1997, col: 20, offset: 68117},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1997, col: 29, offset: 68126},
										expr: &seqExpr{
											pos: position{line: 1997, col: 30, offset: 68127},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1997, col: 30, offset: 68127},
													expr: &litMatcher{
														pos:        position{line: 1997, col: 30, offset: 68127},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1997, col: 35, offset: 68132},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonChainExpression20,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1997, col: 51, offset: 68148},
													val:        "~",
													ignoreCase: false,
													want:       "\"~\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1997, col: 55, offset: 68152},
													expr: &choiceExpr{
														pos: position{line: 3737, col: 20, offset: 128237},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3733, col: 36, offset: 128119},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		expr: &litMatcher{
																			pos:        position{line: 3734, col: 36, offset: 128160},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3734, col: 42, offset: 128166},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1997, col: 59, offset: 68156},
													name: "GoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1997, col: 74, offset: 68171},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonChainExpression36,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1997, col: 86, offset: 68183},
									expr: &choiceExpr{
										pos: position{line: 1997, col: 88, offset: 68185},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1271, col: 25, offset: 40747},
												val:        "[)}],]",
												chars:      []rune{')', '}', ']', ','},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 1271, col: 40, offset: 40762},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1271, col: 40, offset: 40762},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&notExpr{
														pos: position{line: 1271, col: 44, offset: 40766},
														expr: &litMatcher{
															pos:        position{line: 1271, col: 45, offset: 40767},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1997, col: 116, offset: 68213},
									run: (*parser).callonChainExpression59,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 2015, col: 5, offset: 68805},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 2015, col: 5, offset: 68805},
								label: "startPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonChainExpression62,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2015, col: 19, offset: 68819},
								label: "derefsI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2015, col: 27, offset: 68827},
									expr: &litMatcher{
										pos:        position{line: 2015, col: 27, offset: 68827},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2015, col: 32, offset: 68832},
								label: "rootI",
								expr: &ruleRefExpr{
									pos:  position{line: 2015, col: 38, offset: 68838},
									name: "chainExpressionRoot",
								},
							},
							&labeledExpr{
								pos:   position{line: 2015, col: 58, offset: 68858},
								label: "checkRootI",
								expr: &litMatcher{
									pos:        position{line: 2015, col: 69, offset: 68869},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 2015, col: 73, offset: 68873},
								label: "chainI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2015, col: 80, offset: 68880},
									expr: &ruleRefExpr{
										pos:  position{line: 2015, col: 80, offset: 68880},
										name: "ChainExpressionItem",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2015, col: 101, offset: 68901},
								label: "endPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonChainExpression79,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2015, col: 113, offset: 68913},
								run: (*parser).callonChainExpression85,
							},
							&labeledExpr{
								pos:   position{line: 2017, col: 3, offset: 68979},
								label: "malStartPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonChainExpression87,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2017, col: 20, offset: 68996},
								name: "GoExpression",
							},
							&labeledExpr{
								pos:   position{line: 2017, col: 33, offset: 69009},
								label: "malEndPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonChainExpression95,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2017, col: 48, offset: 69024},
								run: (*parser).callonChainExpression101,
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRoot",
			pos:  position{line: 2050, col: 1, offset: 70252},
			expr: &choiceExpr{
				pos: position{line: 2050, col: 24, offset: 70275},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2050, col: 24, offset: 70275},
						run: (*parser).callonchainExpressionRoot2,
						expr: &seqExpr{
							pos: position{line: 2050, col: 24, offset: 70275},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2050, col: 24, offset: 70275},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 2050, col: 28, offset: 70279},
									expr: &ruleRefExpr{
										pos:  position{line: 2050, col: 28, offset: 70279},
										name: "chainExpressionRootParenContent",
									},
								},
								&litMatcher{
									pos:        position{line: 2050, col: 61, offset: 70312},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2055, col: 5, offset: 70425},
						run: (*parser).callonchainExpressionRoot8,
						expr: &labeledExpr{
							pos:   position{line: 2055, col: 5, offset: 70425},
							label: "identI",
							expr: &choiceExpr{
								pos: position{line: 2306, col: 12, offset: 79446},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2306, col: 12, offset: 79446},
										run: (*parser).callonchainExpressionRoot11,
										expr: &labeledExpr{
											pos:   position{line: 2306, col: 12, offset: 79446},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2354, col: 17, offset: 80792},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2337, col: 20, offset: 80547},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2354, col: 26, offset: 80801},
														expr: &charClassMatcher{
															pos:        position{line: 2337, col: 20, offset: 80547},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2308, col: 5, offset: 79540},
										run: (*parser).callonchainExpressionRoot17,
										expr: &seqExpr{
											pos: position{line: 2308, col: 5, offset: 79540},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2308, col: 5, offset: 79540},
													label: "identI",
													expr: &seqExpr{
														pos: position{line: 2308, col: 13, offset: 79548},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 2308, col: 13, offset: 79548},
																expr: &litMatcher{
																	pos:        position{line: 2308, col: 13, offset: 79548},
																	val:        "$",
																	ignoreCase: false,
																	want:       "\"$\"",
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 2308, col: 18, offset: 79553},
																expr: &choiceExpr{
																	pos: position{line: 2308, col: 19, offset: 79554},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 2308, col: 19, offset: 79554},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2308, col: 19, offset: 79554},
																					val:        "[\\pNd]",
																					classes:    []*unicode.RangeTable{rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2308, col: 28, offset: 79563},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 2308, col: 38, offset: 79573},
																			val:        "[_-\\pL]",
																			chars:      []rune{'_', '-'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2308, col: 49, offset: 79584},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonchainExpressionRoot30,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRootParenContent",
			pos:  position{line: 2062, col: 1, offset: 70587},
			expr: &choiceExpr{
				pos: position{line: 2062, col: 36, offset: 70622},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2062, col: 36, offset: 70622},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2062, col: 36, offset: 70622},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2062, col: 40, offset: 70626},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2062, col: 72, offset: 70658},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2063, col: 36, offset: 70699},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2063, col: 36, offset: 70699},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2063, col: 40, offset: 70703},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2063, col: 72, offset: 70735},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2064, col: 36, offset: 70776},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2064, col: 36, offset: 70776},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2064, col: 40, offset: 70780},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2064, col: 72, offset: 70812},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2065, col: 36, offset: 70853},
						expr: &charClassMatcher{
							pos:        position{line: 2065, col: 36, offset: 70853},
							val:        "[^({[]})]",
							chars:      []rune{'(', '{', '[', ']', '}', ')'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpression",
			pos:  position{line: 2067, col: 1, offset: 70866},
			expr: &choiceExpr{
				pos: position{line: 2067, col: 30, offset: 70895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2067, col: 30, offset: 70895},
						run: (*parser).callonSingleLineChainExpression2,
						expr: &seqExpr{
							pos: position{line: 2067, col: 30, offset: 70895},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2067, col: 30, offset: 70895},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2067, col: 38, offset: 70903},
										expr: &litMatcher{
											pos:        position{line: 2067, col: 38, offset: 70903},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2067, col: 43, offset: 70908},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 2067, col: 49, offset: 70914},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 2067, col: 69, offset: 70934},
									label: "checkRootI",
									expr: &litMatcher{
										pos:        position{line: 2067, col: 80, offset: 70945},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2067, col: 84, offset: 70949},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2067, col: 91, offset: 70956},
										expr: &ruleRefExpr{
											pos:  position{line: 2067, col: 91, offset: 70956},
											name: "SingleLineChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2068, col: 30, offset: 71016},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2068, col: 39, offset: 71025},
										expr: &seqExpr{
											pos: position{line: 2068, col: 40, offset: 71026},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 2068, col: 40, offset: 71026},
													expr: &litMatcher{
														pos:        position{line: 2068, col: 40, offset: 71026},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2068, col: 45, offset: 71031},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonSingleLineChainExpression20,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2068, col: 61, offset: 71047},
													val:        "?!",
													ignoreCase: false,
													want:       "\"?!\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2068, col: 66, offset: 71052},
													expr: &litMatcher{
														pos:        position{line: 2068, col: 66, offset: 71052},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2068, col: 71, offset: 71057},
													name: "SingleLineGoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2068, col: 96, offset: 71082},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonSingleLineChainExpression31,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2068, col: 108, offset: 71094},
									expr: &choiceExpr{
										pos: position{line: 2068, col: 110, offset: 71096},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1271, col: 25, offset: 40747},
												val:        "[)}],]",
												chars:      []rune{')', '}', ']', ','},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 1271, col: 40, offset: 40762},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1271, col: 40, offset: 40762},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&notExpr{
														pos: position{line: 1271, col: 44, offset: 40766},
														expr: &litMatcher{
															pos:        position{line: 1271, col: 45, offset: 40767},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2068, col: 138, offset: 71124},
									run: (*parser).callonSingleLineChainExpression54,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 2086, col: 5, offset: 71716},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 2086, col: 5, offset: 71716},
								label: "startPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonSingleLineChainExpression57,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2086, col: 19, offset: 71730},
								label: "derefsI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2086, col: 27, offset: 71738},
									expr: &litMatcher{
										pos:        position{line: 2086, col: 27, offset: 71738},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2086, col: 32, offset: 71743},
								label: "rootI",
								expr: &ruleRefExpr{
									pos:  position{line: 2086, col: 38, offset: 71749},
									name: "chainExpressionRoot",
								},
							},
							&labeledExpr{
								pos:   position{line: 2086, col: 58, offset: 71769},
								label: "checkRootI",
								expr: &litMatcher{
									pos:        position{line: 2086, col: 69, offset: 71780},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
							&labeledExpr{
								pos:   position{line: 2086, col: 73, offset: 71784},
								label: "chainI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2086, col: 80, offset: 71791},
									expr: &ruleRefExpr{
										pos:  position{line: 2086, col: 80, offset: 71791},
										name: "SingleLineChainExpressionItem",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2086, col: 111, offset: 71822},
								label: "endPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonSingleLineChainExpression74,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2086, col: 123, offset: 71834},
								run: (*parser).callonSingleLineChainExpression80,
							},
							&labeledExpr{
								pos:   position{line: 2088, col: 3, offset: 71900},
								label: "malStartPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonSingleLineChainExpression82,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2088, col: 20, offset: 71917},
								name: "GoExpression",
							},
							&labeledExpr{
								pos:   position{line: 2088, col: 33, offset: 71930},
								label: "malEndPosI",
								expr: &actionExpr{
									pos: position{line: 3724, col: 8, offset: 127821},
									run: (*parser).callonSingleLineChainExpression90,
									expr: &choiceExpr{
										pos: position{line: 3724, col: 9, offset: 127822},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3724, col: 9, offset: 127822},
												expr: &anyMatcher{
													line: 3724, col: 10, offset: 127823,
												},
											},
											&notExpr{
												pos: position{line: 3724, col: 14, offset: 127827},
												expr: &anyMatcher{
													line: 3724, col: 15, offset: 127828,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2088, col: 48, offset: 71945},
								run: (*parser).callonSingleLineChainExpression96,
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineChainExpressionRootParenContent",
			pos:  position{line: 2128, col: 1, offset: 73359},
			expr: &choiceExpr{
				pos: position{line: 2128, col: 46, offset: 73404},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2128, col: 46, offset: 73404},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2128, col: 46, offset: 73404},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2128, col: 50, offset: 73408},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2128, col: 92, offset: 73450},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2129, col: 46, offset: 73501},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2129, col: 46, offset: 73501},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2129, col: 50, offset: 73505},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2129, col: 92, offset: 73547},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2130, col: 46, offset: 73598},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2130, col: 46, offset: 73598},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2130, col: 50, offset: 73602},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2130, col: 92, offset: 73644},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2131, col: 46, offset: 73695},
						expr: &charClassMatcher{
							pos:        position{line: 2131, col: 46, offset: 73695},
							val:        "[^({[]})\\r\\n]",
							chars:      []rune{'(', '{', '[', ']', '}', ')', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "ChainExpressionItem",
			pos:  position{line: 2137, col: 1, offset: 73744},
			expr: &choiceExpr{
				pos: position{line: 2137, col: 34, offset: 73777},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2137, col: 34, offset: 73777},
						name: "IndexExpression",
					},
					&actionExpr{
						pos: position{line: 2161, col: 23, offset: 74809},
						run: (*parser).callonChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2161, col: 23, offset: 74809},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2161, col: 23, offset: 74809},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2161, col: 27, offset: 74813},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2161, col: 31, offset: 74817},
									label: "identI",
									expr: &choiceExpr{
										pos: position{line: 2306, col: 12, offset: 79446},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2306, col: 12, offset: 79446},
												run: (*parser).callonChainExpressionItem15,
												expr: &labeledExpr{
													pos:   position{line: 2306, col: 12, offset: 79446},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2354, col: 17, offset: 80792},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2337, col: 20, offset: 80547},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2354, col: 26, offset: 80801},
																expr: &charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2308, col: 5, offset: 79540},
												run: (*parser).callonChainExpressionItem21,
												expr: &seqExpr{
													pos: position{line: 2308, col: 5, offset: 79540},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2308, col: 5, offset: 79540},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2308, col: 13, offset: 79548},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2308, col: 13, offset: 79548},
																		expr: &litMatcher{
																			pos:        position{line: 2308, col: 13, offset: 79548},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2308, col: 18, offset: 79553},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 19, offset: 79554},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2308, col: 19, offset: 79554},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 19, offset: 79554},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 28, offset: 79563},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2308, col: 38, offset: 79573},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2308, col: 49, offset: 79584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonChainExpressionItem34,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2161, col: 46, offset: 74832},
									label: "checkI",
									expr: &litMatcher{
										pos:        position{line: 2161, col: 53, offset: 74839},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2137, col: 73, offset: 73816},
						name: "ParenExpression",
					},
					&actionExpr{
						pos: position{line: 2217, col: 28, offset: 76521},
						run: (*parser).callonChainExpressionItem43,
						expr: &seqExpr{
							pos: position{line: 2217, col: 28, offset: 76521},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2217, col: 28, offset: 76521},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 33, offset: 76526},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2217, col: 42, offset: 76535},
										expr: &seqExpr{
											pos: position{line: 2217, col: 43, offset: 76536},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2306, col: 12, offset: 79446},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2306, col: 12, offset: 79446},
															run: (*parser).callonChainExpressionItem50,
															expr: &labeledExpr{
																pos:   position{line: 2306, col: 12, offset: 79446},
																label: "ident",
																expr: &seqExpr{
																	pos: position{line: 2354, col: 17, offset: 80792},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2354, col: 26, offset: 80801},
																			expr: &charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2308, col: 5, offset: 79540},
															run: (*parser).callonChainExpressionItem56,
															expr: &seqExpr{
																pos: position{line: 2308, col: 5, offset: 79540},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2308, col: 5, offset: 79540},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 2308, col: 13, offset: 79548},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2308, col: 13, offset: 79548},
																					expr: &litMatcher{
																						pos:        position{line: 2308, col: 13, offset: 79548},
																						val:        "$",
																						ignoreCase: false,
																						want:       "\"$\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2308, col: 18, offset: 79553},
																					expr: &choiceExpr{
																						pos: position{line: 2308, col: 19, offset: 79554},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2308, col: 19, offset: 79554},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 2308, col: 19, offset: 79554},
																										val:        "[\\pNd]",
																										classes:    []*unicode.RangeTable{rangeTable("Nd")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2308, col: 28, offset: 79563},
																										val:        "[_-\\pL]",
																										chars:      []rune{'_', '-'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 2308, col: 38, offset: 79573},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2308, col: 49, offset: 79584},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 3724, col: 8, offset: 127821},
																			run: (*parser).callonChainExpressionItem69,
																			expr: &choiceExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3724, col: 9, offset: 127822},
																						expr: &anyMatcher{
																							line: 3724, col: 10, offset: 127823,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3724, col: 14, offset: 127827},
																						expr: &anyMatcher{
																							line: 3724, col: 15, offset: 127828,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2217, col: 51, offset: 76544},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 57, offset: 76550},
									label: "typeI",
									expr: &choiceExpr{
										pos: position{line: 2306, col: 12, offset: 79446},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2306, col: 12, offset: 79446},
												run: (*parser).callonChainExpressionItem78,
												expr: &labeledExpr{
													pos:   position{line: 2306, col: 12, offset: 79446},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2354, col: 17, offset: 80792},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2337, col: 20, offset: 80547},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2354, col: 26, offset: 80801},
																expr: &charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2308, col: 5, offset: 79540},
												run: (*parser).callonChainExpressionItem84,
												expr: &seqExpr{
													pos: position{line: 2308, col: 5, offset: 79540},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2308, col: 5, offset: 79540},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2308, col: 13, offset: 79548},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2308, col: 13, offset: 79548},
																		expr: &litMatcher{
																			pos:        position{line: 2308, col: 13, offset: 79548},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2308, col: 18, offset: 79553},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 19, offset: 79554},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2308, col: 19, offset: 79554},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 19, offset: 79554},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 28, offset: 79563},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2308, col: 38, offset: 79573},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2308, col: 49, offset: 79584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonChainExpressionItem97,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 71, offset: 76564},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonChainExpressionItem104,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 90, offset: 76583},
									label: "checkI",
									expr: &litMatcher{
										pos:        position{line: 2217, col: 97, offset: 76590},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpressionItem",
			pos:  position{line: 2138, col: 1, offset: 73858},
			expr: &choiceExpr{
				pos: position{line: 2138, col: 34, offset: 73891},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2138, col: 34, offset: 73891},
						name: "SingleLineIndexExpression",
					},
					&actionExpr{
						pos: position{line: 2169, col: 33, offset: 75021},
						run: (*parser).callonSingleLineChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2169, col: 33, offset: 75021},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2169, col: 33, offset: 75021},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2169, col: 37, offset: 75025},
									expr: &litMatcher{
										pos:        position{line: 2169, col: 37, offset: 75025},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2169, col: 42, offset: 75030},
									label: "identI",
									expr: &choiceExpr{
										pos: position{line: 2306, col: 12, offset: 79446},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2306, col: 12, offset: 79446},
												run: (*parser).callonSingleLineChainExpressionItem10,
												expr: &labeledExpr{
													pos:   position{line: 2306, col: 12, offset: 79446},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2354, col: 17, offset: 80792},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2337, col: 20, offset: 80547},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2354, col: 26, offset: 80801},
																expr: &charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2308, col: 5, offset: 79540},
												run: (*parser).callonSingleLineChainExpressionItem16,
												expr: &seqExpr{
													pos: position{line: 2308, col: 5, offset: 79540},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2308, col: 5, offset: 79540},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2308, col: 13, offset: 79548},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2308, col: 13, offset: 79548},
																		expr: &litMatcher{
																			pos:        position{line: 2308, col: 13, offset: 79548},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2308, col: 18, offset: 79553},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 19, offset: 79554},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2308, col: 19, offset: 79554},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 19, offset: 79554},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 28, offset: 79563},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2308, col: 38, offset: 79573},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2308, col: 49, offset: 79584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonSingleLineChainExpressionItem29,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2169, col: 57, offset: 75045},
									label: "checkI",
									expr: &litMatcher{
										pos:        position{line: 2169, col: 64, offset: 75052},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2139, col: 34, offset: 73983},
						name: "SingleLineParenExpression",
					},
					&actionExpr{
						pos: position{line: 2217, col: 28, offset: 76521},
						run: (*parser).callonSingleLineChainExpressionItem38,
						expr: &seqExpr{
							pos: position{line: 2217, col: 28, offset: 76521},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2217, col: 28, offset: 76521},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 33, offset: 76526},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2217, col: 42, offset: 76535},
										expr: &seqExpr{
											pos: position{line: 2217, col: 43, offset: 76536},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2306, col: 12, offset: 79446},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2306, col: 12, offset: 79446},
															run: (*parser).callonSingleLineChainExpressionItem45,
															expr: &labeledExpr{
																pos:   position{line: 2306, col: 12, offset: 79446},
																label: "ident",
																expr: &seqExpr{
																	pos: position{line: 2354, col: 17, offset: 80792},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2354, col: 26, offset: 80801},
																			expr: &charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2308, col: 5, offset: 79540},
															run: (*parser).callonSingleLineChainExpressionItem51,
															expr: &seqExpr{
																pos: position{line: 2308, col: 5, offset: 79540},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2308, col: 5, offset: 79540},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 2308, col: 13, offset: 79548},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2308, col: 13, offset: 79548},
																					expr: &litMatcher{
																						pos:        position{line: 2308, col: 13, offset: 79548},
																						val:        "$",
																						ignoreCase: false,
																						want:       "\"$\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2308, col: 18, offset: 79553},
																					expr: &choiceExpr{
																						pos: position{line: 2308, col: 19, offset: 79554},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2308, col: 19, offset: 79554},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 2308, col: 19, offset: 79554},
																										val:        "[\\pNd]",
																										classes:    []*unicode.RangeTable{rangeTable("Nd")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2308, col: 28, offset: 79563},
																										val:        "[_-\\pL]",
																										chars:      []rune{'_', '-'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 2308, col: 38, offset: 79573},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2308, col: 49, offset: 79584},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 3724, col: 8, offset: 127821},
																			run: (*parser).callonSingleLineChainExpressionItem64,
																			expr: &choiceExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3724, col: 9, offset: 127822},
																						expr: &anyMatcher{
																							line: 3724, col: 10, offset: 127823,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3724, col: 14, offset: 127827},
																						expr: &anyMatcher{
																							line: 3724, col: 15, offset: 127828,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2217, col: 51, offset: 76544},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 57, offset: 76550},
									label: "typeI",
									expr: &choiceExpr{
										pos: position{line: 2306, col: 12, offset: 79446},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2306, col: 12, offset: 79446},
												run: (*parser).callonSingleLineChainExpressionItem73,
												expr: &labeledExpr{
													pos:   position{line: 2306, col: 12, offset: 79446},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2354, col: 17, offset: 80792},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2337, col: 20, offset: 80547},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2354, col: 26, offset: 80801},
																expr: &charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2308, col: 5, offset: 79540},
												run: (*parser).callonSingleLineChainExpressionItem79,
												expr: &seqExpr{
													pos: position{line: 2308, col: 5, offset: 79540},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2308, col: 5, offset: 79540},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2308, col: 13, offset: 79548},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2308, col: 13, offset: 79548},
																		expr: &litMatcher{
																			pos:        position{line: 2308, col: 13, offset: 79548},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2308, col: 18, offset: 79553},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 19, offset: 79554},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2308, col: 19, offset: 79554},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 19, offset: 79554},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 28, offset: 79563},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2308, col: 38, offset: 79573},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2308, col: 49, offset: 79584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonSingleLineChainExpressionItem92,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 71, offset: 76564},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonSingleLineChainExpressionItem99,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 90, offset: 76583},
									label: "checkI",
									expr: &litMatcher{
										pos:        position{line: 2217, col: 97, offset: 76590},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexExpression",
			pos:  position{line: 2141, col: 1, offset: 74046},
			expr: &actionExpr{
				pos: position{line: 2141, col: 20, offset: 74065},
				run: (*parser).callonIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2141, col: 20, offset: 74065},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3746, col: 12, offset: 128534},
							run: (*parser).callonIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3746, col: 12, offset: 128534},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2141, col: 28, offset: 74073},
							expr: &choiceExpr{
								pos: position{line: 3737, col: 20, offset: 128237},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3734, col: 36, offset: 128160},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												expr: &litMatcher{
													pos:        position{line: 3734, col: 36, offset: 128160},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3734, col: 42, offset: 128166},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2141, col: 32, offset: 74077},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2141, col: 38, offset: 74083},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2141, col: 51, offset: 74096},
							label: "checkIndexI",
							expr: &litMatcher{
								pos:        position{line: 2141, col: 63, offset: 74108},
								val:        "?",
								ignoreCase: false,
								want:       "\"?\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2141, col: 67, offset: 74112},
							expr: &seqExpr{
								pos: position{line: 2141, col: 68, offset: 74113},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2141, col: 68, offset: 74113},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2141, col: 72, offset: 74117},
										expr: &choiceExpr{
											pos: position{line: 3737, col: 20, offset: 128237},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															expr: &litMatcher{
																pos:        position{line: 3734, col: 36, offset: 128160},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3734, col: 42, offset: 128166},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2141, col: 78, offset: 74123},
							expr: &litMatcher{
								pos:        position{line: 2141, col: 78, offset: 74123},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2141, col: 83, offset: 74128},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3747, col: 12, offset: 128572},
								run: (*parser).callonIndexExpression29,
								expr: &litMatcher{
									pos:        position{line: 3747, col: 12, offset: 128572},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2141, col: 102, offset: 74147},
							label: "checkValueI",
							expr: &litMatcher{
								pos:        position{line: 2141, col: 114, offset: 74159},
								val:        "?",
								ignoreCase: false,
								want:       "\"?\"",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineIndexExpression",
			pos:  position{line: 2151, col: 1, offset: 74406},
			expr: &actionExpr{
				pos: position{line: 2151, col: 30, offset: 74435},
				run: (*parser).callonSingleLineIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2151, col: 30, offset: 74435},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3746, col: 12, offset: 128534},
							run: (*parser).callonSingleLineIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3746, col: 12, offset: 128534},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2151, col: 38, offset: 74443},
							expr: &choiceExpr{
								pos: position{line: 3737, col: 20, offset: 128237},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3734, col: 36, offset: 128160},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												expr: &litMatcher{
													pos:        position{line: 3734, col: 36, offset: 128160},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3734, col: 42, offset: 128166},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2151, col: 42, offset: 74447},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2151, col: 48, offset: 74453},
								name: "SingleLineGoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2151, col: 71, offset: 74476},
							label: "checkIndexI",
							expr: &litMatcher{
								pos:        position{line: 2151, col: 83, offset: 74488},
								val:        "?",
								ignoreCase: false,
								want:       "\"?\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2151, col: 87, offset: 74492},
							expr: &seqExpr{
								pos: position{line: 2151, col: 88, offset: 74493},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2151, col: 88, offset: 74493},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2151, col: 92, offset: 74497},
										expr: &litMatcher{
											pos:        position{line: 2151, col: 92, offset: 74497},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2151, col: 99, offset: 74504},
							expr: &litMatcher{
								pos:        position{line: 2151, col: 99, offset: 74504},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2151, col: 104, offset: 74509},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3747, col: 12, offset: 128572},
								run: (*parser).callonSingleLineIndexExpression24,
								expr: &litMatcher{
									pos:        position{line: 3747, col: 12, offset: 128572},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2151, col: 123, offset: 74528},
							label: "checkValueI",
							expr: &litMatcher{
								pos:        position{line: 2151, col: 135, offset: 74540},
								val:        "?",
								ignoreCase: false,
								want:       "\"?\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpression",
			pos:  position{line: 2177, col: 1, offset: 75202},
			expr: &actionExpr{
				pos: position{line: 2177, col: 20, offset: 75221},
				run: (*parser).callonParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2177, col: 20, offset: 75221},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3743, col: 12, offset: 128457},
							run: (*parser).callonParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3743, col: 12, offset: 128457},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2177, col: 28, offset: 75229},
							expr: &litMatcher{
								pos:        position{line: 2177, col: 28, offset: 75229},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2177, col: 33, offset: 75234},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2177, col: 39, offset: 75240},
								expr: &ruleRefExpr{
									pos:  position{line: 2177, col: 39, offset: 75240},
									name: "parenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2177, col: 60, offset: 75261},
							expr: &litMatcher{
								pos:        position{line: 2177, col: 60, offset: 75261},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2177, col: 65, offset: 75266},
							expr: &seqExpr{
								pos: position{line: 2177, col: 66, offset: 75267},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2177, col: 66, offset: 75267},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2177, col: 70, offset: 75271},
										expr: &choiceExpr{
											pos: position{line: 3737, col: 20, offset: 128237},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															expr: &litMatcher{
																pos:        position{line: 3734, col: 36, offset: 128160},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3734, col: 42, offset: 128166},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2177, col: 76, offset: 75277},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3744, col: 12, offset: 128495},
								run: (*parser).callonParenExpression23,
								expr: &litMatcher{
									pos:        position{line: 3744, col: 12, offset: 128495},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2177, col: 95, offset: 75296},
							label: "checkI",
							expr: &litMatcher{
								pos:        position{line: 2177, col: 102, offset: 75303},
								val:        "?",
								ignoreCase: false,
								want:       "\"?\"",
							},
						},
					},
				},
			},
		},
		{
			name: "parenExpressionArgs",
			pos:  position{line: 2185, col: 1, offset: 75493},
			expr: &actionExpr{
				pos: position{line: 2185, col: 24, offset: 75516},
				run: (*parser).callonparenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2185, col: 24, offset: 75516},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2185, col: 24, offset: 75516},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2185, col: 31, offset: 75523},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2185, col: 44, offset: 75536},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2185, col: 50, offset: 75542},
								expr: &seqExpr{
									pos: position{line: 2185, col: 51, offset: 75543},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2185, col: 51, offset: 75543},
											expr: &litMatcher{
												pos:        position{line: 2185, col: 51, offset: 75543},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2185, col: 56, offset: 75548},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2185, col: 60, offset: 75552},
											expr: &choiceExpr{
												pos: position{line: 3737, col: 20, offset: 128237},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																expr: &litMatcher{
																	pos:        position{line: 3734, col: 36, offset: 128160},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3734, col: 42, offset: 128166},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2185, col: 64, offset: 75556},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineParenExpression",
			pos:  position{line: 2197, col: 1, offset: 75823},
			expr: &actionExpr{
				pos: position{line: 2197, col: 30, offset: 75852},
				run: (*parser).callonSingleLineParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2197, col: 30, offset: 75852},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3743, col: 12, offset: 128457},
							run: (*parser).callonSingleLineParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3743, col: 12, offset: 128457},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2197, col: 38, offset: 75860},
							expr: &litMatcher{
								pos:        position{line: 2197, col: 38, offset: 75860},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2197, col: 43, offset: 75865},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2197, col: 49, offset: 75871},
								expr: &ruleRefExpr{
									pos:  position{line: 2197, col: 49, offset: 75871},
									name: "singleLinearenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2197, col: 79, offset: 75901},
							expr: &litMatcher{
								pos:        position{line: 2197, col: 79, offset: 75901},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2197, col: 84, offset: 75906},
							expr: &seqExpr{
								pos: position{line: 2197, col: 85, offset: 75907},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2197, col: 85, offset: 75907},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2197, col: 89, offset: 75911},
										expr: &litMatcher{
											pos:        position{line: 2197, col: 89, offset: 75911},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2197, col: 96, offset: 75918},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3744, col: 12, offset: 128495},
								run: (*parser).callonSingleLineParenExpression18,
								expr: &litMatcher{
									pos:        position{line: 3744, col: 12, offset: 128495},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2197, col: 115, offset: 75937},
							label: "checkI",
							expr: &litMatcher{
								pos:        position{line: 2197, col: 122, offset: 75944},
								val:        "?",
								ignoreCase: false,
								want:       "\"?\"",
							},
						},
					},
				},
			},
		},
		{
			name: "singleLinearenExpressionArgs",
			pos:  position{line: 2205, col: 1, offset: 76134},
			expr: &actionExpr{
				pos: position{line: 2205, col: 33, offset: 76166},
				run: (*parser).callonsingleLinearenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2205, col: 33, offset: 76166},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2205, col: 33, offset: 76166},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2205, col: 40, offset: 76173},
								name: "SingleLineGoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2205, col: 63, offset: 76196},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2205, col: 69, offset: 76202},
								expr: &seqExpr{
									pos: position{line: 2205, col: 70, offset: 76203},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2205, col: 70, offset: 76203},
											expr: &litMatcher{
												pos:        position{line: 2205, col: 70, offset: 76203},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2205, col: 75, offset: 76208},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2205, col: 79, offset: 76212},
											expr: &litMatcher{
												pos:        position{line: 2205, col: 79, offset: 76212},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2205, col: 84, offset: 76217},
											name: "SingleLineGoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoType",
			pos:  position{line: 2323, col: 1, offset: 80140},
			expr: &actionExpr{
				pos: position{line: 2323, col: 11, offset: 80150},
				run: (*parser).callonGoType1,
				expr: &labeledExpr{
					pos:   position{line: 2323, col: 11, offset: 80150},
					label: "goTypeI",
					expr: &ruleRefExpr{
						pos:  position{line: 2323, col: 19, offset: 80158},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goType",
			pos:  position{line: 2713, col: 1, offset: 94721},
			expr: &choiceExpr{
				pos: position{line: 2713, col: 15, offset: 94735},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2713, col: 16, offset: 94736},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2714, col: 15, offset: 94818},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 2371, col: 21, offset: 81344},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2337, col: 20, offset: 80547},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2354, col: 26, offset: 80801},
												expr: &charClassMatcher{
													pos:        position{line: 2337, col: 20, offset: 80547},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2371, col: 35, offset: 81358},
												expr: &litMatcher{
													pos:        position{line: 2371, col: 35, offset: 81358},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 2371, col: 40, offset: 81363},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2371, col: 44, offset: 81367},
												expr: &litMatcher{
													pos:        position{line: 2371, col: 44, offset: 81367},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2371, col: 49, offset: 81372},
												expr: &seqExpr{
													pos: position{line: 2354, col: 17, offset: 80792},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2337, col: 20, offset: 80547},
															val:        "[_\\pL]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 2354, col: 26, offset: 80801},
															expr: &charClassMatcher{
																pos:        position{line: 2337, col: 20, offset: 80547},
																val:        "[_\\pL\\pNd]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2354, col: 17, offset: 80792},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2337, col: 20, offset: 80547},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2354, col: 26, offset: 80801},
												expr: &charClassMatcher{
													pos:        position{line: 2337, col: 20, offset: 80547},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 2713, col: 27, offset: 94747},
								expr: &litMatcher{
									pos:        position{line: 2713, col: 27, offset: 94747},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 2713, col: 32, offset: 94752},
								expr: &ruleRefExpr{
									pos:  position{line: 2713, col: 32, offset: 94752},
									name: "goTypeArgs",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2713, col: 47, offset: 94767},
						name: "goTypeLit",
					},
					&seqExpr{
						pos: position{line: 2713, col: 59, offset: 94779},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2713, col: 59, offset: 94779},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2713, col: 63, offset: 94783},
								expr: &litMatcher{
									pos:        position{line: 2713, col: 63, offset: 94783},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2713, col: 68, offset: 94788},
								name: "goType",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2713, col: 75, offset: 94795},
								expr: &litMatcher{
									pos:        position{line: 2713, col: 75, offset: 94795},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&litMatcher{
								pos:        position{line: 2713, col: 80, offset: 94800},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeArgs",
			pos:  position{line: 2715, col: 1, offset: 94850},
			expr: &seqExpr{
				pos: position{line: 2715, col: 15, offset: 94864},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2715, col: 15, offset: 94864},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2715, col: 19, offset: 94868},
						expr: &litMatcher{
							pos:        position{line: 2715, col: 19, offset: 94868},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2715, col: 24, offset: 94873},
						name: "goTypeList",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2715, col: 35, offset: 94884},
						expr: &litMatcher{
							pos:        position{line: 2715, col: 35, offset: 94884},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2715, col: 40, offset: 94889},
						expr: &seqExpr{
							pos: position{line: 2715, col: 41, offset: 94890},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2715, col: 41, offset: 94890},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2715, col: 45, offset: 94894},
									expr: &litMatcher{
										pos:        position{line: 2715, col: 45, offset: 94894},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2715, col: 52, offset: 94901},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "goTypeList",
			pos:  position{line: 2716, col: 1, offset: 94905},
			expr: &seqExpr{
				pos: position{line: 2716, col: 15, offset: 94919},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2716, col: 15, offset: 94919},
						name: "goType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2716, col: 22, offset: 94926},
						expr: &litMatcher{
							pos:        position{line: 2716, col: 22, offset: 94926},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2716, col: 27, offset: 94931},
						expr: &seqExpr{
							pos: position{line: 2716, col: 28, offset: 94932},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2716, col: 28, offset: 94932},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2716, col: 32, offset: 94936},
									expr: &litMatcher{
										pos:        position{line: 2716, col: 32, offset: 94936},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2716, col: 37, offset: 94941},
									name: "goType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeLit",
			pos:  position{line: 2717, col: 1, offset: 94950},
			expr: &choiceExpr{
				pos: position{line: 2717, col: 16, offset: 94965},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2717, col: 16, offset: 94965},
						name: "goArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 2717, col: 30, offset: 94979},
						name: "goStructType",
					},
					&ruleRefExpr{
						pos:  position{line: 2717, col: 45, offset: 94994},
						name: "goPointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 2717, col: 61, offset: 95010},
						name: "goFunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 2717, col: 78, offset: 95027},
						name: "goInterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2717, col: 96, offset: 95045},
						name: "goSliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2717, col: 110, offset: 95059},
						name: "goMapType",
					},
					&ruleRefExpr{
						pos:  position{line: 2717, col: 122, offset: 95071},
						name: "goChannelType",
					},
				},
			},
		},
		{
			name: "goArrayType",
			pos:  position{line: 2723, col: 1, offset: 95109},
			expr: &seqExpr{
				pos: position{line: 2723, col: 18, offset: 95126},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2723, col: 18, offset: 95126},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2723, col: 22, offset: 95130},
						expr: &litMatcher{
							pos:        position{line: 2723, col: 22, offset: 95130},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2723, col: 27, offset: 95135},
						name: "goArrayLength",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2723, col: 41, offset: 95149},
						expr: &litMatcher{
							pos:        position{line: 2723, col: 41, offset: 95149},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2723, col: 46, offset: 95154},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2723, col: 50, offset: 95158},
						expr: &litMatcher{
							pos:        position{line: 2723, col: 50, offset: 95158},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2723, col: 55, offset: 95163},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goArrayLength",
			pos:  position{line: 2724, col: 1, offset: 95177},
			expr: &seqExpr{
				pos: position{line: 2724, col: 18, offset: 95194},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 2724, col: 18, offset: 95194},
						expr: &charClassMatcher{
							pos:        position{line: 2724, col: 18, offset: 95194},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2724, col: 25, offset: 95201},
						expr: &seqExpr{
							pos: position{line: 2724, col: 26, offset: 95202},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2724, col: 26, offset: 95202},
									expr: &litMatcher{
										pos:        position{line: 2724, col: 26, offset: 95202},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2724, col: 32, offset: 95208},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2724, col: 32, offset: 95208},
											val:        "<<",
											ignoreCase: false,
											want:       "\"<<\"",
										},
										&litMatcher{
											pos:        position{line: 2724, col: 39, offset: 95215},
											val:        ">>",
											ignoreCase: false,
											want:       "\">>\"",
										},
										&charClassMatcher{
											pos:        position{line: 2724, col: 46, offset: 95222},
											val:        "[+-*/]",
											chars:      []rune{'+', '-', '*', '/'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2724, col: 69, offset: 95245},
									expr: &litMatcher{
										pos:        position{line: 2724, col: 69, offset: 95245},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2724, col: 74, offset: 95250},
									name: "goArrayLength",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goElementType",
			pos:  position{line: 2725, col: 1, offset: 95347},
			expr: &ruleRefExpr{
				pos:  position{line: 2725, col: 18, offset: 95364},
				name: "goType",
			},
		},
		{
			name: "goSliceType",
			pos:  position{line: 2731, col: 1, offset: 95394},
			expr: &seqExpr{
				pos: position{line: 2731, col: 16, offset: 95409},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2731, col: 16, offset: 95409},
						val:        "[]",
						ignoreCase: false,
						want:       "\"[]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2731, col: 21, offset: 95414},
						expr: &litMatcher{
							pos:        position{line: 2731, col: 21, offset: 95414},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2731, col: 26, offset: 95419},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goStructType",
			pos:  position{line: 2737, col: 1, offset: 95457},
			expr: &seqExpr{
				pos: position{line: 2737, col: 20, offset: 95476},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2737, col: 20, offset: 95476},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2737, col: 29, offset: 95485},
						expr: &litMatcher{
							pos:        position{line: 2737, col: 29, offset: 95485},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2737, col: 34, offset: 95490},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2737, col: 38, offset: 95494},
						expr: &seqExpr{
							pos: position{line: 2737, col: 39, offset: 95495},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2737, col: 39, offset: 95495},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2737, col: 43, offset: 95499},
									expr: &ruleRefExpr{
										pos:  position{line: 2737, col: 43, offset: 95499},
										name: "goFieldDecl",
									},
								},
								&choiceExpr{
									pos: position{line: 2737, col: 57, offset: 95513},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2737, col: 57, offset: 95513},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&seqExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3734, col: 36, offset: 128160},
													expr: &litMatcher{
														pos:        position{line: 3734, col: 36, offset: 128160},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3734, col: 42, offset: 128166},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2737, col: 71, offset: 95527},
						expr: &choiceExpr{
							pos: position{line: 3737, col: 20, offset: 128237},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3733, col: 36, offset: 128119},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3734, col: 36, offset: 128160},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2737, col: 75, offset: 95531},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goFieldDecl",
			pos:  position{line: 2738, col: 1, offset: 95535},
			expr: &seqExpr{
				pos: position{line: 2738, col: 20, offset: 95554},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 2738, col: 21, offset: 95555},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2738, col: 21, offset: 95555},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2337, col: 20, offset: 80547},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2354, col: 26, offset: 80801},
										expr: &charClassMatcher{
											pos:        position{line: 2337, col: 20, offset: 80547},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2789, col: 34, offset: 96786},
										expr: &litMatcher{
											pos:        position{line: 2789, col: 34, offset: 96786},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2789, col: 39, offset: 96791},
										expr: &seqExpr{
											pos: position{line: 2789, col: 40, offset: 96792},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2789, col: 40, offset: 96792},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2789, col: 44, offset: 96796},
													expr: &choiceExpr{
														pos: position{line: 3737, col: 20, offset: 128237},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3733, col: 36, offset: 128119},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3734, col: 36, offset: 128160},
																		expr: &litMatcher{
																			pos:        position{line: 3734, col: 36, offset: 128160},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3734, col: 42, offset: 128166},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 2337, col: 20, offset: 80547},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2354, col: 26, offset: 80801},
													expr: &charClassMatcher{
														pos:        position{line: 2337, col: 20, offset: 80547},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2738, col: 38, offset: 95572},
										expr: &litMatcher{
											pos:        position{line: 2738, col: 38, offset: 95572},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2738, col: 43, offset: 95577},
										name: "goType",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2738, col: 52, offset: 95586},
								name: "goEmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2738, col: 69, offset: 95603},
						expr: &choiceExpr{
							pos: position{line: 2678, col: 16, offset: 93423},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2680, col: 19, offset: 93482},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2680, col: 19, offset: 93482},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2680, col: 23, offset: 93486},
											expr: &charClassMatcher{
												pos:        position{line: 2691, col: 27, offset: 93866},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 2680, col: 47, offset: 93510},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2681, col: 5, offset: 93520},
									run: (*parser).callongoFieldDecl33,
									expr: &seqExpr{
										pos: position{line: 2681, col: 5, offset: 93520},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2681, col: 5, offset: 93520},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2681, col: 9, offset: 93524},
												expr: &charClassMatcher{
													pos:        position{line: 2691, col: 27, offset: 93866},
													val:        "[^\\n`]",
													chars:      []rune{'\n', '`'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												expr: &charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3721, col: 16, offset: 127776},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																expr: &litMatcher{
																	pos:        position{line: 3721, col: 16, offset: 127776},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3721, col: 22, offset: 127782},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3720, col: 12, offset: 127758},
														expr: &anyMatcher{
															line: 3720, col: 13, offset: 127759,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 2693, col: 27, offset: 93950},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2693, col: 27, offset: 93950},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2693, col: 31, offset: 93954},
											expr: &choiceExpr{
												pos: position{line: 2693, col: 32, offset: 93955},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2449, col: 19, offset: 84271},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2449, col: 19, offset: 84271},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2450, col: 5, offset: 84330},
														run: (*parser).callongoFieldDecl57,
														expr: &seqExpr{
															pos: position{line: 2450, col: 5, offset: 84330},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2450, col: 5, offset: 84330},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 14, offset: 84339},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 26, offset: 84351},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 38, offset: 84363},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2450, col: 50, offset: 84375},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2479, col: 16, offset: 85511},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2479, col: 16, offset: 85511},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2480, col: 5, offset: 85614},
														run: (*parser).callongoFieldDecl78,
														expr: &seqExpr{
															pos: position{line: 2480, col: 5, offset: 85614},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2480, col: 5, offset: 85614},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 14, offset: 85623},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 26, offset: 85635},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 38, offset: 85647},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 50, offset: 85659},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 62, offset: 85671},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 74, offset: 85683},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 86, offset: 85695},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2480, col: 98, offset: 85707},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2707, col: 36, offset: 94644},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2707, col: 36, offset: 94644},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2707, col: 41, offset: 94649},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2705, col: 38, offset: 94536},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 2430, col: 24, offset: 83529},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2430, col: 24, offset: 83529},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2347, col: 19, offset: 80717},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2347, col: 19, offset: 80717},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2347, col: 19, offset: 80717},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 2431, col: 24, offset: 83596},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2431, col: 24, offset: 83596},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2348, col: 19, offset: 80741},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2432, col: 5, offset: 83633},
														run: (*parser).callongoFieldDecl110,
														expr: &seqExpr{
															pos: position{line: 2432, col: 5, offset: 83633},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2432, col: 5, offset: 83633},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2432, col: 14, offset: 83642},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2432, col: 26, offset: 83654},
																	expr: &charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2594, col: 37, offset: 90294},
														run: (*parser).callongoFieldDecl117,
														expr: &seqExpr{
															pos: position{line: 2594, col: 37, offset: 90294},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2594, col: 37, offset: 90294},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2618, col: 5, offset: 91311},
														run: (*parser).callongoFieldDecl128,
														expr: &seqExpr{
															pos: position{line: 2618, col: 5, offset: 91311},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2618, col: 5, offset: 91311},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2639, col: 5, offset: 92153},
														run: (*parser).callongoFieldDecl135,
														expr: &seqExpr{
															pos: position{line: 2639, col: 5, offset: 92153},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2639, col: 5, offset: 92153},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2657, col: 5, offset: 92839},
														run: (*parser).callongoFieldDecl140,
														expr: &seqExpr{
															pos: position{line: 2657, col: 5, offset: 92839},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2657, col: 5, offset: 92839},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2657, col: 10, offset: 92844},
																	expr: &charClassMatcher{
																		pos:        position{line: 3722, col: 12, offset: 127805},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2693, col: 115, offset: 94038},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2694, col: 5, offset: 94048},
									run: (*parser).callongoFieldDecl146,
									expr: &seqExpr{
										pos: position{line: 2694, col: 5, offset: 94048},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2694, col: 5, offset: 94048},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2694, col: 9, offset: 94052},
												expr: &choiceExpr{
													pos: position{line: 2694, col: 10, offset: 94053},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2449, col: 19, offset: 84271},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2449, col: 19, offset: 84271},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2450, col: 5, offset: 84330},
															run: (*parser).callongoFieldDecl157,
															expr: &seqExpr{
																pos: position{line: 2450, col: 5, offset: 84330},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2450, col: 5, offset: 84330},
																		val:        "\\u",
																		ignoreCase: false,
																		want:       "\"\\\\u\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2450, col: 14, offset: 84339},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2450, col: 26, offset: 84351},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2450, col: 38, offset: 84363},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2450, col: 50, offset: 84375},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2479, col: 16, offset: 85511},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2479, col: 16, offset: 85511},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2480, col: 5, offset: 85614},
															run: (*parser).callongoFieldDecl178,
															expr: &seqExpr{
																pos: position{line: 2480, col: 5, offset: 85614},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2480, col: 5, offset: 85614},
																		val:        "\\U",
																		ignoreCase: false,
																		want:       "\"\\\\U\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 14, offset: 85623},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 26, offset: 85635},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 38, offset: 85647},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 50, offset: 85659},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 62, offset: 85671},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 74, offset: 85683},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 86, offset: 85695},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2480, col: 98, offset: 85707},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2707, col: 36, offset: 94644},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2707, col: 36, offset: 94644},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2707, col: 41, offset: 94649},
																	val:        "[abfnrtv\\\\\"]",
																	chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2705, col: 38, offset: 94536},
															val:        "[^\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
														&seqExpr{
															pos: position{line: 2430, col: 24, offset: 83529},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2430, col: 24, offset: 83529},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2347, col: 19, offset: 80717},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2347, col: 19, offset: 80717},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2347, col: 19, offset: 80717},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&seqExpr{
															pos: position{line: 2431, col: 24, offset: 83596},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2431, col: 24, offset: 83596},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2348, col: 19, offset: 80741},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2432, col: 5, offset: 83633},
															run: (*parser).callongoFieldDecl210,
															expr: &seqExpr{
																pos: position{line: 2432, col: 5, offset: 83633},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2432, col: 5, offset: 83633},
																		val:        "\\x",
																		ignoreCase: false,
																		want:       "\"\\\\x\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2432, col: 14, offset: 83642},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2432, col: 26, offset: 83654},
																		expr: &charClassMatcher{
																			pos:        position{line: 2348, col: 19, offset: 80741},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2594, col: 37, offset: 90294},
															run: (*parser).callongoFieldDecl217,
															expr: &seqExpr{
																pos: position{line: 2594, col: 37, offset: 90294},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2594, col: 37, offset: 90294},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2618, col: 5, offset: 91311},
															run: (*parser).callongoFieldDecl228,
															expr: &seqExpr{
																pos: position{line: 2618, col: 5, offset: 91311},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2618, col: 5, offset: 91311},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2639, col: 5, offset: 92153},
															run: (*parser).callongoFieldDecl235,
															expr: &seqExpr{
																pos: position{line: 2639, col: 5, offset: 92153},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2639, col: 5, offset: 92153},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2348, col: 19, offset: 80741},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2657, col: 5, offset: 92839},
															run: (*parser).callongoFieldDecl240,
															expr: &seqExpr{
																pos: position{line: 2657, col: 5, offset: 92839},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2657, col: 5, offset: 92839},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2657, col: 10, offset: 92844},
																		expr: &charClassMatcher{
																			pos:        position{line: 3722, col: 12, offset: 127805},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3720, col: 12, offset: 127758},
												expr: &anyMatcher{
													line: 3720, col: 13, offset: 127759,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goEmbeddedField",
			pos:  position{line: 2739, col: 1, offset: 95610},
			expr: &seqExpr{
				pos: position{line: 2739, col: 20, offset: 95629},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2739, col: 20, offset: 95629},
						expr: &litMatcher{
							pos:        position{line: 2739, col: 20, offset: 95629},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2739, col: 25, offset: 95634},
						expr: &litMatcher{
							pos:        position{line: 2739, col: 25, offset: 95634},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&choiceExpr{
						pos: position{line: 2714, col: 15, offset: 94818},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2371, col: 21, offset: 81344},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2337, col: 20, offset: 80547},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2354, col: 26, offset: 80801},
										expr: &charClassMatcher{
											pos:        position{line: 2337, col: 20, offset: 80547},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2371, col: 35, offset: 81358},
										expr: &litMatcher{
											pos:        position{line: 2371, col: 35, offset: 81358},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&litMatcher{
										pos:        position{line: 2371, col: 40, offset: 81363},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2371, col: 44, offset: 81367},
										expr: &litMatcher{
											pos:        position{line: 2371, col: 44, offset: 81367},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2371, col: 49, offset: 81372},
										expr: &seqExpr{
											pos: position{line: 2354, col: 17, offset: 80792},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2337, col: 20, offset: 80547},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2354, col: 26, offset: 80801},
													expr: &charClassMatcher{
														pos:        position{line: 2337, col: 20, offset: 80547},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 2354, col: 17, offset: 80792},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2337, col: 20, offset: 80547},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2354, col: 26, offset: 80801},
										expr: &charClassMatcher{
											pos:        position{line: 2337, col: 20, offset: 80547},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2739, col: 41, offset: 95650},
						expr: &litMatcher{
							pos:        position{line: 2739, col: 41, offset: 95650},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2739, col: 46, offset: 95655},
						expr: &ruleRefExpr{
							pos:  position{line: 2739, col: 46, offset: 95655},
							name: "goTypeArgs",
						},
					},
				},
			},
		},
		{
			name: "goPointerType",
			pos:  position{line: 2746, col: 1, offset: 95723},
			expr: &seqExpr{
				pos: position{line: 2746, col: 18, offset: 95740},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2746, col: 18, offset: 95740},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2746, col: 22, offset: 95744},
						expr: &litMatcher{
							pos:        position{line: 2746, col: 22, offset: 95744},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2746, col: 27, offset: 95749},
						name: "goBaseType",
					},
				},
			},
		},
		{
			name: "goBaseType",
			pos:  position{line: 2747, col: 1, offset: 95760},
			expr: &ruleRefExpr{
				pos:  position{line: 2747, col: 18, offset: 95777},
				name: "goType",
			},
		},
		{
			name: "goFunctionType",
			pos:  position{line: 2753, col: 1, offset: 95810},
			expr: &seqExpr{
				pos: position{line: 2753, col: 20, offset: 95829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2753, col: 20, offset: 95829},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2753, col: 27, offset: 95836},
						expr: &litMatcher{
							pos:        position{line: 2753, col: 27, offset: 95836},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2753, col: 32, offset: 95841},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goSignature",
			pos:  position{line: 2754, col: 1, offset: 95853},
			expr: &seqExpr{
				pos: position{line: 2754, col: 20, offset: 95872},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2754, col: 20, offset: 95872},
						name: "goParameters",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2754, col: 33, offset: 95885},
						expr: &litMatcher{
							pos:        position{line: 2754, col: 33, offset: 95885},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2754, col: 38, offset: 95890},
						expr: &ruleRefExpr{
							pos:  position{line: 2754, col: 38, offset: 95890},
							name: "goResult",
						},
					},
				},
			},
		},
		{
			name: "goResult",
			pos:  position{line: 2755, col: 1, offset: 95900},
			expr: &choiceExpr{
				pos: position{line: 2755, col: 20, offset: 95919},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2755, col: 20, offset: 95919},
						name: "goParameters",
					},
					&ruleRefExpr{
						pos:  position{line: 2755, col: 35, offset: 95934},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goParameters",
			pos:  position{line: 2756, col: 1, offset: 95941},
			expr: &seqExpr{
				pos: position{line: 2756, col: 20, offset: 95960},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2756, col: 20, offset: 95960},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2756, col: 24, offset: 95964},
						expr: &choiceExpr{
							pos: position{line: 3737, col: 20, offset: 128237},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3733, col: 36, offset: 128119},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3734, col: 36, offset: 128160},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2756, col: 28, offset: 95968},
						expr: &seqExpr{
							pos: position{line: 2756, col: 29, offset: 95969},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2756, col: 29, offset: 95969},
									name: "goParameterList",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2756, col: 45, offset: 95985},
									expr: &litMatcher{
										pos:        position{line: 2756, col: 45, offset: 95985},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2756, col: 50, offset: 95990},
									expr: &seqExpr{
										pos: position{line: 2756, col: 51, offset: 95991},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2756, col: 51, offset: 95991},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2756, col: 55, offset: 95995},
												expr: &choiceExpr{
													pos: position{line: 3737, col: 20, offset: 128237},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2756, col: 63, offset: 96003},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "goParameterList",
			pos:  position{line: 2757, col: 1, offset: 96007},
			expr: &seqExpr{
				pos: position{line: 2757, col: 20, offset: 96026},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2757, col: 20, offset: 96026},
						name: "goParameterDecl",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2757, col: 36, offset: 96042},
						expr: &litMatcher{
							pos:        position{line: 2757, col: 36, offset: 96042},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2757, col: 41, offset: 96047},
						expr: &seqExpr{
							pos: position{line: 2757, col: 42, offset: 96048},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2757, col: 42, offset: 96048},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2757, col: 46, offset: 96052},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2757, col: 50, offset: 96056},
									name: "goParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParameterDecl",
			pos:  position{line: 2758, col: 1, offset: 96074},
			expr: &seqExpr{
				pos: position{line: 2758, col: 20, offset: 96093},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2758, col: 20, offset: 96093},
						expr: &seqExpr{
							pos: position{line: 2789, col: 21, offset: 96773},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2337, col: 20, offset: 80547},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 2354, col: 26, offset: 80801},
									expr: &charClassMatcher{
										pos:        position{line: 2337, col: 20, offset: 80547},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2789, col: 34, offset: 96786},
									expr: &litMatcher{
										pos:        position{line: 2789, col: 34, offset: 96786},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2789, col: 39, offset: 96791},
									expr: &seqExpr{
										pos: position{line: 2789, col: 40, offset: 96792},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2789, col: 40, offset: 96792},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2789, col: 44, offset: 96796},
												expr: &choiceExpr{
													pos: position{line: 3737, col: 20, offset: 128237},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 2337, col: 20, offset: 80547},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2354, col: 26, offset: 80801},
												expr: &charClassMatcher{
													pos:        position{line: 2337, col: 20, offset: 80547},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2758, col: 38, offset: 96111},
						expr: &litMatcher{
							pos:        position{line: 2758, col: 38, offset: 96111},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2758, col: 43, offset: 96116},
						expr: &litMatcher{
							pos:        position{line: 2758, col: 43, offset: 96116},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2758, col: 50, offset: 96123},
						expr: &litMatcher{
							pos:        position{line: 2758, col: 50, offset: 96123},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2758, col: 55, offset: 96128},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goInterfaceType",
			pos:  position{line: 2764, col: 1, offset: 96162},
			expr: &seqExpr{
				pos: position{line: 2764, col: 21, offset: 96182},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2764, col: 21, offset: 96182},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2764, col: 33, offset: 96194},
						expr: &litMatcher{
							pos:        position{line: 2764, col: 33, offset: 96194},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2764, col: 38, offset: 96199},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2764, col: 42, offset: 96203},
						expr: &seqExpr{
							pos: position{line: 2764, col: 43, offset: 96204},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2764, col: 43, offset: 96204},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2764, col: 47, offset: 96208},
									name: "goInterfaceElem",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2764, col: 63, offset: 96224},
									expr: &litMatcher{
										pos:        position{line: 2764, col: 63, offset: 96224},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2764, col: 69, offset: 96230},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2764, col: 69, offset: 96230},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 3735, col: 36, offset: 128206},
											expr: &seqExpr{
												pos: position{line: 3735, col: 37, offset: 128207},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3735, col: 37, offset: 128207},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2764, col: 86, offset: 96247},
						expr: &choiceExpr{
							pos: position{line: 3737, col: 20, offset: 128237},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3733, col: 36, offset: 128119},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3734, col: 36, offset: 128160},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3734, col: 36, offset: 128160},
											expr: &litMatcher{
												pos:        position{line: 3734, col: 36, offset: 128160},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3734, col: 42, offset: 128166},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2764, col: 90, offset: 96251},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goInterfaceElem",
			pos:  position{line: 2765, col: 1, offset: 96255},
			expr: &choiceExpr{
				pos: position{line: 2765, col: 21, offset: 96275},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2765, col: 21, offset: 96275},
						name: "goMethodElem",
					},
					&ruleRefExpr{
						pos:  position{line: 2765, col: 36, offset: 96290},
						name: "goTypeElem",
					},
				},
			},
		},
		{
			name: "goMethodElem",
			pos:  position{line: 2766, col: 1, offset: 96301},
			expr: &seqExpr{
				pos: position{line: 2766, col: 21, offset: 96321},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2337, col: 20, offset: 80547},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 2354, col: 26, offset: 80801},
						expr: &charClassMatcher{
							pos:        position{line: 2337, col: 20, offset: 80547},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2766, col: 34, offset: 96334},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goTypeElem",
			pos:  position{line: 2768, col: 1, offset: 96379},
			expr: &seqExpr{
				pos: position{line: 2768, col: 21, offset: 96399},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2768, col: 21, offset: 96399},
						name: "goTypeTerm",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2768, col: 32, offset: 96410},
						expr: &seqExpr{
							pos: position{line: 2768, col: 33, offset: 96411},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2768, col: 33, offset: 96411},
									expr: &litMatcher{
										pos:        position{line: 2768, col: 33, offset: 96411},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 2768, col: 38, offset: 96416},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2768, col: 42, offset: 96420},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2768, col: 46, offset: 96424},
									name: "goTypeTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeTerm",
			pos:  position{line: 2769, col: 1, offset: 96437},
			expr: &choiceExpr{
				pos: position{line: 2769, col: 21, offset: 96457},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2769, col: 21, offset: 96457},
						name: "goType",
					},
					&ruleRefExpr{
						pos:  position{line: 2769, col: 30, offset: 96466},
						name: "goUnderlyingType",
					},
				},
			},
		},
		{
			name: "goUnderlyingType",
			pos:  position{line: 2770, col: 1, offset: 96483},
			expr: &seqExpr{
				pos: position{line: 2770, col: 21, offset: 96503},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2770, col: 21, offset: 96503},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2770, col: 25, offset: 96507},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goMapType",
			pos:  position{line: 2776, col: 1, offset: 96535},
			expr: &seqExpr{
				pos: position{line: 2776, col: 14, offset: 96548},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2776, col: 14, offset: 96548},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2776, col: 20, offset: 96554},
						expr: &litMatcher{
							pos:        position{line: 2776, col: 20, offset: 96554},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2776, col: 25, offset: 96559},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2776, col: 29, offset: 96563},
						expr: &litMatcher{
							pos:        position{line: 2776, col: 29, offset: 96563},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2776, col: 34, offset: 96568},
						name: "goKeyType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2776, col: 44, offset: 96578},
						expr: &litMatcher{
							pos:        position{line: 2776, col: 44, offset: 96578},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2776, col: 49, offset: 96583},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2776, col: 53, offset: 96587},
						expr: &litMatcher{
							pos:        position{line: 2776, col: 53, offset: 96587},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2776, col: 58, offset: 96592},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goKeyType",
			pos:  position{line: 2777, col: 1, offset: 96606},
			expr: &ruleRefExpr{
				pos:  position{line: 2777, col: 14, offset: 96619},
				name: "goType",
			},
		},
		{
			name: "goChannelType",
			pos:  position{line: 2783, col: 1, offset: 96651},
			expr: &seqExpr{
				pos: position{line: 2783, col: 18, offset: 96668},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2783, col: 18, offset: 96668},
						expr: &seqExpr{
							pos: position{line: 2783, col: 19, offset: 96669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2783, col: 19, offset: 96669},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2783, col: 24, offset: 96674},
									expr: &litMatcher{
										pos:        position{line: 2783, col: 24, offset: 96674},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2783, col: 31, offset: 96681},
						val:        "chan",
						ignoreCase: false,
						want:       "\"chan\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2783, col: 38, offset: 96688},
						expr: &litMatcher{
							pos:        position{line: 2783, col: 38, offset: 96688},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2783, col: 43, offset: 96693},
						expr: &seqExpr{
							pos: position{line: 2783, col: 44, offset: 96694},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2783, col: 44, offset: 96694},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2783, col: 49, offset: 96699},
									expr: &litMatcher{
										pos:        position{line: 2783, col: 49, offset: 96699},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2783, col: 56, offset: 96706},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "Mixin",
			pos:  position{line: 2842, col: 1, offset: 99154},
			expr: &choiceExpr{
				pos: position{line: 2842, col: 10, offset: 99163},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2842, col: 10, offset: 99163},
						run: (*parser).callonMixin2,
						expr: &seqExpr{
							pos: position{line: 2842, col: 10, offset: 99163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2842, col: 10, offset: 99163},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 2842, col: 18, offset: 99171},
									expr: &litMatcher{
										pos:        position{line: 2842, col: 18, offset: 99171},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2842, col: 23, offset: 99176},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 711, col: 14, offset: 21845},
												run: (*parser).callonMixin9,
												expr: &labeledExpr{
													pos:   position{line: 711, col: 14, offset: 21845},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21290},
																run: (*parser).callonMixin12,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21290},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2354, col: 17, offset: 80792},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2354, col: 26, offset: 80801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2337, col: 20, offset: 80547},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21384},
																run: (*parser).callonMixin18,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21384},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21384},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21392},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21392},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21397},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21398},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21398},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21407},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21417},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21428},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonMixin31,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 713, col: 5, offset: 21887},
												run: (*parser).callonMixin37,
												expr: &seqExpr{
													pos: position{line: 713, col: 5, offset: 21887},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 713, col: 5, offset: 21887},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonMixin40,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 713, col: 14, offset: 21896},
															expr: &choiceExpr{
																pos: position{line: 713, col: 16, offset: 21898},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3721, col: 12, offset: 127772},
																				expr: &charClassMatcher{
																					pos:        position{line: 3733, col: 36, offset: 128119},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								expr: &litMatcher{
																									pos:        position{line: 3721, col: 16, offset: 127776},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3721, col: 22, offset: 127782},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3720, col: 12, offset: 127758},
																						expr: &anyMatcher{
																							line: 3720, col: 13, offset: 127759,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 713, col: 22, offset: 21904},
																		val:        "[:!=(]",
																		chars:      []rune{':', '!', '=', '('},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 724, col: 5, offset: 22230},
												run: (*parser).callonMixin59,
												expr: &seqExpr{
													pos: position{line: 724, col: 5, offset: 22230},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 724, col: 5, offset: 22230},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 724, col: 12, offset: 22237},
																expr: &charClassMatcher{
																	pos:        position{line: 724, col: 12, offset: 22237},
																	val:        "[^ \\t\\r\\n:!=(]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 724, col: 28, offset: 22253},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonMixin65,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2842, col: 39, offset: 99192},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2842, col: 47, offset: 99200},
										expr: &ruleRefExpr{
											pos:  position{line: 2842, col: 47, offset: 99200},
											name: "mixinParamList",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2842, col: 63, offset: 99216},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2842, col: 69, offset: 99222},
										name: "Beaitb",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2852, col: 5, offset: 99516},
						run: (*parser).callonMixin76,
						expr: &seqExpr{
							pos: position{line: 2852, col: 5, offset: 99516},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2852, col: 5, offset: 99516},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&labeledExpr{
									pos:   position{line: 2852, col: 13, offset: 99524},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonMixin80,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2852, col: 22, offset: 99533},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2852, col: 28, offset: 99539},
										name: "Beaitb",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamList",
			pos:  position{line: 2868, col: 1, offset: 99952},
			expr: &choiceExpr{
				pos: position{line: 2868, col: 19, offset: 99970},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2868, col: 19, offset: 99970},
						run: (*parser).callonmixinParamList2,
						expr: &seqExpr{
							pos: position{line: 2868, col: 19, offset: 99970},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2868, col: 19, offset: 99970},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2868, col: 23, offset: 99974},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2868, col: 27, offset: 99978},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2868, col: 35, offset: 99986},
										expr: &ruleRefExpr{
											pos:  position{line: 2868, col: 35, offset: 99986},
											name: "mixinParams",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2868, col: 48, offset: 99999},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2868, col: 51, offset: 100002},
									expr: &seqExpr{
										pos: position{line: 2868, col: 52, offset: 100003},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2868, col: 52, offset: 100003},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2868, col: 56, offset: 100007},
												expr: &choiceExpr{
													pos: position{line: 3737, col: 20, offset: 128237},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2868, col: 62, offset: 100013},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonmixinParamList28,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2874, col: 5, offset: 100214},
						run: (*parser).callonmixinParamList30,
						expr: &seqExpr{
							pos: position{line: 2874, col: 5, offset: 100214},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2874, col: 5, offset: 100214},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2874, col: 9, offset: 100218},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2874, col: 13, offset: 100222},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2874, col: 21, offset: 100230},
										expr: &ruleRefExpr{
											pos:  position{line: 2874, col: 21, offset: 100230},
											name: "mixinParams",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2874, col: 34, offset: 100243},
									expr: &seqExpr{
										pos: position{line: 2874, col: 35, offset: 100244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2874, col: 35, offset: 100244},
												expr: &charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2874, col: 38, offset: 100247},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2874, col: 44, offset: 100253},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonmixinParamList49,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParams",
			pos:  position{line: 2893, col: 1, offset: 100798},
			expr: &actionExpr{
				pos: position{line: 2893, col: 16, offset: 100813},
				run: (*parser).callonmixinParams1,
				expr: &seqExpr{
					pos: position{line: 2893, col: 16, offset: 100813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2893, col: 16, offset: 100813},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2893, col: 23, offset: 100820},
								name: "mixinParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 2893, col: 34, offset: 100831},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2893, col: 40, offset: 100837},
								expr: &seqExpr{
									pos: position{line: 2893, col: 41, offset: 100838},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2893, col: 41, offset: 100838},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2893, col: 44, offset: 100841},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2893, col: 48, offset: 100845},
											expr: &choiceExpr{
												pos: position{line: 3737, col: 20, offset: 128237},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																expr: &litMatcher{
																	pos:        position{line: 3734, col: 36, offset: 128160},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3734, col: 42, offset: 128166},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2893, col: 52, offset: 100849},
											name: "mixinParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParam",
			pos:  position{line: 2904, col: 1, offset: 101127},
			expr: &actionExpr{
				pos: position{line: 2904, col: 15, offset: 101141},
				run: (*parser).callonmixinParam1,
				expr: &seqExpr{
					pos: position{line: 2904, col: 15, offset: 101141},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2904, col: 15, offset: 101141},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21845},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										run: (*parser).callonmixinParam5,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21845},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21290},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														run: (*parser).callonmixinParam8,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21290},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2354, col: 17, offset: 80792},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2354, col: 26, offset: 80801},
																		expr: &charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														run: (*parser).callonmixinParam14,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21384},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21384},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21392},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21392},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21397},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21398},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21398},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21407},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21417},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21428},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3724, col: 8, offset: 127821},
																		run: (*parser).callonmixinParam27,
																		expr: &choiceExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					expr: &anyMatcher{
																						line: 3724, col: 10, offset: 127823,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3724, col: 14, offset: 127827},
																					expr: &anyMatcher{
																						line: 3724, col: 15, offset: 127828,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21887},
										run: (*parser).callonmixinParam33,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21887},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21887},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonmixinParam36,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21896},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21898},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21904},
																val:        "[:!=(]",
																chars:      []rune{':', '!', '=', '('},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonmixinParam55,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=(]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 28, offset: 22253},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonmixinParam61,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2904, col: 31, offset: 101157},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).callonmixinParam68,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2904, col: 40, offset: 101166},
							label: "typeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2904, col: 46, offset: 101172},
								expr: &seqExpr{
									pos: position{line: 2904, col: 47, offset: 101173},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2904, col: 47, offset: 101173},
											expr: &litMatcher{
												pos:        position{line: 2904, col: 47, offset: 101173},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2904, col: 52, offset: 101178},
											name: "GoType",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2904, col: 61, offset: 101187},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2904, col: 70, offset: 101196},
								expr: &seqExpr{
									pos: position{line: 2904, col: 71, offset: 101197},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2904, col: 71, offset: 101197},
											expr: &litMatcher{
												pos:        position{line: 2904, col: 71, offset: 101197},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2904, col: 76, offset: 101202},
											name: "mixinParamDefault",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamDefault",
			pos:  position{line: 2942, col: 1, offset: 102422},
			expr: &choiceExpr{
				pos: position{line: 2942, col: 22, offset: 102443},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2942, col: 22, offset: 102443},
						run: (*parser).callonmixinParamDefault2,
						expr: &seqExpr{
							pos: position{line: 2942, col: 22, offset: 102443},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2942, col: 22, offset: 102443},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2942, col: 26, offset: 102447},
									expr: &litMatcher{
										pos:        position{line: 2942, col: 26, offset: 102447},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2942, col: 31, offset: 102452},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 2942, col: 37, offset: 102458},
										name: "GoExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2947, col: 5, offset: 102599},
						run: (*parser).callonmixinParamDefault9,
						expr: &seqExpr{
							pos: position{line: 2947, col: 5, offset: 102599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2947, col: 5, offset: 102599},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 2947, col: 9, offset: 102603},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonmixinParamDefault13,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Return",
			pos:  position{line: 2972, col: 1, offset: 103395},
			expr: &actionExpr{
				pos: position{line: 2972, col: 11, offset: 103405},
				run: (*parser).callonReturn1,
				expr: &seqExpr{
					pos: position{line: 2972, col: 11, offset: 103405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2972, col: 11, offset: 103405},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&labeledExpr{
							pos:   position{line: 2972, col: 20, offset: 103414},
							label: "errExprI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2972, col: 29, offset: 103423},
								expr: &ruleRefExpr{
									pos:  position{line: 2972, col: 29, offset: 103423},
									name: "Expression",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2972, col: 41, offset: 103435},
							expr: &actionExpr{
								pos: position{line: 1253, col: 21, offset: 40147},
								run: (*parser).callonReturn8,
								expr: &oneOrMoreExpr{
									pos: position{line: 1253, col: 21, offset: 40147},
									expr: &charClassMatcher{
										pos:        position{line: 3722, col: 12, offset: 127805},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3721, col: 12, offset: 127772},
							expr: &charClassMatcher{
								pos:        position{line: 3733, col: 36, offset: 128119},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3721, col: 16, offset: 127776},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											expr: &litMatcher{
												pos:        position{line: 3721, col: 16, offset: 127776},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3721, col: 22, offset: 127782},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3720, col: 12, offset: 127758},
									expr: &anyMatcher{
										line: 3720, col: 13, offset: 127759,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCall",
			pos:  position{line: 2983, col: 1, offset: 103758},
			expr: &actionExpr{
				pos: position{line: 2983, col: 14, offset: 103771},
				run: (*parser).callonMixinCall1,
				expr: &seqExpr{
					pos: position{line: 2983, col: 14, offset: 103771},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2983, col: 14, offset: 103771},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 2983, col: 18, offset: 103775},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2983, col: 29, offset: 103786},
								expr: &seqExpr{
									pos: position{line: 2983, col: 30, offset: 103787},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21290},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21290},
													run: (*parser).callonMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21290},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2354, col: 17, offset: 80792},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2354, col: 26, offset: 80801},
																	expr: &charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21384},
													run: (*parser).callonMixinCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21384},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21392},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21392},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21392},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21397},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21398},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21398},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21398},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21407},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21417},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21428},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2983, col: 36, offset: 103793},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2983, col: 42, offset: 103799},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21845},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										run: (*parser).callonMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21845},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21290},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														run: (*parser).callonMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21290},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2354, col: 17, offset: 80792},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2354, col: 26, offset: 80801},
																		expr: &charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														run: (*parser).callonMixinCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21384},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21384},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21392},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21392},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21397},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21398},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21398},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21407},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21417},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21428},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3724, col: 8, offset: 127821},
																		run: (*parser).callonMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					expr: &anyMatcher{
																						line: 3724, col: 10, offset: 127823,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3724, col: 14, offset: 127827},
																					expr: &anyMatcher{
																						line: 3724, col: 15, offset: 127828,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21887},
										run: (*parser).callonMixinCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21887},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21887},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21896},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21898},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21904},
																val:        "[:!=(]",
																chars:      []rune{':', '!', '=', '('},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonMixinCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=(]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 28, offset: 22253},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2983, col: 58, offset: 103815},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2983, col: 64, offset: 103821},
								expr: &ruleRefExpr{
									pos:  position{line: 2983, col: 64, offset: 103821},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2983, col: 78, offset: 103835},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 2983, col: 84, offset: 103841},
								name: "mixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMixinCall",
			pos:  position{line: 2995, col: 1, offset: 104135},
			expr: &actionExpr{
				pos: position{line: 2995, col: 20, offset: 104154},
				run: (*parser).callonInlineMixinCall1,
				expr: &seqExpr{
					pos: position{line: 2995, col: 20, offset: 104154},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2995, col: 20, offset: 104154},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 2995, col: 24, offset: 104158},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2995, col: 35, offset: 104169},
								expr: &seqExpr{
									pos: position{line: 2995, col: 36, offset: 104170},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21290},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21290},
													run: (*parser).callonInlineMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21290},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2354, col: 17, offset: 80792},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2354, col: 26, offset: 80801},
																	expr: &charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21384},
													run: (*parser).callonInlineMixinCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21384},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21392},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21392},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21392},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21397},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21398},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21398},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21398},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21407},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21417},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21428},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonInlineMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2995, col: 42, offset: 104176},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2995, col: 48, offset: 104182},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21845},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										run: (*parser).callonInlineMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21845},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21290},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														run: (*parser).callonInlineMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21290},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2354, col: 17, offset: 80792},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2354, col: 26, offset: 80801},
																		expr: &charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														run: (*parser).callonInlineMixinCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21384},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21384},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21392},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21392},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21397},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21398},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21398},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21407},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21417},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21428},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3724, col: 8, offset: 127821},
																		run: (*parser).callonInlineMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					expr: &anyMatcher{
																						line: 3724, col: 10, offset: 127823,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3724, col: 14, offset: 127827},
																					expr: &anyMatcher{
																						line: 3724, col: 15, offset: 127828,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21887},
										run: (*parser).callonInlineMixinCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21887},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21887},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonInlineMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21896},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21898},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21904},
																val:        "[:!=(]",
																chars:      []rune{':', '!', '=', '('},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonInlineMixinCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=(]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 28, offset: 22253},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonInlineMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2995, col: 64, offset: 104198},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2995, col: 70, offset: 104204},
								expr: &ruleRefExpr{
									pos:  position{line: 2995, col: 70, offset: 104204},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2995, col: 94, offset: 104228},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 2995, col: 100, offset: 104234},
								name: "singleLineMixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgList",
			pos:  position{line: 3007, col: 1, offset: 104538},
			expr: &choiceExpr{
				pos: position{line: 3007, col: 17, offset: 104554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3007, col: 17, offset: 104554},
						run: (*parser).callonmixinArgList2,
						expr: &seqExpr{
							pos: position{line: 3007, col: 17, offset: 104554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3007, col: 17, offset: 104554},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3007, col: 21, offset: 104558},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3007, col: 25, offset: 104562},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3007, col: 31, offset: 104568},
										expr: &ruleRefExpr{
											pos:  position{line: 3007, col: 31, offset: 104568},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3007, col: 42, offset: 104579},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3007, col: 45, offset: 104582},
									expr: &seqExpr{
										pos: position{line: 3007, col: 46, offset: 104583},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3007, col: 46, offset: 104583},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 3007, col: 50, offset: 104587},
												expr: &choiceExpr{
													pos: position{line: 3737, col: 20, offset: 128237},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3734, col: 36, offset: 128160},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3007, col: 56, offset: 104593},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonmixinArgList28,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3013, col: 5, offset: 104792},
						run: (*parser).callonmixinArgList30,
						expr: &seqExpr{
							pos: position{line: 3013, col: 5, offset: 104792},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3013, col: 5, offset: 104792},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3013, col: 9, offset: 104796},
									expr: &choiceExpr{
										pos: position{line: 3737, col: 20, offset: 128237},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3734, col: 36, offset: 128160},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														expr: &litMatcher{
															pos:        position{line: 3734, col: 36, offset: 128160},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3734, col: 42, offset: 128166},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3013, col: 13, offset: 104800},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3013, col: 19, offset: 104806},
										expr: &ruleRefExpr{
											pos:  position{line: 3013, col: 19, offset: 104806},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3013, col: 30, offset: 104817},
									expr: &seqExpr{
										pos: position{line: 3013, col: 31, offset: 104818},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3013, col: 31, offset: 104818},
												expr: &charClassMatcher{
													pos:        position{line: 3733, col: 36, offset: 128119},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 3013, col: 34, offset: 104821},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3013, col: 40, offset: 104827},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonmixinArgList49,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgList",
			pos:  position{line: 3031, col: 1, offset: 105367},
			expr: &choiceExpr{
				pos: position{line: 3031, col: 27, offset: 105393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3031, col: 27, offset: 105393},
						run: (*parser).callonsingleLineMixinArgList2,
						expr: &seqExpr{
							pos: position{line: 3031, col: 27, offset: 105393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3031, col: 27, offset: 105393},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3031, col: 31, offset: 105397},
									expr: &litMatcher{
										pos:        position{line: 3031, col: 31, offset: 105397},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3031, col: 36, offset: 105402},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3031, col: 42, offset: 105408},
										expr: &ruleRefExpr{
											pos:  position{line: 3031, col: 42, offset: 105408},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3031, col: 63, offset: 105429},
									expr: &litMatcher{
										pos:        position{line: 3031, col: 63, offset: 105429},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3031, col: 68, offset: 105434},
									expr: &seqExpr{
										pos: position{line: 3031, col: 69, offset: 105435},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3031, col: 69, offset: 105435},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 3031, col: 73, offset: 105439},
												expr: &litMatcher{
													pos:        position{line: 3031, col: 73, offset: 105439},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3031, col: 80, offset: 105446},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3744, col: 12, offset: 128495},
										run: (*parser).callonsingleLineMixinArgList18,
										expr: &litMatcher{
											pos:        position{line: 3744, col: 12, offset: 128495},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3037, col: 5, offset: 105645},
						run: (*parser).callonsingleLineMixinArgList20,
						expr: &seqExpr{
							pos: position{line: 3037, col: 5, offset: 105645},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3037, col: 5, offset: 105645},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3037, col: 9, offset: 105649},
									expr: &litMatcher{
										pos:        position{line: 3037, col: 9, offset: 105649},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3037, col: 14, offset: 105654},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3037, col: 20, offset: 105660},
										expr: &ruleRefExpr{
											pos:  position{line: 3037, col: 20, offset: 105660},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3037, col: 41, offset: 105681},
									expr: &seqExpr{
										pos: position{line: 3037, col: 42, offset: 105682},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3037, col: 42, offset: 105682},
												expr: &litMatcher{
													pos:        position{line: 3037, col: 42, offset: 105682},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3037, col: 47, offset: 105687},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3037, col: 53, offset: 105693},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsingleLineMixinArgList34,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgs",
			pos:  position{line: 3056, col: 1, offset: 106234},
			expr: &actionExpr{
				pos: position{line: 3056, col: 14, offset: 106247},
				run: (*parser).callonmixinArgs1,
				expr: &seqExpr{
					pos: position{line: 3056, col: 14, offset: 106247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3056, col: 14, offset: 106247},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3056, col: 21, offset: 106254},
								name: "mixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 3056, col: 30, offset: 106263},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3056, col: 36, offset: 106269},
								expr: &seqExpr{
									pos: position{line: 3056, col: 37, offset: 106270},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3056, col: 37, offset: 106270},
											expr: &charClassMatcher{
												pos:        position{line: 3733, col: 36, offset: 128119},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 3056, col: 40, offset: 106273},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3056, col: 44, offset: 106277},
											expr: &choiceExpr{
												pos: position{line: 3737, col: 20, offset: 128237},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																expr: &litMatcher{
																	pos:        position{line: 3734, col: 36, offset: 128160},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3734, col: 42, offset: 128166},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3056, col: 48, offset: 106281},
											name: "mixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgs",
			pos:  position{line: 3066, col: 1, offset: 106542},
			expr: &actionExpr{
				pos: position{line: 3066, col: 24, offset: 106565},
				run: (*parser).callonsingleLineMixinArgs1,
				expr: &seqExpr{
					pos: position{line: 3066, col: 24, offset: 106565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3066, col: 24, offset: 106565},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3066, col: 31, offset: 106572},
								name: "singleLineMixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 3066, col: 50, offset: 106591},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3066, col: 56, offset: 106597},
								expr: &seqExpr{
									pos: position{line: 3066, col: 57, offset: 106598},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3066, col: 57, offset: 106598},
											expr: &litMatcher{
												pos:        position{line: 3066, col: 57, offset: 106598},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 3066, col: 62, offset: 106603},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3066, col: 66, offset: 106607},
											expr: &litMatcher{
												pos:        position{line: 3066, col: 66, offset: 106607},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3066, col: 71, offset: 106612},
											name: "singleLineMixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArg",
			pos:  position{line: 3077, col: 1, offset: 106884},
			expr: &choiceExpr{
				pos: position{line: 3077, col: 13, offset: 106896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3077, col: 13, offset: 106896},
						run: (*parser).callonmixinArg2,
						expr: &seqExpr{
							pos: position{line: 3077, col: 13, offset: 106896},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3077, col: 13, offset: 106896},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 711, col: 14, offset: 21845},
												run: (*parser).callonmixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 711, col: 14, offset: 21845},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21290},
																run: (*parser).callonmixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21290},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2354, col: 17, offset: 80792},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2354, col: 26, offset: 80801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2337, col: 20, offset: 80547},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21384},
																run: (*parser).callonmixinArg15,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21384},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21384},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21392},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21392},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21397},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21398},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21398},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21407},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21417},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21428},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonmixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 713, col: 5, offset: 21887},
												run: (*parser).callonmixinArg34,
												expr: &seqExpr{
													pos: position{line: 713, col: 5, offset: 21887},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 713, col: 5, offset: 21887},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonmixinArg37,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 713, col: 14, offset: 21896},
															expr: &choiceExpr{
																pos: position{line: 713, col: 16, offset: 21898},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3721, col: 12, offset: 127772},
																				expr: &charClassMatcher{
																					pos:        position{line: 3733, col: 36, offset: 128119},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								expr: &litMatcher{
																									pos:        position{line: 3721, col: 16, offset: 127776},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3721, col: 22, offset: 127782},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3720, col: 12, offset: 127758},
																						expr: &anyMatcher{
																							line: 3720, col: 13, offset: 127759,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 713, col: 22, offset: 21904},
																		val:        "[:!=(]",
																		chars:      []rune{':', '!', '=', '('},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 724, col: 5, offset: 22230},
												run: (*parser).callonmixinArg56,
												expr: &seqExpr{
													pos: position{line: 724, col: 5, offset: 22230},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 724, col: 5, offset: 22230},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 724, col: 12, offset: 22237},
																expr: &charClassMatcher{
																	pos:        position{line: 724, col: 12, offset: 22237},
																	val:        "[^ \\t\\r\\n:!=(]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 724, col: 28, offset: 22253},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonmixinArg62,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3077, col: 29, offset: 106912},
									expr: &litMatcher{
										pos:        position{line: 3077, col: 29, offset: 106912},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 3077, col: 34, offset: 106917},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3077, col: 38, offset: 106921},
									expr: &litMatcher{
										pos:        position{line: 3077, col: 38, offset: 106921},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3077, col: 43, offset: 106926},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 3077, col: 48, offset: 106931},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3082, col: 5, offset: 107058},
						run: (*parser).callonmixinArg75,
						expr: &seqExpr{
							pos: position{line: 3082, col: 5, offset: 107058},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3082, col: 5, offset: 107058},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 711, col: 14, offset: 21845},
												run: (*parser).callonmixinArg79,
												expr: &labeledExpr{
													pos:   position{line: 711, col: 14, offset: 21845},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21290},
																run: (*parser).callonmixinArg82,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21290},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2354, col: 17, offset: 80792},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2354, col: 26, offset: 80801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2337, col: 20, offset: 80547},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21384},
																run: (*parser).callonmixinArg88,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21384},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21384},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21392},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21392},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21397},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21398},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21398},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21407},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21417},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21428},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonmixinArg101,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 713, col: 5, offset: 21887},
												run: (*parser).callonmixinArg107,
												expr: &seqExpr{
													pos: position{line: 713, col: 5, offset: 21887},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 713, col: 5, offset: 21887},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonmixinArg110,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 713, col: 14, offset: 21896},
															expr: &choiceExpr{
																pos: position{line: 713, col: 16, offset: 21898},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3721, col: 12, offset: 127772},
																				expr: &charClassMatcher{
																					pos:        position{line: 3733, col: 36, offset: 128119},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								expr: &litMatcher{
																									pos:        position{line: 3721, col: 16, offset: 127776},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3721, col: 22, offset: 127782},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3720, col: 12, offset: 127758},
																						expr: &anyMatcher{
																							line: 3720, col: 13, offset: 127759,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 713, col: 22, offset: 21904},
																		val:        "[:!=(]",
																		chars:      []rune{':', '!', '=', '('},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 724, col: 5, offset: 22230},
												run: (*parser).callonmixinArg129,
												expr: &seqExpr{
													pos: position{line: 724, col: 5, offset: 22230},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 724, col: 5, offset: 22230},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 724, col: 12, offset: 22237},
																expr: &charClassMatcher{
																	pos:        position{line: 724, col: 12, offset: 22237},
																	val:        "[^ \\t\\r\\n:!=(]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 724, col: 28, offset: 22253},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonmixinArg135,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3082, col: 21, offset: 107074},
									expr: &seqExpr{
										pos: position{line: 3082, col: 22, offset: 107075},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3082, col: 22, offset: 107075},
												expr: &litMatcher{
													pos:        position{line: 3082, col: 22, offset: 107075},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3082, col: 27, offset: 107080},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 33, offset: 107086},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonmixinArg147,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArg",
			pos:  position{line: 3097, col: 1, offset: 107580},
			expr: &choiceExpr{
				pos: position{line: 3097, col: 23, offset: 107602},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3097, col: 23, offset: 107602},
						run: (*parser).callonsingleLineMixinArg2,
						expr: &seqExpr{
							pos: position{line: 3097, col: 23, offset: 107602},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3097, col: 23, offset: 107602},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 711, col: 14, offset: 21845},
												run: (*parser).callonsingleLineMixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 711, col: 14, offset: 21845},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21290},
																run: (*parser).callonsingleLineMixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21290},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2354, col: 17, offset: 80792},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2354, col: 26, offset: 80801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2337, col: 20, offset: 80547},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21384},
																run: (*parser).callonsingleLineMixinArg15,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21384},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21384},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21392},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21392},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21397},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21398},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21398},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21407},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21417},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21428},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonsingleLineMixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 713, col: 5, offset: 21887},
												run: (*parser).callonsingleLineMixinArg34,
												expr: &seqExpr{
													pos: position{line: 713, col: 5, offset: 21887},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 713, col: 5, offset: 21887},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonsingleLineMixinArg37,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 713, col: 14, offset: 21896},
															expr: &choiceExpr{
																pos: position{line: 713, col: 16, offset: 21898},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3721, col: 12, offset: 127772},
																				expr: &charClassMatcher{
																					pos:        position{line: 3733, col: 36, offset: 128119},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								expr: &litMatcher{
																									pos:        position{line: 3721, col: 16, offset: 127776},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3721, col: 22, offset: 127782},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3720, col: 12, offset: 127758},
																						expr: &anyMatcher{
																							line: 3720, col: 13, offset: 127759,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 713, col: 22, offset: 21904},
																		val:        "[:!=(]",
																		chars:      []rune{':', '!', '=', '('},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 724, col: 5, offset: 22230},
												run: (*parser).callonsingleLineMixinArg56,
												expr: &seqExpr{
													pos: position{line: 724, col: 5, offset: 22230},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 724, col: 5, offset: 22230},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 724, col: 12, offset: 22237},
																expr: &charClassMatcher{
																	pos:        position{line: 724, col: 12, offset: 22237},
																	val:        "[^ \\t\\r\\n:!=(]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 724, col: 28, offset: 22253},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonsingleLineMixinArg62,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3097, col: 39, offset: 107618},
									expr: &litMatcher{
										pos:        position{line: 3097, col: 39, offset: 107618},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 3097, col: 44, offset: 107623},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3097, col: 48, offset: 107627},
									expr: &litMatcher{
										pos:        position{line: 3097, col: 48, offset: 107627},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3097, col: 53, offset: 107632},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 3097, col: 58, offset: 107637},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3102, col: 5, offset: 107774},
						run: (*parser).callonsingleLineMixinArg75,
						expr: &seqExpr{
							pos: position{line: 3102, col: 5, offset: 107774},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3102, col: 5, offset: 107774},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 711, col: 14, offset: 21845},
												run: (*parser).callonsingleLineMixinArg79,
												expr: &labeledExpr{
													pos:   position{line: 711, col: 14, offset: 21845},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21290},
																run: (*parser).callonsingleLineMixinArg82,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21290},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2354, col: 17, offset: 80792},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2354, col: 26, offset: 80801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2337, col: 20, offset: 80547},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21384},
																run: (*parser).callonsingleLineMixinArg88,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21384},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21384},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21392},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21392},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21397},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21398},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21398},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21407},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21417},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21428},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonsingleLineMixinArg101,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 713, col: 5, offset: 21887},
												run: (*parser).callonsingleLineMixinArg107,
												expr: &seqExpr{
													pos: position{line: 713, col: 5, offset: 21887},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 713, col: 5, offset: 21887},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonsingleLineMixinArg110,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 713, col: 14, offset: 21896},
															expr: &choiceExpr{
																pos: position{line: 713, col: 16, offset: 21898},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3721, col: 12, offset: 127772},
																				expr: &charClassMatcher{
																					pos:        position{line: 3733, col: 36, offset: 128119},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3721, col: 16, offset: 127776},
																								expr: &litMatcher{
																									pos:        position{line: 3721, col: 16, offset: 127776},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3721, col: 22, offset: 127782},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3720, col: 12, offset: 127758},
																						expr: &anyMatcher{
																							line: 3720, col: 13, offset: 127759,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 713, col: 22, offset: 21904},
																		val:        "[:!=(]",
																		chars:      []rune{':', '!', '=', '('},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 724, col: 5, offset: 22230},
												run: (*parser).callonsingleLineMixinArg129,
												expr: &seqExpr{
													pos: position{line: 724, col: 5, offset: 22230},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 724, col: 5, offset: 22230},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 724, col: 12, offset: 22237},
																expr: &charClassMatcher{
																	pos:        position{line: 724, col: 12, offset: 22237},
																	val:        "[^ \\t\\r\\n:!=(]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 724, col: 28, offset: 22253},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonsingleLineMixinArg135,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3102, col: 21, offset: 107790},
									expr: &seqExpr{
										pos: position{line: 3102, col: 22, offset: 107791},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3102, col: 22, offset: 107791},
												expr: &litMatcher{
													pos:        position{line: 3102, col: 22, offset: 107791},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3102, col: 27, offset: 107796},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3102, col: 33, offset: 107802},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonsingleLineMixinArg147,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallBody",
			pos:  position{line: 3118, col: 1, offset: 108297},
			expr: &choiceExpr{
				pos: position{line: 3118, col: 18, offset: 108314},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3118, col: 18, offset: 108314},
						run: (*parser).callonmixinCallBody2,
						expr: &labeledExpr{
							pos:   position{line: 3118, col: 18, offset: 108314},
							label: "shI",
							expr: &ruleRefExpr{
								pos:  position{line: 3118, col: 22, offset: 108318},
								name: "MixinMainBlockShorthand",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3120, col: 5, offset: 108411},
						name: "Beaitb",
					},
				},
			},
		},
		{
			name: "singleLineMixinCallBody",
			pos:  position{line: 3121, col: 1, offset: 108418},
			expr: &ruleRefExpr{
				pos:  position{line: 3121, col: 28, offset: 108445},
				name: "Beait",
			},
		},
		{
			name: "MixinMainBlockShorthand",
			pos:  position{line: 3127, col: 1, offset: 108653},
			expr: &choiceExpr{
				pos: position{line: 3127, col: 28, offset: 108680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3127, col: 28, offset: 108680},
						run: (*parser).callonMixinMainBlockShorthand2,
						expr: &seqExpr{
							pos: position{line: 3127, col: 28, offset: 108680},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3127, col: 28, offset: 108680},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3127, col: 33, offset: 108685},
									expr: &actionExpr{
										pos: position{line: 1253, col: 21, offset: 40147},
										run: (*parser).callonMixinMainBlockShorthand6,
										expr: &oneOrMoreExpr{
											pos: position{line: 1253, col: 21, offset: 40147},
											expr: &charClassMatcher{
												pos:        position{line: 3722, col: 12, offset: 127805},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3127, col: 55, offset: 108707},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 3127, col: 61, offset: 108713},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3132, col: 5, offset: 108836},
						run: (*parser).callonMixinMainBlockShorthand20,
						expr: &seqExpr{
							pos: position{line: 3132, col: 5, offset: 108836},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3132, col: 5, offset: 108836},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3132, col: 10, offset: 108841},
									expr: &actionExpr{
										pos: position{line: 1253, col: 21, offset: 40147},
										run: (*parser).callonMixinMainBlockShorthand24,
										expr: &oneOrMoreExpr{
											pos: position{line: 1253, col: 21, offset: 40147},
											expr: &charClassMatcher{
												pos:        position{line: 3722, col: 12, offset: 127805},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3132, col: 28, offset: 108859},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonMixinMainBlockShorthand28,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Func",
			pos:  position{line: 3333, col: 1, offset: 114782},
			expr: &choiceExpr{
				pos: position{line: 3333, col: 9, offset: 114790},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3333, col: 9, offset: 114790},
						run: (*parser).callonFunc2,
						expr: &seqExpr{
							pos: position{line: 3333, col: 9, offset: 114790},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3333, col: 9, offset: 114790},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 3333, col: 16, offset: 114797},
									expr: &litMatcher{
										pos:        position{line: 3333, col: 16, offset: 114797},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3333, col: 21, offset: 114802},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 2306, col: 12, offset: 79446},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2306, col: 12, offset: 79446},
												run: (*parser).callonFunc9,
												expr: &labeledExpr{
													pos:   position{line: 2306, col: 12, offset: 79446},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2354, col: 17, offset: 80792},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2337, col: 20, offset: 80547},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2354, col: 26, offset: 80801},
																expr: &charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2308, col: 5, offset: 79540},
												run: (*parser).callonFunc15,
												expr: &seqExpr{
													pos: position{line: 2308, col: 5, offset: 79540},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2308, col: 5, offset: 79540},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2308, col: 13, offset: 79548},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2308, col: 13, offset: 79548},
																		expr: &litMatcher{
																			pos:        position{line: 2308, col: 13, offset: 79548},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2308, col: 18, offset: 79553},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 19, offset: 79554},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2308, col: 19, offset: 79554},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 19, offset: 79554},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2308, col: 28, offset: 79563},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2308, col: 38, offset: 79573},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2308, col: 49, offset: 79584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3724, col: 8, offset: 127821},
																run: (*parser).callonFunc28,
																expr: &choiceExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			expr: &anyMatcher{
																				line: 3724, col: 10, offset: 127823,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3724, col: 14, offset: 127827},
																			expr: &anyMatcher{
																				line: 3724, col: 15, offset: 127828,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3333, col: 35, offset: 114816},
									label: "paramsI",
									expr: &choiceExpr{
										pos: position{line: 3334, col: 5, offset: 114830},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3334, col: 5, offset: 114830},
												run: (*parser).callonFunc36,
												expr: &seqExpr{
													pos: position{line: 3334, col: 5, offset: 114830},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3334, col: 5, offset: 114830},
															label: "lParenPosI",
															expr: &actionExpr{
																pos: position{line: 3743, col: 12, offset: 128457},
																run: (*parser).callonFunc39,
																expr: &litMatcher{
																	pos:        position{line: 3743, col: 12, offset: 128457},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3334, col: 24, offset: 114849},
															label: "paramsI",
															expr: &choiceExpr{
																pos: position{line: 3335, col: 9, offset: 114867},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3335, col: 9, offset: 114867},
																		run: (*parser).callonFunc43,
																		expr: &seqExpr{
																			pos: position{line: 3335, col: 9, offset: 114867},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3335, col: 9, offset: 114867},
																					expr: &choiceExpr{
																						pos: position{line: 3737, col: 20, offset: 128237},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 3733, col: 36, offset: 128119},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&seqExpr{
																								pos: position{line: 3734, col: 36, offset: 128160},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3734, col: 36, offset: 128160},
																										expr: &litMatcher{
																											pos:        position{line: 3734, col: 36, offset: 128160},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 3734, col: 42, offset: 128166},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3335, col: 13, offset: 114871},
																					label: "paramsI",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 3335, col: 21, offset: 114879},
																						expr: &ruleRefExpr{
																							pos:  position{line: 3335, col: 21, offset: 114879},
																							name: "funcParamList",
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3335, col: 36, offset: 114894},
																					expr: &litMatcher{
																						pos:        position{line: 3335, col: 36, offset: 114894},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 3335, col: 41, offset: 114899},
																					expr: &seqExpr{
																						pos: position{line: 3335, col: 42, offset: 114900},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3335, col: 42, offset: 114900},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 3335, col: 46, offset: 114904},
																								expr: &choiceExpr{
																									pos: position{line: 3737, col: 20, offset: 128237},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 3733, col: 36, offset: 128119},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 3734, col: 36, offset: 128160},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3734, col: 36, offset: 128160},
																													expr: &litMatcher{
																														pos:        position{line: 3734, col: 36, offset: 128160},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3734, col: 42, offset: 128166},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3337, col: 13, offset: 114988},
																		run: (*parser).callonFunc67,
																		expr: &seqExpr{
																			pos: position{line: 3337, col: 13, offset: 114988},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3337, col: 13, offset: 114988},
																					expr: &charClassMatcher{
																						pos:        position{line: 3337, col: 13, offset: 114988},
																						val:        "[^)]",
																						chars:      []rune{')'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3337, col: 19, offset: 114994},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3724, col: 8, offset: 127821},
																						run: (*parser).callonFunc72,
																						expr: &choiceExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3724, col: 9, offset: 127822},
																									expr: &anyMatcher{
																										line: 3724, col: 10, offset: 127823,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3724, col: 14, offset: 127827},
																									expr: &anyMatcher{
																										line: 3724, col: 15, offset: 127828,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3347, col: 7, offset: 115387},
															label: "rParenPosI",
															expr: &actionExpr{
																pos: position{line: 3744, col: 12, offset: 128495},
																run: (*parser).callonFunc79,
																expr: &litMatcher{
																	pos:        position{line: 3744, col: 12, offset: 128495},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3353, col: 9, offset: 115607},
												run: (*parser).callonFunc81,
												expr: &zeroOrMoreExpr{
													pos: position{line: 3353, col: 9, offset: 115607},
													expr: &charClassMatcher{
														pos:        position{line: 3722, col: 12, offset: 127805},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3372, col: 5, offset: 116151},
						run: (*parser).callonFunc93,
						expr: &seqExpr{
							pos: position{line: 3372, col: 5, offset: 116151},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3372, col: 5, offset: 116151},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&labeledExpr{
									pos:   position{line: 3372, col: 12, offset: 116158},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonFunc97,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParamList",
			pos:  position{line: 3384, col: 1, offset: 116507},
			expr: &choiceExpr{
				pos: position{line: 3384, col: 18, offset: 116524},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3384, col: 18, offset: 116524},
						name: "funcOtherParamList",
					},
					&ruleRefExpr{
						pos:  position{line: 3384, col: 39, offset: 116545},
						name: "funcOnlyVariadicParamList",
					},
				},
			},
		},
		{
			name: "funcOnlyVariadicParamList",
			pos:  position{line: 3385, col: 1, offset: 116571},
			expr: &actionExpr{
				pos: position{line: 3385, col: 30, offset: 116600},
				run: (*parser).callonfuncOnlyVariadicParamList1,
				expr: &labeledExpr{
					pos:   position{line: 3385, col: 30, offset: 116600},
					label: "variadicI",
					expr: &ruleRefExpr{
						pos:  position{line: 3385, col: 40, offset: 116610},
						name: "funcVariadicParam",
					},
				},
			},
		},
		{
			name: "funcOtherParamList",
			pos:  position{line: 3388, col: 1, offset: 116693},
			expr: &actionExpr{
				pos: position{line: 3388, col: 23, offset: 116715},
				run: (*parser).callonfuncOtherParamList1,
				expr: &seqExpr{
					pos: position{line: 3388, col: 23, offset: 116715},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3388, col: 23, offset: 116715},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3388, col: 30, offset: 116722},
								name: "funcParam",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3388, col: 40, offset: 116732},
							expr: &litMatcher{
								pos:        position{line: 3388, col: 40, offset: 116732},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 3388, col: 45, offset: 116737},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3388, col: 51, offset: 116743},
								expr: &seqExpr{
									pos: position{line: 3388, col: 52, offset: 116744},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3388, col: 52, offset: 116744},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3388, col: 56, offset: 116748},
											expr: &choiceExpr{
												pos: position{line: 3737, col: 20, offset: 128237},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																expr: &litMatcher{
																	pos:        position{line: 3734, col: 36, offset: 128160},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3734, col: 42, offset: 128166},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3388, col: 60, offset: 116752},
											name: "funcParam",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3388, col: 72, offset: 116764},
							label: "variadicI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3388, col: 82, offset: 116774},
								expr: &seqExpr{
									pos: position{line: 3388, col: 83, offset: 116775},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3388, col: 83, offset: 116775},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3388, col: 87, offset: 116779},
											expr: &choiceExpr{
												pos: position{line: 3737, col: 20, offset: 128237},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3734, col: 36, offset: 128160},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3734, col: 36, offset: 128160},
																expr: &litMatcher{
																	pos:        position{line: 3734, col: 36, offset: 128160},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3734, col: 42, offset: 128166},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3388, col: 91, offset: 116783},
											name: "funcVariadicParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParam",
			pos:  position{line: 3409, col: 1, offset: 117234},
			expr: &choiceExpr{
				pos: position{line: 3409, col: 14, offset: 117247},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3409, col: 14, offset: 117247},
						run: (*parser).callonfuncParam2,
						expr: &seqExpr{
							pos: position{line: 3409, col: 14, offset: 117247},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3409, col: 14, offset: 117247},
									label: "namesI",
									expr: &actionExpr{
										pos: position{line: 3432, col: 18, offset: 117827},
										run: (*parser).callonfuncParam5,
										expr: &seqExpr{
											pos: position{line: 3432, col: 18, offset: 117827},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3432, col: 18, offset: 117827},
													label: "firstI",
													expr: &choiceExpr{
														pos: position{line: 2306, col: 12, offset: 79446},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2306, col: 12, offset: 79446},
																run: (*parser).callonfuncParam9,
																expr: &labeledExpr{
																	pos:   position{line: 2306, col: 12, offset: 79446},
																	label: "ident",
																	expr: &seqExpr{
																		pos: position{line: 2354, col: 17, offset: 80792},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2337, col: 20, offset: 80547},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2354, col: 26, offset: 80801},
																				expr: &charClassMatcher{
																					pos:        position{line: 2337, col: 20, offset: 80547},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2308, col: 5, offset: 79540},
																run: (*parser).callonfuncParam15,
																expr: &seqExpr{
																	pos: position{line: 2308, col: 5, offset: 79540},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2308, col: 5, offset: 79540},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 2308, col: 13, offset: 79548},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 2308, col: 13, offset: 79548},
																						expr: &litMatcher{
																							pos:        position{line: 2308, col: 13, offset: 79548},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2308, col: 18, offset: 79553},
																						expr: &choiceExpr{
																							pos: position{line: 2308, col: 19, offset: 79554},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2308, col: 19, offset: 79554},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2308, col: 19, offset: 79554},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2308, col: 28, offset: 79563},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2308, col: 38, offset: 79573},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 2308, col: 49, offset: 79584},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3724, col: 8, offset: 127821},
																				run: (*parser).callonfuncParam28,
																				expr: &choiceExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3724, col: 9, offset: 127822},
																							expr: &anyMatcher{
																								line: 3724, col: 10, offset: 127823,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3724, col: 14, offset: 127827},
																							expr: &anyMatcher{
																								line: 3724, col: 15, offset: 127828,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3432, col: 33, offset: 117842},
													label: "restI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 3432, col: 39, offset: 117848},
														expr: &seqExpr{
															pos: position{line: 3432, col: 40, offset: 117849},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3432, col: 40, offset: 117849},
																	expr: &litMatcher{
																		pos:        position{line: 3432, col: 40, offset: 117849},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3432, col: 45, offset: 117854},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3432, col: 49, offset: 117858},
																	expr: &choiceExpr{
																		pos: position{line: 3737, col: 20, offset: 128237},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 3733, col: 36, offset: 128119},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 3734, col: 36, offset: 128160},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3734, col: 36, offset: 128160},
																						expr: &litMatcher{
																							pos:        position{line: 3734, col: 36, offset: 128160},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3734, col: 42, offset: 128166},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2306, col: 12, offset: 79446},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2306, col: 12, offset: 79446},
																			run: (*parser).callonfuncParam48,
																			expr: &labeledExpr{
																				pos:   position{line: 2306, col: 12, offset: 79446},
																				label: "ident",
																				expr: &seqExpr{
																					pos: position{line: 2354, col: 17, offset: 80792},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2337, col: 20, offset: 80547},
																							val:        "[_\\pL]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2354, col: 26, offset: 80801},
																							expr: &charClassMatcher{
																								pos:        position{line: 2337, col: 20, offset: 80547},
																								val:        "[_\\pL\\pNd]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2308, col: 5, offset: 79540},
																			run: (*parser).callonfuncParam54,
																			expr: &seqExpr{
																				pos: position{line: 2308, col: 5, offset: 79540},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 2308, col: 5, offset: 79540},
																						label: "identI",
																						expr: &seqExpr{
																							pos: position{line: 2308, col: 13, offset: 79548},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 2308, col: 13, offset: 79548},
																									expr: &litMatcher{
																										pos:        position{line: 2308, col: 13, offset: 79548},
																										val:        "$",
																										ignoreCase: false,
																										want:       "\"$\"",
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 2308, col: 18, offset: 79553},
																									expr: &choiceExpr{
																										pos: position{line: 2308, col: 19, offset: 79554},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2308, col: 19, offset: 79554},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 2308, col: 19, offset: 79554},
																														val:        "[\\pNd]",
																														classes:    []*unicode.RangeTable{rangeTable("Nd")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2308, col: 28, offset: 79563},
																														val:        "[_-\\pL]",
																														chars:      []rune{'_', '-'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2308, col: 38, offset: 79573},
																												val:        "[_-\\pL]",
																												chars:      []rune{'_', '-'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2308, col: 49, offset: 79584},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3724, col: 8, offset: 127821},
																							run: (*parser).callonfuncParam67,
																							expr: &choiceExpr{
																								pos: position{line: 3724, col: 9, offset: 127822},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3724, col: 9, offset: 127822},
																										expr: &anyMatcher{
																											line: 3724, col: 10, offset: 127823,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3724, col: 14, offset: 127827},
																										expr: &anyMatcher{
																											line: 3724, col: 15, offset: 127828,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 3409, col: 35, offset: 117268},
									expr: &litMatcher{
										pos:        position{line: 3409, col: 35, offset: 117268},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3409, col: 40, offset: 117273},
									label: "typeI",
									expr: &ruleRefExpr{
										pos:  position{line: 3409, col: 46, offset: 117279},
										name: "funcType",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3414, col: 5, offset: 117407},
						run: (*parser).callonfuncParam77,
						expr: &labeledExpr{
							pos:   position{line: 3414, col: 5, offset: 117407},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3414, col: 11, offset: 117413},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcVariadicParam",
			pos:  position{line: 3419, col: 1, offset: 117499},
			expr: &actionExpr{
				pos: position{line: 3419, col: 22, offset: 117520},
				run: (*parser).callonfuncVariadicParam1,
				expr: &seqExpr{
					pos: position{line: 3419, col: 22, offset: 117520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3419, col: 22, offset: 117520},
							label: "nameI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3419, col: 28, offset: 117526},
								expr: &seqExpr{
									pos: position{line: 3419, col: 29, offset: 117527},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 2306, col: 12, offset: 79446},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2306, col: 12, offset: 79446},
													run: (*parser).callonfuncVariadicParam7,
													expr: &labeledExpr{
														pos:   position{line: 2306, col: 12, offset: 79446},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2354, col: 17, offset: 80792},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2354, col: 26, offset: 80801},
																	expr: &charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2308, col: 5, offset: 79540},
													run: (*parser).callonfuncVariadicParam13,
													expr: &seqExpr{
														pos: position{line: 2308, col: 5, offset: 79540},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 2308, col: 5, offset: 79540},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 2308, col: 13, offset: 79548},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2308, col: 13, offset: 79548},
																			expr: &litMatcher{
																				pos:        position{line: 2308, col: 13, offset: 79548},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2308, col: 18, offset: 79553},
																			expr: &choiceExpr{
																				pos: position{line: 2308, col: 19, offset: 79554},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 2308, col: 19, offset: 79554},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2308, col: 19, offset: 79554},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2308, col: 28, offset: 79563},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 2308, col: 38, offset: 79573},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 2308, col: 49, offset: 79584},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonfuncVariadicParam26,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 3419, col: 37, offset: 117535},
											expr: &litMatcher{
												pos:        position{line: 3419, col: 37, offset: 117535},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3419, col: 44, offset: 117542},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
						&labeledExpr{
							pos:   position{line: 3419, col: 50, offset: 117548},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3419, col: 56, offset: 117554},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcType",
			pos:  position{line: 3444, col: 1, offset: 118133},
			expr: &choiceExpr{
				pos: position{line: 3444, col: 13, offset: 118145},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3444, col: 13, offset: 118145},
						name: "GoType",
					},
					&actionExpr{
						pos: position{line: 3444, col: 22, offset: 118154},
						run: (*parser).callonfuncType3,
						expr: &seqExpr{
							pos: position{line: 3444, col: 22, offset: 118154},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3444, col: 22, offset: 118154},
									label: "typeI",
									expr: &oneOrMoreExpr{
										pos: position{line: 3444, col: 28, offset: 118160},
										expr: &charClassMatcher{
											pos:        position{line: 3444, col: 28, offset: 118160},
											val:        "[^,)]",
											chars:      []rune{',', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3444, col: 35, offset: 118167},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonfuncType9,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assign",
			pos:  position{line: 3462, col: 1, offset: 118680},
			expr: &choiceExpr{
				pos: position{line: 3462, col: 11, offset: 118690},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3462, col: 11, offset: 118690},
						run: (*parser).callonAssign2,
						expr: &seqExpr{
							pos: position{line: 3462, col: 11, offset: 118690},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3462, col: 11, offset: 118690},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3462, col: 21, offset: 118700},
										expr: &litMatcher{
											pos:        position{line: 3462, col: 21, offset: 118700},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 3462, col: 26, offset: 118705},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 3462, col: 30, offset: 118709},
									expr: &litMatcher{
										pos:        position{line: 3462, col: 30, offset: 118709},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3462, col: 35, offset: 118714},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3462, col: 41, offset: 118720},
										name: "Expression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3462, col: 52, offset: 118731},
									expr: &actionExpr{
										pos: position{line: 1253, col: 21, offset: 40147},
										run: (*parser).callonAssign13,
										expr: &oneOrMoreExpr{
											pos: position{line: 1253, col: 21, offset: 40147},
											expr: &charClassMatcher{
												pos:        position{line: 3722, col: 12, offset: 127805},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3468, col: 5, offset: 118901},
						run: (*parser).callonAssign25,
						expr: &seqExpr{
							pos: position{line: 3468, col: 5, offset: 118901},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3468, col: 5, offset: 118901},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3468, col: 15, offset: 118911},
										expr: &litMatcher{
											pos:        position{line: 3468, col: 15, offset: 118911},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 3468, col: 20, offset: 118916},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 3468, col: 24, offset: 118920},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonAssign32,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 3487, col: 1, offset: 119490},
			expr: &actionExpr{
				pos: position{line: 3487, col: 15, offset: 119504},
				run: (*parser).callonInlineText1,
				expr: &seqExpr{
					pos: position{line: 3487, col: 15, offset: 119504},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3487, col: 15, offset: 119504},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
						&labeledExpr{
							pos:   position{line: 3487, col: 19, offset: 119508},
							label: "lineI",
							expr: &ruleRefExpr{
								pos:  position{line: 3487, col: 25, offset: 119514},
								name: "TextLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlock",
			pos:  position{line: 3497, col: 1, offset: 119790},
			expr: &choiceExpr{
				pos: position{line: 3497, col: 15, offset: 119804},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3497, col: 15, offset: 119804},
						run: (*parser).callonArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3497, col: 15, offset: 119804},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3497, col: 15, offset: 119804},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3497, col: 20, offset: 119809},
									label: "firstLineI",
									expr: &choiceExpr{
										pos: position{line: 3497, col: 32, offset: 119821},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 3497, col: 32, offset: 119821},
												name: "TextLine",
											},
											&seqExpr{
												pos: position{line: 3721, col: 12, offset: 127772},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3721, col: 12, offset: 127772},
														expr: &charClassMatcher{
															pos:        position{line: 3733, col: 36, offset: 128119},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3721, col: 16, offset: 127776},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 16, offset: 127776},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		expr: &litMatcher{
																			pos:        position{line: 3721, col: 16, offset: 127776},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3721, col: 22, offset: 127782},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3720, col: 12, offset: 127758},
																expr: &anyMatcher{
																	line: 3720, col: 13, offset: 127759,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3497, col: 48, offset: 119837},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3497, col: 65, offset: 119854},
										expr: &seqExpr{
											pos: position{line: 3497, col: 66, offset: 119855},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3497, col: 66, offset: 119855},
													expr: &oneOrMoreExpr{
														pos: position{line: 3735, col: 36, offset: 128206},
														expr: &seqExpr{
															pos: position{line: 3735, col: 37, offset: 128207},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3735, col: 37, offset: 128207},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3734, col: 36, offset: 128160},
																	expr: &litMatcher{
																		pos:        position{line: 3734, col: 36, offset: 128160},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3734, col: 42, offset: 128166},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 3497, col: 75, offset: 119864},
													name: "INDENTATION2",
												},
												&ruleRefExpr{
													pos:  position{line: 3497, col: 88, offset: 119877},
													name: "TextLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3518, col: 5, offset: 120392},
						run: (*parser).callonArrowBlock31,
						expr: &seqExpr{
							pos: position{line: 3518, col: 5, offset: 120392},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3518, col: 5, offset: 120392},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineArrowBlock",
			pos:  position{line: 3522, col: 1, offset: 120455},
			expr: &choiceExpr{
				pos: position{line: 3522, col: 21, offset: 120475},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3522, col: 21, offset: 120475},
						run: (*parser).callonInlineArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3522, col: 21, offset: 120475},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3522, col: 21, offset: 120475},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3522, col: 26, offset: 120480},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3522, col: 32, offset: 120486},
										name: "TextLine",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3527, col: 5, offset: 120621},
						run: (*parser).callonInlineArrowBlock7,
						expr: &seqExpr{
							pos: position{line: 3527, col: 5, offset: 120621},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3527, col: 5, offset: 120621},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&labeledExpr{
									pos:   position{line: 3527, col: 9, offset: 120625},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3724, col: 8, offset: 127821},
										run: (*parser).callonInlineArrowBlock11,
										expr: &choiceExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3724, col: 9, offset: 127822},
													expr: &anyMatcher{
														line: 3724, col: 10, offset: 127823,
													},
												},
												&notExpr{
													pos: position{line: 3724, col: 14, offset: 127827},
													expr: &anyMatcher{
														line: 3724, col: 15, offset: 127828,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3527, col: 18, offset: 120634},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3527, col: 24, offset: 120640},
										name: "TextLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextLine",
			pos:  position{line: 3545, col: 1, offset: 121220},
			expr: &actionExpr{
				pos: position{line: 3545, col: 13, offset: 121232},
				run: (*parser).callonTextLine1,
				expr: &seqExpr{
					pos: position{line: 3545, col: 13, offset: 121232},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3545, col: 13, offset: 121232},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3545, col: 20, offset: 121239},
								expr: &ruleRefExpr{
									pos:  position{line: 3545, col: 20, offset: 121239},
									name: "TextItem",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3721, col: 12, offset: 127772},
							expr: &charClassMatcher{
								pos:        position{line: 3733, col: 36, offset: 128119},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3721, col: 16, offset: 127776},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											expr: &litMatcher{
												pos:        position{line: 3721, col: 16, offset: 127776},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3721, col: 22, offset: 127782},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3720, col: 12, offset: 127758},
									expr: &anyMatcher{
										line: 3720, col: 13, offset: 127759,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextItem",
			pos:  position{line: 3553, col: 1, offset: 121506},
			expr: &choiceExpr{
				pos: position{line: 3553, col: 13, offset: 121518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3559, col: 9, offset: 121727},
						run: (*parser).callonTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 3559, col: 9, offset: 121727},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3559, col: 15, offset: 121733},
								expr: &choiceExpr{
									pos: position{line: 3559, col: 16, offset: 121734},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 3559, col: 16, offset: 121734},
											expr: &seqExpr{
												pos: position{line: 3559, col: 17, offset: 121735},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 3559, col: 17, offset: 121735},
														expr: &seqExpr{
															pos: position{line: 3721, col: 12, offset: 127772},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3721, col: 12, offset: 127772},
																	expr: &charClassMatcher{
																		pos:        position{line: 3733, col: 36, offset: 128119},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3721, col: 16, offset: 127776},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3721, col: 16, offset: 127776},
																					expr: &litMatcher{
																						pos:        position{line: 3721, col: 16, offset: 127776},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3721, col: 22, offset: 127782},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3720, col: 12, offset: 127758},
																			expr: &anyMatcher{
																				line: 3720, col: 13, offset: 127759,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3559, col: 22, offset: 121740},
														val:        "[^#]",
														chars:      []rune{'#'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3559, col: 31, offset: 121749},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3553, col: 20, offset: 121525},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 3570, col: 1, offset: 122037},
			expr: &choiceExpr{
				pos: position{line: 3570, col: 18, offset: 122054},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3570, col: 18, offset: 122054},
						name: "SimpleInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3570, col: 40, offset: 122076},
						name: "ElementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3570, col: 63, offset: 122099},
						name: "MixinInterpolation",
					},
					&actionExpr{
						pos: position{line: 3572, col: 21, offset: 122158},
						run: (*parser).callonInterpolation5,
						expr: &litMatcher{
							pos:        position{line: 3572, col: 21, offset: 122158},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SimpleInterpolation",
			pos:  position{line: 3596, col: 1, offset: 123005},
			expr: &actionExpr{
				pos: position{line: 3596, col: 24, offset: 123028},
				run: (*parser).callonSimpleInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3596, col: 24, offset: 123028},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3596, col: 24, offset: 123028},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3596, col: 28, offset: 123032},
							label: "noEscapeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3596, col: 38, offset: 123042},
								expr: &litMatcher{
									pos:        position{line: 3596, col: 38, offset: 123042},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3596, col: 43, offset: 123047},
							label: "valueI",
							expr: &choiceExpr{
								pos: position{line: 3596, col: 51, offset: 123055},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 3686, col: 27, offset: 126501},
										run: (*parser).callonSimpleInterpolation9,
										expr: &seqExpr{
											pos: position{line: 3686, col: 27, offset: 126501},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3686, col: 27, offset: 126501},
													label: "lBracketPosI",
													expr: &actionExpr{
														pos: position{line: 3749, col: 14, offset: 128613},
														run: (*parser).callonSimpleInterpolation12,
														expr: &litMatcher{
															pos:        position{line: 3749, col: 14, offset: 128613},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3686, col: 50, offset: 126524},
													label: "textI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 3686, col: 56, offset: 126530},
														expr: &charClassMatcher{
															pos:        position{line: 3686, col: 56, offset: 126530},
															val:        "[^]\\r\\n]",
															chars:      []rune{']', '\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3686, col: 67, offset: 126541},
													label: "rBracketPosI",
													expr: &actionExpr{
														pos: position{line: 3750, col: 14, offset: 128653},
														run: (*parser).callonSimpleInterpolation18,
														expr: &litMatcher{
															pos:        position{line: 3750, col: 14, offset: 128653},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3692, col: 5, offset: 126752},
										run: (*parser).callonSimpleInterpolation20,
										expr: &seqExpr{
											pos: position{line: 3692, col: 5, offset: 126752},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3692, col: 5, offset: 126752},
													label: "lBracketPosI",
													expr: &actionExpr{
														pos: position{line: 3749, col: 14, offset: 128613},
														run: (*parser).callonSimpleInterpolation23,
														expr: &litMatcher{
															pos:        position{line: 3749, col: 14, offset: 128613},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3692, col: 28, offset: 126775},
													label: "textI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 3692, col: 34, offset: 126781},
														expr: &charClassMatcher{
															pos:        position{line: 3692, col: 34, offset: 126781},
															val:        "[^]\\r\\n]",
															chars:      []rune{']', '\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 3721, col: 12, offset: 127772},
													expr: &charClassMatcher{
														pos:        position{line: 3733, col: 36, offset: 128119},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3721, col: 16, offset: 127776},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3721, col: 16, offset: 127776},
																	expr: &litMatcher{
																		pos:        position{line: 3721, col: 16, offset: 127776},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3721, col: 22, offset: 127782},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3720, col: 12, offset: 127758},
															expr: &anyMatcher{
																line: 3720, col: 13, offset: 127759,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 3596, col: 76, offset: 123080},
										name: "expressionInterpolationValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementInterpolation",
			pos:  position{line: 3608, col: 1, offset: 123469},
			expr: &actionExpr{
				pos: position{line: 3608, col: 25, offset: 123493},
				run: (*parser).callonElementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3608, col: 25, offset: 123493},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3608, col: 25, offset: 123493},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3608, col: 29, offset: 123497},
							label: "noEscapeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3608, col: 39, offset: 123507},
								expr: &litMatcher{
									pos:        position{line: 3608, col: 39, offset: 123507},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3608, col: 44, offset: 123512},
							label: "elPosI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).callonElementInterpolation8,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3608, col: 55, offset: 123523},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2823, col: 16, offset: 98474},
								expr: &charClassMatcher{
									pos:        position{line: 2809, col: 27, offset: 97814},
									val:        "[09A-Za-z]",
									chars:      []rune{'0', '9'},
									ranges:     []rune{'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3608, col: 73, offset: 123541},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3608, col: 80, offset: 123548},
								expr: &ruleRefExpr{
									pos:  position{line: 3608, col: 80, offset: 123548},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3608, col: 111, offset: 123579},
							label: "valueI",
							expr: &ruleRefExpr{
								pos:  position{line: 3608, col: 118, offset: 123586},
								name: "elementInterpolationValue",
							},
						},
					},
				},
			},
		},
		{
			name: "elementInterpolationValue",
			pos:  position{line: 3622, col: 1, offset: 124014},
			expr: &choiceExpr{
				pos: position{line: 3622, col: 30, offset: 124043},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3686, col: 27, offset: 126501},
						run: (*parser).callonelementInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3686, col: 27, offset: 126501},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3686, col: 27, offset: 126501},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3749, col: 14, offset: 128613},
										run: (*parser).callonelementInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3749, col: 14, offset: 128613},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3686, col: 50, offset: 126524},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3686, col: 56, offset: 126530},
										expr: &charClassMatcher{
											pos:        position{line: 3686, col: 56, offset: 126530},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3686, col: 67, offset: 126541},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3750, col: 14, offset: 128653},
										run: (*parser).callonelementInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3750, col: 14, offset: 128653},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3692, col: 5, offset: 126752},
						run: (*parser).callonelementInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3692, col: 5, offset: 126752},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3692, col: 5, offset: 126752},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3749, col: 14, offset: 128613},
										run: (*parser).callonelementInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3749, col: 14, offset: 128613},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3692, col: 28, offset: 126775},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3692, col: 34, offset: 126781},
										expr: &charClassMatcher{
											pos:        position{line: 3692, col: 34, offset: 126781},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3622, col: 55, offset: 124068},
						name: "expressionInterpolationValue",
					},
					&actionExpr{
						pos: position{line: 3622, col: 86, offset: 124099},
						run: (*parser).callonelementInterpolationValue31,
						expr: &litMatcher{
							pos:        position{line: 3622, col: 86, offset: 124099},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 3624, col: 5, offset: 124129},
						run: (*parser).callonelementInterpolationValue33,
						expr: &andExpr{
							pos: position{line: 3624, col: 5, offset: 124129},
							expr: &choiceExpr{
								pos: position{line: 3624, col: 7, offset: 124131},
								alternatives: []interface{}{
									&anyMatcher{
										line: 3624, col: 7, offset: 124131,
									},
									&notExpr{
										pos: position{line: 3624, col: 11, offset: 124135},
										expr: &anyMatcher{
											line: 3624, col: 12, offset: 124136,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinInterpolation",
			pos:  position{line: 3646, col: 1, offset: 124984},
			expr: &actionExpr{
				pos: position{line: 3646, col: 23, offset: 125006},
				run: (*parser).callonMixinInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3646, col: 23, offset: 125006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3646, col: 23, offset: 125006},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3646, col: 27, offset: 125010},
							label: "noEscapeI",
							expr: &litMatcher{
								pos:        position{line: 3646, col: 37, offset: 125020},
								val:        "!",
								ignoreCase: false,
								want:       "\"!\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 3646, col: 41, offset: 125024},
							label: "mcPosI",
							expr: &actionExpr{
								pos: position{line: 3724, col: 8, offset: 127821},
								run: (*parser).callonMixinInterpolation7,
								expr: &choiceExpr{
									pos: position{line: 3724, col: 9, offset: 127822},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3724, col: 9, offset: 127822},
											expr: &anyMatcher{
												line: 3724, col: 10, offset: 127823,
											},
										},
										&notExpr{
											pos: position{line: 3724, col: 14, offset: 127827},
											expr: &anyMatcher{
												line: 3724, col: 15, offset: 127828,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3646, col: 52, offset: 125035},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3646, col: 56, offset: 125039},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3646, col: 67, offset: 125050},
								expr: &seqExpr{
									pos: position{line: 3646, col: 68, offset: 125051},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21290},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21290},
													run: (*parser).callonMixinInterpolation18,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21290},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2354, col: 17, offset: 80792},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2337, col: 20, offset: 80547},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2354, col: 26, offset: 80801},
																	expr: &charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21384},
													run: (*parser).callonMixinInterpolation24,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21384},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21392},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21392},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21392},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21397},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21398},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21398},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21398},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21407},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21417},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21428},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3724, col: 8, offset: 127821},
																	run: (*parser).callonMixinInterpolation37,
																	expr: &choiceExpr{
																		pos: position{line: 3724, col: 9, offset: 127822},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3724, col: 9, offset: 127822},
																				expr: &anyMatcher{
																					line: 3724, col: 10, offset: 127823,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3724, col: 14, offset: 127827},
																				expr: &anyMatcher{
																					line: 3724, col: 15, offset: 127828,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3646, col: 74, offset: 125057},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3646, col: 80, offset: 125063},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21845},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21845},
										run: (*parser).callonMixinInterpolation46,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21845},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21290},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21290},
														run: (*parser).callonMixinInterpolation49,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21290},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2354, col: 17, offset: 80792},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2337, col: 20, offset: 80547},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2354, col: 26, offset: 80801},
																		expr: &charClassMatcher{
																			pos:        position{line: 2337, col: 20, offset: 80547},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21384},
														run: (*parser).callonMixinInterpolation55,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21384},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21384},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21392},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21392},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21392},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21397},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21398},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21398},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21398},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21407},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21417},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21428},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3724, col: 8, offset: 127821},
																		run: (*parser).callonMixinInterpolation68,
																		expr: &choiceExpr{
																			pos: position{line: 3724, col: 9, offset: 127822},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3724, col: 9, offset: 127822},
																					expr: &anyMatcher{
																						line: 3724, col: 10, offset: 127823,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3724, col: 14, offset: 127827},
																					expr: &anyMatcher{
																						line: 3724, col: 15, offset: 127828,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21887},
										run: (*parser).callonMixinInterpolation74,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21887},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21887},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonMixinInterpolation77,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21896},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21898},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3721, col: 12, offset: 127772},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3721, col: 12, offset: 127772},
																		expr: &charClassMatcher{
																			pos:        position{line: 3733, col: 36, offset: 128119},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3721, col: 16, offset: 127776},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3721, col: 16, offset: 127776},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3721, col: 16, offset: 127776},
																						expr: &litMatcher{
																							pos:        position{line: 3721, col: 16, offset: 127776},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3721, col: 22, offset: 127782},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3720, col: 12, offset: 127758},
																				expr: &anyMatcher{
																					line: 3720, col: 13, offset: 127759,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21904},
																val:        "[:!=(]",
																chars:      []rune{':', '!', '=', '('},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonMixinInterpolation96,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=(]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '('},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 28, offset: 22253},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3724, col: 8, offset: 127821},
														run: (*parser).callonMixinInterpolation102,
														expr: &choiceExpr{
															pos: position{line: 3724, col: 9, offset: 127822},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3724, col: 9, offset: 127822},
																	expr: &anyMatcher{
																		line: 3724, col: 10, offset: 127823,
																	},
																},
																&notExpr{
																	pos: position{line: 3724, col: 14, offset: 127827},
																	expr: &anyMatcher{
																		line: 3724, col: 15, offset: 127828,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3646, col: 96, offset: 125079},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3646, col: 102, offset: 125085},
								expr: &ruleRefExpr{
									pos:  position{line: 3646, col: 102, offset: 125085},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3646, col: 126, offset: 125109},
							label: "valueI",
							expr: &ruleRefExpr{
								pos:  position{line: 3646, col: 133, offset: 125116},
								name: "mixinInterpolationValue",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinInterpolationValue",
			pos:  position{line: 3662, col: 1, offset: 125601},
			expr: &choiceExpr{
				pos: position{line: 3662, col: 28, offset: 125628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3686, col: 27, offset: 126501},
						run: (*parser).callonmixinInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3686, col: 27, offset: 126501},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3686, col: 27, offset: 126501},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3749, col: 14, offset: 128613},
										run: (*parser).callonmixinInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3749, col: 14, offset: 128613},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3686, col: 50, offset: 126524},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3686, col: 56, offset: 126530},
										expr: &charClassMatcher{
											pos:        position{line: 3686, col: 56, offset: 126530},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3686, col: 67, offset: 126541},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3750, col: 14, offset: 128653},
										run: (*parser).callonmixinInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3750, col: 14, offset: 128653},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3692, col: 5, offset: 126752},
						run: (*parser).callonmixinInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3692, col: 5, offset: 126752},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3692, col: 5, offset: 126752},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3749, col: 14, offset: 128613},
										run: (*parser).callonmixinInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3749, col: 14, offset: 128613},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3692, col: 28, offset: 126775},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3692, col: 34, offset: 126781},
										expr: &charClassMatcher{
											pos:        position{line: 3692, col: 34, offset: 126781},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3662, col: 53, offset: 125653},
						name: "expressionInterpolationValue",
					},
					&actionExpr{
						pos: position{line: 3662, col: 84, offset: 125684},
						run: (*parser).callonmixinInterpolationValue31,
						expr: &andExpr{
							pos: position{line: 3662, col: 84, offset: 125684},
							expr: &choiceExpr{
								pos: position{line: 3662, col: 86, offset: 125686},
								alternatives: []interface{}{
									&anyMatcher{
										line: 3662, col: 86, offset: 125686,
									},
									&notExpr{
										pos: position{line: 3662, col: 90, offset: 125690},
										expr: &anyMatcher{
											line: 3662, col: 91, offset: 125691,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "expressionInterpolationValue",
			pos:  position{line: 3703, col: 1, offset: 127009},
			expr: &choiceExpr{
				pos: position{line: 3703, col: 33, offset: 127041},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3703, col: 33, offset: 127041},
						run: (*parser).callonexpressionInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3703, col: 33, offset: 127041},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3703, col: 33, offset: 127041},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3746, col: 12, offset: 128534},
										run: (*parser).callonexpressionInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3746, col: 12, offset: 128534},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3703, col: 52, offset: 127060},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3703, col: 58, offset: 127066},
										name: "SingleLineExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 3703, col: 79, offset: 127087},
									label: "rBracePosI",
									expr: &actionExpr{
										pos: position{line: 3747, col: 12, offset: 128572},
										run: (*parser).callonexpressionInterpolationValue10,
										expr: &litMatcher{
											pos:        position{line: 3747, col: 12, offset: 128572},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3709, col: 5, offset: 127308},
						run: (*parser).callonexpressionInterpolationValue12,
						expr: &seqExpr{
							pos: position{line: 3709, col: 5, offset: 127308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3709, col: 5, offset: 127308},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3749, col: 14, offset: 128613},
										run: (*parser).callonexpressionInterpolationValue15,
										expr: &litMatcher{
											pos:        position{line: 3749, col: 14, offset: 128613},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3709, col: 26, offset: 127329},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3709, col: 32, offset: 127335},
										name: "SingleLineExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3721, col: 12, offset: 127772},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3721, col: 16, offset: 127776},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3721, col: 16, offset: 127776},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3721, col: 16, offset: 127776},
													expr: &litMatcher{
														pos:        position{line: 3721, col: 16, offset: 127776},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3721, col: 22, offset: 127782},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3720, col: 12, offset: 127758},
											expr: &anyMatcher{
												line: 3720, col: 13, offset: 127759,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION_IGNORE_ADDITIONAL",
			pos:  position{line: 4040, col: 1, offset: 141494},
			expr: &choiceExpr{
				pos: position{line: 4040, col: 34, offset: 141527},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4040, col: 34, offset: 141527},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4040, col: 34, offset: 141527},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL3,
							},
							&actionExpr{
								pos: position{line: 3822, col: 17, offset: 132013},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 3822, col: 17, offset: 132013},
									expr: &charClassMatcher{
										pos:        position{line: 3733, col: 36, offset: 128119},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 3822, col: 41, offset: 132037},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL7,
							},
							&choiceExpr{
								pos: position{line: 3874, col: 5, offset: 133947},
								alternatives: []interface{}{
									&andCodeExpr{
										pos: position{line: 3874, col: 5, offset: 133947},
										run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL9,
									},
									&seqExpr{
										pos: position{line: 3876, col: 9, offset: 134030},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3876, col: 9, offset: 134030},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL11,
											},
											&stateCodeExpr{
												pos: position{line: 3878, col: 7, offset: 134134},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL12,
											},
										},
									},
									&seqExpr{
										pos: position{line: 3885, col: 9, offset: 134470},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3885, col: 9, offset: 134470},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL14,
											},
											&choiceExpr{
												pos: position{line: 3938, col: 9, offset: 136805},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3938, col: 9, offset: 136805},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 3938, col: 9, offset: 136805},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL17,
															},
															&andCodeExpr{
																pos: position{line: 3942, col: 11, offset: 137055},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL18,
															},
															&stateCodeExpr{
																pos: position{line: 4008, col: 11, offset: 140261},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL19,
															},
														},
													},
													&seqExpr{
														pos: position{line: 4016, col: 13, offset: 140614},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 4016, col: 13, offset: 140614},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL21,
															},
															&andCodeExpr{
																pos: position{line: 4020, col: 11, offset: 140869},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL22,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 4044, col: 5, offset: 141678},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 4045, col: 9, offset: 141688},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 4045, col: 9, offset: 141688},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 4045, col: 9, offset: 141688},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL26,
											},
											&choiceExpr{
												pos: position{line: 4050, col: 13, offset: 141952},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 4050, col: 13, offset: 141952},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 4050, col: 13, offset: 141952},
																expr: &charClassMatcher{
																	pos:        position{line: 3733, col: 36, offset: 128119},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 4050, col: 16, offset: 141955},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL31,
															},
														},
													},
													&seqExpr{
														pos: position{line: 4061, col: 17, offset: 142349},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 4061, col: 17, offset: 142349},
																expr: &charClassMatcher{
																	pos:        position{line: 3733, col: 36, offset: 128119},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 4061, col: 20, offset: 142352},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL35,
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 4126, col: 11, offset: 145583},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL36,
											},
										},
									},
									&seqExpr{
										pos: position{line: 4133, col: 13, offset: 145905},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 4133, col: 13, offset: 145905},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL38,
											},
											&andCodeExpr{
												pos: position{line: 4137, col: 11, offset: 146160},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL39,
											},
										},
									},
								},
							},
							&stateCodeExpr{
								pos: position{line: 4142, col: 7, offset: 146341},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL40,
							},
						},
					},
					&seqExpr{
						pos: position{line: 4146, col: 5, offset: 146418},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 4146, col: 5, offset: 146418},
								label: "spaceI",
								expr: &charClassMatcher{
									pos:        position{line: 3733, col: 36, offset: 128119},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&andCodeExpr{
								pos: position{line: 4146, col: 14, offset: 146427},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL44,
							},
							&stateCodeExpr{
								pos: position{line: 4196, col: 3, offset: 148259},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL45,
							},
							&ruleRefExpr{
								pos:  position{line: 4199, col: 3, offset: 148361},
								name: "INDENTATION_IGNORE_ADDITIONAL",
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION2",
			pos:  position{line: 4218, col: 1, offset: 149014},
			expr: &choiceExpr{
				pos: position{line: 4218, col: 17, offset: 149030},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4218, col: 17, offset: 149030},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4218, col: 17, offset: 149030},
								run: (*parser).callonINDENTATION23,
							},
							&litMatcher{
								pos:        position{line: 4220, col: 3, offset: 149091},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 4220, col: 10, offset: 149098},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 4220, col: 10, offset: 149098},
								name: "INDENTATION_IGNORE_ADDITIONAL",
							},
							&litMatcher{
								pos:        position{line: 4220, col: 40, offset: 149128},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onFile3() error {
	c.state["Indentation.Level"] = 0       // the lvl we are in rn
	c.state["Indentation.Char"] = byte(0)  // the char used for indentation
	c.state["Indentation.Repetitions"] = 0 // num of repetitions of char per lvl
	c.state["Indentation.RefLine"] = 0     // the line no where we got char and repetitions from

	// a stack containing the actual number of repetitions of char per lvl
	// used to recover from inconsistent indentations errs
	c.state["Indentation.ActualRepetitions"] = stack.New[int](25)
	c.state["Indentation.TotalRepetitions"] = 0 // sum of the stack above

	// used by INDENTATION_NO_INCREASE to count how many chars it has found
	c.state["Indentation.CharCount"] = 0
	return nil
}

func (p *parser) callonFile3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile3()
}

func (c *current) onFile34(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonFile34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile34(stack["strI"])
}

func (c *current) onFile41(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonFile41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile41(stack["strI"])
}

func (c *current) onFile73() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonFile73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile73()
}

func (c *current) onFile86() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile86()
}

func (c *current) onFile107() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile107()
}

func (c *current) onFile130() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile130()
}

func (c *current) onFile141() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile141()
}

func (c *current) onFile148() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile148()
}

func (c *current) onFile153() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonFile153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile153()
}

func (c *current) onFile58(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonFile58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile58(stack["strI"])
}

func (c *current) onFile174() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonFile174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile174()
}

func (c *current) onFile187() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile187()
}

func (c *current) onFile208() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile208()
}

func (c *current) onFile231() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile231()
}

func (c *current) onFile242() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile242()
}

func (c *current) onFile249() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile249()
}

func (c *current) onFile254() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonFile254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile254()
}

func (c *current) onFile260() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile260()
}

func (c *current) onFile159(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonFile159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile159(stack["strI"], stack["endPosI"])
}

func (c *current) onFile285() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile285()
}

func (c *current) onFile277(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonFile277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile277(stack["strI"], stack["endPosI"])
}

func (c *current) onFile291(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonFile291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile291(stack["pathI"])
}

func (c *current) onFile25(extendI interface{}) (interface{}, error) {
	return file.Extend{Path: extendI.(file.String), Position: pos(c)}, nil
}

func (p *parser) callonFile25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile25(stack["extendI"])
}

func (c *current) onFile378() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile378()
}

func (c *current) onFile374(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile374(stack["startPosI"])
}

func (c *current) onFile395() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile395()
}

func (c *current) onFile359() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonFile359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile359()
}

func (c *current) onFile429() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile429() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile429()
}

func (c *current) onFile425(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile425(stack["startPosI"])
}

func (c *current) onFile446() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile446()
}

func (c *current) onFile410() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonFile410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile410()
}

func (c *current) onFile1(extendComments, extendI, importsAndCommentsI, usesAndCommentsI, globalCodeAndFuncI, doctypeCommentsI, doctypeI, scopeI interface{}) (interface{}, error) {
	var f file.File

	f.TopLevelComments = append(f.TopLevelComments, castedOrZero[[]file.CorgiComment](extendComments)...)

	f.Extend = ptrOrNil[file.Extend](extendI)

	if importsAndCommentsI != nil {
		f.Imports = getTuple[[]file.Import](importsAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](importsAndCommentsI, 1)...)
	}

	if usesAndCommentsI != nil {
		f.Uses = getTuple[[]file.Use](usesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](usesAndCommentsI, 1)...)
	}

	if globalCodeAndFuncI != nil {
		partFile := globalCodeAndFuncI.(file.File)

		f.TopLevelComments = append(f.TopLevelComments, partFile.TopLevelComments...)
		f.GlobalCode = partFile.GlobalCode
		f.Func = partFile.Func
	}

	f.Scope = castedOrZero[file.Scope](scopeI)

	if doctypeI != nil {
		f.Scope = append(file.Scope{doctypeI.(file.Doctype)}, f.Scope...)
	}

	if doctypeCommentsI != nil {
		comments := doctypeCommentsI.([]file.CorgiComment)

		commentScope := make(file.Scope, len(comments))
		for i, comment := range comments {
			commentScope[i] = comment
		}

		f.Scope = append(commentScope, f.Scope...)
	}

	return &f, nil
}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["extendComments"], stack["extendI"], stack["importsAndCommentsI"], stack["usesAndCommentsI"], stack["globalCodeAndFuncI"], stack["doctypeCommentsI"], stack["doctypeI"], stack["scopeI"])
}

func (c *current) onimportsAndComments34() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonimportsAndComments34() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments34()
}

func (c *current) onimportsAndComments46() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonimportsAndComments46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments46()
}

func (c *current) onimportsAndComments49() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonimportsAndComments49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments49()
}

func (c *current) onimportsAndComments51() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonimportsAndComments51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments51()
}

func (c *current) onimportsAndComments53() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonimportsAndComments53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments53()
}

func (c *current) onimportsAndComments54() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonimportsAndComments54() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments54()
}

func (c *current) onimportsAndComments56() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments56()
}

func (c *current) onimportsAndComments59() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonimportsAndComments59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments59()
}

func (c *current) onimportsAndComments60() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments60()
}

func (c *current) onimportsAndComments61() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonimportsAndComments61() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments61()
}

func (c *current) onimportsAndComments63() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonimportsAndComments63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments63()
}

func (c *current) onimportsAndComments64() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonimportsAndComments64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments64()
}

func (c *current) onimportsAndComments71() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments71()
}

func (c *current) onimportsAndComments73(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments73(stack["ident"])
}

func (c *current) onimportsAndComments92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments92()
}

func (c *current) onimportsAndComments79(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonimportsAndComments79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments79(stack["identI"], stack["endPosI"])
}

func (c *current) onimportsAndComments103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments103()
}

func (c *current) onimportsAndComments98(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments98(stack["endPosI"])
}

func (c *current) onimportsAndComments113(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments113(stack["strI"])
}

func (c *current) onimportsAndComments120(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments120(stack["strI"])
}

func (c *current) onimportsAndComments152() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments152()
}

func (c *current) onimportsAndComments165() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments165()
}

func (c *current) onimportsAndComments186() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments186()
}

func (c *current) onimportsAndComments209() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments209()
}

func (c *current) onimportsAndComments220() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments220()
}

func (c *current) onimportsAndComments227() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments227()
}

func (c *current) onimportsAndComments232() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments232()
}

func (c *current) onimportsAndComments137(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments137(stack["strI"])
}

func (c *current) onimportsAndComments253() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments253()
}

func (c *current) onimportsAndComments266() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments266()
}

func (c *current) onimportsAndComments287() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments287()
}

func (c *current) onimportsAndComments310() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments310()
}

func (c *current) onimportsAndComments321() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments321()
}

func (c *current) onimportsAndComments328() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments328()
}

func (c *current) onimportsAndComments333() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments333()
}

func (c *current) onimportsAndComments339() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments339()
}

func (c *current) onimportsAndComments238(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments238(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments364() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments364()
}

func (c *current) onimportsAndComments356(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments356(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments370(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments370(stack["pathI"])
}

func (c *current) onimportsAndComments65(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments65(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments383(importsI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonimportsAndComments383() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments383(stack["importsI"])
}

func (c *current) onimportsAndComments32(importsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.ImportSpec](importsI, -1), nil
}

func (p *parser) callonimportsAndComments32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments32(stack["importsI"])
}

func (c *current) onimportsAndComments28(specsI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  specsI.([]file.ImportSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments28(stack["specsI"])
}

func (c *current) onimportsAndComments396() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments396()
}

func (c *current) onimportsAndComments398(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments398(stack["ident"])
}

func (c *current) onimportsAndComments417() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments417()
}

func (c *current) onimportsAndComments404(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonimportsAndComments404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments404(stack["identI"], stack["endPosI"])
}

func (c *current) onimportsAndComments428() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments428()
}

func (c *current) onimportsAndComments423(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments423(stack["endPosI"])
}

func (c *current) onimportsAndComments438(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments438(stack["strI"])
}

func (c *current) onimportsAndComments445(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments445(stack["strI"])
}

func (c *current) onimportsAndComments477() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments477()
}

func (c *current) onimportsAndComments490() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments490()
}

func (c *current) onimportsAndComments511() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments511()
}

func (c *current) onimportsAndComments534() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments534()
}

func (c *current) onimportsAndComments545() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments545()
}

func (c *current) onimportsAndComments552() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments552()
}

func (c *current) onimportsAndComments557() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments557()
}

func (c *current) onimportsAndComments462(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments462(stack["strI"])
}

func (c *current) onimportsAndComments578() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments578()
}

func (c *current) onimportsAndComments591() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments591()
}

func (c *current) onimportsAndComments612() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments612()
}

func (c *current) onimportsAndComments635() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments635()
}

func (c *current) onimportsAndComments646() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments646()
}

func (c *current) onimportsAndComments653() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments653()
}

func (c *current) onimportsAndComments658() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments658()
}

func (c *current) onimportsAndComments664() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments664()
}

func (c *current) onimportsAndComments563(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments563(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments689() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments689()
}

func (c *current) onimportsAndComments681(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments681(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments695(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments695(stack["pathI"])
}

func (c *current) onimportsAndComments390(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments390(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments384(specI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  []file.ImportSpec{specI.(file.ImportSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments384(stack["specI"])
}

func (c *current) onimportsAndComments712() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments712()
}

func (c *current) onimportsAndComments708(posI interface{}) (interface{}, error) {
	return file.Import{Position: pos(c)}, &corgierr.Error{
		Message: "missing import path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an import path, optionally preceded by an import alias",
		}),
	}
}

func (p *parser) callonimportsAndComments708() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments708(stack["posI"])
}

func (c *current) onimportsAndComments15(importsI interface{}) (interface{}, error) {
	impTuples := islice(importsI)
	if impTuples == nil {
		return []file.Import(nil), nil
	}

	var imps []file.Import
	for _, impTuple := range impTuples {
		imps = append(imps, getTuple[file.Import](impTuple, 1))
	}

	return imps, nil
}

func (p *parser) callonimportsAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments15(stack["importsI"])
}

func (c *current) onimportsAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var imports []file.Import

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		imports = append(imports, getTuple[[]file.Import](t, -1)...)
	}

	return []any{imports, comments}, nil
}

func (p *parser) callonimportsAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments1(stack["valsI"])
}

func (c *current) onusesAndComments34() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonusesAndComments34() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments34()
}

func (c *current) onusesAndComments46() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonusesAndComments46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments46()
}

func (c *current) onusesAndComments49() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonusesAndComments49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments49()
}

func (c *current) onusesAndComments51() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonusesAndComments51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments51()
}

func (c *current) onusesAndComments53() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonusesAndComments53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments53()
}

func (c *current) onusesAndComments54() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonusesAndComments54() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments54()
}

func (c *current) onusesAndComments56() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments56()
}

func (c *current) onusesAndComments59() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonusesAndComments59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments59()
}

func (c *current) onusesAndComments60() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments60()
}

func (c *current) onusesAndComments61() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonusesAndComments61() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments61()
}

func (c *current) onusesAndComments63() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonusesAndComments63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments63()
}

func (c *current) onusesAndComments64() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonusesAndComments64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments64()
}

func (c *current) onusesAndComments71() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments71()
}

func (c *current) onusesAndComments73(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments73(stack["identI"])
}

func (c *current) onusesAndComments92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments92()
}

func (c *current) onusesAndComments79(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments79(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments103()
}

func (c *current) onusesAndComments98(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments98(stack["endPosI"])
}

func (c *current) onusesAndComments113(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments113(stack["strI"])
}

func (c *current) onusesAndComments120(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments120(stack["strI"])
}

func (c *current) onusesAndComments152() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments152()
}

func (c *current) onusesAndComments165() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments165()
}

func (c *current) onusesAndComments186() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments186()
}

func (c *current) onusesAndComments209() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments209()
}

func (c *current) onusesAndComments220() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments220()
}

func (c *current) onusesAndComments227() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments227()
}

func (c *current) onusesAndComments232() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments232()
}

func (c *current) onusesAndComments137(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments137(stack["strI"])
}

func (c *current) onusesAndComments253() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments253()
}

func (c *current) onusesAndComments266() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments266()
}

func (c *current) onusesAndComments287() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments287()
}

func (c *current) onusesAndComments310() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments310()
}

func (c *current) onusesAndComments321() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments321()
}

func (c *current) onusesAndComments328() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments328()
}

func (c *current) onusesAndComments333() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments333()
}

func (c *current) onusesAndComments339() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments339()
}

func (c *current) onusesAndComments238(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments238(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments364() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments364()
}

func (c *current) onusesAndComments356(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments356(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments370(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments370(stack["pathI"])
}

func (c *current) onusesAndComments65(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments65(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments383(usesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonusesAndComments383() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments383(stack["usesI"])
}

func (c *current) onusesAndComments32(usesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.UseSpec](usesI, -1), nil
}

func (p *parser) callonusesAndComments32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments32(stack["usesI"])
}

func (c *current) onusesAndComments28(specsI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     specsI.([]file.UseSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments28(stack["specsI"])
}

func (c *current) onusesAndComments396() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments396()
}

func (c *current) onusesAndComments398(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments398(stack["identI"])
}

func (c *current) onusesAndComments417() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments417()
}

func (c *current) onusesAndComments404(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments404(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments428() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments428()
}

func (c *current) onusesAndComments423(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments423(stack["endPosI"])
}

func (c *current) onusesAndComments438(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments438(stack["strI"])
}

func (c *current) onusesAndComments445(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments445(stack["strI"])
}

func (c *current) onusesAndComments477() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments477()
}

func (c *current) onusesAndComments490() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments490()
}

func (c *current) onusesAndComments511() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments511()
}

func (c *current) onusesAndComments534() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments534()
}

func (c *current) onusesAndComments545() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments545()
}

func (c *current) onusesAndComments552() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments552()
}

func (c *current) onusesAndComments557() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments557()
}

func (c *current) onusesAndComments462(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments462(stack["strI"])
}

func (c *current) onusesAndComments578() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments578()
}

func (c *current) onusesAndComments591() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments591()
}

func (c *current) onusesAndComments612() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments612()
}

func (c *current) onusesAndComments635() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments635()
}

func (c *current) onusesAndComments646() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments646()
}

func (c *current) onusesAndComments653() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments653()
}

func (c *current) onusesAndComments658() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments658()
}

func (c *current) onusesAndComments664() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments664()
}

func (c *current) onusesAndComments563(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments563(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments689() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments689()
}

func (c *current) onusesAndComments681(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments681(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments695(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments695(stack["pathI"])
}

func (c *current) onusesAndComments390(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments390(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments384(specI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     []file.UseSpec{specI.(file.UseSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments384(stack["specI"])
}

func (c *current) onusesAndComments712() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments712()
}

func (c *current) onusesAndComments708(posI interface{}) (interface{}, error) {
	return file.Use{Position: pos(c)}, &corgierr.Error{
		Message: "missing use path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an use path, optionally preceded by an use alias",
		}),
	}
}

func (p *parser) callonusesAndComments708() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments708(stack["posI"])
}

func (c *current) onusesAndComments15(usesI interface{}) (interface{}, error) {
	useTuples := islice(usesI)
	if useTuples == nil {
		return []file.Use(nil), nil
	}

	var uses []file.Use
	for _, useTuple := range useTuples {
		uses = append(uses, getTuple[file.Use](useTuple, 1))
	}

	return uses, nil
}

func (p *parser) callonusesAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments15(stack["usesI"])
}

func (c *current) onusesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var uses []file.Use

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		uses = append(uses, getTuple[[]file.Use](t, -1)...)
	}

	return []any{uses, comments}, nil
}

func (p *parser) callonusesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments1(stack["valsI"])
}

func (c *current) oncodesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var codes []file.Code

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		codes = append(codes, getTuple[[]file.Code](t, -1)...)
	}

	return []any{codes, comments}, nil
}

func (p *parser) calloncodesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodesAndComments1(stack["valsI"])
}

func (c *current) onglobalCodeAndFunc1(codesAndCommentsI, commentsI, funcI interface{}) (interface{}, error) {
	var f file.File

	if codesAndCommentsI != nil {
		f.GlobalCode = getTuple[[]file.Code](codesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](codesAndCommentsI, 1)...)
	}

	if commentsI != nil {
		f.TopLevelComments = append(f.TopLevelComments, commentsI.([]file.CorgiComment)...)
	}

	fun := funcI.(file.Func)
	f.Func = &fun

	return f, nil
}

func (p *parser) callonglobalCodeAndFunc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalCodeAndFunc1(stack["codesAndCommentsI"], stack["commentsI"], stack["funcI"])
}

func (c *current) onScope13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonScope13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope13()
}

func (c *current) onScope16() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonScope16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope16()
}

func (c *current) onScope18() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonScope18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope18()
}

func (c *current) onScope20() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonScope20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope20()
}

func (c *current) onScope21() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonScope21() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope21()
}

func (c *current) onScope23() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonScope23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope23()
}

func (c *current) onScope26() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonScope26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope26()
}

func (c *current) onScope27() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope27()
}

func (c *current) onScope28() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonScope28() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope28()
}

func (c *current) onScope30() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonScope30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope30()
}

func (c *current) onScope31() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonScope31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope31()
}

func (c *current) onScope1(itemsI interface{}) (interface{}, error) {
	itemTuples := islice(itemsI)

	scope := make(file.Scope, 0, len(itemTuples))
	for _, it := range itemTuples {
		if si, ok := islice(it)[2].(file.ScopeItem); ok {
			scope = append(scope, si)
		}
	}

	return scope, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["itemsI"])
}

func (c *current) onscopeItem27() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem27()
}

func (c *current) onscopeItem41() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem41()
}

func (c *current) onscopeItem44() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem44()
}

func (c *current) onscopeItem46() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem46()
}

func (c *current) onscopeItem48() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonscopeItem48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem48()
}

func (c *current) onscopeItem49() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem49() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem49()
}

func (c *current) onscopeItem51() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem51()
}

func (c *current) onscopeItem54() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem54()
}

func (c *current) onscopeItem55() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem55()
}

func (c *current) onscopeItem56() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem56() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem56()
}

func (c *current) onscopeItem58() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem58()
}

func (c *current) onscopeItem59() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem59()
}

func (c *current) onscopeItem61() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem61()
}

func (c *current) onscopeItem39(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem39(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem79(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem79() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem79(stack["linesI"])
}

func (c *current) onscopeItem25(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem25(stack["linesI"])
}

func (c *current) onscopeItem11(bodyI interface{}) (interface{}, error) {
	return file.RawFilter{
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem11(stack["bodyI"])
}

func (c *current) onscopeItem95(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem95(stack["strI"])
}

func (c *current) onscopeItem102(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem102(stack["strI"])
}

func (c *current) onscopeItem134() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem134()
}

func (c *current) onscopeItem147() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem147()
}

func (c *current) onscopeItem168() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem168()
}

func (c *current) onscopeItem191() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem191()
}

func (c *current) onscopeItem202() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem202()
}

func (c *current) onscopeItem209() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem209()
}

func (c *current) onscopeItem214() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem214()
}

func (c *current) onscopeItem119(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem119(stack["strI"])
}

func (c *current) onscopeItem235() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem235()
}

func (c *current) onscopeItem248() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem248()
}

func (c *current) onscopeItem269() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem269()
}

func (c *current) onscopeItem292() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem292()
}

func (c *current) onscopeItem303() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem303()
}

func (c *current) onscopeItem310() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem310()
}

func (c *current) onscopeItem315() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem315()
}

func (c *current) onscopeItem321() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem321()
}

func (c *current) onscopeItem220(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem220(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem346() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem346()
}

func (c *current) onscopeItem338(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonscopeItem338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem338(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem92(stringI interface{}) (interface{}, error) {
	return file.StringCommandFilterArg(stringI.(file.String)), nil
}

func (p *parser) callonscopeItem92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem92(stack["stringI"])
}

func (c *current) onscopeItem352(argI interface{}) (interface{}, error) {
	return file.RawCommandFilterArg{Value: concat(argI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem352(stack["argI"])
}

func (c *current) onscopeItem369() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem369() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem369()
}

func (c *current) onscopeItem383() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem383()
}

func (c *current) onscopeItem386() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem386() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem386()
}

func (c *current) onscopeItem388() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem388() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem388()
}

func (c *current) onscopeItem390() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonscopeItem390() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem390()
}

func (c *current) onscopeItem391() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem391() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem391()
}

func (c *current) onscopeItem393() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem393() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem393()
}

func (c *current) onscopeItem396() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem396() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem396()
}

func (c *current) onscopeItem397() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem397() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem397()
}

func (c *current) onscopeItem398() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem398() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem398()
}

func (c *current) onscopeItem400() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem400() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem400()
}

func (c *current) onscopeItem401() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem401() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem401()
}

func (c *current) onscopeItem403() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem403() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem403()
}

func (c *current) onscopeItem381(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem381(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem421(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem421() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem421(stack["linesI"])
}

func (c *current) onscopeItem367(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem367(stack["linesI"])
}

func (c *current) onscopeItem80(nameI, argsI, bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
		Name:     concat(nameI),
		Args:     typedSliceFromTuples[file.CommandFilterArg](argsI, -1),
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem80(stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onscopeItem438() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem438() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem438()
}

func (c *current) onscopeItem452() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem452() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem452()
}

func (c *current) onscopeItem455() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem455() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem455()
}

func (c *current) onscopeItem457() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem457() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem457()
}

func (c *current) onscopeItem459() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonscopeItem459() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem459()
}

func (c *current) onscopeItem460() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem460() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem460()
}

func (c *current) onscopeItem462() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem462() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem462()
}

func (c *current) onscopeItem465() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem465() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem465()
}

func (c *current) onscopeItem466() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem466() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem466()
}

func (c *current) onscopeItem467() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem467() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem467()
}

func (c *current) onscopeItem469() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem469() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem469()
}

func (c *current) onscopeItem470() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem470() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem470()
}

func (c *current) onscopeItem472() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem472()
}

func (c *current) onscopeItem450(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem450(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem490(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem490() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem490(stack["linesI"])
}

func (c *current) onscopeItem436(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem436(stack["linesI"])
}

func (c *current) onscopeItem422(bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
			Position: pos(c),
			Body:     castedOrZero[[]file.FilterLine](bodyI),
		}, &corgierr.Error{
			Message: "bad filter",
			ErrorAnnotation: anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected `raw` or a command name",
			}),
		}
}

func (p *parser) callonscopeItem422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem422(stack["bodyI"])
}

func (c *current) onscopeItem500(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem500(stack["strI"])
}

func (c *current) onscopeItem507(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem507(stack["strI"])
}

func (c *current) onscopeItem539() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem539()
}

func (c *current) onscopeItem552() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem552()
}

func (c *current) onscopeItem573() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem573()
}

func (c *current) onscopeItem596() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem596() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem596()
}

func (c *current) onscopeItem607() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem607()
}

func (c *current) onscopeItem614() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem614() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem614()
}

func (c *current) onscopeItem619() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem619()
}

func (c *current) onscopeItem524(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem524(stack["strI"])
}

func (c *current) onscopeItem640() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem640()
}

func (c *current) onscopeItem653() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem653()
}

func (c *current) onscopeItem674() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem674() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem674()
}

func (c *current) onscopeItem697() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem697()
}

func (c *current) onscopeItem708() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem708() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem708()
}

func (c *current) onscopeItem715() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem715() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem715()
}

func (c *current) onscopeItem720() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem720()
}

func (c *current) onscopeItem726() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem726()
}

func (c *current) onscopeItem625(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem625(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem751() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem751()
}

func (c *current) onscopeItem743(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonscopeItem743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem743(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem757(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonscopeItem757() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem757(stack["pathI"])
}

func (c *current) onscopeItem491(pathI interface{}) (interface{}, error) {
	return file.Include{
		Path:     pathI.(file.String),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem491(stack["pathI"])
}

func (c *current) onscopeItem788() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem788() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem788()
}

func (c *current) onscopeItem784(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem784() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem784(stack["startPosI"])
}

func (c *current) onscopeItem805() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem805() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem805()
}

func (c *current) onscopeItem769() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonscopeItem769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem769()
}

func (c *current) onscopeItem839() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem839()
}

func (c *current) onscopeItem835(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem835(stack["startPosI"])
}

func (c *current) onscopeItem856() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem856()
}

func (c *current) onscopeItem820() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonscopeItem820() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem820()
}

func (c *current) onscopeItem766(doctypeI interface{}) (interface{}, error) {
	return doctypeI, &corgierr.Error{
		Message: "`doctype` not first item",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             pos(c),
			ToEOL:             true,
			Annotation:        "cannot place doctype directive here",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "`doctype`s may only be placed as the first element after the `func` declaration\n" +
					"remove this `doctype` and move it right under the `func` of your file, if there isn't a doctype there already",
			},
		},
	}
}

func (p *parser) callonscopeItem766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem766(stack["doctypeI"])
}

func (c *current) onBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody3()
}

func (c *current) onBody6(scopeI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonBody6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody6(stack["scopeI"])
}

func (c *current) onBody1(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody1(stack["scopeI"])
}

func (c *current) onBeaitb9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBeaitb9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb9()
}

func (c *current) onBeaitb4(endPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start: pos(c),
			End:   endPosI.(file.Position),
			Annotation: "expected a block expansion (`:`), an assign (`=` or `!=`), inline text,\n" +
				"an indented body, or nothing",
		}),
	}

}

func (p *parser) callonBeaitb4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb4(stack["endPosI"])
}

func (c *current) onBeaitb17(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil

}

func (p *parser) callonBeaitb17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb17(stack["scopeItemI"])
}

func (c *current) onBeaitb23(bodyI interface{}) (interface{}, error) {
	return bodyI, nil

}

func (p *parser) callonBeaitb23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb23(stack["bodyI"])
}

func (c *current) onBeaitb36() (interface{}, error) {
	return file.Scope(nil), nil

}

func (p *parser) callonBeaitb36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb36()
}

func (c *current) onBeaitb1(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonBeaitb1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb1(stack["scopeI"])
}

func (c *current) onBeait9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBeait9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait9()
}

func (c *current) onBeait4(endPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a block expansion (`:`), an assign (`=` or `!=`), inline text, or nothing",
		}),
	}

}

func (p *parser) callonBeait4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait4(stack["endPosI"])
}

func (c *current) onBeait17(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil

}

func (p *parser) callonBeait17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait17(stack["scopeItemI"])
}

func (c *current) onBeait23() (interface{}, error) {
	return file.Scope(nil), nil

}

func (p *parser) callonBeait23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait23()
}

func (c *current) onBeait1(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonBeait1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait1(stack["scopeI"])
}

func (c *current) onBadItem1(lineI, bodyI interface{}) (interface{}, error) {
	line := concat(lineI)

	firstWordLen := strings.IndexByte(line, ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(line))
	}

	return file.BadItem{
			Line:     line,
			Body:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive or invalid element name",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a valid corgi directive or an element name",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
				{
					Suggestion: "use a valid corgi directive",
					ShouldBe: "a block (`block`, `append`, `prepend`), code (`-`), a conditional (`if`, `else if`, `else`, `switch`),\n" +
						"a loop (`for`), a filter (`:`), an include (`include`), a mixin (`mixin`), a mixin call (`+`),\n" +
						"a Go import (`import`), a corgi use (`use`), the func header (`func`),\n" +
						"an assign (`=`, `!=`), an arrow block (`>`)",
				},
			},
		}
}

func (p *parser) callonBadItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem1(stack["lineI"], stack["bodyI"])
}

func (c *current) onBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock18(stack["identI"])
}

func (c *current) onBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock37()
}

func (c *current) onBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock15(stack["identI"])
}

func (c *current) onBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock46()
}

func (c *current) onBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock43(stack["posI"])
}

func (c *current) onBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock71()
}

func (c *current) onBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock9(stack["identI"])
}

func (c *current) onBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock77()
}

func (c *current) onBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock4(stack["nameI"])
}

func (c *current) onBlock1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["blockI"], stack["bodyI"])
}

func (c *current) onInlineBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock18(stack["identI"])
}

func (c *current) onInlineBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock37()
}

func (c *current) onInlineBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock15(stack["identI"])
}

func (c *current) onInlineBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock46()
}

func (c *current) onInlineBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock43(stack["posI"])
}

func (c *current) onInlineBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock71()
}

func (c *current) onInlineBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock9(stack["identI"])
}

func (c *current) onInlineBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonInlineBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock77()
}

func (c *current) onInlineBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock4(stack["nameI"])
}

func (c *current) onInlineBlock1(blockI, scopeI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = castedOrZero[file.Scope](scopeI)
	return block, nil
}

func (p *parser) callonInlineBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock1(stack["blockI"], stack["scopeI"])
}

func (c *current) onPrepend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonPrepend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend18(stack["identI"])
}

func (c *current) onPrepend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend37()
}

func (c *current) onPrepend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonPrepend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend24(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend15(stack["identI"])
}

func (c *current) onPrepend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend46()
}

func (c *current) onPrepend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend43(stack["posI"])
}

func (c *current) onPrepend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend71()
}

func (c *current) onPrepend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend65(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend9(stack["identI"])
}

func (c *current) onPrepend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonPrepend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend77()
}

func (c *current) onPrepend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypePrepend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonPrepend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend4(stack["nameI"])
}

func (c *current) onPrepend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonPrepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onAppend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonAppend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend18(stack["identI"])
}

func (c *current) onAppend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend37()
}

func (c *current) onAppend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonAppend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend24(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend15(stack["identI"])
}

func (c *current) onAppend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend46()
}

func (c *current) onAppend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend43(stack["posI"])
}

func (c *current) onAppend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend71()
}

func (c *current) onAppend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend65(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend9(stack["identI"])
}

func (c *current) onAppend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonAppend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend77()
}

func (c *current) onAppend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeAppend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonAppend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend4(stack["nameI"])
}

func (c *current) onAppend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonAppend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onBlockExpansion2(abI interface{}) (interface{}, error) {
	return file.BlockExpansion{
		Item:     abI.(file.ArrowBlock),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlockExpansion2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion2(stack["abI"])
}

func (c *current) onBlockExpansion7(sI interface{}) (interface{}, error) {
	return file.BlockExpansion{
		Item:     sI.(file.ScopeItem),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlockExpansion7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion7(stack["sI"])
}

func (c *current) onBlockExpansion14() (interface{}, error) {
	return file.BlockExpansion{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "malformed block expansion",
			ErrorAnnotation: anno(c, annotation{
				Start:       pos(c),
				StartOffset: 2,
				Annotation:  "expected a block directive, an inline element, an inline arrow block, or a mixin call",
			}),
		}
}

func (p *parser) callonBlockExpansion14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion14()
}

func (c *current) onBlockExpansion30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlockExpansion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion30()
}

func (c *current) onBlockExpansion26(posI, sI interface{}) (interface{}, error) {
	var fromThe string
	switch sI.(type) {
	case file.Block:
		fromThe = "block"
	case file.Element:
		fromThe = "inline element"
	case file.DivShorthand:
		fromThe = "div shorthand"
	case file.MixinCall:
		fromThe = "mixin call"
	default:
		fromThe = "rest"
	}

	return file.BlockExpansion{
			Item:     sI.(file.ScopeItem),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `:` from the " + fromThe,
			}),
		}
}

func (p *parser) callonBlockExpansion26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion26(stack["posI"], stack["sI"])
}

func (c *current) onblockExpansionItem6(lineI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	return file.BadItem{
			Line:     concat(lineI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "malformed block expansion",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a block directive, an inline element, an inline arrow block, or a mixin call",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
			},
		}
}

func (p *parser) callonblockExpansionItem6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblockExpansionItem6(stack["lineI"])
}

func (c *current) onCodes1(codesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.Code](codesI, 1), nil
}

func (p *parser) callonCodes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCodes1(stack["codesI"])
}

func (c *current) onCode6(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode6(stack["code"])
}

func (c *current) onCode32(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode32(stack["code"])
}

func (c *current) onCode2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	additionalLineTuples := islice(additionalLinesI)

	lines := make([]file.CodeLine, 1+len(additionalLineTuples))
	lines[0] = firstLineI.(file.CodeLine)
	for i, lt := range additionalLineTuples {
		lines[i+1] = getTuple[file.CodeLine](lt, -1)
	}

	return file.Code{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonCode2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onCode50() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonCode50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode50()
}

func (c *current) onCode46(posI interface{}) (interface{}, error) {
	return file.Code{Position: pos(c)}, &corgierr.Error{
		Message: "empty code block",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected code here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "either write some code, or delete this line"},
		},
	}
}

func (p *parser) callonCode46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode46(stack["posI"])
}

func (c *current) oncondition2(condI interface{}) (interface{}, error) {
	return condI, nil
}

func (p *parser) calloncondition2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition2(stack["condI"])
}

func (c *current) oncondition11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition11()
}

func (c *current) oncondition8(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition8(stack["posI"])
}

func (c *current) oncondition30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition30()
}

func (c *current) oncondition28(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition28(stack["posI"])
}

func (c *current) onthen2(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonthen2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen2(stack["scopeI"])
}

func (c *current) onthen15() (interface{}, error) {
	return file.Scope(nil), &corgierr.Error{
		Message: "missing body",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}
}

func (p *parser) callonthen15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen15()
}

func (c *current) onthen27() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonthen27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen27()
}

func (c *current) onthen30() (bool, error) {
	return true, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}

}

func (p *parser) callonthen30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen30()
}

func (c *current) onIf1(condI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.If{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		ElseIfs:   typedSlice[file.ElseIf](elseIfsI),
		Else:      ptrOrNil[file.Else](elseI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIf1(stack["condI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onElseIf11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIf11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf11()
}

func (c *current) onElseIf14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIf14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf14()
}

func (c *current) onElseIf16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIf16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf16()
}

func (c *current) onElseIf18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonElseIf18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf18()
}

func (c *current) onElseIf19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIf19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf19()
}

func (c *current) onElseIf21() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIf21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf21()
}

func (c *current) onElseIf24() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIf24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf24()
}

func (c *current) onElseIf25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIf25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf25()
}

func (c *current) onElseIf26() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIf26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf26()
}

func (c *current) onElseIf28() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIf28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf28()
}

func (c *current) onElseIf29() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIf29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf29()
}

func (c *current) onElseIf31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIf31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf31()
}

func (c *current) onElseIf1(posI, condI, thenI interface{}) (interface{}, error) {
	return file.ElseIf{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		Position:  posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf1(stack["posI"], stack["condI"], stack["thenI"])
}

func (c *current) onElse11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElse11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse11()
}

func (c *current) onElse14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElse14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse14()
}

func (c *current) onElse16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElse16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse16()
}

func (c *current) onElse18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonElse18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse18()
}

func (c *current) onElse19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElse19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse19()
}

func (c *current) onElse21() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElse21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse21()
}

func (c *current) onElse24() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElse24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse24()
}

func (c *current) onElse25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElse25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse25()
}

func (c *current) onElse26() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElse26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse26()
}

func (c *current) onElse28() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElse28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse28()
}

func (c *current) onElse29() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElse29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse29()
}

func (c *current) onElse1(thenI interface{}) (interface{}, error) {
	return file.Else{
		Then:     thenI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse1(stack["thenI"])
}

func (c *current) onIfBlock15(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonIfBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock15(stack["identI"])
}

func (c *current) onIfBlock34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock34()
}

func (c *current) onIfBlock21(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonIfBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock21(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock12(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock12(stack["identI"])
}

func (c *current) onIfBlock43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock43()
}

func (c *current) onIfBlock40(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock40(stack["posI"])
}

func (c *current) onIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock68()
}

func (c *current) onIfBlock62(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock62(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock6(stack["identI"])
}

func (c *current) onIfBlock74() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock74()
}

func (c *current) onIfBlock1(nameI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.IfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		ElseIfs:  typedSlice[file.ElseIfBlock](elseIfsI),
		Else:     ptrOrNil[file.Else](elseI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock1(stack["nameI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onElseIfBlock11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIfBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock11()
}

func (c *current) onElseIfBlock14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIfBlock14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock14()
}

func (c *current) onElseIfBlock16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIfBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock16()
}

func (c *current) onElseIfBlock18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonElseIfBlock18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock18()
}

func (c *current) onElseIfBlock19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIfBlock19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock19()
}

func (c *current) onElseIfBlock21() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock21()
}

func (c *current) onElseIfBlock24() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIfBlock24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock24()
}

func (c *current) onElseIfBlock25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock25()
}

func (c *current) onElseIfBlock26() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIfBlock26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock26()
}

func (c *current) onElseIfBlock28() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIfBlock28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock28()
}

func (c *current) onElseIfBlock29() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIfBlock29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock29()
}

func (c *current) onElseIfBlock31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock31()
}

func (c *current) onElseIfBlock49(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonElseIfBlock49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock49(stack["identI"])
}

func (c *current) onElseIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock68()
}

func (c *current) onElseIfBlock55(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonElseIfBlock55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock55(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock46(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock46(stack["identI"])
}

func (c *current) onElseIfBlock77() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock77()
}

func (c *current) onElseIfBlock74(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock74(stack["posI"])
}

func (c *current) onElseIfBlock102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock102()
}

func (c *current) onElseIfBlock96(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock96(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock40(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock40(stack["identI"])
}

func (c *current) onElseIfBlock108() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonElseIfBlock108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock108()
}

func (c *current) onElseIfBlock1(posI, nameI, thenI interface{}) (interface{}, error) {
	return file.ElseIfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		Position: posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock1(stack["posI"], stack["nameI"], stack["thenI"])
}

func (c *current) onSwitch1(comparatorI, bodyI interface{}) (interface{}, error) {
	body := bodyI.(file.Switch)

	s := file.Switch{
		Comparator: comparatorI.(*file.Expression),
		Cases:      body.Cases,
		Default:    body.Default,
		Position:   pos(c),
	}

	if len(s.Cases) == 0 {
		return s, &corgierr.Error{
			Message: "switch must have at least one case",
			ErrorAnnotation: anno(c, annotation{
				ContextEndDelta: 1,
				Start:           pos(c),
				ToEOL:           true,
				Annotation:      "expected switch to have at least one non-default case",
			}),
		}
	}

	return s, nil
}

func (p *parser) callonSwitch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch1(stack["comparatorI"], stack["bodyI"])
}

func (c *current) onswitchComparator2() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonswitchComparator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator2()
}

func (c *current) onswitchComparator13(compI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, nil
}

func (p *parser) callonswitchComparator13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator13(stack["compI"])
}

func (c *current) onswitchComparator35() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonswitchComparator35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator35()
}

func (c *current) onswitchComparator28(compI, startPosI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			Annotation: "expression was terminated here, but should span entire line",
		}),
	}
}

func (p *parser) callonswitchComparator28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator28(stack["compI"], stack["startPosI"])
}

func (c *current) onswitchBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonswitchBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody3()
}

func (c *current) onswitchBody15() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonswitchBody15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody15()
}

func (c *current) onswitchBody18() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonswitchBody18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody18()
}

func (c *current) onswitchBody20() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonswitchBody20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody20()
}

func (c *current) onswitchBody22() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonswitchBody22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody22()
}

func (c *current) onswitchBody23() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonswitchBody23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody23()
}

func (c *current) onswitchBody25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody25()
}

func (c *current) onswitchBody28() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonswitchBody28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody28()
}

func (c *current) onswitchBody29() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody29()
}

func (c *current) onswitchBody30() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonswitchBody30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody30()
}

func (c *current) onswitchBody32() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonswitchBody32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody32()
}

func (c *current) onswitchBody33() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonswitchBody33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody33()
}

func (c *current) onswitchBody35(itms interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonswitchBody35() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody35(stack["itms"])
}

func (c *current) onswitchBody1(itms interface{}) (interface{}, error) {
	tupleTuples := islice(itms)

	s := file.Switch{Cases: make([]file.Case, 0, len(tupleTuples))}

	var err error
	for _, tupleTuple := range tupleTuples {
		tuple := islice(tupleTuple)[2]

		switchCase, ok := getTuple[file.Case](tuple, 0), getTuple[bool](tuple, -1)
		if switchCase.Expression != nil || !ok {
			s.Cases = append(s.Cases, switchCase)
		} else {
			if s.Default != nil {
				err = &corgierr.Error{
					Message: "multiple default cases in switch",
					ErrorAnnotation: anno(c, annotation{
						Start:      switchCase.Position,
						Len:        len("default"),
						Annotation: "second default case",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      s.Default.Position,
							Len:        len("default"),
							Annotation: "first default case",
						}),
					},
				}
			} else {
				s.Default = &switchCase
			}
		}
	}

	return s, err
}

func (p *parser) callonswitchBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody1(stack["itms"])
}

func (c *current) onswitchBodyItem2(caseI interface{}) (interface{}, error) {
	return []any{caseI, true}, nil
}

func (p *parser) callonswitchBodyItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem2(stack["caseI"])
}

func (c *current) onswitchBodyItem7(caseI interface{}) (interface{}, error) {
	return []any{caseI, false}, nil
}

func (p *parser) callonswitchBodyItem7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem7(stack["caseI"])
}

func (c *current) onCase1(condI, thenI interface{}) (interface{}, error) {
	return file.Case{
		Expression: ptrOrNil[file.Expression](condI),
		Then:       thenI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase1(stack["condI"], stack["thenI"])
}

func (c *current) onDefault1(thenI interface{}) (interface{}, error) {
	return file.Case{
		Then:     thenI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["thenI"])
}

func (c *current) onBadCase1(bodyI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	return file.Case{
			Then:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive in switch body",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a case or a default",
			}),
		}
}

func (p *parser) callonBadCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadCase1(stack["bodyI"])
}

func (c *current) onCorgiComments1(commentsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiComment](commentsI, -1), nil
}

func (p *parser) callonCorgiComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComments1(stack["commentsI"])
}

func (c *current) onCorgiComment8(linesI interface{}) (interface{}, error) {
	return linesI, nil

}

func (p *parser) callonCorgiComment8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment8(stack["linesI"])
}

func (c *current) onCorgiComment25(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonCorgiComment25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment25(stack["commentI"])
}

func (c *current) onCorgiComment23(lineI interface{}) (interface{}, error) {
	return []file.CorgiCommentLine{lineI.(file.CorgiCommentLine)}, nil

}

func (p *parser) callonCorgiComment23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment23(stack["lineI"])
}

func (c *current) onCorgiComment1(linesI interface{}) (interface{}, error) {
	return file.CorgiComment{
		Lines:    linesI.([]file.CorgiCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonCorgiComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment1(stack["linesI"])
}

func (c *current) oncorgiCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) calloncorgiCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock3()
}

func (c *current) oncorgiCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) calloncorgiCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock16(stack["commentI"])
}

func (c *current) oncorgiCommentBlock30(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) calloncorgiCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock30(stack["linesI"])
}

func (c *current) oncorgiCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiCommentLine](linesI, -1), nil
}

func (p *parser) calloncorgiCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock1(stack["linesI"])
}

func (c *current) onHTMLComment6(linesI interface{}) (interface{}, error) {
	return linesI, nil

}

func (p *parser) callonHTMLComment6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment6(stack["linesI"])
}

func (c *current) onHTMLComment21(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonHTMLComment21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment21(stack["commentI"])
}

func (c *current) onHTMLComment19(lineI interface{}) (interface{}, error) {
	return []file.HTMLCommentLine{lineI.(file.HTMLCommentLine)}, nil

}

func (p *parser) callonHTMLComment19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment19(stack["lineI"])
}

func (c *current) onHTMLComment1(linesI interface{}) (interface{}, error) {
	return file.HTMLComment{
		Lines:    linesI.([]file.HTMLCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonHTMLComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment1(stack["linesI"])
}

func (c *current) onhtmlCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonhtmlCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock3()
}

func (c *current) onhtmlCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonhtmlCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock16(stack["commentI"])
}

func (c *current) onhtmlCommentBlock30(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonhtmlCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock30(stack["linesI"])
}

func (c *current) onhtmlCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.HTMLCommentLine](linesI, -1), nil
}

func (p *parser) callonhtmlCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock1(stack["linesI"])
}

func (c *current) onElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onInlineElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand5(stack["nameI"])
}

func (c *current) onDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand15()
}

func (c *current) onDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand11(stack["posI"])
}

func (c *current) onDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand21(stack["idI"])
}

func (c *current) onDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand31()
}

func (c *current) onDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand27(stack["posI"])
}

func (c *current) onDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](attrsI)...),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onInlineDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand5(stack["nameI"])
}

func (c *current) onInlineDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand15()
}

func (c *current) onInlineDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand11(stack["posI"])
}

func (c *current) onInlineDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand21(stack["idI"])
}

func (c *current) onInlineDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand31()
}

func (c *current) onInlineDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand27(stack["posI"])
}

func (c *current) onInlineDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](attrsI)...),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onAnd2(collsI interface{}) (interface{}, error) {
	return file.And{
		Attributes: typedSlice[file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd2(stack["collsI"])
}

func (c *current) onAnd21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd21()
}

func (c *current) onAnd17(posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "`&` with no attributes",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an attribute here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd17(stack["posI"])
}

func (c *current) onAnd43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd43()
}

func (c *current) onAnd36(collsI, posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "bad attribute syntax",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "this is not a valid attribute (list)",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
					Example:    "`&#bark .woof (title=\"howl\")`",
					ShouldBe:   "`&#bark.woof(title=\"howl\")`",
				},
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd36(stack["collsI"], stack["posI"])
}

func (c *current) onAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection2(stack["idI"])
}

func (c *current) onAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection12()
}

func (c *current) onAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection8(stack["posI"])
}

func (c *current) onAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection18(stack["nameI"])
}

func (c *current) onAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection28()
}

func (c *current) onAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection24(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection2(stack["idI"])
}

func (c *current) onSingleLineAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection12()
}

func (c *current) onSingleLineAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection8(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection18(stack["nameI"])
}

func (c *current) onSingleLineAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection28()
}

func (c *current) onSingleLineAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection24(stack["posI"])
}

func (c *current) onAttributeList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList28()
}

func (c *current) onAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onAttributeList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList49()
}

func (c *current) onAttributeList30(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonAttributeList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList30(stack["attributesI"], stack["posI"])
}

func (c *current) onattributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonattributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineAttributeList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList18()
}

func (c *current) onSingleLineAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonSingleLineAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onSingleLineAttributeList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList34()
}

func (c *current) onSingleLineAttributeList20(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonSingleLineAttributeList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList20(stack["attributesI"], stack["posI"])
}

func (c *current) onsingleLineAttributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonsingleLineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineAttributes1(stack["firstI"], stack["restI"])
}

func (c *current) onAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute3()
}

func (c *current) onSingleLineAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonSingleLineAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttribute3()
}

func (c *current) onSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute3(stack["nameI"])
}

func (c *current) onSingleLineSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineSimpleAttribute3(stack["nameI"])
}

func (c *current) onsimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute15()
}

func (c *current) onsimpleValueAttribute33() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute33()
}

func (c *current) onsimpleValueAttribute2(nameI, assignPosI, noEscapeI, posI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		NoEscape:  noEscapeI != nil,
		AssignPos: ptr(assignPosI.(file.Position)),
		Value:     ptrOrNil[file.Expression](exprI),
	}, nil
}

func (p *parser) callonsimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["noEscapeI"], stack["posI"], stack["exprI"])
}

func (c *current) onsimpleValueAttribute54() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute54()
}

func (c *current) onsimpleValueAttribute65() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute65()
}

func (c *current) onsimpleValueAttribute41(nameI, assignPosI, noEscapeI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			NoEscape:  noEscapeI != nil,
			AssignPos: ptrOrNil[file.Position](assignPosI),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression here",
			}),
		}
}

func (p *parser) callonsimpleValueAttribute41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute41(stack["nameI"], stack["assignPosI"], stack["noEscapeI"], stack["posI"])
}

func (c *current) onsingleLineSimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute15()
}

func (c *current) onsingleLineSimpleValueAttribute2(nameI, assignPosI, noEscapeI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		NoEscape:  noEscapeI != nil,
		AssignPos: ptrOrNil[file.Position](assignPosI),
		Value:     ptrOrNil[file.Expression](exprI),
	}, nil
}

func (p *parser) callonsingleLineSimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["noEscapeI"], stack["exprI"])
}

func (c *current) onsingleLineSimpleValueAttribute42() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute42()
}

func (c *current) onsingleLineSimpleValueAttribute53() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute53()
}

func (c *current) onsingleLineSimpleValueAttribute29(nameI, assignPosI, noEscapeI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			NoEscape:  noEscapeI != nil,
			AssignPos: ptrOrNil[file.Position](assignPosI),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression or a mixin call here",
			}),
		}
}

func (p *parser) callonsingleLineSimpleValueAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute29(stack["nameI"], stack["assignPosI"], stack["noEscapeI"], stack["posI"])
}

func (c *current) onMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute14()
}

func (c *current) onMixinCallAttribute1(nameI, assignPosI, noEscapeI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		NoEscape:  noEscapeI != nil,
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["noEscapeI"], stack["callI"])
}

func (c *current) onSingleLineMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute14()
}

func (c *current) onSingleLineMixinCallAttribute1(nameI, assignPosI, noEscapeI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		NoEscape:  noEscapeI != nil,
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["noEscapeI"], stack["callI"])
}

func (c *current) onmixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall8(stack["identI"])
}

func (c *current) onmixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall27()
}

func (c *current) onmixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall39(stack["identI"])
}

func (c *current) onmixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall58()
}

func (c *current) onmixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall36(stack["identI"])
}

func (c *current) onmixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall67()
}

func (c *current) onmixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall64(stack["posI"])
}

func (c *current) onmixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall92()
}

func (c *current) onmixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonmixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onsingleLineMixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall8(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall27()
}

func (c *current) onsingleLineMixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall39(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall58()
}

func (c *current) onsingleLineMixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall36(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall67()
}

func (c *current) onsingleLineMixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall64(stack["posI"])
}

func (c *current) onsingleLineMixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall92()
}

func (c *current) onsingleLineMixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinCallAttributeValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue5()
}

func (c *current) onmixinCallAttributeValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue11()
}

func (c *current) onmixinCallAttributeValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinCallAttributeValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinCallAttributeValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue16()
}

func (c *current) onmixinCallAttributeValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonmixinCallAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression2(stack["cExprI"])
}

func (c *current) onSingleLineExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonSingleLineExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineExpression2(stack["cExprI"])
}

func (c *current) onGoExpression12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression12()
}

func (c *current) onGoExpression23() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression23()
}

func (c *current) onGoExpression34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression34()
}

func (c *current) onGoExpression5(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil

}

func (p *parser) callonGoExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression5(stack["exprI"])
}

func (c *current) onGoExpression46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression46()
}

func (c *current) onGoExpression41(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			ContextLen: 3,
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here or on a line below",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}

}

func (p *parser) callonGoExpression41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression41(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onGoExpression56() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression56()
}

func (c *current) onGoExpression72() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression72()
}

func (c *current) onGoExpression93() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression93()
}

func (c *current) onGoExpression125() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression125()
}

func (c *current) onGoExpression132() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression132()
}

func (c *current) onGoExpression143() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression143()
}

func (c *current) onGoExpression150() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression150()
}

func (c *current) onGoExpression155() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression155()
}

func (c *current) onGoExpression173() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression173()
}

func (c *current) onGoExpression194() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression194()
}

func (c *current) onGoExpression226() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression226()
}

func (c *current) onGoExpression233() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression233()
}

func (c *current) onGoExpression244() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression244()
}

func (c *current) onGoExpression251() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression251()
}

func (c *current) onGoExpression256() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression256()
}

func (c *current) onGoExpression263() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression263()
}

func (c *current) onGoExpression161(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoExpression161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression161(stack["valsI"], stack["endPosI"])
}

func (c *current) onGoExpression272() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression272()
}

func (c *current) onGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression1(stack["exprsI"])
}

func (c *current) ongoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression11()
}

func (c *current) ongoSubExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression21()
}

func (c *current) ongoSubExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression31()
}

func (c *current) ongoSubExpression5(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil

}

func (p *parser) callongoSubExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression5(stack["exprI"])
}

func (c *current) ongoSubExpression43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression43()
}

func (c *current) ongoSubExpression38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			ContextLen: 3,
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here or on a line below",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}

}

func (p *parser) callongoSubExpression38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) ongoSubExpression52() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression52()
}

func (c *current) ongoSubExpression68() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression68()
}

func (c *current) ongoSubExpression89() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression89()
}

func (c *current) ongoSubExpression121() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression121()
}

func (c *current) ongoSubExpression128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression128()
}

func (c *current) ongoSubExpression139() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression139()
}

func (c *current) ongoSubExpression146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression146()
}

func (c *current) ongoSubExpression151() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression151()
}

func (c *current) ongoSubExpression169() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression169()
}

func (c *current) ongoSubExpression190() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression190()
}

func (c *current) ongoSubExpression222() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression222()
}

func (c *current) ongoSubExpression229() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression229()
}

func (c *current) ongoSubExpression240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression240()
}

func (c *current) ongoSubExpression247() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression247()
}

func (c *current) ongoSubExpression252() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression252()
}

func (c *current) ongoSubExpression259() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression259()
}

func (c *current) ongoSubExpression157(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callongoSubExpression157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression157(stack["valsI"], stack["endPosI"])
}

func (c *current) ongoSubExpression268() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression268()
}

func (c *current) ongoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callongoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression1(stack["exprsI"])
}

func (c *current) onmultiLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression11()
}

func (c *current) onmultiLineGoExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression21()
}

func (c *current) onmultiLineGoExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression31()
}

func (c *current) onmultiLineGoExpression5(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil

}

func (p *parser) callonmultiLineGoExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression5(stack["exprI"])
}

func (c *current) onmultiLineGoExpression43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression43()
}

func (c *current) onmultiLineGoExpression38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			ContextLen: 3,
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here or on a line below",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}

}

func (p *parser) callonmultiLineGoExpression38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onmultiLineGoExpression52() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression52()
}

func (c *current) onmultiLineGoExpression68() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression68()
}

func (c *current) onmultiLineGoExpression89() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression89()
}

func (c *current) onmultiLineGoExpression121() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression121()
}

func (c *current) onmultiLineGoExpression128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression128()
}

func (c *current) onmultiLineGoExpression139() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression139()
}

func (c *current) onmultiLineGoExpression146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression146()
}

func (c *current) onmultiLineGoExpression151() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression151()
}

func (c *current) onmultiLineGoExpression169() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression169()
}

func (c *current) onmultiLineGoExpression190() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression190()
}

func (c *current) onmultiLineGoExpression222() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression222()
}

func (c *current) onmultiLineGoExpression229() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression229()
}

func (c *current) onmultiLineGoExpression240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression240()
}

func (c *current) onmultiLineGoExpression247() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression247()
}

func (c *current) onmultiLineGoExpression252() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression252()
}

func (c *current) onmultiLineGoExpression259() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression259()
}

func (c *current) onmultiLineGoExpression157(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression157(stack["valsI"], stack["endPosI"])
}

func (c *current) onmultiLineGoExpression268() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression268()
}

func (c *current) onmultiLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonmultiLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression1(stack["exprsI"])
}

func (c *current) onSingleLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression11()
}

func (c *current) onSingleLineGoExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression21()
}

func (c *current) onSingleLineGoExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression31()
}

func (c *current) onSingleLineGoExpression5(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil

}

func (p *parser) callonSingleLineGoExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression5(stack["exprI"])
}

func (c *current) onSingleLineGoExpression43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression43()
}

func (c *current) onSingleLineGoExpression38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}

}

func (p *parser) callonSingleLineGoExpression38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onSingleLineGoExpression52() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression52()
}

func (c *current) onSingleLineGoExpression68() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression68()
}

func (c *current) onSingleLineGoExpression89() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression89()
}

func (c *current) onSingleLineGoExpression121() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression121()
}

func (c *current) onSingleLineGoExpression128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression128()
}

func (c *current) onSingleLineGoExpression139() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression139()
}

func (c *current) onSingleLineGoExpression146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression146()
}

func (c *current) onSingleLineGoExpression151() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression151()
}

func (c *current) onSingleLineGoExpression169() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression169()
}

func (c *current) onSingleLineGoExpression190() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression190()
}

func (c *current) onSingleLineGoExpression222() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression222()
}

func (c *current) onSingleLineGoExpression229() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression229()
}

func (c *current) onSingleLineGoExpression240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression240()
}

func (c *current) onSingleLineGoExpression247() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression247()
}

func (c *current) onSingleLineGoExpression252() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression252()
}

func (c *current) onSingleLineGoExpression259() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression259()
}

func (c *current) onSingleLineGoExpression157(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression157(stack["valsI"], stack["endPosI"])
}

func (c *current) onSingleLineGoExpression268() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression268()
}

func (c *current) onSingleLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonSingleLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression1(stack["exprsI"])
}

func (c *current) onsingleLineGoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression11()
}

func (c *current) onsingleLineGoSubExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression21()
}

func (c *current) onsingleLineGoSubExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression31()
}

func (c *current) onsingleLineGoSubExpression5(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil

}

func (p *parser) callonsingleLineGoSubExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression5(stack["exprI"])
}

func (c *current) onsingleLineGoSubExpression43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression43()
}

func (c *current) onsingleLineGoSubExpression38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onsingleLineGoSubExpression52() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression52()
}

func (c *current) onsingleLineGoSubExpression68() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression68()
}

func (c *current) onsingleLineGoSubExpression89() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression89()
}

func (c *current) onsingleLineGoSubExpression121() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression121()
}

func (c *current) onsingleLineGoSubExpression128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression128()
}

func (c *current) onsingleLineGoSubExpression139() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression139()
}

func (c *current) onsingleLineGoSubExpression146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression146()
}

func (c *current) onsingleLineGoSubExpression151() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression151()
}

func (c *current) onsingleLineGoSubExpression169() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression169()
}

func (c *current) onsingleLineGoSubExpression190() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression190()
}

func (c *current) onsingleLineGoSubExpression222() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression222()
}

func (c *current) onsingleLineGoSubExpression229() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression229()
}

func (c *current) onsingleLineGoSubExpression240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression240()
}

func (c *current) onsingleLineGoSubExpression247() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression247()
}

func (c *current) onsingleLineGoSubExpression252() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression252()
}

func (c *current) onsingleLineGoSubExpression259() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression259()
}

func (c *current) onsingleLineGoSubExpression157(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression157(stack["valsI"], stack["endPosI"])
}

func (c *current) onsingleLineGoSubExpression268() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression268()
}

func (c *current) onsingleLineGoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonsingleLineGoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression1(stack["exprsI"])
}

func (c *current) onIfExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonIfExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression2(stack["cExprI"])
}

func (c *current) onIfExpression16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression16()
}

func (c *current) onIfExpression27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression27()
}

func (c *current) onIfExpression38() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression38()
}

func (c *current) onIfExpression9(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil

}

func (p *parser) callonIfExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression9(stack["exprI"])
}

func (c *current) onIfExpression50() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression50()
}

func (c *current) onIfExpression45(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			ContextLen: 3,
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here or on a line below",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}

}

func (p *parser) callonIfExpression45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression45(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onIfExpression60() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression60()
}

func (c *current) onIfExpression76() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression76()
}

func (c *current) onIfExpression97() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression97()
}

func (c *current) onIfExpression129() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression129()
}

func (c *current) onIfExpression136() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression136()
}

func (c *current) onIfExpression147() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression147()
}

func (c *current) onIfExpression154() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression154()
}

func (c *current) onIfExpression159() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression159()
}

func (c *current) onIfExpression177() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression177()
}

func (c *current) onIfExpression198() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression198()
}

func (c *current) onIfExpression230() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression230()
}

func (c *current) onIfExpression237() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression237()
}

func (c *current) onIfExpression248() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression248()
}

func (c *current) onIfExpression255() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression255()
}

func (c *current) onIfExpression260() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression260()
}

func (c *current) onIfExpression267() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression267()
}

func (c *current) onIfExpression165(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonIfExpression165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression165(stack["valsI"], stack["endPosI"])
}

func (c *current) onIfExpression276() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression276()
}

func (c *current) onIfExpression5(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonIfExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression5(stack["exprsI"])
}

func (c *current) onInterpretedStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '"',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression2(stack["contentsI"])
}

func (c *current) onInterpretedStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInterpretedStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression13()
}

func (c *current) onInterpretedStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '"',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a `\"` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonInterpretedStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onRawStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '`',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression2(stack["contentsI"])
}

func (c *current) onRawStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRawStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression13()
}

func (c *current) onRawStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '`',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a ``` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonRawStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onInterpretedStringExpressionItem16() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem16()
}

func (c *current) onInterpretedStringExpressionItem37() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem37()
}

func (c *current) onInterpretedStringExpressionItem69() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonInterpretedStringExpressionItem69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem69()
}

func (c *current) onInterpretedStringExpressionItem76() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem76()
}

func (c *current) onInterpretedStringExpressionItem87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem87()
}

func (c *current) onInterpretedStringExpressionItem94() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem94()
}

func (c *current) onInterpretedStringExpressionItem99() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem99()
}

func (c *current) onInterpretedStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem2()
}

func (c *current) onRawStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpressionItem2()
}

func (c *current) onStringExpressionInterpolation28() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation28()
}

func (c *current) onStringExpressionInterpolation31() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation31()
}

func (c *current) onStringExpressionInterpolation11() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation11()
}

func (c *current) onStringExpressionInterpolation39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation39()
}

func (c *current) onStringExpressionInterpolation33(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid formatter",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      file.Position{Line: pos(c).Line, Col: pos(c).Col - 1},
				Annotation: "for this string interpolation",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation33(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation2(noEscapeI, fmtDirectiveI, exprI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
		NoEscape:        noEscapeI != nil,
		FormatDirective: concat(fmtDirectiveI),
		Expression:      exprI.(file.Expression),
		Position:        pos(c),
	}, nil
}

func (p *parser) callonStringExpressionInterpolation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation2(stack["noEscapeI"], stack["fmtDirectiveI"], stack["exprI"])
}

func (c *current) onStringExpressionInterpolation74() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation74()
}

func (c *current) onStringExpressionInterpolation77() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation77()
}

func (c *current) onStringExpressionInterpolation57() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation57()
}

func (c *current) onStringExpressionInterpolation85() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation85()
}

func (c *current) onStringExpressionInterpolation79(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid formatter",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      file.Position{Line: pos(c).Line, Col: pos(c).Col - 1},
				Annotation: "for this string interpolation",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation79(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation92()
}

func (c *current) onStringExpressionInterpolation49(noEscapeI, fmtDirectiveI, parenPosI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			NoEscape:        noEscapeI != nil,
			FormatDirective: concat(fmtDirectiveI),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "interpolation is missing an expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      parenPosI.(file.Position),
				Annotation: "expected a `" + lbrace + "` here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "add an expression enclosed in braces",
					Code:       "`" + string(c.text) + "{1+1}`",
				},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation49(stack["noEscapeI"], stack["fmtDirectiveI"], stack["parenPosI"])
}

func (c *current) onStringExpressionInterpolation123() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation123()
}

func (c *current) onStringExpressionInterpolation126() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation126()
}

func (c *current) onStringExpressionInterpolation106() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation106()
}

func (c *current) onStringExpressionInterpolation134() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation134()
}

func (c *current) onStringExpressionInterpolation128(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid formatter",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      file.Position{Line: pos(c).Line, Col: pos(c).Col - 1},
				Annotation: "for this string interpolation",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation128(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation141() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation141()
}

func (c *current) onStringExpressionInterpolation149() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation149()
}

func (c *current) onStringExpressionInterpolation98(noEscapeI, fmtDirectiveI, parenPosI, startPosI, exprI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			NoEscape:        noEscapeI != nil,
			FormatDirective: concat(fmtDirectiveI),
			Expression:      exprI.(file.Expression),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "unclosed string interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				EOLDelta:   1,
				Annotation: "expected a `" + rbrace + "` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					End:        startPosI.(file.Position),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "add the missing `" + rbrace + "`"},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation98(stack["noEscapeI"], stack["fmtDirectiveI"], stack["parenPosI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onTernaryExpression51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression51()
}

func (c *current) onTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression57() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression57()
}

func (c *current) onTernaryExpression71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression71()
}

func (c *current) onTernaryExpression53(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression53(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression93() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression93()
}

func (c *current) onTernaryExpression87(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression87(stack["posI"])
}

func (c *current) onTernaryExpression109() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression109()
}

func (c *current) onTernaryExpression106(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression106(stack["posI"])
}

func (c *current) onTernaryExpression118() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression118()
}

func (c *current) onTernaryExpression73(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression73(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression152() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression152()
}

func (c *current) onTernaryExpression146(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression146(stack["posI"])
}

func (c *current) onTernaryExpression168() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression168()
}

func (c *current) onTernaryExpression165(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression165(stack["posI"])
}

func (c *current) onTernaryExpression177() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression177()
}

func (c *current) onTernaryExpression120(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression120(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression31()
}

func (c *current) onSingleLineTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression37()
}

func (c *current) onSingleLineTernaryExpression51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression51()
}

func (c *current) onSingleLineTernaryExpression33(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression33(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression73() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression73()
}

func (c *current) onSingleLineTernaryExpression67(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression67(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression89() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression89()
}

func (c *current) onSingleLineTernaryExpression86(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression86(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression98() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression98()
}

func (c *current) onSingleLineTernaryExpression53(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression53(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression132() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression132()
}

func (c *current) onSingleLineTernaryExpression126(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression126(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression148() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression148()
}

func (c *current) onSingleLineTernaryExpression145(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression145(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression157() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression157()
}

func (c *current) onSingleLineTernaryExpression100(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression100(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onChainExpression20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression20()
}

func (c *current) onChainExpression36() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression36()
}

func (c *current) onChainExpression59(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0 || defaultI != nil, nil
}

func (p *parser) callonChainExpression59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression59(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression62() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression62()
}

func (c *current) onChainExpression79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression79()
}

func (c *current) onChainExpression85(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0, nil
}

func (p *parser) callonChainExpression85() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression85(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onChainExpression87() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression87()
}

func (c *current) onChainExpression95() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression95()
}

func (c *current) onChainExpression101(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (bool, error) {
	var multiline string
	if malEndPosI.(file.Position).Line > malStartPosI.(file.Position).Line {
		multiline += " and the lines below"
	}

	return false, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this" + multiline + " as part of a chain expression",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "that you started here",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be used as part of a Go expression;\n" +
					"you can either write a chain expression, or a Go expression",
			},
		},
	}
}

func (p *parser) callonChainExpression101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression101(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onchainExpressionRoot2() (interface{}, error) {
	return file.GoExpression{
		Expression: string(c.text),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonchainExpressionRoot2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot2()
}

func (c *current) onchainExpressionRoot11(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonchainExpressionRoot11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot11(stack["ident"])
}

func (c *current) onchainExpressionRoot30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonchainExpressionRoot30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot30()
}

func (c *current) onchainExpressionRoot17(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonchainExpressionRoot17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot17(stack["identI"], stack["endPosI"])
}

func (c *current) onchainExpressionRoot8(identI interface{}) (interface{}, error) {
	ident := identI.(file.GoIdent)
	return file.GoExpression{
		Expression: ident.Ident,
		Position:   ident.Position,
	}, nil
}

func (p *parser) callonchainExpressionRoot8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot8(stack["identI"])
}

func (c *current) onSingleLineChainExpression20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression20()
}

func (c *current) onSingleLineChainExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression31()
}

func (c *current) onSingleLineChainExpression54(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0 || defaultI != nil, nil
}

func (p *parser) callonSingleLineChainExpression54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression54(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonSingleLineChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression57() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression57()
}

func (c *current) onSingleLineChainExpression74() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression74()
}

func (c *current) onSingleLineChainExpression80(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0, nil
}

func (p *parser) callonSingleLineChainExpression80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression80(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression82() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression82()
}

func (c *current) onSingleLineChainExpression90() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression90()
}

func (c *current) onSingleLineChainExpression96(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (bool, error) {
	return false, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this as part of a chain expression",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "that you started here",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be used as part of a Go expression;\n" +
					"you can either write a chain expression, or a Go expression",
			},
		},
	}
}

func (p *parser) callonSingleLineChainExpression96() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression96(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onChainExpressionItem15(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem15(stack["ident"])
}

func (c *current) onChainExpressionItem34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem34()
}

func (c *current) onChainExpressionItem21(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonChainExpressionItem21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem21(stack["identI"], stack["endPosI"])
}

func (c *current) onChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onChainExpressionItem50(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem50(stack["ident"])
}

func (c *current) onChainExpressionItem69() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem69()
}

func (c *current) onChainExpressionItem56(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonChainExpressionItem56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem56(stack["identI"], stack["endPosI"])
}

func (c *current) onChainExpressionItem78(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem78(stack["ident"])
}

func (c *current) onChainExpressionItem97() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem97()
}

func (c *current) onChainExpressionItem84(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonChainExpressionItem84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem84(stack["identI"], stack["endPosI"])
}

func (c *current) onChainExpressionItem104() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem104()
}

func (c *current) onChainExpressionItem43(packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		Package:   packageIdent,
		Type:      typeI.(file.GoIdent),
		RParenPos: rParenPosI.(file.Position),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonChainExpressionItem43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem43(stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem10(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem10(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem29() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem29()
}

func (c *current) onSingleLineChainExpressionItem16(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonSingleLineChainExpressionItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem16(stack["identI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem45(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem45(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem64() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem64()
}

func (c *current) onSingleLineChainExpressionItem51(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonSingleLineChainExpressionItem51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem51(stack["identI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpressionItem73(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem73(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem92()
}

func (c *current) onSingleLineChainExpressionItem79(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonSingleLineChainExpressionItem79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem79(stack["identI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpressionItem99() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem99()
}

func (c *current) onSingleLineChainExpressionItem38(packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		Package:   packageIdent,
		Type:      typeI.(file.GoIdent),
		RParenPos: rParenPosI.(file.Position),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem38(stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression3()
}

func (c *current) onIndexExpression29() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression29()
}

func (c *current) onIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onSingleLineIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression3()
}

func (c *current) onSingleLineIndexExpression24() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression24()
}

func (c *current) onSingleLineIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonSingleLineIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression3()
}

func (c *current) onParenExpression23() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression23()
}

func (c *current) onParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onparenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonparenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression3()
}

func (c *current) onSingleLineParenExpression18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression18()
}

func (c *current) onSingleLineParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onsingleLinearenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonsingleLinearenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLinearenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onGoType1(goTypeI interface{}) (interface{}, error) {
	return file.GoType{Type: concat(goTypeI), Position: pos(c)}, nil
}

func (p *parser) callonGoType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoType1(stack["goTypeI"])
}

func (c *current) ongoFieldDecl33() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a ``` somewhere here",
		}),
	}
}

func (p *parser) callongoFieldDecl33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl33()
}

func (c *current) ongoFieldDecl57() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl57()
}

func (c *current) ongoFieldDecl78() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl78()
}

func (c *current) ongoFieldDecl110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl110()
}

func (c *current) ongoFieldDecl117() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl117()
}

func (c *current) ongoFieldDecl128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl128()
}

func (c *current) ongoFieldDecl135() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl135()
}

func (c *current) ongoFieldDecl140() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl140()
}

func (c *current) ongoFieldDecl157() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl157()
}

func (c *current) ongoFieldDecl178() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl178()
}

func (c *current) ongoFieldDecl210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl210()
}

func (c *current) ongoFieldDecl217() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl217()
}

func (c *current) ongoFieldDecl228() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl228()
}

func (c *current) ongoFieldDecl235() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl235()
}

func (c *current) ongoFieldDecl240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl240()
}

func (c *current) ongoFieldDecl146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a `\"` somewhere here",
		}),
	}

}

func (p *parser) callongoFieldDecl146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl146()
}

func (c *current) onMixin12(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixin12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin12(stack["identI"])
}

func (c *current) onMixin31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin31()
}

func (c *current) onMixin18(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixin18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin18(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixin9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin9(stack["identI"])
}

func (c *current) onMixin40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin40()
}

func (c *current) onMixin37(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin37(stack["posI"])
}

func (c *current) onMixin65() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin65()
}

func (c *current) onMixin59(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin59(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin2(nameI, paramsI, bodyI interface{}) (interface{}, error) {
	params := castedOrZero[file.Mixin](paramsI)
	return file.Mixin{
		Name:      nameI.(file.Ident),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixin2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin2(stack["nameI"], stack["paramsI"], stack["bodyI"])
}

func (c *current) onMixin80() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin80()
}

func (c *current) onMixin76(posI, bodyI interface{}) (interface{}, error) {
	return file.Mixin{
			Body:     bodyI.(file.Scope),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "mixin: missing name",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected the name of the mixin here",
			}),
			Example: "`mixin woof\n" +
				"  > bark`",
		}
}

func (p *parser) callonMixin76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin76(stack["posI"], stack["bodyI"])
}

func (c *current) onmixinParamList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList28()
}

func (c *current) onmixinParamList2(paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Mixin{
		LParenPos: ptr(pos(c)),
		Params:    castedOrZero[[]file.MixinParam](paramsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinParamList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList2(stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onmixinParamList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList49()
}

func (c *current) onmixinParamList30(paramsI, posI interface{}) (interface{}, error) {
	return file.Mixin{
			LParenPos: ptr(pos(c)),
			Params:    castedOrZero[[]file.MixinParam](paramsI),
		}, &corgierr.Error{
			Message: "mixin parameters: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinParamList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList30(stack["paramsI"], stack["posI"])
}

func (c *current) onmixinParams1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinParams := make([]file.MixinParam, 1+len(restIs))
	mixinParams[0] = firstI.(file.MixinParam)
	for i, ai := range restIs {
		mixinParams[i+1] = getTuple[file.MixinParam](ai, -1)
	}

	return mixinParams, nil
}

func (p *parser) callonmixinParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParams1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinParam8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam8(stack["identI"])
}

func (c *current) onmixinParam27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam27()
}

func (c *current) onmixinParam14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinParam14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam5(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam5(stack["identI"])
}

func (c *current) onmixinParam36() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam36()
}

func (c *current) onmixinParam33(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinParam33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam33(stack["posI"])
}

func (c *current) onmixinParam61() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam61()
}

func (c *current) onmixinParam55(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinParam55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam55(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam68()
}

func (c *current) onmixinParam1(nameI, posI, typeI, defaultI interface{}) (interface{}, error) {
	defaultTuple := islice(defaultI)
	var paramDefault file.MixinParam
	if len(defaultTuple) == 2 {
		paramDefault = defaultTuple[1].(file.MixinParam)
	}

	typeTuple := islice(typeI)
	var paramType *file.GoType
	if len(typeTuple) == 2 {
		paramType = ptr(typeTuple[1].(file.GoType))
	}

	p := file.MixinParam{
		Name:      nameI.(file.Ident),
		Type:      paramType,
		AssignPos: paramDefault.AssignPos,
		Default:   paramDefault.Default,
		Position:  pos(c),
	}
	if p.Type == nil && p.Default == nil {
		return p, &corgierr.Error{
			Message: "mixin param: need either a type or a default",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected either a type or a default here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "give this param a type", Code: "`" + p.Name.Ident + " string`"},
				{Suggestion: "give this param a default with an inferrable type", Code: "`" + p.Name.Ident + "=\"woof\"`"},
			},
		}
	}

	return p, nil
}

func (p *parser) callonmixinParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam1(stack["nameI"], stack["posI"], stack["typeI"], stack["defaultI"])
}

func (c *current) onmixinParamDefault2(exprI interface{}) (interface{}, error) {
	return file.MixinParam{
		AssignPos: ptr(pos(c)),
		Default:   ptrOrNil[file.Expression](exprI),
	}, nil
}

func (p *parser) callonmixinParamDefault2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault2(stack["exprI"])
}

func (c *current) onmixinParamDefault13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamDefault13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault13()
}

func (c *current) onmixinParamDefault9(posI interface{}) (interface{}, error) {
	return file.MixinParam{
			AssignPos: ptr(pos(c)),
		}, &corgierr.Error{
			Message: "mixin param: missing default",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "because of this `=`",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the `=`, if you didn't mean to define a default"},
			},
		}
}

func (p *parser) callonmixinParamDefault9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault9(stack["posI"])
}

func (c *current) onReturn8() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonReturn8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn8()
}

func (c *current) onReturn1(errExprI interface{}) (interface{}, error) {
	return file.Return{
		Err:      ptrOrNil[file.Expression](errExprI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonReturn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn1(stack["errExprI"])
}

func (c *current) onMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall8(stack["identI"])
}

func (c *current) onMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall27()
}

func (c *current) onMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall39(stack["identI"])
}

func (c *current) onMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall58()
}

func (c *current) onMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall36(stack["identI"])
}

func (c *current) onMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall67()
}

func (c *current) onMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall64(stack["posI"])
}

func (c *current) onMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall92()
}

func (c *current) onMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCall{
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onInlineMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall8(stack["identI"])
}

func (c *current) onInlineMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall27()
}

func (c *current) onInlineMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall39(stack["identI"])
}

func (c *current) onInlineMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall58()
}

func (c *current) onInlineMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall36(stack["identI"])
}

func (c *current) onInlineMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall67()
}

func (c *current) onInlineMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall64(stack["posI"])
}

func (c *current) onInlineMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall92()
}

func (c *current) onInlineMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCall{
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonInlineMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onmixinArgList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList28()
}

func (c *current) onmixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onmixinArgList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList49()
}

func (c *current) onmixinArgList30(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin argeters: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinArgList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList30(stack["argsI"], stack["posI"])
}

func (c *current) onsingleLineMixinArgList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList18()
}

func (c *current) onsingleLineMixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonsingleLineMixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onsingleLineMixinArgList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList34()
}

func (c *current) onsingleLineMixinArgList20(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin argeters: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonsingleLineMixinArgList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList20(stack["argsI"], stack["posI"])
}

func (c *current) onmixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonmixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onsingleLineMixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonsingleLineMixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg9(stack["identI"])
}

func (c *current) onmixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg28()
}

func (c *current) onmixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg6(stack["identI"])
}

func (c *current) onmixinArg37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg37()
}

func (c *current) onmixinArg34(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg34(stack["posI"])
}

func (c *current) onmixinArg62() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg62()
}

func (c *current) onmixinArg56(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg56(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonmixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onmixinArg82(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg82(stack["identI"])
}

func (c *current) onmixinArg101() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg101()
}

func (c *current) onmixinArg88(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg88(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg79(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg79(stack["identI"])
}

func (c *current) onmixinArg110() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg110()
}

func (c *current) onmixinArg107(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg107(stack["posI"])
}

func (c *current) onmixinArg135() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg135()
}

func (c *current) onmixinArg129(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg129(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg147() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg147()
}

func (c *current) onmixinArg75(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonmixinArg75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg75(stack["nameI"], stack["posI"])
}

func (c *current) onsingleLineMixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg9(stack["identI"])
}

func (c *current) onsingleLineMixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg28()
}

func (c *current) onsingleLineMixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg6(stack["identI"])
}

func (c *current) onsingleLineMixinArg37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg37()
}

func (c *current) onsingleLineMixinArg34(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg34(stack["posI"])
}

func (c *current) onsingleLineMixinArg62() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg62()
}

func (c *current) onsingleLineMixinArg56(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg56(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonsingleLineMixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onsingleLineMixinArg82(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg82(stack["identI"])
}

func (c *current) onsingleLineMixinArg101() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg101()
}

func (c *current) onsingleLineMixinArg88(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg88(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg79(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg79(stack["identI"])
}

func (c *current) onsingleLineMixinArg110() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg110()
}

func (c *current) onsingleLineMixinArg107(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg107(stack["posI"])
}

func (c *current) onsingleLineMixinArg135() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg135()
}

func (c *current) onsingleLineMixinArg129(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg129(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg147() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg147()
}

func (c *current) onsingleLineMixinArg75(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonsingleLineMixinArg75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg75(stack["nameI"], stack["posI"])
}

func (c *current) onmixinCallBody2(shI interface{}) (interface{}, error) {
	return file.Scope{shI.(file.MixinMainBlockShorthand)}, nil
}

func (p *parser) callonmixinCallBody2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallBody2(stack["shI"])
}

func (c *current) onMixinMainBlockShorthand6() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand6()
}

func (c *current) onMixinMainBlockShorthand2(bodyI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
		Body:     bodyI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinMainBlockShorthand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand2(stack["bodyI"])
}

func (c *current) onMixinMainBlockShorthand24() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand24()
}

func (c *current) onMixinMainBlockShorthand28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinMainBlockShorthand28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand28()
}

func (c *current) onMixinMainBlockShorthand20(posI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing body",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an indented body",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if you want the `_` block to write nothing,\n" +
						"use a block directive inside the body of the mixin call",
					Example: "`+woof\n" +
						"  block _`",
				},
			},
		}
}

func (p *parser) callonMixinMainBlockShorthand20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand20(stack["posI"])
}

func (c *current) onFunc9(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonFunc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc9(stack["ident"])
}

func (c *current) onFunc28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc28()
}

func (c *current) onFunc15(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonFunc15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc15(stack["identI"], stack["endPosI"])
}

func (c *current) onFunc39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc39()
}

func (c *current) onFunc43(paramsI interface{}) (interface{}, error) {
	return castedOrZero[[]file.FuncParam](paramsI), nil

}

func (p *parser) callonFunc43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc43(stack["paramsI"])
}

func (c *current) onFunc72() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc72()
}

func (c *current) onFunc67(endPosI interface{}) (interface{}, error) {
	return ([]file.FuncParam)(nil), &corgierr.Error{
		Message: "invalid parameter list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "this is not correct, maybe a missing comma?",
		}),
	}

}

func (p *parser) callonFunc67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc67(stack["endPosI"])
}

func (c *current) onFunc79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc79()
}

func (c *current) onFunc36(lParenPosI, paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Func{
		LParenPos: lParenPosI.(file.Position),
		Params:    paramsI.([]file.FuncParam),
		RParenPos: rParenPosI.(file.Position),
	}, nil

}

func (p *parser) callonFunc36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc36(stack["lParenPosI"], stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onFunc81() (interface{}, error) {
	return file.Func{}, &corgierr.Error{
		Message: "missing `(` or `)` or invalid param list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}

}

func (p *parser) callonFunc81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc81()
}

func (c *current) onFunc2(nameI, paramsI interface{}) (interface{}, error) {
	params := paramsI.(file.Func)
	return file.Func{
		Name:      nameI.(file.GoIdent),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonFunc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc2(stack["nameI"], stack["paramsI"])
}

func (c *current) onFunc97() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc97()
}

func (c *current) onFunc93(posI interface{}) (interface{}, error) {
	return file.Func{Position: pos(c)}, &corgierr.Error{
		Message: "missing func name",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected an identifier followed by a parameter list",
		}),
	}
}

func (p *parser) callonFunc93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc93(stack["posI"])
}

func (c *current) onfuncOnlyVariadicParamList1(variadicI interface{}) (interface{}, error) {
	return []file.FuncParam{variadicI.(file.FuncParam)}, nil
}

func (p *parser) callonfuncOnlyVariadicParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOnlyVariadicParamList1(stack["variadicI"])
}

func (c *current) onfuncOtherParamList1(firstI, restI, variadicI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	n := 1 + len(restTuples)
	if variadicI != nil {
		n++
	}
	params := make([]file.FuncParam, 1, n)
	params[0] = firstI.(file.FuncParam)

	for _, t := range restTuples {
		params = append(params, getTuple[file.FuncParam](t, -1))
	}

	if variadicI != nil {
		params = append(params, getTuple[file.FuncParam](variadicI, -1))
	}

	return params, nil
}

func (p *parser) callonfuncOtherParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOtherParamList1(stack["firstI"], stack["restI"], stack["variadicI"])
}

func (c *current) onfuncParam9(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam9(stack["ident"])
}

func (c *current) onfuncParam28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncParam28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam28()
}

func (c *current) onfuncParam15(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonfuncParam15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam15(stack["identI"], stack["endPosI"])
}

func (c *current) onfuncParam48(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam48(stack["ident"])
}

func (c *current) onfuncParam67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncParam67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam67()
}

func (c *current) onfuncParam54(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonfuncParam54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam54(stack["identI"], stack["endPosI"])
}

func (c *current) onfuncParam5(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)
	idents := make([]file.GoIdent, 1, 1+len(restTuples))
	idents[0] = firstI.(file.GoIdent)

	for _, t := range restTuples {
		idents = append(idents, getTuple[file.GoIdent](t, -1))
	}

	return idents, nil
}

func (p *parser) callonfuncParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam5(stack["firstI"], stack["restI"])
}

func (c *current) onfuncParam2(namesI, typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Names: namesI.([]file.GoIdent),
		Type:  typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam2(stack["namesI"], stack["typeI"])
}

func (c *current) onfuncParam77(typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Type: typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam77(stack["typeI"])
}

func (c *current) onfuncVariadicParam7(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncVariadicParam7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam7(stack["ident"])
}

func (c *current) onfuncVariadicParam26() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncVariadicParam26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam26()
}

func (c *current) onfuncVariadicParam13(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonfuncVariadicParam13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam13(stack["identI"], stack["endPosI"])
}

func (c *current) onfuncVariadicParam1(nameI, typeI interface{}) (interface{}, error) {
	var names []file.GoIdent
	if nameI != nil {
		names = []file.GoIdent{getTuple[file.GoIdent](nameI, 0)}
	}

	return file.FuncParam{
		Names:    names,
		Variadic: true,
		Type:     typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncVariadicParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam1(stack["nameI"], stack["typeI"])
}

func (c *current) onfuncType9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncType9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType9()
}

func (c *current) onfuncType3(typeI, endPosI interface{}) (interface{}, error) {
	return file.GoType{
			Type:     concat(typeI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid type",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "not a valid Go type",
			}),
		}
}

func (p *parser) callonfuncType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType3(stack["typeI"], stack["endPosI"])
}

func (c *current) onAssign13() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonAssign13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign13()
}

func (c *current) onAssign2(noEscapeI, exprI interface{}) (interface{}, error) {
	return file.Assign{
		Expression: exprI.(file.Expression),
		NoEscape:   noEscapeI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAssign2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign2(stack["noEscapeI"], stack["exprI"])
}

func (c *current) onAssign32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAssign32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign32()
}

func (c *current) onAssign25(noEscapeI, posI interface{}) (interface{}, error) {
	return file.Assign{
			NoEscape: noEscapeI != nil,
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing expression",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected an expression here",
			}),
			Example: "`= 1 + 2`",
		}
}

func (p *parser) callonAssign25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign25(stack["noEscapeI"], stack["posI"])
}

func (c *current) onInlineText1(lineI interface{}) (interface{}, error) {
	return file.InlineText{
		Text: lineI.(file.TextLine),
	}, nil
}

func (p *parser) callonInlineText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText1(stack["lineI"])
}

func (c *current) onArrowBlock2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	firstLine, firstLineOk := firstLineI.(file.TextLine)
	additionalLineTuples := islice(additionalLinesI)

	n := len(additionalLineTuples)
	if firstLineOk {
		n++
	}

	lines := make([]file.TextLine, 0, n)
	if firstLineOk {
		lines = append(lines, firstLine)
	}
	for _, lt := range additionalLineTuples {
		lines = append(lines, getTuple[file.TextLine](lt, -1))
	}

	return file.ArrowBlock{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onArrowBlock31() (interface{}, error) {
	return file.ArrowBlock{Position: pos(c)}, nil
}

func (p *parser) callonArrowBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock31()
}

func (c *current) onInlineArrowBlock2(lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
		Lines:    []file.TextLine{lineI.(file.TextLine)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock2(stack["lineI"])
}

func (c *current) onInlineArrowBlock11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineArrowBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock11()
}

func (c *current) onInlineArrowBlock7(posI, lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
			Lines:    []file.TextLine{lineI.(file.TextLine)},
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `>` from the text",
			}),
			Example: "`> woof`",
		}
}

func (p *parser) callonInlineArrowBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock7(stack["posI"], stack["lineI"])
}

func (c *current) onTextLine1(itemsI interface{}) (interface{}, error) {
	return file.TextLine(typedSlice[file.TextItem](itemsI)), nil
}

func (p *parser) callonTextLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextLine1(stack["itemsI"])
}

func (c *current) onTextItem2(textI interface{}) (interface{}, error) {
	return file.Text{
		Text:     concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTextItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextItem2(stack["textI"])
}

func (c *current) onInterpolation5() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "start of interpolation",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected a `#`, `[`, `" + lbrace + "`, a mixin call, or an element name here",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation5()
}

func (c *current) onSimpleInterpolation12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation12()
}

func (c *current) onSimpleInterpolation18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation18()
}

func (c *current) onSimpleInterpolation9(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonSimpleInterpolation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation9(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onSimpleInterpolation23() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation23()
}

func (c *current) onSimpleInterpolation20(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonSimpleInterpolation20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation20(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onSimpleInterpolation1(noEscapeI, valueI interface{}) (interface{}, error) {
	return file.SimpleInterpolation{
		NoEscape: noEscapeI != nil,
		Value:    valueI.(file.InterpolationValue),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation1(stack["noEscapeI"], stack["valueI"])
}

func (c *current) onElementInterpolation8() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElementInterpolation8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation8()
}

func (c *current) onElementInterpolation1(noEscapeI, elPosI, nameI, attrsI, valueI interface{}) (interface{}, error) {
	return file.ElementInterpolation{
		NoEscape: noEscapeI != nil,
		Element: file.Element{
			Name:       concat(nameI),
			Attributes: typedSlice[file.AttributeCollection](attrsI),
			Void:       valueI == nil,
			Position:   elPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElementInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation1(stack["noEscapeI"], stack["elPosI"], stack["nameI"], stack["attrsI"], stack["valueI"])
}

func (c *current) onelementInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue5()
}

func (c *current) onelementInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue11()
}

func (c *current) onelementInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonelementInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onelementInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue16()
}

func (c *current) onelementInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonelementInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onelementInterpolationValue31() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonelementInterpolationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue31()
}

func (c *current) onelementInterpolationValue33() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "missing interpolation value",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "here",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "write a text or expression interpolation",
				Example:    "`#strong{1+1}` or `#strong[woof]`",
			},
			{Suggestion: "write a void indicator, to indicate this is a void element", Example: "`#img(src=\"woof\")/`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonelementInterpolationValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue33()
}

func (c *current) onMixinInterpolation7() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinInterpolation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation7()
}

func (c *current) onMixinInterpolation18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinInterpolation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation18(stack["identI"])
}

func (c *current) onMixinInterpolation37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinInterpolation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation37()
}

func (c *current) onMixinInterpolation24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinInterpolation24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation24(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinInterpolation49(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinInterpolation49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation49(stack["identI"])
}

func (c *current) onMixinInterpolation68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinInterpolation68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation68()
}

func (c *current) onMixinInterpolation55(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinInterpolation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation55(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinInterpolation46(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinInterpolation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation46(stack["identI"])
}

func (c *current) onMixinInterpolation77() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinInterpolation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation77()
}

func (c *current) onMixinInterpolation74(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinInterpolation74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation74(stack["posI"])
}

func (c *current) onMixinInterpolation102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinInterpolation102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation102()
}

func (c *current) onMixinInterpolation96(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinInterpolation96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation96(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinInterpolation1(noEscapeI, mcPosI, namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinInterpolation{
		NoEscape: noEscapeI != nil,
		MixinCall: file.MixinCall{
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  mcPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinInterpolation1(stack["noEscapeI"], stack["mcPosI"], stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinInterpolationValue5()
}

func (c *current) onmixinInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinInterpolationValue11()
}

func (c *current) onmixinInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinInterpolationValue16()
}

func (c *current) onmixinInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonmixinInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onmixinInterpolationValue31() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "missing interpolation value",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "here",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "write a text or expression interpolation",
				Example:    "`#+woof(bark=\"loud\"){1+1}` or `#+woof(bark=\"loud\")[woof]`",
			},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonmixinInterpolationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinInterpolationValue31()
}

func (c *current) onexpressionInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue5()
}

func (c *current) onexpressionInterpolationValue10() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue10()
}

func (c *current) onexpressionInterpolationValue2(lBracePosI, exprI, rBracePosI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
		LBracePos:  lBracePosI.(file.Position),
		Expression: exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
	}, nil
}

func (p *parser) callonexpressionInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue2(stack["lBracePosI"], stack["exprI"], stack["rBracePosI"])
}

func (c *current) onexpressionInterpolationValue15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue15()
}

func (c *current) onexpressionInterpolationValue12(lBracePosI, exprI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
		LBracePos:  lBracePosI.(file.Position),
		Expression: exprI.(file.Expression),
	}, errors.New("unclosed expression interpolation")
}

func (p *parser) callonexpressionInterpolationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue12(stack["lBracePosI"], stack["exprI"])
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	// this is our first ever indentation, INDENTATION will handle it
	return c.state["Indentation.Char"].(byte) == 0, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL3()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL4()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL7()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL9()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL11()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL12() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL12()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL14()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL17()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL18()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL19() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL19()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL21() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL21()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase or decrease of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL22()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL26() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL26()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL31() (bool, error) {
	refReps := c.state["Indentation.Repetitions"].(int)
	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	want := totalReps + refReps
	have := c.state["Indentation.CharCount"].(int)
	if want == have {
		return true, nil
	}

	return false, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL31()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL35() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	have := c.state["Indentation.CharCount"].(int)
	want := totalReps + refReps
	if have == want {
		return true, nil
	} else if have <= totalReps {
		return false, nil
	}

	if indentChar == ' ' {
		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               have - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d spaces", have-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two spaces for a single indentation, use four for a two-level indentation",
				},
			},
		}
	}

	return true, &corgierr.Error{
		Message: "inconsistent indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
			Len:               have - totalReps,
			Annotation:        fmt.Sprintf("however, here you used %d tabs", have-totalReps),
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: refLine, Col: 1},
				Len:               refReps,
				Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "be consistent in your indentation:\n" +
					"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
			},
		},
	}

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL35()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL36() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)

	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(have - totalReps)
	c.state["Indentation.TotalRepetitions"] = have
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL36() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL36()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL38() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL38()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL39() (bool, error) {
	want := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)
	return want == have, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL39()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL40() error {
	c.state["Indentation.CharCount"] = 0
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL40() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL40()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL44(spaceI interface{}) (bool, error) {
	space := byte(char(spaceI))

	indentChar := c.state["Indentation.Char"].(byte)
	if indentChar != space {
		refLine := c.state["Indentation.RefLine"].(int)
		reps := c.state["Indentation.Repetitions"].(int)

		if indentChar == ' ' {
			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      pos(c),
					Annotation: "this is a tab",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               reps,
						Annotation:        "these are spaces",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}

		panic(&corgierr.Error{
			Message: "mix of tabs and spaces for indentation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "this is a space",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               reps,
					Annotation:        "these are tabs",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "use only tabs OR spaces for indentation, but not both"},
			},
		})
	}

	return true, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL44(stack["spaceI"])
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL45(spaceI interface{}) error {
	c.state["Indentation.CharCount"] = c.state["Indentation.CharCount"].(int) + 1
	return nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL45() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL45(stack["spaceI"])
}

func (c *current) onINDENTATION23() (bool, error) {
	return c.state["Indentation.Level"].(int) == 0, nil
}

func (p *parser) callonINDENTATION23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION23()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
