// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mavolin/corgi/escape/attrtype"
	"github.com/mavolin/corgi/file/fileerr"
)

type ErrList = errList
type ParserError = parserError

var g = &grammar{
	rules: []*rule{
		{
			name: "AST",
			pos:  position{line: 8, col: 1, offset: 89},
			expr: &actionExpr{
				pos: position{line: 8, col: 8, offset: 96},
				run: (*parser).callonAST1,
				expr: &seqExpr{
					pos: position{line: 8, col: 8, offset: 96},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 16, col: 9, offset: 405},
							run: (*parser).callonAST3,
						},
						&labeledExpr{
							pos:   position{line: 8, col: 13, offset: 101},
							label: "docI",
							expr: &actionExpr{
								pos: position{line: 2164, col: 15, offset: 73639},
								run: (*parser).callonAST5,
								expr: &labeledExpr{
									pos:   position{line: 2164, col: 15, offset: 73639},
									label: "commentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2164, col: 25, offset: 73649},
										expr: &choiceExpr{
											pos: position{line: 2164, col: 26, offset: 73650},
											alternatives: []any{
												&oneOrMoreExpr{
													pos: position{line: 2164, col: 26, offset: 73650},
													expr: &seqExpr{
														pos: position{line: 2763, col: 28, offset: 93731},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2763, col: 28, offset: 93731},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 492, col: 15, offset: 15700},
													run: (*parser).callonAST16,
													expr: &seqExpr{
														pos: position{line: 492, col: 15, offset: 15700},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 492, col: 15, offset: 15700},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&notExpr{
																pos: position{line: 492, col: 20, offset: 15705},
																expr: &litMatcher{
																	pos:        position{line: 492, col: 21, offset: 15706},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 492, col: 25, offset: 15710},
																label: "textI",
																expr: &seqExpr{
																	pos: position{line: 492, col: 32, offset: 15717},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 492, col: 32, offset: 15717},
																			expr: &seqExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2762, col: 23, offset: 93682},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										expr: &litMatcher{
																											pos:        position{line: 2762, col: 27, offset: 93686},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2762, col: 33, offset: 93692},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2761, col: 23, offset: 93657},
																								expr: &anyMatcher{
																									line: 2761, col: 24, offset: 93658,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 492, col: 37, offset: 15722,
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 2762, col: 23, offset: 93682},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				expr: &litMatcher{
																					pos:        position{line: 2762, col: 27, offset: 93686},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2762, col: 33, offset: 93692},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2761, col: 23, offset: 93657},
																		expr: &anyMatcher{
																			line: 2761, col: 24, offset: 93658,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 29, offset: 117},
							expr: &seqExpr{
								pos: position{line: 2763, col: 28, offset: 93731},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2763, col: 28, offset: 93731},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2785, col: 37, offset: 94524},
										expr: &litMatcher{
											pos:        position{line: 2785, col: 37, offset: 94524},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2785, col: 43, offset: 94530},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 41, offset: 129},
							label: "pkgI",
							expr: &choiceExpr{
								pos: position{line: 2176, col: 12, offset: 74006},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2178, col: 21, offset: 74070},
										run: (*parser).callonAST53,
										expr: &seqExpr{
											pos: position{line: 2178, col: 21, offset: 74070},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2178, col: 21, offset: 74070},
													val:        "package",
													ignoreCase: false,
													want:       "\"package\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 2178, col: 31, offset: 74080},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2178, col: 34, offset: 74083},
													label: "nameI",
													expr: &choiceExpr{
														pos: position{line: 2185, col: 16, offset: 74230},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2185, col: 16, offset: 74230},
																run: (*parser).callonAST60,
																expr: &seqExpr{
																	pos: position{line: 2185, col: 16, offset: 74230},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2185, col: 16, offset: 74230},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 265, col: 10, offset: 7614},
																				run: (*parser).callonAST63,
																				expr: &labeledExpr{
																					pos:   position{line: 265, col: 10, offset: 7614},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 1682, col: 17, offset: 55568},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 1665, col: 20, offset: 55323},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1682, col: 26, offset: 55577},
																								expr: &charClassMatcher{
																									pos:        position{line: 1665, col: 20, offset: 55323},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2187, col: 5, offset: 74276},
																run: (*parser).callonAST78,
																expr: &seqExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2197, col: 5, offset: 74584},
																run: (*parser).callonAST89,
																expr: &seqExpr{
																	pos: position{line: 2197, col: 5, offset: 74584},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2197, col: 5, offset: 74584},
																			label: "startI",
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonAST92,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 2197, col: 16, offset: 74595},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 2767, col: 35, offset: 93911},
																				run: (*parser).callonAST99,
																				expr: &seqExpr{
																					pos: position{line: 2767, col: 35, offset: 93911},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2767, col: 35, offset: 93911},
																							expr: &charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2767, col: 38, offset: 93914},
																							label: "unexpectedI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2767, col: 50, offset: 93926},
																								expr: &seqExpr{
																									pos: position{line: 2767, col: 51, offset: 93927},
																									exprs: []any{
																										&notExpr{
																											pos: position{line: 2767, col: 51, offset: 93927},
																											expr: &choiceExpr{
																												pos: position{line: 2764, col: 27, offset: 93768},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2762, col: 23, offset: 93682},
																														exprs: []any{
																															&zeroOrMoreExpr{
																																pos: position{line: 2762, col: 23, offset: 93682},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2784, col: 37, offset: 94482},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2762, col: 27, offset: 93686},
																																alternatives: []any{
																																	&seqExpr{
																																		pos: position{line: 2762, col: 27, offset: 93686},
																																		exprs: []any{
																																			&zeroOrOneExpr{
																																				pos: position{line: 2762, col: 27, offset: 93686},
																																				expr: &litMatcher{
																																					pos:        position{line: 2762, col: 27, offset: 93686},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2762, col: 33, offset: 93692},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2761, col: 23, offset: 93657},
																																		expr: &anyMatcher{
																																			line: 2761, col: 24, offset: 93658,
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2764, col: 33, offset: 93774},
																														val:        ";",
																														ignoreCase: false,
																														want:       "\";\"",
																													},
																													&andExpr{
																														pos: position{line: 2764, col: 39, offset: 93780},
																														expr: &seqExpr{
																															pos: position{line: 2764, col: 41, offset: 93782},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2764, col: 41, offset: 93782},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2784, col: 37, offset: 94482},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2764, col: 45, offset: 93786},
																																	alternatives: []any{
																																		&litMatcher{
																																			pos:        position{line: 2764, col: 45, offset: 93786},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2764, col: 51, offset: 93792},
																																			val:        "//",
																																			ignoreCase: false,
																																			want:       "\"//\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2767, col: 57, offset: 93933},
																											alternatives: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 2767, col: 57, offset: 93933},
																													expr: &charClassMatcher{
																														pos:        position{line: 2767, col: 57, offset: 93933},
																														val:        "[^\\r\\n;{}]",
																														chars:      []rune{'\r', '\n', ';', '{', '}'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2767, col: 71, offset: 93947},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 2767, col: 71, offset: 93947},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2767, col: 75, offset: 93951},
																															expr: &charClassMatcher{
																																pos:        position{line: 2767, col: 75, offset: 93951},
																																val:        "[^}]",
																																chars:      []rune{'}'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2767, col: 81, offset: 93957},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2201, col: 28, offset: 74729},
										run: (*parser).callonAST143,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonAST144,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 54, offset: 142},
							expr: &seqExpr{
								pos: position{line: 2763, col: 28, offset: 93731},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2763, col: 28, offset: 93731},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2785, col: 37, offset: 94524},
										expr: &litMatcher{
											pos:        position{line: 2785, col: 37, offset: 94524},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2785, col: 43, offset: 94530},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 66, offset: 154},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 8, col: 73, offset: 161},
								name: "GlobalScope",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 85, offset: 173},
							expr: &seqExpr{
								pos: position{line: 2763, col: 28, offset: 93731},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2763, col: 28, offset: 93731},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2785, col: 37, offset: 94524},
										expr: &litMatcher{
											pos:        position{line: 2785, col: 37, offset: 94524},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2785, col: 43, offset: 94530},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2761, col: 23, offset: 93657},
							expr: &anyMatcher{
								line: 2761, col: 24, offset: 93658,
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 24, col: 1, offset: 619},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 626},
				run: (*parser).callonAnd1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 626},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 24, col: 8, offset: 626},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 630},
							label: "collsI",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 19, offset: 637},
								name: "andAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andAttributes",
			pos:  position{line: 31, col: 1, offset: 777},
			expr: &choiceExpr{
				pos: position{line: 31, col: 18, offset: 794},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 31, col: 18, offset: 794},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 31, col: 18, offset: 794},
								name: "AttributeCollection",
							},
							&actionExpr{
								pos: position{line: 46, col: 28, offset: 1434},
								run: (*parser).callonandAttributes4,
								expr: &seqExpr{
									pos: position{line: 46, col: 28, offset: 1434},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2767, col: 35, offset: 93911},
											run: (*parser).callonandAttributes6,
											expr: &seqExpr{
												pos: position{line: 2767, col: 35, offset: 93911},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2767, col: 35, offset: 93911},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&labeledExpr{
														pos:   position{line: 2767, col: 38, offset: 93914},
														label: "unexpectedI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2767, col: 50, offset: 93926},
															expr: &seqExpr{
																pos: position{line: 2767, col: 51, offset: 93927},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 2767, col: 51, offset: 93927},
																		expr: &choiceExpr{
																			pos: position{line: 2764, col: 27, offset: 93768},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2762, col: 23, offset: 93682},
																							expr: &charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2762, col: 27, offset: 93686},
																											expr: &litMatcher{
																												pos:        position{line: 2762, col: 27, offset: 93686},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2762, col: 33, offset: 93692},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2761, col: 23, offset: 93657},
																									expr: &anyMatcher{
																										line: 2761, col: 24, offset: 93658,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2764, col: 33, offset: 93774},
																					val:        ";",
																					ignoreCase: false,
																					want:       "\";\"",
																				},
																				&andExpr{
																					pos: position{line: 2764, col: 39, offset: 93780},
																					expr: &seqExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2764, col: 41, offset: 93782},
																								expr: &charClassMatcher{
																									pos:        position{line: 2784, col: 37, offset: 94482},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2764, col: 45, offset: 93786},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2764, col: 45, offset: 93786},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2764, col: 51, offset: 93792},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2767, col: 57, offset: 93933},
																		alternatives: []any{
																			&oneOrMoreExpr{
																				pos: position{line: 2767, col: 57, offset: 93933},
																				expr: &charClassMatcher{
																					pos:        position{line: 2767, col: 57, offset: 93933},
																					val:        "[^\\r\\n;{}]",
																					chars:      []rune{'\r', '\n', ';', '{', '}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2767, col: 71, offset: 93947},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 2767, col: 71, offset: 93947},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 2767, col: 75, offset: 93951},
																						expr: &charClassMatcher{
																							pos:        position{line: 2767, col: 75, offset: 93951},
																							val:        "[^}]",
																							chars:      []rune{'}'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2767, col: 81, offset: 93957},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 46, col: 39, offset: 1445},
											label: "endI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonandAttributes42,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 31, col: 64, offset: 840},
						run: (*parser).callonandAttributes48,
						expr: &actionExpr{
							pos: position{line: 2767, col: 35, offset: 93911},
							run: (*parser).callonandAttributes49,
							expr: &seqExpr{
								pos: position{line: 2767, col: 35, offset: 93911},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&labeledExpr{
										pos:   position{line: 2767, col: 38, offset: 93914},
										label: "unexpectedI",
										expr: &oneOrMoreExpr{
											pos: position{line: 2767, col: 50, offset: 93926},
											expr: &seqExpr{
												pos: position{line: 2767, col: 51, offset: 93927},
												exprs: []any{
													&notExpr{
														pos: position{line: 2767, col: 51, offset: 93927},
														expr: &choiceExpr{
															pos: position{line: 2764, col: 27, offset: 93768},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 33, offset: 93774},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2764, col: 39, offset: 93780},
																	expr: &seqExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2764, col: 45, offset: 93786},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2764, col: 45, offset: 93786},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2764, col: 51, offset: 93792},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2767, col: 57, offset: 93933},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 2767, col: 57, offset: 93933},
																expr: &charClassMatcher{
																	pos:        position{line: 2767, col: 57, offset: 93933},
																	val:        "[^\\r\\n;{}]",
																	chars:      []rune{'\r', '\n', ';', '{', '}'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&seqExpr{
																pos: position{line: 2767, col: 71, offset: 93947},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2767, col: 71, offset: 93947},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2767, col: 75, offset: 93951},
																		expr: &charClassMatcher{
																			pos:        position{line: 2767, col: 75, offset: 93951},
																			val:        "[^}]",
																			chars:      []rune{'}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2767, col: 81, offset: 93957},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeCollection",
			pos:  position{line: 71, col: 1, offset: 2501},
			expr: &actionExpr{
				pos: position{line: 71, col: 24, offset: 2524},
				run: (*parser).callonAttributeCollection1,
				expr: &labeledExpr{
					pos:   position{line: 71, col: 24, offset: 2524},
					label: "attrsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 71, col: 31, offset: 2531},
						expr: &ruleRefExpr{
							pos:  position{line: 71, col: 31, offset: 2531},
							name: "attributeCollectionItem",
						},
					},
				},
			},
		},
		{
			name: "attributeCollectionItem",
			pos:  position{line: 74, col: 1, offset: 2618},
			expr: &actionExpr{
				pos: position{line: 74, col: 28, offset: 2645},
				run: (*parser).callonattributeCollectionItem1,
				expr: &seqExpr{
					pos: position{line: 74, col: 28, offset: 2645},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 74, col: 28, offset: 2645},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 31, offset: 2648},
							label: "itmI",
							expr: &choiceExpr{
								pos: position{line: 74, col: 37, offset: 2654},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 85, col: 16, offset: 2836},
										run: (*parser).callonattributeCollectionItem7,
										expr: &seqExpr{
											pos: position{line: 85, col: 16, offset: 2836},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 85, col: 16, offset: 2836},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 85, col: 20, offset: 2840},
													label: "idI",
													expr: &choiceExpr{
														pos: position{line: 92, col: 20, offset: 2982},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 78, col: 18, offset: 2744},
																run: (*parser).callonattributeCollectionItem12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 78, col: 18, offset: 2744},
																	expr: &charClassMatcher{
																		pos:        position{line: 78, col: 18, offset: 2744},
																		val:        "[^ \\t\\r\\n.#()[]{};]",
																		chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ';'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 92, col: 36, offset: 2998},
																run: (*parser).callonattributeCollectionItem15,
																expr: &actionExpr{
																	pos: position{line: 2774, col: 8, offset: 94166},
																	run: (*parser).callonattributeCollectionItem16,
																	expr: &choiceExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				expr: &anyMatcher{
																					line: 2774, col: 10, offset: 94168,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2774, col: 14, offset: 94172},
																				expr: &anyMatcher{
																					line: 2774, col: 15, offset: 94173,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 106, col: 19, offset: 3263},
										run: (*parser).callonattributeCollectionItem22,
										expr: &seqExpr{
											pos: position{line: 106, col: 19, offset: 3263},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 106, col: 19, offset: 3263},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 106, col: 23, offset: 3267},
													label: "nameI",
													expr: &choiceExpr{
														pos: position{line: 113, col: 23, offset: 3422},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 78, col: 18, offset: 2744},
																run: (*parser).callonattributeCollectionItem27,
																expr: &oneOrMoreExpr{
																	pos: position{line: 78, col: 18, offset: 2744},
																	expr: &charClassMatcher{
																		pos:        position{line: 78, col: 18, offset: 2744},
																		val:        "[^ \\t\\r\\n.#()[]{};]",
																		chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ';'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 113, col: 39, offset: 3438},
																run: (*parser).callonattributeCollectionItem30,
																expr: &actionExpr{
																	pos: position{line: 2774, col: 8, offset: 94166},
																	run: (*parser).callonattributeCollectionItem31,
																	expr: &choiceExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				expr: &anyMatcher{
																					line: 2774, col: 10, offset: 94168,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2774, col: 14, offset: 94172},
																				expr: &anyMatcher{
																					line: 2774, col: 15, offset: 94173,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 68, offset: 2685},
										name: "AttributeList",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 128, col: 1, offset: 3703},
			expr: &actionExpr{
				pos: position{line: 128, col: 18, offset: 3720},
				run: (*parser).callonAttributeList1,
				expr: &seqExpr{
					pos: position{line: 128, col: 18, offset: 3720},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2867, col: 14, offset: 97512},
							run: (*parser).callonAttributeList3,
							expr: &seqExpr{
								pos: position{line: 2867, col: 14, offset: 97512},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonAttributeList5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonAttributeList11,
									},
									&labeledExpr{
										pos:   position{line: 2867, col: 24, offset: 97522},
										label: "lParenI",
										expr: &actionExpr{
											pos: position{line: 2793, col: 12, offset: 94819},
											run: (*parser).callonAttributeList13,
											expr: &seqExpr{
												pos: position{line: 2793, col: 12, offset: 94819},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2793, col: 12, offset: 94819},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonAttributeList16,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2793, col: 21, offset: 94828},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2867, col: 40, offset: 97538},
										expr: &choiceExpr{
											pos: position{line: 2787, col: 20, offset: 94555},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2787, col: 31, offset: 94566},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															run: (*parser).callonAttributeList27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2785, col: 37, offset: 94524},
															expr: &litMatcher{
																pos:        position{line: 2785, col: 37, offset: 94524},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2785, col: 43, offset: 94530},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 28, offset: 3730},
							label: "attributesI",
							expr: &zeroOrOneExpr{
								pos: position{line: 128, col: 40, offset: 3742},
								expr: &ruleRefExpr{
									pos:  position{line: 128, col: 40, offset: 3742},
									name: "attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 52, offset: 3754},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 136, col: 21, offset: 3979},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2871, col: 12, offset: 97598},
										run: (*parser).callonAttributeList36,
										expr: &seqExpr{
											pos: position{line: 2871, col: 12, offset: 97598},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2871, col: 12, offset: 97598},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2871, col: 15, offset: 97601},
													expr: &seqExpr{
														pos: position{line: 2871, col: 16, offset: 97602},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2871, col: 16, offset: 97602},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2871, col: 20, offset: 97606},
																expr: &choiceExpr{
																	pos: position{line: 2787, col: 20, offset: 94555},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					run: (*parser).callonAttributeList47,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2785, col: 37, offset: 94524},
																					expr: &litMatcher{
																						pos:        position{line: 2785, col: 37, offset: 94524},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2785, col: 43, offset: 94530},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2871, col: 26, offset: 97612},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2794, col: 12, offset: 94880},
														run: (*parser).callonAttributeList52,
														expr: &seqExpr{
															pos: position{line: 2794, col: 12, offset: 94880},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2794, col: 12, offset: 94880},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonAttributeList55,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2794, col: 21, offset: 94889},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonAttributeList62,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 136, col: 31, offset: 3989},
										run: (*parser).callonAttributeList63,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonAttributeList64,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attributes",
			pos:  position{line: 140, col: 1, offset: 4043},
			expr: &actionExpr{
				pos: position{line: 140, col: 15, offset: 4057},
				run: (*parser).callonattributes1,
				expr: &seqExpr{
					pos: position{line: 140, col: 15, offset: 4057},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 140, col: 15, offset: 4057},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 140, col: 22, offset: 4064},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 140, col: 32, offset: 4074},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 140, col: 38, offset: 4080},
								expr: &seqExpr{
									pos: position{line: 140, col: 39, offset: 4081},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 140, col: 39, offset: 4081},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 140, col: 42, offset: 4084},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 140, col: 46, offset: 4088},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).callonattributes15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 140, col: 50, offset: 4092},
											name: "Attribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 148, col: 1, offset: 4355},
			expr: &choiceExpr{
				pos: position{line: 148, col: 14, offset: 4368},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 167, col: 19, offset: 4877},
						run: (*parser).callonAttribute2,
						expr: &seqExpr{
							pos: position{line: 167, col: 19, offset: 4877},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 167, col: 19, offset: 4877},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 167, col: 24, offset: 4882},
									expr: &seqExpr{
										pos: position{line: 167, col: 26, offset: 4884},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 167, col: 26, offset: 4884},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 167, col: 29, offset: 4887},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 148, col: 31, offset: 4385},
						name: "SimpleAttribute",
					},
				},
			},
		},
		{
			name: "SimpleAttribute",
			pos:  position{line: 175, col: 1, offset: 4978},
			expr: &actionExpr{
				pos: position{line: 175, col: 20, offset: 4997},
				run: (*parser).callonSimpleAttribute1,
				expr: &seqExpr{
					pos: position{line: 175, col: 20, offset: 4997},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 175, col: 20, offset: 4997},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 150, col: 18, offset: 4419},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 150, col: 18, offset: 4419},
										run: (*parser).callonSimpleAttribute5,
										expr: &seqExpr{
											pos: position{line: 150, col: 18, offset: 4419},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 150, col: 18, offset: 4419},
													expr: &seqExpr{
														pos: position{line: 150, col: 19, offset: 4420},
														exprs: []any{
															&notExpr{
																pos: position{line: 150, col: 19, offset: 4420},
																expr: &charClassMatcher{
																	pos:        position{line: 150, col: 20, offset: 4421},
																	val:        "[(),=]",
																	chars:      []rune{'(', ')', ',', '='},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&notExpr{
																pos: position{line: 2158, col: 26, offset: 73355},
																expr: &charClassMatcher{
																	pos:        position{line: 2134, col: 27, offset: 72263},
																	val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
																	chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
																	ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&anyMatcher{
																line: 2158, col: 101, offset: 73430,
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 150, col: 51, offset: 4452},
													expr: &seqExpr{
														pos: position{line: 150, col: 53, offset: 4454},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 150, col: 53, offset: 4454},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 150, col: 56, offset: 4457},
																val:        "[\\r\\n=,)]",
																chars:      []rune{'\r', '\n', '=', ',', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 152, col: 5, offset: 4505},
										run: (*parser).callonSimpleAttribute19,
										expr: &oneOrMoreExpr{
											pos: position{line: 152, col: 5, offset: 4505},
											expr: &seqExpr{
												pos: position{line: 152, col: 6, offset: 4506},
												exprs: []any{
													&notExpr{
														pos: position{line: 152, col: 6, offset: 4506},
														expr: &seqExpr{
															pos: position{line: 152, col: 8, offset: 4508},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 152, col: 8, offset: 4508},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 152, col: 11, offset: 4511},
																	val:        "[,=)]",
																	chars:      []rune{',', '=', ')'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 152, col: 18, offset: 4518},
														val:        "[^\\r\\t(),=]",
														chars:      []rune{'\r', '\t', '(', ')', ',', '='},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 175, col: 40, offset: 5017},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 175, col: 43, offset: 5020},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 48, offset: 5025},
								name: "simpleAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "simpleAttributeValue",
			pos:  position{line: 182, col: 1, offset: 5158},
			expr: &choiceExpr{
				pos: position{line: 182, col: 25, offset: 5182},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 182, col: 25, offset: 5182},
						run: (*parser).callonsimpleAttributeValue2,
						expr: &andExpr{
							pos: position{line: 182, col: 25, offset: 5182},
							expr: &charClassMatcher{
								pos:        position{line: 182, col: 26, offset: 5183},
								val:        "[,)]",
								chars:      []rune{',', ')'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&actionExpr{
						pos: position{line: 184, col: 5, offset: 5232},
						run: (*parser).callonsimpleAttributeValue5,
						expr: &seqExpr{
							pos: position{line: 184, col: 5, offset: 5232},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 184, col: 5, offset: 5232},
									label: "assignI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonsimpleAttributeValue8,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 184, col: 17, offset: 5244},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 184, col: 21, offset: 5248},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonsimpleAttributeValue19,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 184, col: 25, offset: 5252},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 30, offset: 5257},
										name: "AttributeValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 196, col: 1, offset: 5607},
			expr: &choiceExpr{
				pos: position{line: 196, col: 19, offset: 5625},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 196, col: 19, offset: 5625},
						name: "TypedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 41, offset: 5647},
						name: "ComponentCallAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 71, offset: 5677},
						name: "Expression",
					},
					&actionExpr{
						pos: position{line: 196, col: 84, offset: 5690},
						run: (*parser).callonAttributeValue5,
						expr: &actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).callonAttributeValue6,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypedAttributeValue",
			pos:  position{line: 216, col: 1, offset: 6205},
			expr: &actionExpr{
				pos: position{line: 216, col: 24, offset: 6228},
				run: (*parser).callonTypedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 216, col: 24, offset: 6228},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 216, col: 24, offset: 6228},
							label: "typeI",
							expr: &choiceExpr{
								pos: position{line: 230, col: 18, offset: 6693},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 230, col: 18, offset: 6693},
										run: (*parser).callonTypedAttributeValue5,
										expr: &litMatcher{
											pos:        position{line: 230, col: 18, offset: 6693},
											val:        "plain",
											ignoreCase: false,
											want:       "\"plain\"",
										},
									},
									&actionExpr{
										pos: position{line: 232, col: 5, offset: 6738},
										run: (*parser).callonTypedAttributeValue7,
										expr: &litMatcher{
											pos:        position{line: 232, col: 5, offset: 6738},
											val:        "css",
											ignoreCase: false,
											want:       "\"css\"",
										},
									},
									&actionExpr{
										pos: position{line: 234, col: 5, offset: 6779},
										run: (*parser).callonTypedAttributeValue9,
										expr: &litMatcher{
											pos:        position{line: 234, col: 5, offset: 6779},
											val:        "js",
											ignoreCase: false,
											want:       "\"js\"",
										},
									},
									&actionExpr{
										pos: position{line: 236, col: 5, offset: 6818},
										run: (*parser).callonTypedAttributeValue11,
										expr: &litMatcher{
											pos:        position{line: 236, col: 5, offset: 6818},
											val:        "url",
											ignoreCase: false,
											want:       "\"url\"",
										},
									},
									&actionExpr{
										pos: position{line: 238, col: 5, offset: 6859},
										run: (*parser).callonTypedAttributeValue13,
										expr: &litMatcher{
											pos:        position{line: 238, col: 5, offset: 6859},
											val:        "urlList",
											ignoreCase: false,
											want:       "\"urlList\"",
										},
									},
									&actionExpr{
										pos: position{line: 240, col: 5, offset: 6908},
										run: (*parser).callonTypedAttributeValue15,
										expr: &litMatcher{
											pos:        position{line: 240, col: 5, offset: 6908},
											val:        "resourceURL",
											ignoreCase: false,
											want:       "\"resourceURL\"",
										},
									},
									&actionExpr{
										pos: position{line: 242, col: 5, offset: 6965},
										run: (*parser).callonTypedAttributeValue17,
										expr: &litMatcher{
											pos:        position{line: 242, col: 5, offset: 6965},
											val:        "srcset",
											ignoreCase: false,
											want:       "\"srcset\"",
										},
									},
									&actionExpr{
										pos: position{line: 244, col: 5, offset: 7012},
										run: (*parser).callonTypedAttributeValue19,
										expr: &litMatcher{
											pos:        position{line: 244, col: 5, offset: 7012},
											val:        "unsafe",
											ignoreCase: false,
											want:       "\"unsafe\"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 216, col: 44, offset: 6248},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 216, col: 47, offset: 6251},
							label: "lParenI",
							expr: &actionExpr{
								pos: position{line: 2867, col: 14, offset: 97512},
								run: (*parser).callonTypedAttributeValue24,
								expr: &seqExpr{
									pos: position{line: 2867, col: 14, offset: 97512},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonTypedAttributeValue26,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2841, col: 18, offset: 96619},
											run: (*parser).callonTypedAttributeValue32,
										},
										&labeledExpr{
											pos:   position{line: 2867, col: 24, offset: 97522},
											label: "lParenI",
											expr: &actionExpr{
												pos: position{line: 2793, col: 12, offset: 94819},
												run: (*parser).callonTypedAttributeValue34,
												expr: &seqExpr{
													pos: position{line: 2793, col: 12, offset: 94819},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2793, col: 12, offset: 94819},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonTypedAttributeValue37,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2793, col: 21, offset: 94828},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2867, col: 40, offset: 97538},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).callonTypedAttributeValue48,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 216, col: 65, offset: 6269},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 70, offset: 6274},
								name: "typedAttributeValueValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 216, col: 95, offset: 6299},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 226, col: 27, offset: 6611},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2871, col: 12, offset: 97598},
										run: (*parser).callonTypedAttributeValue56,
										expr: &seqExpr{
											pos: position{line: 2871, col: 12, offset: 97598},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2871, col: 12, offset: 97598},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2871, col: 15, offset: 97601},
													expr: &seqExpr{
														pos: position{line: 2871, col: 16, offset: 97602},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2871, col: 16, offset: 97602},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2871, col: 20, offset: 97606},
																expr: &choiceExpr{
																	pos: position{line: 2787, col: 20, offset: 94555},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					run: (*parser).callonTypedAttributeValue67,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2785, col: 37, offset: 94524},
																					expr: &litMatcher{
																						pos:        position{line: 2785, col: 37, offset: 94524},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2785, col: 43, offset: 94530},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2871, col: 26, offset: 97612},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2794, col: 12, offset: 94880},
														run: (*parser).callonTypedAttributeValue72,
														expr: &seqExpr{
															pos: position{line: 2794, col: 12, offset: 94880},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2794, col: 12, offset: 94880},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonTypedAttributeValue75,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2794, col: 21, offset: 94889},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonTypedAttributeValue82,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 226, col: 37, offset: 6621},
										run: (*parser).callonTypedAttributeValue83,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonTypedAttributeValue84,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typedAttributeValueValue",
			pos:  position{line: 248, col: 1, offset: 7058},
			expr: &ruleRefExpr{
				pos:  position{line: 248, col: 29, offset: 7086},
				name: "Expression",
			},
		},
		{
			name: "ComponentCallAttributeValue",
			pos:  position{line: 254, col: 1, offset: 7139},
			expr: &actionExpr{
				pos: position{line: 254, col: 32, offset: 7170},
				run: (*parser).callonComponentCallAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 254, col: 32, offset: 7170},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 254, col: 32, offset: 7170},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&stateCodeExpr{
							pos: position{line: 2907, col: 16, offset: 98776},
							run: (*parser).callonComponentCallAttributeValue4,
						},
						&labeledExpr{
							pos:   position{line: 254, col: 48, offset: 7186},
							label: "headerI",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 56, offset: 7194},
								name: "ComponentCallHeader",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2914, col: 14, offset: 98875},
							run: (*parser).callonComponentCallAttributeValue7,
						},
						&labeledExpr{
							pos:   position{line: 254, col: 86, offset: 7224},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 254, col: 93, offset: 7231},
								expr: &ruleRefExpr{
									pos:  position{line: 254, col: 93, offset: 7231},
									name: "InterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 277, col: 1, offset: 7944},
			expr: &actionExpr{
				pos: position{line: 277, col: 9, offset: 7952},
				run: (*parser).callonType1,
				expr: &labeledExpr{
					pos:   position{line: 277, col: 9, offset: 7952},
					label: "typeI",
					expr: &ruleRefExpr{
						pos:  position{line: 277, col: 15, offset: 7958},
						name: "goType",
					},
				},
			},
		},
		{
			name: "Body",
			pos:  position{line: 321, col: 1, offset: 9149},
			expr: &choiceExpr{
				pos: position{line: 321, col: 9, offset: 9157},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 321, col: 9, offset: 9157},
						run: (*parser).callonBody2,
						expr: &seqExpr{
							pos: position{line: 321, col: 9, offset: 9157},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 321, col: 9, offset: 9157},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 321, col: 12, offset: 9160},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 321, col: 18, offset: 9166},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 323, col: 5, offset: 9199},
						run: (*parser).callonBody8,
						expr: &choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 335, col: 5, offset: 9609},
						run: (*parser).callonBody28,
						expr: &seqExpr{
							pos: position{line: 335, col: 5, offset: 9609},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 335, col: 5, offset: 9609},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 335, col: 8, offset: 9612},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonBody33,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 335, col: 19, offset: 9623},
									expr: &charClassMatcher{
										pos:        position{line: 335, col: 19, offset: 9623},
										val:        "[^\\r\\n;[{}]",
										chars:      []rune{'\r', '\n', ';', '[', '{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 335, col: 32, offset: 9636},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonBody42,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 335, col: 41, offset: 9645},
									expr: &charClassMatcher{
										pos:        position{line: 335, col: 42, offset: 9646},
										val:        "[[{]",
										chars:      []rune{'[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 335, col: 47, offset: 9651},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 53, offset: 9657},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 9781},
						run: (*parser).callonBody52,
						expr: &seqExpr{
							pos: position{line: 337, col: 5, offset: 9781},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 337, col: 5, offset: 9781},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 337, col: 8, offset: 9784},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonBody57,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2767, col: 35, offset: 93911},
									run: (*parser).callonBody63,
									expr: &seqExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2767, col: 35, offset: 93911},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2767, col: 38, offset: 93914},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2767, col: 50, offset: 93926},
													expr: &seqExpr{
														pos: position{line: 2767, col: 51, offset: 93927},
														exprs: []any{
															&notExpr{
																pos: position{line: 2767, col: 51, offset: 93927},
																expr: &choiceExpr{
																	pos: position{line: 2764, col: 27, offset: 93768},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									expr: &litMatcher{
																										pos:        position{line: 2762, col: 27, offset: 93686},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2762, col: 33, offset: 93692},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2761, col: 23, offset: 93657},
																							expr: &anyMatcher{
																								line: 2761, col: 24, offset: 93658,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 33, offset: 93774},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2764, col: 39, offset: 93780},
																			expr: &seqExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2764, col: 45, offset: 93786},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2764, col: 45, offset: 93786},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 51, offset: 93792},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2767, col: 57, offset: 93933},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2767, col: 57, offset: 93933},
																		expr: &charClassMatcher{
																			pos:        position{line: 2767, col: 57, offset: 93933},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2767, col: 71, offset: 93947},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2767, col: 71, offset: 93947},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2767, col: 75, offset: 93951},
																				expr: &charClassMatcher{
																					pos:        position{line: 2767, col: 75, offset: 93951},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2767, col: 81, offset: 93957},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 337, col: 30, offset: 9806},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalBody",
			pos:  position{line: 341, col: 1, offset: 9929},
			expr: &choiceExpr{
				pos: position{line: 341, col: 17, offset: 9945},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 341, col: 17, offset: 9945},
						run: (*parser).callonOptionalBody2,
						expr: &seqExpr{
							pos: position{line: 341, col: 17, offset: 9945},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 341, col: 17, offset: 9945},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 341, col: 20, offset: 9948},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 26, offset: 9954},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 343, col: 5, offset: 9987},
						run: (*parser).callonOptionalBody8,
						expr: &choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 345, col: 5, offset: 10017},
						run: (*parser).callonOptionalBody28,
						expr: &seqExpr{
							pos: position{line: 345, col: 5, offset: 10017},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 345, col: 5, offset: 10017},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 345, col: 8, offset: 10020},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonOptionalBody33,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 345, col: 19, offset: 10031},
									expr: &charClassMatcher{
										pos:        position{line: 345, col: 19, offset: 10031},
										val:        "[^\\r\\n;[{}]",
										chars:      []rune{'\r', '\n', ';', '[', '{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 345, col: 32, offset: 10044},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonOptionalBody42,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 345, col: 41, offset: 10053},
									expr: &charClassMatcher{
										pos:        position{line: 345, col: 42, offset: 10054},
										val:        "[[{]",
										chars:      []rune{'[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 345, col: 47, offset: 10059},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 345, col: 53, offset: 10065},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 347, col: 5, offset: 10189},
						run: (*parser).callonOptionalBody52,
						expr: &seqExpr{
							pos: position{line: 347, col: 5, offset: 10189},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 347, col: 5, offset: 10189},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 347, col: 8, offset: 10192},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonOptionalBody57,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2767, col: 35, offset: 93911},
									run: (*parser).callonOptionalBody63,
									expr: &seqExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2767, col: 35, offset: 93911},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2767, col: 38, offset: 93914},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2767, col: 50, offset: 93926},
													expr: &seqExpr{
														pos: position{line: 2767, col: 51, offset: 93927},
														exprs: []any{
															&notExpr{
																pos: position{line: 2767, col: 51, offset: 93927},
																expr: &choiceExpr{
																	pos: position{line: 2764, col: 27, offset: 93768},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									expr: &litMatcher{
																										pos:        position{line: 2762, col: 27, offset: 93686},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2762, col: 33, offset: 93692},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2761, col: 23, offset: 93657},
																							expr: &anyMatcher{
																								line: 2761, col: 24, offset: 93658,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 33, offset: 93774},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2764, col: 39, offset: 93780},
																			expr: &seqExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2764, col: 45, offset: 93786},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2764, col: 45, offset: 93786},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 51, offset: 93792},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2767, col: 57, offset: 93933},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2767, col: 57, offset: 93933},
																		expr: &charClassMatcher{
																			pos:        position{line: 2767, col: 57, offset: 93933},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2767, col: 71, offset: 93947},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2767, col: 71, offset: 93947},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2767, col: 75, offset: 93951},
																				expr: &charClassMatcher{
																					pos:        position{line: 2767, col: 75, offset: 93951},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2767, col: 81, offset: 93957},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 347, col: 30, offset: 10214},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "body",
			pos:  position{line: 351, col: 1, offset: 10349},
			expr: &choiceExpr{
				pos: position{line: 351, col: 9, offset: 10357},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 351, col: 9, offset: 10357},
						name: "Scope",
					},
					&ruleRefExpr{
						pos:  position{line: 351, col: 17, offset: 10365},
						name: "BracketText",
					},
				},
			},
		},
		{
			name: "GlobalScope",
			pos:  position{line: 357, col: 1, offset: 10558},
			expr: &actionExpr{
				pos: position{line: 357, col: 16, offset: 10573},
				run: (*parser).callonGlobalScope1,
				expr: &seqExpr{
					pos: position{line: 357, col: 16, offset: 10573},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2883, col: 15, offset: 97893},
							run: (*parser).callonGlobalScope3,
							expr: &seqExpr{
								pos: position{line: 2883, col: 15, offset: 97893},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonGlobalScope5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonGlobalScope11,
									},
									&labeledExpr{
										pos:   position{line: 2883, col: 25, offset: 97903},
										label: "lBraceI",
										expr: &actionExpr{
											pos: position{line: 2796, col: 12, offset: 94942},
											run: (*parser).callonGlobalScope13,
											expr: &seqExpr{
												pos: position{line: 2796, col: 12, offset: 94942},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2796, col: 12, offset: 94942},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonGlobalScope16,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2796, col: 21, offset: 94951},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2883, col: 41, offset: 97919},
										expr: &choiceExpr{
											pos: position{line: 2787, col: 20, offset: 94555},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2787, col: 31, offset: 94566},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															run: (*parser).callonGlobalScope27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2785, col: 37, offset: 94524},
															expr: &litMatcher{
																pos:        position{line: 2785, col: 37, offset: 94524},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2785, col: 43, offset: 94530},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 27, offset: 10584},
							label: "itmsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 357, col: 33, offset: 10590},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 33, offset: 10590},
									name: "globalScopeItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 50, offset: 10607},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2887, col: 13, offset: 97980},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2887, col: 13, offset: 97980},
										run: (*parser).callonGlobalScope36,
										expr: &seqExpr{
											pos: position{line: 2887, col: 13, offset: 97980},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2887, col: 13, offset: 97980},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).callonGlobalScope42,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2887, col: 17, offset: 97984},
													label: "rBraceI",
													expr: &actionExpr{
														pos: position{line: 2797, col: 12, offset: 95003},
														run: (*parser).callonGlobalScope47,
														expr: &seqExpr{
															pos: position{line: 2797, col: 12, offset: 95003},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2797, col: 12, offset: 95003},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonGlobalScope50,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2797, col: 21, offset: 95012},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonGlobalScope57,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2889, col: 5, offset: 98055},
										run: (*parser).callonGlobalScope58,
										expr: &labeledExpr{
											pos:   position{line: 2889, col: 5, offset: 98055},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonGlobalScope60,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "globalScopeItem",
			pos:  position{line: 365, col: 1, offset: 10776},
			expr: &actionExpr{
				pos: position{line: 365, col: 20, offset: 10795},
				run: (*parser).callonglobalScopeItem1,
				expr: &seqExpr{
					pos: position{line: 365, col: 20, offset: 10795},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 365, col: 20, offset: 10795},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonglobalScopeItem7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 365, col: 24, offset: 10799},
							label: "itmI",
							expr: &choiceExpr{
								pos: position{line: 365, col: 30, offset: 10805},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 397, col: 14, offset: 12110},
										run: (*parser).callonglobalScopeItem13,
										expr: &actionExpr{
											pos: position{line: 2797, col: 12, offset: 95003},
											run: (*parser).callonglobalScopeItem14,
											expr: &seqExpr{
												pos: position{line: 2797, col: 12, offset: 95003},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2797, col: 12, offset: 95003},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonglobalScopeItem17,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2797, col: 21, offset: 95012},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2219, col: 17, offset: 75348},
										run: (*parser).callonglobalScopeItem24,
										expr: &seqExpr{
											pos: position{line: 2219, col: 17, offset: 75348},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2219, col: 17, offset: 75348},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 2219, col: 26, offset: 75357},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2219, col: 29, offset: 75360},
													label: "specI",
													expr: &actionExpr{
														pos: position{line: 2272, col: 15, offset: 76919},
														run: (*parser).callonglobalScopeItem30,
														expr: &seqExpr{
															pos: position{line: 2272, col: 15, offset: 76919},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2272, col: 15, offset: 76919},
																	label: "aliasI",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 2272, col: 22, offset: 76926},
																		expr: &choiceExpr{
																			pos: position{line: 2280, col: 16, offset: 77139},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2280, col: 16, offset: 77139},
																					run: (*parser).callonglobalScopeItem35,
																					expr: &seqExpr{
																						pos: position{line: 2280, col: 16, offset: 77139},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 2280, col: 16, offset: 77139},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2280, col: 20, offset: 77143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2784, col: 37, offset: 94482},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2282, col: 5, offset: 77208},
																					run: (*parser).callonglobalScopeItem40,
																					expr: &seqExpr{
																						pos: position{line: 2282, col: 5, offset: 77208},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2282, col: 5, offset: 77208},
																								label: "identI",
																								expr: &actionExpr{
																									pos: position{line: 265, col: 10, offset: 7614},
																									run: (*parser).callonglobalScopeItem43,
																									expr: &labeledExpr{
																										pos:   position{line: 265, col: 10, offset: 7614},
																										label: "identI",
																										expr: &seqExpr{
																											pos: position{line: 1682, col: 17, offset: 55568},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 1665, col: 20, offset: 55323},
																													val:        "[_\\pL]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1682, col: 26, offset: 55577},
																													expr: &charClassMatcher{
																														pos:        position{line: 1665, col: 20, offset: 55323},
																														val:        "[_\\pL\\pNd]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2282, col: 18, offset: 77221},
																								expr: &charClassMatcher{
																									pos:        position{line: 2784, col: 37, offset: 94482},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2284, col: 5, offset: 77253},
																					run: (*parser).callonglobalScopeItem51,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2284, col: 5, offset: 77253},
																						expr: &seqExpr{
																							pos: position{line: 2284, col: 6, offset: 77254},
																							exprs: []any{
																								&notExpr{
																									pos: position{line: 2284, col: 6, offset: 77254},
																									expr: &seqExpr{
																										pos: position{line: 2284, col: 8, offset: 77256},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2284, col: 8, offset: 77256},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2284, col: 11, offset: 77259},
																												val:        "[`\"]",
																												chars:      []rune{'`', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 2284, col: 17, offset: 77265,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2272, col: 35, offset: 76939},
																	label: "pathI",
																	expr: &choiceExpr{
																		pos: position{line: 285, col: 17, offset: 8240},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 291, col: 20, offset: 8325},
																				run: (*parser).callonglobalScopeItem62,
																				expr: &seqExpr{
																					pos: position{line: 291, col: 20, offset: 8325},
																					exprs: []any{
																						&actionExpr{
																							pos: position{line: 1544, col: 19, offset: 50702},
																							run: (*parser).callonglobalScopeItem64,
																							expr: &seqExpr{
																								pos: position{line: 1544, col: 19, offset: 50702},
																								exprs: []any{
																									&actionExpr{
																										pos: position{line: 2774, col: 8, offset: 94166},
																										run: (*parser).callonglobalScopeItem66,
																										expr: &choiceExpr{
																											pos: position{line: 2774, col: 9, offset: 94167},
																											alternatives: []any{
																												&andExpr{
																													pos: position{line: 2774, col: 9, offset: 94167},
																													expr: &anyMatcher{
																														line: 2774, col: 10, offset: 94168,
																													},
																												},
																												&notExpr{
																													pos: position{line: 2774, col: 14, offset: 94172},
																													expr: &anyMatcher{
																														line: 2774, col: 15, offset: 94173,
																													},
																												},
																											},
																										},
																									},
																									&stateCodeExpr{
																										pos: position{line: 2841, col: 18, offset: 96619},
																										run: (*parser).callonglobalScopeItem72,
																									},
																									&labeledExpr{
																										pos:   position{line: 1544, col: 29, offset: 50712},
																										label: "startI",
																										expr: &actionExpr{
																											pos: position{line: 2774, col: 8, offset: 94166},
																											run: (*parser).callonglobalScopeItem74,
																											expr: &choiceExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2774, col: 9, offset: 94167},
																														expr: &anyMatcher{
																															line: 2774, col: 10, offset: 94168,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2774, col: 14, offset: 94172},
																														expr: &anyMatcher{
																															line: 2774, col: 15, offset: 94173,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1544, col: 40, offset: 50723},
																										val:        "`",
																										ignoreCase: false,
																										want:       "\"`\"",
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 291, col: 35, offset: 8340},
																							label: "contentsI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 291, col: 45, offset: 8350},
																								expr: &charClassMatcher{
																									pos:        position{line: 291, col: 45, offset: 8350},
																									val:        "[^`]",
																									chars:      []rune{'`'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 291, col: 51, offset: 8356},
																							label: "endI",
																							expr: &choiceExpr{
																								pos: position{line: 1545, col: 17, offset: 50782},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1545, col: 17, offset: 50782},
																										run: (*parser).callonglobalScopeItem86,
																										expr: &seqExpr{
																											pos: position{line: 1545, col: 17, offset: 50782},
																											exprs: []any{
																												&labeledExpr{
																													pos:   position{line: 1545, col: 17, offset: 50782},
																													label: "posI",
																													expr: &actionExpr{
																														pos: position{line: 2774, col: 8, offset: 94166},
																														run: (*parser).callonglobalScopeItem89,
																														expr: &choiceExpr{
																															pos: position{line: 2774, col: 9, offset: 94167},
																															alternatives: []any{
																																&andExpr{
																																	pos: position{line: 2774, col: 9, offset: 94167},
																																	expr: &anyMatcher{
																																		line: 2774, col: 10, offset: 94168,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2774, col: 14, offset: 94172},
																																	expr: &anyMatcher{
																																		line: 2774, col: 15, offset: 94173,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1545, col: 26, offset: 50791},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&stateCodeExpr{
																													pos: position{line: 2847, col: 13, offset: 96752},
																													run: (*parser).callonglobalScopeItem96,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1547, col: 5, offset: 50847},
																										run: (*parser).callonglobalScopeItem97,
																										expr: &labeledExpr{
																											pos:   position{line: 1547, col: 5, offset: 50847},
																											label: "posI",
																											expr: &actionExpr{
																												pos: position{line: 2774, col: 8, offset: 94166},
																												run: (*parser).callonglobalScopeItem99,
																												expr: &choiceExpr{
																													pos: position{line: 2774, col: 9, offset: 94167},
																													alternatives: []any{
																														&andExpr{
																															pos: position{line: 2774, col: 9, offset: 94167},
																															expr: &anyMatcher{
																																line: 2774, col: 10, offset: 94168,
																															},
																														},
																														&notExpr{
																															pos: position{line: 2774, col: 14, offset: 94172},
																															expr: &anyMatcher{
																																line: 2774, col: 15, offset: 94173,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 304, col: 28, offset: 8604},
																				run: (*parser).callonglobalScopeItem105,
																				expr: &seqExpr{
																					pos: position{line: 304, col: 28, offset: 8604},
																					exprs: []any{
																						&actionExpr{
																							pos: position{line: 1513, col: 27, offset: 49727},
																							run: (*parser).callonglobalScopeItem107,
																							expr: &seqExpr{
																								pos: position{line: 1513, col: 27, offset: 49727},
																								exprs: []any{
																									&actionExpr{
																										pos: position{line: 2774, col: 8, offset: 94166},
																										run: (*parser).callonglobalScopeItem109,
																										expr: &choiceExpr{
																											pos: position{line: 2774, col: 9, offset: 94167},
																											alternatives: []any{
																												&andExpr{
																													pos: position{line: 2774, col: 9, offset: 94167},
																													expr: &anyMatcher{
																														line: 2774, col: 10, offset: 94168,
																													},
																												},
																												&notExpr{
																													pos: position{line: 2774, col: 14, offset: 94172},
																													expr: &anyMatcher{
																														line: 2774, col: 15, offset: 94173,
																													},
																												},
																											},
																										},
																									},
																									&stateCodeExpr{
																										pos: position{line: 2841, col: 18, offset: 96619},
																										run: (*parser).callonglobalScopeItem115,
																									},
																									&labeledExpr{
																										pos:   position{line: 1513, col: 37, offset: 49737},
																										label: "startI",
																										expr: &actionExpr{
																											pos: position{line: 2774, col: 8, offset: 94166},
																											run: (*parser).callonglobalScopeItem117,
																											expr: &choiceExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2774, col: 9, offset: 94167},
																														expr: &anyMatcher{
																															line: 2774, col: 10, offset: 94168,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2774, col: 14, offset: 94172},
																														expr: &anyMatcher{
																															line: 2774, col: 15, offset: 94173,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1513, col: 48, offset: 49748},
																										val:        "\"",
																										ignoreCase: false,
																										want:       "\"\\\"\"",
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 304, col: 51, offset: 8627},
																							label: "contentsI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 304, col: 61, offset: 8637},
																								expr: &actionExpr{
																									pos: position{line: 313, col: 36, offset: 8912},
																									run: (*parser).callonglobalScopeItem126,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 313, col: 36, offset: 8912},
																										expr: &choiceExpr{
																											pos: position{line: 313, col: 37, offset: 8913},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 313, col: 37, offset: 8913},
																													val:        "\\\"",
																													ignoreCase: false,
																													want:       "\"\\\\\\\"\"",
																												},
																												&litMatcher{
																													pos:        position{line: 313, col: 44, offset: 8920},
																													val:        "\\\\",
																													ignoreCase: false,
																													want:       "\"\\\\\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 313, col: 51, offset: 8927},
																													val:        "[^\"]",
																													chars:      []rune{'"'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 304, col: 94, offset: 8670},
																							label: "endI",
																							expr: &choiceExpr{
																								pos: position{line: 1514, col: 25, offset: 49815},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1514, col: 25, offset: 49815},
																										run: (*parser).callonglobalScopeItem134,
																										expr: &seqExpr{
																											pos: position{line: 1514, col: 25, offset: 49815},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 1514, col: 25, offset: 49815},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 1514, col: 29, offset: 49819},
																													label: "endI",
																													expr: &actionExpr{
																														pos: position{line: 2774, col: 8, offset: 94166},
																														run: (*parser).callonglobalScopeItem138,
																														expr: &choiceExpr{
																															pos: position{line: 2774, col: 9, offset: 94167},
																															alternatives: []any{
																																&andExpr{
																																	pos: position{line: 2774, col: 9, offset: 94167},
																																	expr: &anyMatcher{
																																		line: 2774, col: 10, offset: 94168,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2774, col: 14, offset: 94172},
																																	expr: &anyMatcher{
																																		line: 2774, col: 15, offset: 94173,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&stateCodeExpr{
																													pos: position{line: 2847, col: 13, offset: 96752},
																													run: (*parser).callonglobalScopeItem144,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1516, col: 5, offset: 49880},
																										run: (*parser).callonglobalScopeItem145,
																										expr: &labeledExpr{
																											pos:   position{line: 1516, col: 5, offset: 49880},
																											label: "endI",
																											expr: &actionExpr{
																												pos: position{line: 2774, col: 8, offset: 94166},
																												run: (*parser).callonglobalScopeItem147,
																												expr: &choiceExpr{
																													pos: position{line: 2774, col: 9, offset: 94167},
																													alternatives: []any{
																														&andExpr{
																															pos: position{line: 2774, col: 9, offset: 94167},
																															expr: &anyMatcher{
																																line: 2774, col: 10, offset: 94168,
																															},
																														},
																														&notExpr{
																															pos: position{line: 2774, col: 14, offset: 94172},
																															expr: &anyMatcher{
																																line: 2774, col: 15, offset: 94173,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2764, col: 27, offset: 93768},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									expr: &litMatcher{
																										pos:        position{line: 2762, col: 27, offset: 93686},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2762, col: 33, offset: 93692},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2761, col: 23, offset: 93657},
																							expr: &anyMatcher{
																								line: 2761, col: 24, offset: 93658,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 33, offset: 93774},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2764, col: 39, offset: 93780},
																			expr: &seqExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2764, col: 45, offset: 93786},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2764, col: 45, offset: 93786},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 51, offset: 93792},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2764, col: 27, offset: 93768},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2764, col: 33, offset: 93774},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2764, col: 39, offset: 93780},
															expr: &seqExpr{
																pos: position{line: 2764, col: 41, offset: 93782},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2764, col: 45, offset: 93786},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2764, col: 45, offset: 93786},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 51, offset: 93792},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2226, col: 16, offset: 75526},
										run: (*parser).callonglobalScopeItem191,
										expr: &seqExpr{
											pos: position{line: 2226, col: 16, offset: 75526},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2226, col: 16, offset: 75526},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2226, col: 25, offset: 75535},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2226, col: 28, offset: 75538},
													label: "lParenI",
													expr: &actionExpr{
														pos: position{line: 2867, col: 14, offset: 97512},
														run: (*parser).callonglobalScopeItem197,
														expr: &seqExpr{
															pos: position{line: 2867, col: 14, offset: 97512},
															exprs: []any{
																&actionExpr{
																	pos: position{line: 2774, col: 8, offset: 94166},
																	run: (*parser).callonglobalScopeItem199,
																	expr: &choiceExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				expr: &anyMatcher{
																					line: 2774, col: 10, offset: 94168,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2774, col: 14, offset: 94172},
																				expr: &anyMatcher{
																					line: 2774, col: 15, offset: 94173,
																				},
																			},
																		},
																	},
																},
																&stateCodeExpr{
																	pos: position{line: 2841, col: 18, offset: 96619},
																	run: (*parser).callonglobalScopeItem205,
																},
																&labeledExpr{
																	pos:   position{line: 2867, col: 24, offset: 97522},
																	label: "lParenI",
																	expr: &actionExpr{
																		pos: position{line: 2793, col: 12, offset: 94819},
																		run: (*parser).callonglobalScopeItem207,
																		expr: &seqExpr{
																			pos: position{line: 2793, col: 12, offset: 94819},
																			exprs: []any{
																				&labeledExpr{
																					pos:   position{line: 2793, col: 12, offset: 94819},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 2774, col: 8, offset: 94166},
																						run: (*parser).callonglobalScopeItem210,
																						expr: &choiceExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							alternatives: []any{
																								&andExpr{
																									pos: position{line: 2774, col: 9, offset: 94167},
																									expr: &anyMatcher{
																										line: 2774, col: 10, offset: 94168,
																									},
																								},
																								&notExpr{
																									pos: position{line: 2774, col: 14, offset: 94172},
																									expr: &anyMatcher{
																										line: 2774, col: 15, offset: 94173,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2793, col: 21, offset: 94828},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2867, col: 40, offset: 97538},
																	expr: &choiceExpr{
																		pos: position{line: 2787, col: 20, offset: 94555},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2787, col: 31, offset: 94566},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2787, col: 31, offset: 94566},
																						run: (*parser).callonglobalScopeItem221,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2785, col: 37, offset: 94524},
																						expr: &litMatcher{
																							pos:        position{line: 2785, col: 37, offset: 94524},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2785, col: 43, offset: 94530},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2226, col: 46, offset: 75556},
													label: "itmsI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2226, col: 52, offset: 75562},
														expr: &actionExpr{
															pos: position{line: 2268, col: 20, offset: 76828},
															run: (*parser).callonglobalScopeItem227,
															expr: &seqExpr{
																pos: position{line: 2268, col: 20, offset: 76828},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2268, col: 20, offset: 76828},
																		expr: &choiceExpr{
																			pos: position{line: 2787, col: 20, offset: 94555},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							run: (*parser).callonglobalScopeItem233,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2785, col: 37, offset: 94524},
																							expr: &litMatcher{
																								pos:        position{line: 2785, col: 37, offset: 94524},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2785, col: 43, offset: 94530},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2268, col: 24, offset: 76832},
																		label: "itmI",
																		expr: &choiceExpr{
																			pos: position{line: 2268, col: 30, offset: 76838},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 492, col: 15, offset: 15700},
																					run: (*parser).callonglobalScopeItem239,
																					expr: &seqExpr{
																						pos: position{line: 492, col: 15, offset: 15700},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 492, col: 15, offset: 15700},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 492, col: 20, offset: 15705},
																								expr: &litMatcher{
																									pos:        position{line: 492, col: 21, offset: 15706},
																									val:        "-",
																									ignoreCase: false,
																									want:       "\"-\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 492, col: 25, offset: 15710},
																								label: "textI",
																								expr: &seqExpr{
																									pos: position{line: 492, col: 32, offset: 15717},
																									exprs: []any{
																										&notExpr{
																											pos: position{line: 492, col: 32, offset: 15717},
																											expr: &seqExpr{
																												pos: position{line: 2762, col: 23, offset: 93682},
																												exprs: []any{
																													&zeroOrMoreExpr{
																														pos: position{line: 2762, col: 23, offset: 93682},
																														expr: &charClassMatcher{
																															pos:        position{line: 2784, col: 37, offset: 94482},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2762, col: 27, offset: 93686},
																														alternatives: []any{
																															&seqExpr{
																																pos: position{line: 2762, col: 27, offset: 93686},
																																exprs: []any{
																																	&zeroOrOneExpr{
																																		pos: position{line: 2762, col: 27, offset: 93686},
																																		expr: &litMatcher{
																																			pos:        position{line: 2762, col: 27, offset: 93686},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2762, col: 33, offset: 93692},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2761, col: 23, offset: 93657},
																																expr: &anyMatcher{
																																	line: 2761, col: 24, offset: 93658,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&anyMatcher{
																											line: 492, col: 37, offset: 15722,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2762, col: 23, offset: 93682},
																								expr: &charClassMatcher{
																									pos:        position{line: 2784, col: 37, offset: 94482},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										exprs: []any{
																											&zeroOrOneExpr{
																												pos: position{line: 2762, col: 27, offset: 93686},
																												expr: &litMatcher{
																													pos:        position{line: 2762, col: 27, offset: 93686},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2762, col: 33, offset: 93692},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2761, col: 23, offset: 93657},
																										expr: &anyMatcher{
																											line: 2761, col: 24, offset: 93658,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2272, col: 15, offset: 76919},
																					run: (*parser).callonglobalScopeItem267,
																					expr: &seqExpr{
																						pos: position{line: 2272, col: 15, offset: 76919},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2272, col: 15, offset: 76919},
																								label: "aliasI",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 2272, col: 22, offset: 76926},
																									expr: &choiceExpr{
																										pos: position{line: 2280, col: 16, offset: 77139},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 2280, col: 16, offset: 77139},
																												run: (*parser).callonglobalScopeItem272,
																												expr: &seqExpr{
																													pos: position{line: 2280, col: 16, offset: 77139},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 2280, col: 16, offset: 77139},
																															val:        ".",
																															ignoreCase: false,
																															want:       "\".\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2280, col: 20, offset: 77143},
																															expr: &charClassMatcher{
																																pos:        position{line: 2784, col: 37, offset: 94482},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2282, col: 5, offset: 77208},
																												run: (*parser).callonglobalScopeItem277,
																												expr: &seqExpr{
																													pos: position{line: 2282, col: 5, offset: 77208},
																													exprs: []any{
																														&labeledExpr{
																															pos:   position{line: 2282, col: 5, offset: 77208},
																															label: "identI",
																															expr: &actionExpr{
																																pos: position{line: 265, col: 10, offset: 7614},
																																run: (*parser).callonglobalScopeItem280,
																																expr: &labeledExpr{
																																	pos:   position{line: 265, col: 10, offset: 7614},
																																	label: "identI",
																																	expr: &seqExpr{
																																		pos: position{line: 1682, col: 17, offset: 55568},
																																		exprs: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 1665, col: 20, offset: 55323},
																																				val:        "[_\\pL]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1682, col: 26, offset: 55577},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1665, col: 20, offset: 55323},
																																					val:        "[_\\pL\\pNd]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2282, col: 18, offset: 77221},
																															expr: &charClassMatcher{
																																pos:        position{line: 2784, col: 37, offset: 94482},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2284, col: 5, offset: 77253},
																												run: (*parser).callonglobalScopeItem288,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2284, col: 5, offset: 77253},
																													expr: &seqExpr{
																														pos: position{line: 2284, col: 6, offset: 77254},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 2284, col: 6, offset: 77254},
																																expr: &seqExpr{
																																	pos: position{line: 2284, col: 8, offset: 77256},
																																	exprs: []any{
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2284, col: 8, offset: 77256},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2784, col: 37, offset: 94482},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2284, col: 11, offset: 77259},
																																			val:        "[`\"]",
																																			chars:      []rune{'`', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&anyMatcher{
																																line: 2284, col: 17, offset: 77265,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2272, col: 35, offset: 76939},
																								label: "pathI",
																								expr: &choiceExpr{
																									pos: position{line: 285, col: 17, offset: 8240},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 291, col: 20, offset: 8325},
																											run: (*parser).callonglobalScopeItem299,
																											expr: &seqExpr{
																												pos: position{line: 291, col: 20, offset: 8325},
																												exprs: []any{
																													&actionExpr{
																														pos: position{line: 1544, col: 19, offset: 50702},
																														run: (*parser).callonglobalScopeItem301,
																														expr: &seqExpr{
																															pos: position{line: 1544, col: 19, offset: 50702},
																															exprs: []any{
																																&actionExpr{
																																	pos: position{line: 2774, col: 8, offset: 94166},
																																	run: (*parser).callonglobalScopeItem303,
																																	expr: &choiceExpr{
																																		pos: position{line: 2774, col: 9, offset: 94167},
																																		alternatives: []any{
																																			&andExpr{
																																				pos: position{line: 2774, col: 9, offset: 94167},
																																				expr: &anyMatcher{
																																					line: 2774, col: 10, offset: 94168,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2774, col: 14, offset: 94172},
																																				expr: &anyMatcher{
																																					line: 2774, col: 15, offset: 94173,
																																				},
																																			},
																																		},
																																	},
																																},
																																&stateCodeExpr{
																																	pos: position{line: 2841, col: 18, offset: 96619},
																																	run: (*parser).callonglobalScopeItem309,
																																},
																																&labeledExpr{
																																	pos:   position{line: 1544, col: 29, offset: 50712},
																																	label: "startI",
																																	expr: &actionExpr{
																																		pos: position{line: 2774, col: 8, offset: 94166},
																																		run: (*parser).callonglobalScopeItem311,
																																		expr: &choiceExpr{
																																			pos: position{line: 2774, col: 9, offset: 94167},
																																			alternatives: []any{
																																				&andExpr{
																																					pos: position{line: 2774, col: 9, offset: 94167},
																																					expr: &anyMatcher{
																																						line: 2774, col: 10, offset: 94168,
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2774, col: 14, offset: 94172},
																																					expr: &anyMatcher{
																																						line: 2774, col: 15, offset: 94173,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 1544, col: 40, offset: 50723},
																																	val:        "`",
																																	ignoreCase: false,
																																	want:       "\"`\"",
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 291, col: 35, offset: 8340},
																														label: "contentsI",
																														expr: &zeroOrMoreExpr{
																															pos: position{line: 291, col: 45, offset: 8350},
																															expr: &charClassMatcher{
																																pos:        position{line: 291, col: 45, offset: 8350},
																																val:        "[^`]",
																																chars:      []rune{'`'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 291, col: 51, offset: 8356},
																														label: "endI",
																														expr: &choiceExpr{
																															pos: position{line: 1545, col: 17, offset: 50782},
																															alternatives: []any{
																																&actionExpr{
																																	pos: position{line: 1545, col: 17, offset: 50782},
																																	run: (*parser).callonglobalScopeItem323,
																																	expr: &seqExpr{
																																		pos: position{line: 1545, col: 17, offset: 50782},
																																		exprs: []any{
																																			&labeledExpr{
																																				pos:   position{line: 1545, col: 17, offset: 50782},
																																				label: "posI",
																																				expr: &actionExpr{
																																					pos: position{line: 2774, col: 8, offset: 94166},
																																					run: (*parser).callonglobalScopeItem326,
																																					expr: &choiceExpr{
																																						pos: position{line: 2774, col: 9, offset: 94167},
																																						alternatives: []any{
																																							&andExpr{
																																								pos: position{line: 2774, col: 9, offset: 94167},
																																								expr: &anyMatcher{
																																									line: 2774, col: 10, offset: 94168,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2774, col: 14, offset: 94172},
																																								expr: &anyMatcher{
																																									line: 2774, col: 15, offset: 94173,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1545, col: 26, offset: 50791},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&stateCodeExpr{
																																				pos: position{line: 2847, col: 13, offset: 96752},
																																				run: (*parser).callonglobalScopeItem333,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1547, col: 5, offset: 50847},
																																	run: (*parser).callonglobalScopeItem334,
																																	expr: &labeledExpr{
																																		pos:   position{line: 1547, col: 5, offset: 50847},
																																		label: "posI",
																																		expr: &actionExpr{
																																			pos: position{line: 2774, col: 8, offset: 94166},
																																			run: (*parser).callonglobalScopeItem336,
																																			expr: &choiceExpr{
																																				pos: position{line: 2774, col: 9, offset: 94167},
																																				alternatives: []any{
																																					&andExpr{
																																						pos: position{line: 2774, col: 9, offset: 94167},
																																						expr: &anyMatcher{
																																							line: 2774, col: 10, offset: 94168,
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2774, col: 14, offset: 94172},
																																						expr: &anyMatcher{
																																							line: 2774, col: 15, offset: 94173,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 304, col: 28, offset: 8604},
																											run: (*parser).callonglobalScopeItem342,
																											expr: &seqExpr{
																												pos: position{line: 304, col: 28, offset: 8604},
																												exprs: []any{
																													&actionExpr{
																														pos: position{line: 1513, col: 27, offset: 49727},
																														run: (*parser).callonglobalScopeItem344,
																														expr: &seqExpr{
																															pos: position{line: 1513, col: 27, offset: 49727},
																															exprs: []any{
																																&actionExpr{
																																	pos: position{line: 2774, col: 8, offset: 94166},
																																	run: (*parser).callonglobalScopeItem346,
																																	expr: &choiceExpr{
																																		pos: position{line: 2774, col: 9, offset: 94167},
																																		alternatives: []any{
																																			&andExpr{
																																				pos: position{line: 2774, col: 9, offset: 94167},
																																				expr: &anyMatcher{
																																					line: 2774, col: 10, offset: 94168,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2774, col: 14, offset: 94172},
																																				expr: &anyMatcher{
																																					line: 2774, col: 15, offset: 94173,
																																				},
																																			},
																																		},
																																	},
																																},
																																&stateCodeExpr{
																																	pos: position{line: 2841, col: 18, offset: 96619},
																																	run: (*parser).callonglobalScopeItem352,
																																},
																																&labeledExpr{
																																	pos:   position{line: 1513, col: 37, offset: 49737},
																																	label: "startI",
																																	expr: &actionExpr{
																																		pos: position{line: 2774, col: 8, offset: 94166},
																																		run: (*parser).callonglobalScopeItem354,
																																		expr: &choiceExpr{
																																			pos: position{line: 2774, col: 9, offset: 94167},
																																			alternatives: []any{
																																				&andExpr{
																																					pos: position{line: 2774, col: 9, offset: 94167},
																																					expr: &anyMatcher{
																																						line: 2774, col: 10, offset: 94168,
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2774, col: 14, offset: 94172},
																																					expr: &anyMatcher{
																																						line: 2774, col: 15, offset: 94173,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 1513, col: 48, offset: 49748},
																																	val:        "\"",
																																	ignoreCase: false,
																																	want:       "\"\\\"\"",
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 304, col: 51, offset: 8627},
																														label: "contentsI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 304, col: 61, offset: 8637},
																															expr: &actionExpr{
																																pos: position{line: 313, col: 36, offset: 8912},
																																run: (*parser).callonglobalScopeItem363,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 313, col: 36, offset: 8912},
																																	expr: &choiceExpr{
																																		pos: position{line: 313, col: 37, offset: 8913},
																																		alternatives: []any{
																																			&litMatcher{
																																				pos:        position{line: 313, col: 37, offset: 8913},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 313, col: 44, offset: 8920},
																																				val:        "\\\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 313, col: 51, offset: 8927},
																																				val:        "[^\"]",
																																				chars:      []rune{'"'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 304, col: 94, offset: 8670},
																														label: "endI",
																														expr: &choiceExpr{
																															pos: position{line: 1514, col: 25, offset: 49815},
																															alternatives: []any{
																																&actionExpr{
																																	pos: position{line: 1514, col: 25, offset: 49815},
																																	run: (*parser).callonglobalScopeItem371,
																																	expr: &seqExpr{
																																		pos: position{line: 1514, col: 25, offset: 49815},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1514, col: 25, offset: 49815},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1514, col: 29, offset: 49819},
																																				label: "endI",
																																				expr: &actionExpr{
																																					pos: position{line: 2774, col: 8, offset: 94166},
																																					run: (*parser).callonglobalScopeItem375,
																																					expr: &choiceExpr{
																																						pos: position{line: 2774, col: 9, offset: 94167},
																																						alternatives: []any{
																																							&andExpr{
																																								pos: position{line: 2774, col: 9, offset: 94167},
																																								expr: &anyMatcher{
																																									line: 2774, col: 10, offset: 94168,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2774, col: 14, offset: 94172},
																																								expr: &anyMatcher{
																																									line: 2774, col: 15, offset: 94173,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&stateCodeExpr{
																																				pos: position{line: 2847, col: 13, offset: 96752},
																																				run: (*parser).callonglobalScopeItem381,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1516, col: 5, offset: 49880},
																																	run: (*parser).callonglobalScopeItem382,
																																	expr: &labeledExpr{
																																		pos:   position{line: 1516, col: 5, offset: 49880},
																																		label: "endI",
																																		expr: &actionExpr{
																																			pos: position{line: 2774, col: 8, offset: 94166},
																																			run: (*parser).callonglobalScopeItem384,
																																			expr: &choiceExpr{
																																				pos: position{line: 2774, col: 9, offset: 94167},
																																				alternatives: []any{
																																					&andExpr{
																																						pos: position{line: 2774, col: 9, offset: 94167},
																																						expr: &anyMatcher{
																																							line: 2774, col: 10, offset: 94168,
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2774, col: 14, offset: 94172},
																																						expr: &anyMatcher{
																																							line: 2774, col: 15, offset: 94173,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2764, col: 27, offset: 93768},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2762, col: 23, offset: 93682},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2762, col: 23, offset: 93682},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2762, col: 27, offset: 93686},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2762, col: 27, offset: 93686},
																														exprs: []any{
																															&zeroOrOneExpr{
																																pos: position{line: 2762, col: 27, offset: 93686},
																																expr: &litMatcher{
																																	pos:        position{line: 2762, col: 27, offset: 93686},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2762, col: 33, offset: 93692},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2761, col: 23, offset: 93657},
																														expr: &anyMatcher{
																															line: 2761, col: 24, offset: 93658,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2764, col: 33, offset: 93774},
																										val:        ";",
																										ignoreCase: false,
																										want:       "\";\"",
																									},
																									&andExpr{
																										pos: position{line: 2764, col: 39, offset: 93780},
																										expr: &seqExpr{
																											pos: position{line: 2764, col: 41, offset: 93782},
																											exprs: []any{
																												&zeroOrMoreExpr{
																													pos: position{line: 2764, col: 41, offset: 93782},
																													expr: &charClassMatcher{
																														pos:        position{line: 2784, col: 37, offset: 94482},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2764, col: 45, offset: 93786},
																													alternatives: []any{
																														&litMatcher{
																															pos:        position{line: 2764, col: 45, offset: 93786},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2764, col: 51, offset: 93792},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2288, col: 18, offset: 77358},
																					run: (*parser).callonglobalScopeItem409,
																					expr: &seqExpr{
																						pos: position{line: 2288, col: 18, offset: 77358},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2288, col: 18, offset: 77358},
																								label: "lineI",
																								expr: &actionExpr{
																									pos: position{line: 2767, col: 35, offset: 93911},
																									run: (*parser).callonglobalScopeItem412,
																									expr: &seqExpr{
																										pos: position{line: 2767, col: 35, offset: 93911},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2767, col: 35, offset: 93911},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 2767, col: 38, offset: 93914},
																												label: "unexpectedI",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2767, col: 50, offset: 93926},
																													expr: &seqExpr{
																														pos: position{line: 2767, col: 51, offset: 93927},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 2767, col: 51, offset: 93927},
																																expr: &choiceExpr{
																																	pos: position{line: 2764, col: 27, offset: 93768},
																																	alternatives: []any{
																																		&seqExpr{
																																			pos: position{line: 2762, col: 23, offset: 93682},
																																			exprs: []any{
																																				&zeroOrMoreExpr{
																																					pos: position{line: 2762, col: 23, offset: 93682},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2784, col: 37, offset: 94482},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2762, col: 27, offset: 93686},
																																					alternatives: []any{
																																						&seqExpr{
																																							pos: position{line: 2762, col: 27, offset: 93686},
																																							exprs: []any{
																																								&zeroOrOneExpr{
																																									pos: position{line: 2762, col: 27, offset: 93686},
																																									expr: &litMatcher{
																																										pos:        position{line: 2762, col: 27, offset: 93686},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2762, col: 33, offset: 93692},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2761, col: 23, offset: 93657},
																																							expr: &anyMatcher{
																																								line: 2761, col: 24, offset: 93658,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2764, col: 33, offset: 93774},
																																			val:        ";",
																																			ignoreCase: false,
																																			want:       "\";\"",
																																		},
																																		&andExpr{
																																			pos: position{line: 2764, col: 39, offset: 93780},
																																			expr: &seqExpr{
																																				pos: position{line: 2764, col: 41, offset: 93782},
																																				exprs: []any{
																																					&zeroOrMoreExpr{
																																						pos: position{line: 2764, col: 41, offset: 93782},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2784, col: 37, offset: 94482},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 2764, col: 45, offset: 93786},
																																						alternatives: []any{
																																							&litMatcher{
																																								pos:        position{line: 2764, col: 45, offset: 93786},
																																								val:        "}",
																																								ignoreCase: false,
																																								want:       "\"}\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 2764, col: 51, offset: 93792},
																																								val:        "//",
																																								ignoreCase: false,
																																								want:       "\"//\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2767, col: 57, offset: 93933},
																																alternatives: []any{
																																	&oneOrMoreExpr{
																																		pos: position{line: 2767, col: 57, offset: 93933},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2767, col: 57, offset: 93933},
																																			val:        "[^\\r\\n;{}]",
																																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																	&seqExpr{
																																		pos: position{line: 2767, col: 71, offset: 93947},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 2767, col: 71, offset: 93947},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 2767, col: 75, offset: 93951},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2767, col: 75, offset: 93951},
																																					val:        "[^}]",
																																					chars:      []rune{'}'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2767, col: 81, offset: 93957},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2764, col: 27, offset: 93768},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2762, col: 23, offset: 93682},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2762, col: 23, offset: 93682},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2762, col: 27, offset: 93686},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2762, col: 27, offset: 93686},
																														exprs: []any{
																															&zeroOrOneExpr{
																																pos: position{line: 2762, col: 27, offset: 93686},
																																expr: &litMatcher{
																																	pos:        position{line: 2762, col: 27, offset: 93686},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2762, col: 33, offset: 93692},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2761, col: 23, offset: 93657},
																														expr: &anyMatcher{
																															line: 2761, col: 24, offset: 93658,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2764, col: 33, offset: 93774},
																										val:        ";",
																										ignoreCase: false,
																										want:       "\";\"",
																									},
																									&andExpr{
																										pos: position{line: 2764, col: 39, offset: 93780},
																										expr: &seqExpr{
																											pos: position{line: 2764, col: 41, offset: 93782},
																											exprs: []any{
																												&zeroOrMoreExpr{
																													pos: position{line: 2764, col: 41, offset: 93782},
																													expr: &charClassMatcher{
																														pos:        position{line: 2784, col: 37, offset: 94482},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2764, col: 45, offset: 93786},
																													alternatives: []any{
																														&litMatcher{
																															pos:        position{line: 2764, col: 45, offset: 93786},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2764, col: 51, offset: 93792},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2226, col: 69, offset: 75579},
													label: "rParenI",
													expr: &choiceExpr{
														pos: position{line: 2235, col: 19, offset: 75826},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2235, col: 19, offset: 75826},
																run: (*parser).callonglobalScopeItem468,
																expr: &seqExpr{
																	pos: position{line: 2235, col: 19, offset: 75826},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2235, col: 19, offset: 75826},
																			expr: &choiceExpr{
																				pos: position{line: 2787, col: 20, offset: 94555},
																				alternatives: []any{
																					&charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&seqExpr{
																						pos: position{line: 2787, col: 31, offset: 94566},
																						exprs: []any{
																							&andCodeExpr{
																								pos: position{line: 2787, col: 31, offset: 94566},
																								run: (*parser).callonglobalScopeItem474,
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2785, col: 37, offset: 94524},
																								expr: &litMatcher{
																									pos:        position{line: 2785, col: 37, offset: 94524},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2785, col: 43, offset: 94530},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 2235, col: 23, offset: 75830},
																			label: "rParenI",
																			expr: &actionExpr{
																				pos: position{line: 2794, col: 12, offset: 94880},
																				run: (*parser).callonglobalScopeItem479,
																				expr: &seqExpr{
																					pos: position{line: 2794, col: 12, offset: 94880},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 2794, col: 12, offset: 94880},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 2774, col: 8, offset: 94166},
																								run: (*parser).callonglobalScopeItem482,
																								expr: &choiceExpr{
																									pos: position{line: 2774, col: 9, offset: 94167},
																									alternatives: []any{
																										&andExpr{
																											pos: position{line: 2774, col: 9, offset: 94167},
																											expr: &anyMatcher{
																												line: 2774, col: 10, offset: 94168,
																											},
																										},
																										&notExpr{
																											pos: position{line: 2774, col: 14, offset: 94172},
																											expr: &anyMatcher{
																												line: 2774, col: 15, offset: 94173,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2794, col: 21, offset: 94889},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2237, col: 5, offset: 75876},
																run: (*parser).callonglobalScopeItem489,
																expr: &actionExpr{
																	pos: position{line: 2774, col: 8, offset: 94166},
																	run: (*parser).callonglobalScopeItem490,
																	expr: &choiceExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				expr: &anyMatcher{
																					line: 2774, col: 10, offset: 94168,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2774, col: 14, offset: 94172},
																				expr: &anyMatcher{
																					line: 2774, col: 15, offset: 94173,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2247, col: 14, offset: 76125},
										run: (*parser).callonglobalScopeItem496,
										expr: &seqExpr{
											pos: position{line: 2247, col: 14, offset: 76125},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2247, col: 14, offset: 76125},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2247, col: 23, offset: 76134},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2247, col: 26, offset: 76137},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonglobalScopeItem502,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2247, col: 37, offset: 76148},
													label: "badI",
													expr: &actionExpr{
														pos: position{line: 2767, col: 35, offset: 93911},
														run: (*parser).callonglobalScopeItem509,
														expr: &seqExpr{
															pos: position{line: 2767, col: 35, offset: 93911},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2767, col: 35, offset: 93911},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2767, col: 38, offset: 93914},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2767, col: 50, offset: 93926},
																		expr: &seqExpr{
																			pos: position{line: 2767, col: 51, offset: 93927},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2767, col: 51, offset: 93927},
																					expr: &choiceExpr{
																						pos: position{line: 2764, col: 27, offset: 93768},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 23, offset: 93682},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2762, col: 23, offset: 93682},
																										expr: &charClassMatcher{
																											pos:        position{line: 2784, col: 37, offset: 94482},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2762, col: 27, offset: 93686},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2762, col: 27, offset: 93686},
																														expr: &litMatcher{
																															pos:        position{line: 2762, col: 27, offset: 93686},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2762, col: 33, offset: 93692},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2761, col: 23, offset: 93657},
																												expr: &anyMatcher{
																													line: 2761, col: 24, offset: 93658,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 33, offset: 93774},
																								val:        ";",
																								ignoreCase: false,
																								want:       "\";\"",
																							},
																							&andExpr{
																								pos: position{line: 2764, col: 39, offset: 93780},
																								expr: &seqExpr{
																									pos: position{line: 2764, col: 41, offset: 93782},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2764, col: 41, offset: 93782},
																											expr: &charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2764, col: 45, offset: 93786},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2764, col: 45, offset: 93786},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2764, col: 51, offset: 93792},
																													val:        "//",
																													ignoreCase: false,
																													want:       "\"//\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2767, col: 57, offset: 93933},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2767, col: 57, offset: 93933},
																							expr: &charClassMatcher{
																								pos:        position{line: 2767, col: 57, offset: 93933},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2767, col: 71, offset: 93947},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2767, col: 71, offset: 93947},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2767, col: 75, offset: 93951},
																									expr: &charClassMatcher{
																										pos:        position{line: 2767, col: 75, offset: 93951},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2767, col: 81, offset: 93957},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2247, col: 53, offset: 76164},
													label: "endI",
													expr: &choiceExpr{
														pos: position{line: 2764, col: 27, offset: 93768},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 23, offset: 93682},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						expr: &litMatcher{
																							pos:        position{line: 2762, col: 27, offset: 93686},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2762, col: 33, offset: 93692},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2761, col: 23, offset: 93657},
																				expr: &anyMatcher{
																					line: 2761, col: 24, offset: 93658,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2764, col: 33, offset: 93774},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2764, col: 39, offset: 93780},
																expr: &seqExpr{
																	pos: position{line: 2764, col: 41, offset: 93782},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2764, col: 45, offset: 93786},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2764, col: 45, offset: 93786},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2764, col: 51, offset: 93792},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 365, col: 51, offset: 10826},
										name: "State",
									},
									&ruleRefExpr{
										pos:  position{line: 365, col: 59, offset: 10834},
										name: "Component",
									},
									&ruleRefExpr{
										pos:  position{line: 365, col: 71, offset: 10846},
										name: "GlobalCode",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 369, col: 1, offset: 10884},
			expr: &actionExpr{
				pos: position{line: 369, col: 10, offset: 10893},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 369, col: 10, offset: 10893},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2883, col: 15, offset: 97893},
							run: (*parser).callonScope3,
							expr: &seqExpr{
								pos: position{line: 2883, col: 15, offset: 97893},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonScope5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonScope11,
									},
									&labeledExpr{
										pos:   position{line: 2883, col: 25, offset: 97903},
										label: "lBraceI",
										expr: &actionExpr{
											pos: position{line: 2796, col: 12, offset: 94942},
											run: (*parser).callonScope13,
											expr: &seqExpr{
												pos: position{line: 2796, col: 12, offset: 94942},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2796, col: 12, offset: 94942},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonScope16,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2796, col: 21, offset: 94951},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2883, col: 41, offset: 97919},
										expr: &choiceExpr{
											pos: position{line: 2787, col: 20, offset: 94555},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2787, col: 31, offset: 94566},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															run: (*parser).callonScope27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2785, col: 37, offset: 94524},
															expr: &litMatcher{
																pos:        position{line: 2785, col: 37, offset: 94524},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2785, col: 43, offset: 94530},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 21, offset: 10904},
							label: "itemsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 369, col: 28, offset: 10911},
								expr: &ruleRefExpr{
									pos:  position{line: 369, col: 28, offset: 10911},
									name: "ScopeItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 39, offset: 10922},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2887, col: 13, offset: 97980},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2887, col: 13, offset: 97980},
										run: (*parser).callonScope36,
										expr: &seqExpr{
											pos: position{line: 2887, col: 13, offset: 97980},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2887, col: 13, offset: 97980},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).callonScope42,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2887, col: 17, offset: 97984},
													label: "rBraceI",
													expr: &actionExpr{
														pos: position{line: 2797, col: 12, offset: 95003},
														run: (*parser).callonScope47,
														expr: &seqExpr{
															pos: position{line: 2797, col: 12, offset: 95003},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2797, col: 12, offset: 95003},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonScope50,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2797, col: 21, offset: 95012},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonScope57,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2889, col: 5, offset: 98055},
										run: (*parser).callonScope58,
										expr: &labeledExpr{
											pos:   position{line: 2889, col: 5, offset: 98055},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonScope60,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopeItem",
			pos:  position{line: 377, col: 1, offset: 11091},
			expr: &actionExpr{
				pos: position{line: 377, col: 14, offset: 11104},
				run: (*parser).callonScopeItem1,
				expr: &seqExpr{
					pos: position{line: 377, col: 14, offset: 11104},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 377, col: 14, offset: 11104},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonScopeItem7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 377, col: 18, offset: 11108},
							expr: &litMatcher{
								pos:        position{line: 377, col: 19, offset: 11109},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 23, offset: 11113},
							label: "itmI",
							expr: &choiceExpr{
								pos: position{line: 377, col: 29, offset: 11119},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 377, col: 29, offset: 11119},
										name: "ValidScopeItem",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 46, offset: 11136},
										name: "BadItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ValidScopeItem",
			pos:  position{line: 381, col: 1, offset: 11171},
			expr: &actionExpr{
				pos: position{line: 381, col: 19, offset: 11189},
				run: (*parser).callonValidScopeItem1,
				expr: &seqExpr{
					pos: position{line: 381, col: 19, offset: 11189},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 19, offset: 11189},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonValidScopeItem7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 23, offset: 11193},
							label: "itmI",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 28, offset: 11198},
								name: "validScopeItem",
							},
						},
					},
				},
			},
		},
		{
			name: "validScopeItem",
			pos:  position{line: 384, col: 1, offset: 11238},
			expr: &choiceExpr{
				pos: position{line: 384, col: 19, offset: 11256},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 384, col: 19, offset: 11256},
						name: "And",
					},
					&actionExpr{
						pos: position{line: 492, col: 15, offset: 15700},
						run: (*parser).callonvalidScopeItem3,
						expr: &seqExpr{
							pos: position{line: 492, col: 15, offset: 15700},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 492, col: 15, offset: 15700},
									val:        "//",
									ignoreCase: false,
									want:       "\"//\"",
								},
								&notExpr{
									pos: position{line: 492, col: 20, offset: 15705},
									expr: &litMatcher{
										pos:        position{line: 492, col: 21, offset: 15706},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 492, col: 25, offset: 15710},
									label: "textI",
									expr: &seqExpr{
										pos: position{line: 492, col: 32, offset: 15717},
										exprs: []any{
											&notExpr{
												pos: position{line: 492, col: 32, offset: 15717},
												expr: &seqExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			expr: &litMatcher{
																				pos:        position{line: 2762, col: 27, offset: 93686},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2762, col: 33, offset: 93692},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2761, col: 23, offset: 93657},
																	expr: &anyMatcher{
																		line: 2761, col: 24, offset: 93658,
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 492, col: 37, offset: 15722,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2762, col: 27, offset: 93686},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													expr: &litMatcher{
														pos:        position{line: 2762, col: 27, offset: 93686},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2762, col: 33, offset: 93692},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2761, col: 23, offset: 93657},
											expr: &anyMatcher{
												line: 2761, col: 24, offset: 93658,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 19, offset: 11411},
						name: "Code",
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 26, offset: 11418},
						name: "Return",
					},
					&actionExpr{
						pos: position{line: 598, col: 13, offset: 19277},
						run: (*parser).callonvalidScopeItem33,
						expr: &seqExpr{
							pos: position{line: 598, col: 13, offset: 19277},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 598, col: 13, offset: 19277},
									val:        "continue",
									ignoreCase: false,
									want:       "\"continue\"",
								},
								&labeledExpr{
									pos:   position{line: 598, col: 24, offset: 19288},
									label: "labelI",
									expr: &choiceExpr{
										pos: position{line: 612, col: 23, offset: 19590},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 612, col: 23, offset: 19590},
												run: (*parser).callonvalidScopeItem38,
												expr: &choiceExpr{
													pos: position{line: 2764, col: 27, offset: 93768},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2764, col: 33, offset: 93774},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2764, col: 39, offset: 93780},
															expr: &seqExpr{
																pos: position{line: 2764, col: 41, offset: 93782},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2764, col: 45, offset: 93786},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2764, col: 45, offset: 93786},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 51, offset: 93792},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 614, col: 4, offset: 19633},
												run: (*parser).callonvalidScopeItem58,
												expr: &seqExpr{
													pos: position{line: 614, col: 4, offset: 19633},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 614, col: 4, offset: 19633},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 614, col: 7, offset: 19636},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 265, col: 10, offset: 7614},
																run: (*parser).callonvalidScopeItem63,
																expr: &labeledExpr{
																	pos:   position{line: 265, col: 10, offset: 7614},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1682, col: 17, offset: 55568},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1665, col: 20, offset: 55323},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1682, col: 26, offset: 55577},
																				expr: &charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 27, offset: 93768},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 33, offset: 93774},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2764, col: 39, offset: 93780},
																	expr: &seqExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2764, col: 45, offset: 93786},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2764, col: 45, offset: 93786},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2764, col: 51, offset: 93792},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 616, col: 5, offset: 19682},
												run: (*parser).callonvalidScopeItem88,
												expr: &seqExpr{
													pos: position{line: 616, col: 5, offset: 19682},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 616, col: 5, offset: 19682},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 616, col: 8, offset: 19685},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 265, col: 10, offset: 7614},
																run: (*parser).callonvalidScopeItem93,
																expr: &labeledExpr{
																	pos:   position{line: 265, col: 10, offset: 7614},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1682, col: 17, offset: 55568},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1665, col: 20, offset: 55323},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1682, col: 26, offset: 55577},
																				expr: &charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 616, col: 21, offset: 19698},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonvalidScopeItem100,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2767, col: 35, offset: 93911},
															run: (*parser).callonvalidScopeItem106,
															expr: &seqExpr{
																pos: position{line: 2767, col: 35, offset: 93911},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2767, col: 35, offset: 93911},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2767, col: 38, offset: 93914},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2767, col: 50, offset: 93926},
																			expr: &seqExpr{
																				pos: position{line: 2767, col: 51, offset: 93927},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2767, col: 51, offset: 93927},
																						expr: &choiceExpr{
																							pos: position{line: 2764, col: 27, offset: 93768},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2762, col: 23, offset: 93682},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2762, col: 23, offset: 93682},
																											expr: &charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2762, col: 27, offset: 93686},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2762, col: 27, offset: 93686},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2762, col: 27, offset: 93686},
																															expr: &litMatcher{
																																pos:        position{line: 2762, col: 27, offset: 93686},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2762, col: 33, offset: 93692},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2761, col: 23, offset: 93657},
																													expr: &anyMatcher{
																														line: 2761, col: 24, offset: 93658,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 33, offset: 93774},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2764, col: 39, offset: 93780},
																									expr: &seqExpr{
																										pos: position{line: 2764, col: 41, offset: 93782},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2764, col: 41, offset: 93782},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2764, col: 45, offset: 93786},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2764, col: 45, offset: 93786},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2764, col: 51, offset: 93792},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2767, col: 57, offset: 93933},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2767, col: 57, offset: 93933},
																								expr: &charClassMatcher{
																									pos:        position{line: 2767, col: 57, offset: 93933},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2767, col: 71, offset: 93947},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2767, col: 71, offset: 93947},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2767, col: 75, offset: 93951},
																										expr: &charClassMatcher{
																											pos:        position{line: 2767, col: 75, offset: 93951},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2767, col: 81, offset: 93957},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 616, col: 43, offset: 19720},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2764, col: 27, offset: 93768},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								expr: &litMatcher{
																									pos:        position{line: 2762, col: 27, offset: 93686},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2762, col: 33, offset: 93692},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2761, col: 23, offset: 93657},
																						expr: &anyMatcher{
																							line: 2761, col: 24, offset: 93658,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2764, col: 33, offset: 93774},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2764, col: 39, offset: 93780},
																		expr: &seqExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2764, col: 45, offset: 93786},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2764, col: 45, offset: 93786},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2764, col: 51, offset: 93792},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 618, col: 5, offset: 19876},
												run: (*parser).callonvalidScopeItem161,
												expr: &seqExpr{
													pos: position{line: 618, col: 5, offset: 19876},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 618, col: 5, offset: 19876},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 618, col: 8, offset: 19879},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonvalidScopeItem166,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2767, col: 35, offset: 93911},
															run: (*parser).callonvalidScopeItem172,
															expr: &seqExpr{
																pos: position{line: 2767, col: 35, offset: 93911},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2767, col: 35, offset: 93911},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2767, col: 38, offset: 93914},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2767, col: 50, offset: 93926},
																			expr: &seqExpr{
																				pos: position{line: 2767, col: 51, offset: 93927},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2767, col: 51, offset: 93927},
																						expr: &choiceExpr{
																							pos: position{line: 2764, col: 27, offset: 93768},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2762, col: 23, offset: 93682},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2762, col: 23, offset: 93682},
																											expr: &charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2762, col: 27, offset: 93686},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2762, col: 27, offset: 93686},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2762, col: 27, offset: 93686},
																															expr: &litMatcher{
																																pos:        position{line: 2762, col: 27, offset: 93686},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2762, col: 33, offset: 93692},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2761, col: 23, offset: 93657},
																													expr: &anyMatcher{
																														line: 2761, col: 24, offset: 93658,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 33, offset: 93774},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2764, col: 39, offset: 93780},
																									expr: &seqExpr{
																										pos: position{line: 2764, col: 41, offset: 93782},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2764, col: 41, offset: 93782},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2764, col: 45, offset: 93786},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2764, col: 45, offset: 93786},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2764, col: 51, offset: 93792},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2767, col: 57, offset: 93933},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2767, col: 57, offset: 93933},
																								expr: &charClassMatcher{
																									pos:        position{line: 2767, col: 57, offset: 93933},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2767, col: 71, offset: 93947},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2767, col: 71, offset: 93947},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2767, col: 75, offset: 93951},
																										expr: &charClassMatcher{
																											pos:        position{line: 2767, col: 75, offset: 93951},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2767, col: 81, offset: 93957},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 618, col: 30, offset: 19901},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2764, col: 27, offset: 93768},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								expr: &litMatcher{
																									pos:        position{line: 2762, col: 27, offset: 93686},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2762, col: 33, offset: 93692},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2761, col: 23, offset: 93657},
																						expr: &anyMatcher{
																							line: 2761, col: 24, offset: 93658,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2764, col: 33, offset: 93774},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2764, col: 39, offset: 93780},
																		expr: &seqExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2764, col: 45, offset: 93786},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2764, col: 45, offset: 93786},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2764, col: 51, offset: 93792},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 605, col: 10, offset: 19430},
						run: (*parser).callonvalidScopeItem227,
						expr: &seqExpr{
							pos: position{line: 605, col: 10, offset: 19430},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 605, col: 10, offset: 19430},
									val:        "break",
									ignoreCase: false,
									want:       "\"break\"",
								},
								&labeledExpr{
									pos:   position{line: 605, col: 18, offset: 19438},
									label: "labelI",
									expr: &choiceExpr{
										pos: position{line: 612, col: 23, offset: 19590},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 612, col: 23, offset: 19590},
												run: (*parser).callonvalidScopeItem232,
												expr: &choiceExpr{
													pos: position{line: 2764, col: 27, offset: 93768},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2764, col: 33, offset: 93774},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2764, col: 39, offset: 93780},
															expr: &seqExpr{
																pos: position{line: 2764, col: 41, offset: 93782},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2764, col: 45, offset: 93786},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2764, col: 45, offset: 93786},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 51, offset: 93792},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 614, col: 4, offset: 19633},
												run: (*parser).callonvalidScopeItem252,
												expr: &seqExpr{
													pos: position{line: 614, col: 4, offset: 19633},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 614, col: 4, offset: 19633},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 614, col: 7, offset: 19636},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 265, col: 10, offset: 7614},
																run: (*parser).callonvalidScopeItem257,
																expr: &labeledExpr{
																	pos:   position{line: 265, col: 10, offset: 7614},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1682, col: 17, offset: 55568},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1665, col: 20, offset: 55323},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1682, col: 26, offset: 55577},
																				expr: &charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 27, offset: 93768},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 33, offset: 93774},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2764, col: 39, offset: 93780},
																	expr: &seqExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2764, col: 45, offset: 93786},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2764, col: 45, offset: 93786},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2764, col: 51, offset: 93792},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 616, col: 5, offset: 19682},
												run: (*parser).callonvalidScopeItem282,
												expr: &seqExpr{
													pos: position{line: 616, col: 5, offset: 19682},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 616, col: 5, offset: 19682},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 616, col: 8, offset: 19685},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 265, col: 10, offset: 7614},
																run: (*parser).callonvalidScopeItem287,
																expr: &labeledExpr{
																	pos:   position{line: 265, col: 10, offset: 7614},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1682, col: 17, offset: 55568},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1665, col: 20, offset: 55323},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1682, col: 26, offset: 55577},
																				expr: &charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 616, col: 21, offset: 19698},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonvalidScopeItem294,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2767, col: 35, offset: 93911},
															run: (*parser).callonvalidScopeItem300,
															expr: &seqExpr{
																pos: position{line: 2767, col: 35, offset: 93911},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2767, col: 35, offset: 93911},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2767, col: 38, offset: 93914},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2767, col: 50, offset: 93926},
																			expr: &seqExpr{
																				pos: position{line: 2767, col: 51, offset: 93927},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2767, col: 51, offset: 93927},
																						expr: &choiceExpr{
																							pos: position{line: 2764, col: 27, offset: 93768},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2762, col: 23, offset: 93682},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2762, col: 23, offset: 93682},
																											expr: &charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2762, col: 27, offset: 93686},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2762, col: 27, offset: 93686},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2762, col: 27, offset: 93686},
																															expr: &litMatcher{
																																pos:        position{line: 2762, col: 27, offset: 93686},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2762, col: 33, offset: 93692},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2761, col: 23, offset: 93657},
																													expr: &anyMatcher{
																														line: 2761, col: 24, offset: 93658,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 33, offset: 93774},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2764, col: 39, offset: 93780},
																									expr: &seqExpr{
																										pos: position{line: 2764, col: 41, offset: 93782},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2764, col: 41, offset: 93782},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2764, col: 45, offset: 93786},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2764, col: 45, offset: 93786},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2764, col: 51, offset: 93792},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2767, col: 57, offset: 93933},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2767, col: 57, offset: 93933},
																								expr: &charClassMatcher{
																									pos:        position{line: 2767, col: 57, offset: 93933},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2767, col: 71, offset: 93947},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2767, col: 71, offset: 93947},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2767, col: 75, offset: 93951},
																										expr: &charClassMatcher{
																											pos:        position{line: 2767, col: 75, offset: 93951},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2767, col: 81, offset: 93957},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 616, col: 43, offset: 19720},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2764, col: 27, offset: 93768},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								expr: &litMatcher{
																									pos:        position{line: 2762, col: 27, offset: 93686},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2762, col: 33, offset: 93692},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2761, col: 23, offset: 93657},
																						expr: &anyMatcher{
																							line: 2761, col: 24, offset: 93658,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2764, col: 33, offset: 93774},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2764, col: 39, offset: 93780},
																		expr: &seqExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2764, col: 45, offset: 93786},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2764, col: 45, offset: 93786},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2764, col: 51, offset: 93792},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 618, col: 5, offset: 19876},
												run: (*parser).callonvalidScopeItem355,
												expr: &seqExpr{
													pos: position{line: 618, col: 5, offset: 19876},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 618, col: 5, offset: 19876},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 618, col: 8, offset: 19879},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonvalidScopeItem360,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2767, col: 35, offset: 93911},
															run: (*parser).callonvalidScopeItem366,
															expr: &seqExpr{
																pos: position{line: 2767, col: 35, offset: 93911},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2767, col: 35, offset: 93911},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2767, col: 38, offset: 93914},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2767, col: 50, offset: 93926},
																			expr: &seqExpr{
																				pos: position{line: 2767, col: 51, offset: 93927},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2767, col: 51, offset: 93927},
																						expr: &choiceExpr{
																							pos: position{line: 2764, col: 27, offset: 93768},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2762, col: 23, offset: 93682},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2762, col: 23, offset: 93682},
																											expr: &charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2762, col: 27, offset: 93686},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2762, col: 27, offset: 93686},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2762, col: 27, offset: 93686},
																															expr: &litMatcher{
																																pos:        position{line: 2762, col: 27, offset: 93686},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2762, col: 33, offset: 93692},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2761, col: 23, offset: 93657},
																													expr: &anyMatcher{
																														line: 2761, col: 24, offset: 93658,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 33, offset: 93774},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2764, col: 39, offset: 93780},
																									expr: &seqExpr{
																										pos: position{line: 2764, col: 41, offset: 93782},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2764, col: 41, offset: 93782},
																												expr: &charClassMatcher{
																													pos:        position{line: 2784, col: 37, offset: 94482},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2764, col: 45, offset: 93786},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2764, col: 45, offset: 93786},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2764, col: 51, offset: 93792},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2767, col: 57, offset: 93933},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2767, col: 57, offset: 93933},
																								expr: &charClassMatcher{
																									pos:        position{line: 2767, col: 57, offset: 93933},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2767, col: 71, offset: 93947},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2767, col: 71, offset: 93947},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2767, col: 75, offset: 93951},
																										expr: &charClassMatcher{
																											pos:        position{line: 2767, col: 75, offset: 93951},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2767, col: 81, offset: 93957},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 618, col: 30, offset: 19901},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2764, col: 27, offset: 93768},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								expr: &litMatcher{
																									pos:        position{line: 2762, col: 27, offset: 93686},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2762, col: 33, offset: 93692},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2761, col: 23, offset: 93657},
																						expr: &anyMatcher{
																							line: 2761, col: 24, offset: 93658,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2764, col: 33, offset: 93774},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2764, col: 39, offset: 93780},
																		expr: &seqExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2764, col: 45, offset: 93786},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2764, col: 45, offset: 93786},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2764, col: 51, offset: 93792},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 387, col: 19, offset: 11487},
						name: "ComponentCall",
					},
					&ruleRefExpr{
						pos:  position{line: 387, col: 35, offset: 11503},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 19, offset: 11568},
						name: "If",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 24, offset: 11573},
						name: "Switch",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 33, offset: 11582},
						name: "For",
					},
					&actionExpr{
						pos: position{line: 1158, col: 16, offset: 36851},
						run: (*parser).callonvalidScopeItem426,
						expr: &seqExpr{
							pos: position{line: 1158, col: 16, offset: 36851},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1158, col: 16, offset: 36851},
									val:        "//-",
									ignoreCase: false,
									want:       "\"//-\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 1158, col: 22, offset: 36857},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1158, col: 25, offset: 36860},
									label: "commentI",
									expr: &actionExpr{
										pos: position{line: 1165, col: 16, offset: 37008},
										run: (*parser).callonvalidScopeItem432,
										expr: &zeroOrMoreExpr{
											pos: position{line: 1165, col: 16, offset: 37008},
											expr: &seqExpr{
												pos: position{line: 1165, col: 17, offset: 37009},
												exprs: []any{
													&notExpr{
														pos: position{line: 1165, col: 17, offset: 37009},
														expr: &seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
													},
													&anyMatcher{
														line: 1165, col: 22, offset: 37014,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2762, col: 27, offset: 93686},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													expr: &litMatcher{
														pos:        position{line: 2762, col: 27, offset: 93686},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2762, col: 33, offset: 93692},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2761, col: 23, offset: 93657},
											expr: &anyMatcher{
												line: 2761, col: 24, offset: 93658,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 33, offset: 11672},
						name: "And",
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 39, offset: 11678},
						name: "RawElement",
					},
					&actionExpr{
						pos: position{line: 1137, col: 12, offset: 36111},
						run: (*parser).callonvalidScopeItem458,
						expr: &seqExpr{
							pos: position{line: 1137, col: 12, offset: 36111},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1137, col: 12, offset: 36111},
									val:        "!doctype",
									ignoreCase: false,
									want:       "\"!doctype\"",
								},
								&choiceExpr{
									pos: position{line: 1141, col: 18, offset: 36205},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 1141, col: 18, offset: 36205},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1141, col: 18, offset: 36205},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&actionExpr{
													pos: position{line: 2867, col: 14, offset: 97512},
													run: (*parser).callonvalidScopeItem465,
													expr: &seqExpr{
														pos: position{line: 2867, col: 14, offset: 97512},
														exprs: []any{
															&actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonvalidScopeItem467,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
															&stateCodeExpr{
																pos: position{line: 2841, col: 18, offset: 96619},
																run: (*parser).callonvalidScopeItem473,
															},
															&labeledExpr{
																pos:   position{line: 2867, col: 24, offset: 97522},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2793, col: 12, offset: 94819},
																	run: (*parser).callonvalidScopeItem475,
																	expr: &seqExpr{
																		pos: position{line: 2793, col: 12, offset: 94819},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 2793, col: 12, offset: 94819},
																				label: "posI",
																				expr: &actionExpr{
																					pos: position{line: 2774, col: 8, offset: 94166},
																					run: (*parser).callonvalidScopeItem478,
																					expr: &choiceExpr{
																						pos: position{line: 2774, col: 9, offset: 94167},
																						alternatives: []any{
																							&andExpr{
																								pos: position{line: 2774, col: 9, offset: 94167},
																								expr: &anyMatcher{
																									line: 2774, col: 10, offset: 94168,
																								},
																							},
																							&notExpr{
																								pos: position{line: 2774, col: 14, offset: 94172},
																								expr: &anyMatcher{
																									line: 2774, col: 15, offset: 94173,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2793, col: 21, offset: 94828},
																				val:        "(",
																				ignoreCase: false,
																				want:       "\"(\"",
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 2867, col: 40, offset: 97538},
																expr: &choiceExpr{
																	pos: position{line: 2787, col: 20, offset: 94555},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					run: (*parser).callonvalidScopeItem489,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2785, col: 37, offset: 94524},
																					expr: &litMatcher{
																						pos:        position{line: 2785, col: 37, offset: 94524},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2785, col: 43, offset: 94530},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1141, col: 31, offset: 36218},
													val:        "html",
													ignoreCase: false,
													want:       "\"html\"",
												},
												&choiceExpr{
													pos: position{line: 136, col: 21, offset: 3979},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2871, col: 12, offset: 97598},
															run: (*parser).callonvalidScopeItem495,
															expr: &seqExpr{
																pos: position{line: 2871, col: 12, offset: 97598},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2871, col: 12, offset: 97598},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2871, col: 15, offset: 97601},
																		expr: &seqExpr{
																			pos: position{line: 2871, col: 16, offset: 97602},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2871, col: 16, offset: 97602},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2871, col: 20, offset: 97606},
																					expr: &choiceExpr{
																						pos: position{line: 2787, col: 20, offset: 94555},
																						alternatives: []any{
																							&charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&seqExpr{
																								pos: position{line: 2787, col: 31, offset: 94566},
																								exprs: []any{
																									&andCodeExpr{
																										pos: position{line: 2787, col: 31, offset: 94566},
																										run: (*parser).callonvalidScopeItem506,
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2785, col: 37, offset: 94524},
																										expr: &litMatcher{
																											pos:        position{line: 2785, col: 37, offset: 94524},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2785, col: 43, offset: 94530},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2871, col: 26, offset: 97612},
																		label: "rParenI",
																		expr: &actionExpr{
																			pos: position{line: 2794, col: 12, offset: 94880},
																			run: (*parser).callonvalidScopeItem511,
																			expr: &seqExpr{
																				pos: position{line: 2794, col: 12, offset: 94880},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 2794, col: 12, offset: 94880},
																						label: "posI",
																						expr: &actionExpr{
																							pos: position{line: 2774, col: 8, offset: 94166},
																							run: (*parser).callonvalidScopeItem514,
																							expr: &choiceExpr{
																								pos: position{line: 2774, col: 9, offset: 94167},
																								alternatives: []any{
																									&andExpr{
																										pos: position{line: 2774, col: 9, offset: 94167},
																										expr: &anyMatcher{
																											line: 2774, col: 10, offset: 94168,
																										},
																									},
																									&notExpr{
																										pos: position{line: 2774, col: 14, offset: 94172},
																										expr: &anyMatcher{
																											line: 2774, col: 15, offset: 94173,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2794, col: 21, offset: 94889},
																						val:        ")",
																						ignoreCase: false,
																						want:       "\")\"",
																					},
																				},
																			},
																		},
																	},
																	&stateCodeExpr{
																		pos: position{line: 2847, col: 13, offset: 96752},
																		run: (*parser).callonvalidScopeItem521,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 136, col: 31, offset: 3989},
															run: (*parser).callonvalidScopeItem522,
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonvalidScopeItem523,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2764, col: 27, offset: 93768},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2764, col: 33, offset: 93774},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2764, col: 39, offset: 93780},
															expr: &seqExpr{
																pos: position{line: 2764, col: 41, offset: 93782},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2764, col: 45, offset: 93786},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2764, col: 45, offset: 93786},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 51, offset: 93792},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1141, col: 61, offset: 36248},
											run: (*parser).callonvalidScopeItem548,
											expr: &seqExpr{
												pos: position{line: 1141, col: 61, offset: 36248},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1141, col: 61, offset: 36248},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&labeledExpr{
														pos:   position{line: 1141, col: 64, offset: 36251},
														label: "startI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonvalidScopeItem553,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2767, col: 35, offset: 93911},
														run: (*parser).callonvalidScopeItem559,
														expr: &seqExpr{
															pos: position{line: 2767, col: 35, offset: 93911},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2767, col: 35, offset: 93911},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2767, col: 38, offset: 93914},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2767, col: 50, offset: 93926},
																		expr: &seqExpr{
																			pos: position{line: 2767, col: 51, offset: 93927},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2767, col: 51, offset: 93927},
																					expr: &choiceExpr{
																						pos: position{line: 2764, col: 27, offset: 93768},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 23, offset: 93682},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2762, col: 23, offset: 93682},
																										expr: &charClassMatcher{
																											pos:        position{line: 2784, col: 37, offset: 94482},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2762, col: 27, offset: 93686},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2762, col: 27, offset: 93686},
																														expr: &litMatcher{
																															pos:        position{line: 2762, col: 27, offset: 93686},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2762, col: 33, offset: 93692},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2761, col: 23, offset: 93657},
																												expr: &anyMatcher{
																													line: 2761, col: 24, offset: 93658,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 33, offset: 93774},
																								val:        ";",
																								ignoreCase: false,
																								want:       "\";\"",
																							},
																							&andExpr{
																								pos: position{line: 2764, col: 39, offset: 93780},
																								expr: &seqExpr{
																									pos: position{line: 2764, col: 41, offset: 93782},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2764, col: 41, offset: 93782},
																											expr: &charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2764, col: 45, offset: 93786},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2764, col: 45, offset: 93786},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2764, col: 51, offset: 93792},
																													val:        "//",
																													ignoreCase: false,
																													want:       "\"//\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2767, col: 57, offset: 93933},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2767, col: 57, offset: 93933},
																							expr: &charClassMatcher{
																								pos:        position{line: 2767, col: 57, offset: 93933},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2767, col: 71, offset: 93947},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2767, col: 71, offset: 93947},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2767, col: 75, offset: 93951},
																									expr: &charClassMatcher{
																										pos:        position{line: 2767, col: 75, offset: 93951},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2767, col: 81, offset: 93957},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1141, col: 86, offset: 36273},
														label: "endI",
														expr: &choiceExpr{
															pos: position{line: 2764, col: 27, offset: 93768},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 33, offset: 93774},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2764, col: 39, offset: 93780},
																	expr: &seqExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2764, col: 45, offset: 93786},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2764, col: 45, offset: 93786},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2764, col: 51, offset: 93792},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 390, col: 19, offset: 11767},
						name: "ArrowBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 19, offset: 11843},
						name: "Element",
					},
				},
			},
		},
		{
			name: "BadItem",
			pos:  position{line: 415, col: 1, offset: 12617},
			expr: &choiceExpr{
				pos: position{line: 415, col: 12, offset: 12628},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 468, col: 20, offset: 14740},
						run: (*parser).callonBadItem2,
						expr: &seqExpr{
							pos: position{line: 468, col: 20, offset: 14740},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2772, col: 14, offset: 94053},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2772, col: 14, offset: 94053},
											val:        "if",
											ignoreCase: false,
											want:       "\"if\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 21, offset: 94060},
											val:        "else",
											ignoreCase: false,
											want:       "\"else\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 30, offset: 94069},
											val:        "switch",
											ignoreCase: false,
											want:       "\"switch\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 41, offset: 94080},
											val:        "case",
											ignoreCase: false,
											want:       "\"case\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 50, offset: 94089},
											val:        "default",
											ignoreCase: false,
											want:       "\"default\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 62, offset: 94101},
											val:        "for",
											ignoreCase: false,
											want:       "\"for\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 70, offset: 94109},
											val:        "return",
											ignoreCase: false,
											want:       "\"return\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 81, offset: 94120},
											val:        "break",
											ignoreCase: false,
											want:       "\"break\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 91, offset: 94130},
											val:        "continue",
											ignoreCase: false,
											want:       "\"continue\"",
										},
										&litMatcher{
											pos:        position{line: 2772, col: 104, offset: 94143},
											val:        "fallthrough",
											ignoreCase: false,
											want:       "\"fallthrough\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 468, col: 29, offset: 14749},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonBadItem16,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 38, offset: 14758},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 468, col: 41, offset: 14761},
									expr: &actionExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										run: (*parser).callonBadItem25,
										expr: &seqExpr{
											pos: position{line: 2767, col: 35, offset: 93911},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2767, col: 35, offset: 93911},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 38, offset: 93914},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2767, col: 50, offset: 93926},
														expr: &seqExpr{
															pos: position{line: 2767, col: 51, offset: 93927},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2767, col: 51, offset: 93927},
																	expr: &choiceExpr{
																		pos: position{line: 2764, col: 27, offset: 93768},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2762, col: 23, offset: 93682},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										expr: &litMatcher{
																											pos:        position{line: 2762, col: 27, offset: 93686},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2762, col: 33, offset: 93692},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2761, col: 23, offset: 93657},
																								expr: &anyMatcher{
																									line: 2761, col: 24, offset: 93658,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 33, offset: 93774},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2764, col: 39, offset: 93780},
																				expr: &seqExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2764, col: 41, offset: 93782},
																							expr: &charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2764, col: 45, offset: 93786},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2764, col: 45, offset: 93786},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 51, offset: 93792},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2767, col: 57, offset: 93933},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2767, col: 57, offset: 93933},
																			expr: &charClassMatcher{
																				pos:        position{line: 2767, col: 57, offset: 93933},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2767, col: 71, offset: 93947},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2767, col: 71, offset: 93947},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2767, col: 75, offset: 93951},
																					expr: &charClassMatcher{
																						pos:        position{line: 2767, col: 75, offset: 93951},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2767, col: 81, offset: 93957},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 30, offset: 12646},
						run: (*parser).callonBadItem79,
						expr: &seqExpr{
							pos: position{line: 415, col: 30, offset: 12646},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 415, col: 30, offset: 12646},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 415, col: 36, offset: 12652},
										expr: &seqExpr{
											pos: position{line: 415, col: 37, offset: 12653},
											exprs: []any{
												&notExpr{
													pos: position{line: 415, col: 37, offset: 12653},
													expr: &seqExpr{
														pos: position{line: 415, col: 39, offset: 12655},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 415, col: 39, offset: 12655},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 415, col: 42, offset: 12658},
																val:        "[\\r\\n;{}]",
																chars:      []rune{'\r', '\n', ';', '{', '}'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 415, col: 53, offset: 12669},
													val:        "[^\\r\\n;{}]",
													chars:      []rune{'\r', '\n', ';', '{', '}'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 415, col: 66, offset: 12682},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 415, col: 72, offset: 12688},
										name: "OptionalBody",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 444, col: 5, offset: 13840},
						name: "LoneBody",
					},
				},
			},
		},
		{
			name: "LoneBody",
			pos:  position{line: 446, col: 1, offset: 13850},
			expr: &actionExpr{
				pos: position{line: 446, col: 13, offset: 13862},
				run: (*parser).callonLoneBody1,
				expr: &seqExpr{
					pos: position{line: 446, col: 13, offset: 13862},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 446, col: 13, offset: 13862},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 446, col: 16, offset: 13865},
							expr: &charClassMatcher{
								pos:        position{line: 446, col: 17, offset: 13866},
								val:        "[[{]",
								chars:      []rune{'[', '{'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 22, offset: 13871},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 28, offset: 13877},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobalCode",
			pos:  position{line: 503, col: 1, offset: 16018},
			expr: &actionExpr{
				pos: position{line: 503, col: 15, offset: 16032},
				run: (*parser).callonGlobalCode1,
				expr: &seqExpr{
					pos: position{line: 503, col: 15, offset: 16032},
					exprs: []any{
						&notExpr{
							pos: position{line: 503, col: 15, offset: 16032},
							expr: &choiceExpr{
								pos: position{line: 503, col: 17, offset: 16034},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 503, col: 17, offset: 16034},
										val:        "import",
										ignoreCase: false,
										want:       "\"import\"",
									},
									&litMatcher{
										pos:        position{line: 503, col: 28, offset: 16045},
										val:        "comp",
										ignoreCase: false,
										want:       "\"comp\"",
									},
									&litMatcher{
										pos:        position{line: 503, col: 37, offset: 16054},
										val:        "state",
										ignoreCase: false,
										want:       "\"state\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 46, offset: 16063},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 52, offset: 16069},
								name: "GoStatement",
							},
						},
						&choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 511, col: 1, offset: 16361},
			expr: &choiceExpr{
				pos: position{line: 511, col: 9, offset: 16369},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 511, col: 9, offset: 16369},
						name: "implicitCode",
					},
					&ruleRefExpr{
						pos:  position{line: 511, col: 24, offset: 16384},
						name: "explicitCode",
					},
				},
			},
		},
		{
			name: "explicitCode",
			pos:  position{line: 513, col: 1, offset: 16398},
			expr: &actionExpr{
				pos: position{line: 513, col: 17, offset: 16414},
				run: (*parser).callonexplicitCode1,
				expr: &seqExpr{
					pos: position{line: 513, col: 17, offset: 16414},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).callonexplicitCode3,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2806, col: 24, offset: 95425},
							run: (*parser).callonexplicitCode9,
						},
						&litMatcher{
							pos:        position{line: 513, col: 33, offset: 16430},
							val:        "- ",
							ignoreCase: false,
							want:       "\"- \"",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 38, offset: 16435},
							label: "codeStatementsI",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 54, offset: 16451},
								name: "codeStatements",
							},
						},
					},
				},
			},
		},
		{
			name: "codeStatements",
			pos:  position{line: 520, col: 1, offset: 16585},
			expr: &choiceExpr{
				pos: position{line: 520, col: 19, offset: 16603},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 520, col: 19, offset: 16603},
						run: (*parser).calloncodeStatements2,
						expr: &seqExpr{
							pos: position{line: 520, col: 19, offset: 16603},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 520, col: 19, offset: 16603},
									label: "firstLineI",
									expr: &ruleRefExpr{
										pos:  position{line: 520, col: 30, offset: 16614},
										name: "GoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 520, col: 43, offset: 16627},
									label: "restI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 520, col: 49, offset: 16633},
										expr: &ruleRefExpr{
											pos:  position{line: 520, col: 49, offset: 16633},
											name: "codeStatement",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 16873},
						run: (*parser).calloncodeStatements9,
						expr: &seqExpr{
							pos: position{line: 2762, col: 23, offset: 93682},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2762, col: 27, offset: 93686},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													expr: &litMatcher{
														pos:        position{line: 2762, col: 27, offset: 93686},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2762, col: 33, offset: 93692},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2761, col: 23, offset: 93657},
											expr: &anyMatcher{
												line: 2761, col: 24, offset: 93658,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "codeStatement",
			pos:  position{line: 541, col: 1, offset: 17231},
			expr: &choiceExpr{
				pos: position{line: 541, col: 18, offset: 17248},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 541, col: 18, offset: 17248},
						run: (*parser).calloncodeStatement2,
						expr: &seqExpr{
							pos: position{line: 541, col: 18, offset: 17248},
							exprs: []any{
								&notExpr{
									pos: position{line: 541, col: 18, offset: 17248},
									expr: &seqExpr{
										pos: position{line: 541, col: 20, offset: 17250},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 541, col: 20, offset: 17250},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 541, col: 23, offset: 17253},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2762, col: 27, offset: 93686},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														exprs: []any{
															&zeroOrOneExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																expr: &litMatcher{
																	pos:        position{line: 2762, col: 27, offset: 93686},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2762, col: 33, offset: 93692},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 2761, col: 23, offset: 93657},
														expr: &anyMatcher{
															line: 2761, col: 24, offset: 93658,
														},
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 541, col: 36, offset: 17266},
									label: "stmtI",
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 42, offset: 17272},
										name: "GoExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 543, col: 5, offset: 17313},
						run: (*parser).calloncodeStatement39,
						expr: &seqExpr{
							pos: position{line: 543, col: 5, offset: 17313},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 543, col: 9, offset: 17317},
									expr: &seqExpr{
										pos: position{line: 2763, col: 28, offset: 93731},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2763, col: 28, offset: 93731},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 543, col: 21, offset: 17329},
									name: "INDENTATION2",
								},
								&labeledExpr{
									pos:   position{line: 543, col: 34, offset: 17342},
									label: "stmtI",
									expr: &ruleRefExpr{
										pos:  position{line: 543, col: 40, offset: 17348},
										name: "GoExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "implicitCode",
			pos:  position{line: 547, col: 1, offset: 17388},
			expr: &actionExpr{
				pos: position{line: 547, col: 17, offset: 17404},
				run: (*parser).callonimplicitCode1,
				expr: &seqExpr{
					pos: position{line: 547, col: 17, offset: 17404},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 547, col: 17, offset: 17404},
							name: "implicitAhead",
						},
						&labeledExpr{
							pos:   position{line: 547, col: 31, offset: 17418},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 37, offset: 17424},
								name: "GoStatement",
							},
						},
						&choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "implicitAhead",
			pos:  position{line: 554, col: 1, offset: 17566},
			expr: &andExpr{
				pos: position{line: 554, col: 18, offset: 17583},
				expr: &choiceExpr{
					pos: position{line: 554, col: 20, offset: 17585},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 554, col: 20, offset: 17585},
							name: "declaration",
						},
						&actionExpr{
							pos: position{line: 561, col: 15, offset: 17916},
							run: (*parser).callonimplicitAhead4,
							expr: &seqExpr{
								pos: position{line: 561, col: 15, offset: 17916},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 26, offset: 55577},
										expr: &charClassMatcher{
											pos:        position{line: 1665, col: 20, offset: 55323},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2117, col: 34, offset: 71389},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2117, col: 37, offset: 71392},
										expr: &seqExpr{
											pos: position{line: 2117, col: 38, offset: 71393},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2117, col: 38, offset: 71393},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2117, col: 42, offset: 71397},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).callonimplicitAhead18,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 1665, col: 20, offset: 55323},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1682, col: 26, offset: 55577},
													expr: &charClassMatcher{
														pos:        position{line: 1665, col: 20, offset: 55323},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 561, col: 32, offset: 17933},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 561, col: 35, offset: 17936},
										expr: &charClassMatcher{
											pos:        position{line: 561, col: 35, offset: 17936},
											val:        "[-+*/%|&^]",
											chars:      []rune{'-', '+', '*', '/', '%', '|', '&', '^'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 561, col: 47, offset: 17948},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 561, col: 51, offset: 17952},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 571, col: 20, offset: 18178},
										expr: &choiceExpr{
											pos: position{line: 571, col: 21, offset: 18179},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 571, col: 21, offset: 18179},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 571, col: 21, offset: 18179},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 571, col: 25, offset: 18183},
															expr: &charClassMatcher{
																pos:        position{line: 571, col: 25, offset: 18183},
																val:        "[^}]",
																chars:      []rune{'}'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 571, col: 31, offset: 18189},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 571, col: 37, offset: 18195},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 571, col: 37, offset: 18195},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 571, col: 41, offset: 18199},
															expr: &charClassMatcher{
																pos:        position{line: 571, col: 41, offset: 18199},
																val:        "[^]]",
																chars:      []rune{']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 571, col: 48, offset: 18206},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 571, col: 54, offset: 18212},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 571, col: 54, offset: 18212},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 571, col: 58, offset: 18216},
															expr: &charClassMatcher{
																pos:        position{line: 571, col: 58, offset: 18216},
																val:        "[^)]",
																chars:      []rune{')'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 571, col: 64, offset: 18222},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 571, col: 70, offset: 18228},
													exprs: []any{
														&notExpr{
															pos: position{line: 571, col: 70, offset: 18228},
															expr: &choiceExpr{
																pos: position{line: 2764, col: 27, offset: 93768},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								expr: &litMatcher{
																									pos:        position{line: 2762, col: 27, offset: 93686},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2762, col: 33, offset: 93692},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2761, col: 23, offset: 93657},
																						expr: &anyMatcher{
																							line: 2761, col: 24, offset: 93658,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2764, col: 33, offset: 93774},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2764, col: 39, offset: 93780},
																		expr: &seqExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2764, col: 45, offset: 93786},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2764, col: 45, offset: 93786},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2764, col: 51, offset: 93792},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&anyMatcher{
															line: 571, col: 75, offset: 18233,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 564, col: 14, offset: 18019},
							run: (*parser).callonimplicitAhead71,
							expr: &seqExpr{
								pos: position{line: 564, col: 14, offset: 18019},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 26, offset: 55577},
										expr: &charClassMatcher{
											pos:        position{line: 1665, col: 20, offset: 55323},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 564, col: 27, offset: 18032},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 564, col: 31, offset: 18036},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 564, col: 31, offset: 18036},
												val:        "++",
												ignoreCase: false,
												want:       "\"++\"",
											},
											&litMatcher{
												pos:        position{line: 564, col: 38, offset: 18043},
												val:        "--",
												ignoreCase: false,
												want:       "\"--\"",
											},
										},
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 568, col: 10, offset: 18094},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1665, col: 20, offset: 55323},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1682, col: 26, offset: 55577},
									expr: &charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 568, col: 23, offset: 18107},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 568, col: 26, offset: 18110},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 569, col: 23, offset: 18140},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 569, col: 23, offset: 18140},
									val:        "fallthrough",
									ignoreCase: false,
									want:       "\"fallthrough\"",
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "declaration",
			pos:  position{line: 556, col: 1, offset: 17653},
			expr: &choiceExpr{
				pos: position{line: 556, col: 16, offset: 17668},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 557, col: 16, offset: 17703},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 1665, col: 20, offset: 55323},
								val:        "[_\\pL]",
								chars:      []rune{'_'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1682, col: 26, offset: 55577},
								expr: &charClassMatcher{
									pos:        position{line: 1665, col: 20, offset: 55323},
									val:        "[_\\pL\\pNd]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 2117, col: 34, offset: 71389},
								expr: &charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 2117, col: 37, offset: 71392},
								expr: &seqExpr{
									pos: position{line: 2117, col: 38, offset: 71393},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 2117, col: 38, offset: 71393},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2117, col: 42, offset: 71397},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).callondeclaration15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 1665, col: 20, offset: 55323},
											val:        "[_\\pL]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1682, col: 26, offset: 55577},
											expr: &charClassMatcher{
												pos:        position{line: 1665, col: 20, offset: 55323},
												val:        "[_\\pL\\pNd]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 557, col: 33, offset: 17720},
								expr: &charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 557, col: 36, offset: 17723},
								val:        ":=",
								ignoreCase: false,
								want:       "\":=\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 557, col: 41, offset: 17728},
								expr: &charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 571, col: 20, offset: 18178},
								expr: &choiceExpr{
									pos: position{line: 571, col: 21, offset: 18179},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 571, col: 21, offset: 18179},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 571, col: 21, offset: 18179},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 571, col: 25, offset: 18183},
													expr: &charClassMatcher{
														pos:        position{line: 571, col: 25, offset: 18183},
														val:        "[^}]",
														chars:      []rune{'}'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 571, col: 31, offset: 18189},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 571, col: 37, offset: 18195},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 571, col: 37, offset: 18195},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 571, col: 41, offset: 18199},
													expr: &charClassMatcher{
														pos:        position{line: 571, col: 41, offset: 18199},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 571, col: 48, offset: 18206},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 571, col: 54, offset: 18212},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 571, col: 54, offset: 18212},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 571, col: 58, offset: 18216},
													expr: &charClassMatcher{
														pos:        position{line: 571, col: 58, offset: 18216},
														val:        "[^)]",
														chars:      []rune{')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 571, col: 64, offset: 18222},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 571, col: 70, offset: 18228},
											exprs: []any{
												&notExpr{
													pos: position{line: 571, col: 70, offset: 18228},
													expr: &choiceExpr{
														pos: position{line: 2764, col: 27, offset: 93768},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 23, offset: 93682},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						expr: &litMatcher{
																							pos:        position{line: 2762, col: 27, offset: 93686},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2762, col: 33, offset: 93692},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2761, col: 23, offset: 93657},
																				expr: &anyMatcher{
																					line: 2761, col: 24, offset: 93658,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2764, col: 33, offset: 93774},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2764, col: 39, offset: 93780},
																expr: &seqExpr{
																	pos: position{line: 2764, col: 41, offset: 93782},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2764, col: 45, offset: 93786},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2764, col: 45, offset: 93786},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2764, col: 51, offset: 93792},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&anyMatcher{
													line: 571, col: 75, offset: 18233,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 556, col: 28, offset: 17680},
						name: "varDecl",
					},
				},
			},
		},
		{
			name: "varDecl",
			pos:  position{line: 558, col: 1, offset: 17747},
			expr: &seqExpr{
				pos: position{line: 558, col: 16, offset: 17762},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 558, col: 17, offset: 17763},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 558, col: 17, offset: 17763},
								val:        "var",
								ignoreCase: false,
								want:       "\"var\"",
							},
							&litMatcher{
								pos:        position{line: 558, col: 25, offset: 17771},
								val:        "const",
								ignoreCase: false,
								want:       "\"const\"",
							},
						},
					},
					&choiceExpr{
						pos: position{line: 558, col: 35, offset: 17781},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 558, col: 35, offset: 17781},
								exprs: []any{
									&oneOrMoreExpr{
										pos: position{line: 558, col: 35, offset: 17781},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 558, col: 38, offset: 17784},
										name: "varDeclLine",
									},
								},
							},
							&seqExpr{
								pos: position{line: 558, col: 52, offset: 17798},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 558, col: 52, offset: 17798},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 558, col: 56, offset: 17802},
										expr: &seqExpr{
											pos: position{line: 558, col: 57, offset: 17803},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 558, col: 57, offset: 17803},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).callonvarDecl18,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 558, col: 61, offset: 17807},
													name: "varDeclLine",
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 558, col: 75, offset: 17821},
										expr: &choiceExpr{
											pos: position{line: 2787, col: 20, offset: 94555},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2787, col: 31, offset: 94566},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															run: (*parser).callonvarDecl27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2785, col: 37, offset: 94524},
															expr: &litMatcher{
																pos:        position{line: 2785, col: 37, offset: 94524},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2785, col: 43, offset: 94530},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 558, col: 79, offset: 17825},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "varDeclLine",
			pos:  position{line: 559, col: 1, offset: 17830},
			expr: &seqExpr{
				pos: position{line: 559, col: 16, offset: 17845},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1665, col: 20, offset: 55323},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1682, col: 26, offset: 55577},
						expr: &charClassMatcher{
							pos:        position{line: 1665, col: 20, offset: 55323},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2117, col: 34, offset: 71389},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2117, col: 37, offset: 71392},
						expr: &seqExpr{
							pos: position{line: 2117, col: 38, offset: 71393},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2117, col: 38, offset: 71393},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2117, col: 42, offset: 71397},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonvarDeclLine14,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&charClassMatcher{
									pos:        position{line: 1665, col: 20, offset: 55323},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1682, col: 26, offset: 55577},
									expr: &charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 559, col: 33, offset: 17862},
						expr: &seqExpr{
							pos: position{line: 559, col: 34, offset: 17863},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 559, col: 34, offset: 17863},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 559, col: 37, offset: 17866},
									name: "goType",
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 559, col: 46, offset: 17875},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 559, col: 49, offset: 17878},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 559, col: 53, offset: 17882},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 571, col: 20, offset: 18178},
						expr: &choiceExpr{
							pos: position{line: 571, col: 21, offset: 18179},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 571, col: 21, offset: 18179},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 571, col: 21, offset: 18179},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 571, col: 25, offset: 18183},
											expr: &charClassMatcher{
												pos:        position{line: 571, col: 25, offset: 18183},
												val:        "[^}]",
												chars:      []rune{'}'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 571, col: 31, offset: 18189},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 571, col: 37, offset: 18195},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 571, col: 37, offset: 18195},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 571, col: 41, offset: 18199},
											expr: &charClassMatcher{
												pos:        position{line: 571, col: 41, offset: 18199},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 571, col: 48, offset: 18206},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 571, col: 54, offset: 18212},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 571, col: 54, offset: 18212},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 571, col: 58, offset: 18216},
											expr: &charClassMatcher{
												pos:        position{line: 571, col: 58, offset: 18216},
												val:        "[^)]",
												chars:      []rune{')'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 571, col: 64, offset: 18222},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 571, col: 70, offset: 18228},
									exprs: []any{
										&notExpr{
											pos: position{line: 571, col: 70, offset: 18228},
											expr: &choiceExpr{
												pos: position{line: 2764, col: 27, offset: 93768},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2762, col: 23, offset: 93682},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				expr: &litMatcher{
																					pos:        position{line: 2762, col: 27, offset: 93686},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2762, col: 33, offset: 93692},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2761, col: 23, offset: 93657},
																		expr: &anyMatcher{
																			line: 2761, col: 24, offset: 93658,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2764, col: 33, offset: 93774},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
													&andExpr{
														pos: position{line: 2764, col: 39, offset: 93780},
														expr: &seqExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2764, col: 41, offset: 93782},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2764, col: 45, offset: 93786},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2764, col: 45, offset: 93786},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 51, offset: 93792},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&anyMatcher{
											line: 571, col: 75, offset: 18233,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Return",
			pos:  position{line: 577, col: 1, offset: 18419},
			expr: &actionExpr{
				pos: position{line: 577, col: 11, offset: 18429},
				run: (*parser).callonReturn1,
				expr: &seqExpr{
					pos: position{line: 577, col: 11, offset: 18429},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 577, col: 11, offset: 18429},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 20, offset: 18438},
							label: "errI",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 25, offset: 18443},
								name: "returnErr",
							},
						},
					},
				},
			},
		},
		{
			name: "returnErr",
			pos:  position{line: 584, col: 1, offset: 18557},
			expr: &choiceExpr{
				pos: position{line: 584, col: 14, offset: 18570},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 584, col: 14, offset: 18570},
						run: (*parser).callonreturnErr2,
						expr: &choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 18615},
						run: (*parser).callonreturnErr22,
						expr: &seqExpr{
							pos: position{line: 586, col: 5, offset: 18615},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 586, col: 5, offset: 18615},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 586, col: 8, offset: 18618},
									label: "errI",
									expr: &ruleRefExpr{
										pos:  position{line: 586, col: 13, offset: 18623},
										name: "GoExpression",
									},
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 588, col: 5, offset: 18681},
						run: (*parser).callonreturnErr47,
						expr: &seqExpr{
							pos: position{line: 588, col: 5, offset: 18681},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 588, col: 5, offset: 18681},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 588, col: 8, offset: 18684},
									label: "errI",
									expr: &ruleRefExpr{
										pos:  position{line: 588, col: 13, offset: 18689},
										name: "GoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 588, col: 26, offset: 18702},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonreturnErr54,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2767, col: 35, offset: 93911},
									run: (*parser).callonreturnErr60,
									expr: &seqExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2767, col: 35, offset: 93911},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2767, col: 38, offset: 93914},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2767, col: 50, offset: 93926},
													expr: &seqExpr{
														pos: position{line: 2767, col: 51, offset: 93927},
														exprs: []any{
															&notExpr{
																pos: position{line: 2767, col: 51, offset: 93927},
																expr: &choiceExpr{
																	pos: position{line: 2764, col: 27, offset: 93768},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									expr: &litMatcher{
																										pos:        position{line: 2762, col: 27, offset: 93686},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2762, col: 33, offset: 93692},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2761, col: 23, offset: 93657},
																							expr: &anyMatcher{
																								line: 2761, col: 24, offset: 93658,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 33, offset: 93774},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2764, col: 39, offset: 93780},
																			expr: &seqExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2764, col: 45, offset: 93786},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2764, col: 45, offset: 93786},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 51, offset: 93792},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2767, col: 57, offset: 93933},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2767, col: 57, offset: 93933},
																		expr: &charClassMatcher{
																			pos:        position{line: 2767, col: 57, offset: 93933},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2767, col: 71, offset: 93947},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2767, col: 71, offset: 93947},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2767, col: 75, offset: 93951},
																				expr: &charClassMatcher{
																					pos:        position{line: 2767, col: 75, offset: 93951},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2767, col: 81, offset: 93957},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 588, col: 48, offset: 18724},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 5, offset: 18884},
						run: (*parser).callonreturnErr115,
						expr: &seqExpr{
							pos: position{line: 590, col: 5, offset: 18884},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 590, col: 5, offset: 18884},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 590, col: 8, offset: 18887},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonreturnErr120,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2767, col: 35, offset: 93911},
									run: (*parser).callonreturnErr126,
									expr: &seqExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2767, col: 35, offset: 93911},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2767, col: 38, offset: 93914},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2767, col: 50, offset: 93926},
													expr: &seqExpr{
														pos: position{line: 2767, col: 51, offset: 93927},
														exprs: []any{
															&notExpr{
																pos: position{line: 2767, col: 51, offset: 93927},
																expr: &choiceExpr{
																	pos: position{line: 2764, col: 27, offset: 93768},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									expr: &litMatcher{
																										pos:        position{line: 2762, col: 27, offset: 93686},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2762, col: 33, offset: 93692},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2761, col: 23, offset: 93657},
																							expr: &anyMatcher{
																								line: 2761, col: 24, offset: 93658,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 33, offset: 93774},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2764, col: 39, offset: 93780},
																			expr: &seqExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2764, col: 45, offset: 93786},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2764, col: 45, offset: 93786},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 51, offset: 93792},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2767, col: 57, offset: 93933},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2767, col: 57, offset: 93933},
																		expr: &charClassMatcher{
																			pos:        position{line: 2767, col: 57, offset: 93933},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2767, col: 71, offset: 93947},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2767, col: 71, offset: 93947},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2767, col: 75, offset: 93951},
																				expr: &charClassMatcher{
																					pos:        position{line: 2767, col: 75, offset: 93951},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2767, col: 81, offset: 93957},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 590, col: 30, offset: 18909},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Component",
			pos:  position{line: 626, col: 1, offset: 20235},
			expr: &actionExpr{
				pos: position{line: 626, col: 14, offset: 20248},
				run: (*parser).callonComponent1,
				expr: &seqExpr{
					pos: position{line: 626, col: 14, offset: 20248},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 626, col: 14, offset: 20248},
							val:        "comp",
							ignoreCase: false,
							want:       "\"comp\"",
						},
						&labeledExpr{
							pos:   position{line: 626, col: 21, offset: 20255},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 640, col: 18, offset: 20718},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 640, col: 18, offset: 20718},
										run: (*parser).callonComponent6,
										expr: &seqExpr{
											pos: position{line: 640, col: 18, offset: 20718},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 640, col: 18, offset: 20718},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 640, col: 21, offset: 20721},
													label: "identI",
													expr: &actionExpr{
														pos: position{line: 265, col: 10, offset: 7614},
														run: (*parser).callonComponent11,
														expr: &labeledExpr{
															pos:   position{line: 265, col: 10, offset: 7614},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 1682, col: 17, offset: 55568},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1665, col: 20, offset: 55323},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1682, col: 26, offset: 55577},
																		expr: &charClassMatcher{
																			pos:        position{line: 1665, col: 20, offset: 55323},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 642, col: 5, offset: 20763},
										run: (*parser).callonComponent17,
										expr: &seqExpr{
											pos: position{line: 642, col: 5, offset: 20763},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 642, col: 5, offset: 20763},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 642, col: 8, offset: 20766},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonComponent22,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 642, col: 19, offset: 20777},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 642, col: 26, offset: 20784},
														expr: &seqExpr{
															pos: position{line: 642, col: 27, offset: 20785},
															exprs: []any{
																&notExpr{
																	pos: position{line: 642, col: 27, offset: 20785},
																	expr: &seqExpr{
																		pos: position{line: 642, col: 29, offset: 20787},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 642, col: 29, offset: 20787},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 642, col: 32, offset: 20790},
																				val:        "[(};]",
																				chars:      []rune{'(', '}', ';'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 642, col: 39, offset: 20797},
																	val:        "[^\\r\\n(]",
																	chars:      []rune{'\r', '\n', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 642, col: 50, offset: 20808},
													expr: &litMatcher{
														pos:        position{line: 642, col: 51, offset: 20809},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 644, col: 5, offset: 20900},
										run: (*parser).callonComponent39,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonComponent40,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 626, col: 41, offset: 20275},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 44, offset: 20278},
							label: "typeParamsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 626, col: 56, offset: 20290},
								expr: &ruleRefExpr{
									pos:  position{line: 626, col: 56, offset: 20290},
									name: "componentTypeParamList",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 626, col: 80, offset: 20314},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 83, offset: 20317},
							label: "paramsI",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 91, offset: 20325},
								name: "componentParamList",
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 110, offset: 20344},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 116, offset: 20350},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "componentTypeParamList",
			pos:  position{line: 648, col: 1, offset: 20968},
			expr: &actionExpr{
				pos: position{line: 648, col: 27, offset: 20994},
				run: (*parser).calloncomponentTypeParamList1,
				expr: &seqExpr{
					pos: position{line: 648, col: 27, offset: 20994},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 648, col: 27, offset: 20994},
							label: "lBracketI",
							expr: &actionExpr{
								pos: position{line: 2875, col: 15, offset: 97696},
								run: (*parser).calloncomponentTypeParamList4,
								expr: &seqExpr{
									pos: position{line: 2875, col: 15, offset: 97696},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).calloncomponentTypeParamList6,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2841, col: 18, offset: 96619},
											run: (*parser).calloncomponentTypeParamList12,
										},
										&labeledExpr{
											pos:   position{line: 2875, col: 25, offset: 97706},
											label: "lBracketI",
											expr: &actionExpr{
												pos: position{line: 2799, col: 14, offset: 95067},
												run: (*parser).calloncomponentTypeParamList14,
												expr: &seqExpr{
													pos: position{line: 2799, col: 14, offset: 95067},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2799, col: 14, offset: 95067},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).calloncomponentTypeParamList17,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2799, col: 23, offset: 95076},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2875, col: 45, offset: 97726},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).calloncomponentTypeParamList28,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 48, offset: 21015},
							label: "paramsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 648, col: 56, offset: 21023},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 56, offset: 21023},
									name: "typeParams",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 68, offset: 21035},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 656, col: 30, offset: 21292},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2879, col: 13, offset: 97789},
										run: (*parser).calloncomponentTypeParamList37,
										expr: &seqExpr{
											pos: position{line: 2879, col: 13, offset: 97789},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2879, col: 13, offset: 97789},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2879, col: 16, offset: 97792},
													expr: &seqExpr{
														pos: position{line: 2879, col: 17, offset: 97793},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2879, col: 17, offset: 97793},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2879, col: 21, offset: 97797},
																expr: &choiceExpr{
																	pos: position{line: 2787, col: 20, offset: 94555},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					run: (*parser).calloncomponentTypeParamList48,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2785, col: 37, offset: 94524},
																					expr: &litMatcher{
																						pos:        position{line: 2785, col: 37, offset: 94524},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2785, col: 43, offset: 94530},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2879, col: 27, offset: 97803},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2800, col: 14, offset: 95130},
														run: (*parser).calloncomponentTypeParamList53,
														expr: &seqExpr{
															pos: position{line: 2800, col: 14, offset: 95130},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2800, col: 14, offset: 95130},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).calloncomponentTypeParamList56,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2800, col: 23, offset: 95139},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).calloncomponentTypeParamList63,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 656, col: 41, offset: 21303},
										run: (*parser).calloncomponentTypeParamList64,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).calloncomponentTypeParamList65,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeParams",
			pos:  position{line: 660, col: 1, offset: 21368},
			expr: &actionExpr{
				pos: position{line: 660, col: 15, offset: 21382},
				run: (*parser).callontypeParams1,
				expr: &seqExpr{
					pos: position{line: 660, col: 15, offset: 21382},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 660, col: 15, offset: 21382},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 22, offset: 21389},
								name: "typeParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 32, offset: 21399},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 660, col: 38, offset: 21405},
								expr: &seqExpr{
									pos: position{line: 660, col: 39, offset: 21406},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 660, col: 39, offset: 21406},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 660, col: 42, offset: 21409},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 660, col: 46, offset: 21413},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).callontypeParams15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 660, col: 50, offset: 21417},
											name: "typeParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeParam",
			pos:  position{line: 664, col: 1, offset: 21497},
			expr: &actionExpr{
				pos: position{line: 664, col: 14, offset: 21510},
				run: (*parser).callontypeParam1,
				expr: &seqExpr{
					pos: position{line: 664, col: 14, offset: 21510},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 664, col: 14, offset: 21510},
							label: "namesI",
							expr: &actionExpr{
								pos: position{line: 671, col: 19, offset: 21694},
								run: (*parser).callontypeParam4,
								expr: &seqExpr{
									pos: position{line: 671, col: 19, offset: 21694},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 671, col: 19, offset: 21694},
											label: "firstI",
											expr: &choiceExpr{
												pos: position{line: 675, col: 18, offset: 21830},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 265, col: 10, offset: 7614},
														run: (*parser).callontypeParam8,
														expr: &labeledExpr{
															pos:   position{line: 265, col: 10, offset: 7614},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 1682, col: 17, offset: 55568},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1665, col: 20, offset: 55323},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1682, col: 26, offset: 55577},
																		expr: &charClassMatcher{
																			pos:        position{line: 1665, col: 20, offset: 55323},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 675, col: 26, offset: 21838},
														run: (*parser).callontypeParam14,
														expr: &seqExpr{
															pos: position{line: 675, col: 26, offset: 21838},
															exprs: []any{
																&oneOrMoreExpr{
																	pos: position{line: 675, col: 26, offset: 21838},
																	expr: &charClassMatcher{
																		pos:        position{line: 675, col: 26, offset: 21838},
																		val:        "[^\\r\\n :,)]",
																		chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&andExpr{
																	pos: position{line: 675, col: 39, offset: 21851},
																	expr: &charClassMatcher{
																		pos:        position{line: 675, col: 40, offset: 21852},
																		val:        "[:,)]",
																		chars:      []rune{':', ',', ')'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 671, col: 40, offset: 21715},
											label: "restI",
											expr: &zeroOrMoreExpr{
												pos: position{line: 671, col: 46, offset: 21721},
												expr: &seqExpr{
													pos: position{line: 671, col: 47, offset: 21722},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 671, col: 47, offset: 21722},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 671, col: 50, offset: 21725},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 671, col: 54, offset: 21729},
															expr: &choiceExpr{
																pos: position{line: 2787, col: 20, offset: 94555},
																alternatives: []any{
																	&charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 2787, col: 31, offset: 94566},
																				run: (*parser).callontypeParam30,
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2785, col: 37, offset: 94524},
																				expr: &litMatcher{
																					pos:        position{line: 2785, col: 37, offset: 94524},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2785, col: 43, offset: 94530},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 675, col: 18, offset: 21830},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 265, col: 10, offset: 7614},
																	run: (*parser).callontypeParam35,
																	expr: &labeledExpr{
																		pos:   position{line: 265, col: 10, offset: 7614},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1682, col: 17, offset: 55568},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1682, col: 26, offset: 55577},
																					expr: &charClassMatcher{
																						pos:        position{line: 1665, col: 20, offset: 55323},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 675, col: 26, offset: 21838},
																	run: (*parser).callontypeParam41,
																	expr: &seqExpr{
																		pos: position{line: 675, col: 26, offset: 21838},
																		exprs: []any{
																			&oneOrMoreExpr{
																				pos: position{line: 675, col: 26, offset: 21838},
																				expr: &charClassMatcher{
																					pos:        position{line: 675, col: 26, offset: 21838},
																					val:        "[^\\r\\n :,)]",
																					chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&andExpr{
																				pos: position{line: 675, col: 39, offset: 21851},
																				expr: &charClassMatcher{
																					pos:        position{line: 675, col: 40, offset: 21852},
																					val:        "[:,)]",
																					chars:      []rune{':', ',', ')'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 36, offset: 21532},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).callontypeParam48,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 45, offset: 21541},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 51, offset: 21547},
								name: "typeParamType",
							},
						},
					},
				},
			},
		},
		{
			name: "typeParamType",
			pos:  position{line: 679, col: 1, offset: 21932},
			expr: &choiceExpr{
				pos: position{line: 679, col: 18, offset: 21949},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 679, col: 18, offset: 21949},
						run: (*parser).callontypeParamType2,
						expr: &seqExpr{
							pos: position{line: 679, col: 18, offset: 21949},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 679, col: 18, offset: 21949},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 679, col: 21, offset: 21952},
									label: "tI",
									expr: &ruleRefExpr{
										pos:  position{line: 679, col: 24, offset: 21955},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 21985},
						run: (*parser).callontypeParamType8,
						expr: &actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).callontypeParamType9,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamList",
			pos:  position{line: 691, col: 1, offset: 22229},
			expr: &choiceExpr{
				pos: position{line: 691, col: 23, offset: 22251},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 691, col: 23, offset: 22251},
						run: (*parser).calloncomponentParamList2,
						expr: &seqExpr{
							pos: position{line: 691, col: 23, offset: 22251},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 691, col: 23, offset: 22251},
									label: "lParenI",
									expr: &actionExpr{
										pos: position{line: 2867, col: 14, offset: 97512},
										run: (*parser).calloncomponentParamList5,
										expr: &seqExpr{
											pos: position{line: 2867, col: 14, offset: 97512},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).calloncomponentParamList7,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).calloncomponentParamList13,
												},
												&labeledExpr{
													pos:   position{line: 2867, col: 24, offset: 97522},
													label: "lParenI",
													expr: &actionExpr{
														pos: position{line: 2793, col: 12, offset: 94819},
														run: (*parser).calloncomponentParamList15,
														expr: &seqExpr{
															pos: position{line: 2793, col: 12, offset: 94819},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2793, col: 12, offset: 94819},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).calloncomponentParamList18,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2793, col: 21, offset: 94828},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2867, col: 40, offset: 97538},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).calloncomponentParamList29,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 691, col: 41, offset: 22269},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 691, col: 49, offset: 22277},
										expr: &ruleRefExpr{
											pos:  position{line: 691, col: 49, offset: 22277},
											name: "componentParams",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 691, col: 66, offset: 22294},
									label: "rParenI",
									expr: &choiceExpr{
										pos: position{line: 708, col: 26, offset: 22830},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2871, col: 12, offset: 97598},
												run: (*parser).calloncomponentParamList38,
												expr: &seqExpr{
													pos: position{line: 2871, col: 12, offset: 97598},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2871, col: 12, offset: 97598},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 2871, col: 15, offset: 97601},
															expr: &seqExpr{
																pos: position{line: 2871, col: 16, offset: 97602},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2871, col: 16, offset: 97602},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2871, col: 20, offset: 97606},
																		expr: &choiceExpr{
																			pos: position{line: 2787, col: 20, offset: 94555},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							run: (*parser).calloncomponentParamList49,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2785, col: 37, offset: 94524},
																							expr: &litMatcher{
																								pos:        position{line: 2785, col: 37, offset: 94524},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2785, col: 43, offset: 94530},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2871, col: 26, offset: 97612},
															label: "rParenI",
															expr: &actionExpr{
																pos: position{line: 2794, col: 12, offset: 94880},
																run: (*parser).calloncomponentParamList54,
																expr: &seqExpr{
																	pos: position{line: 2794, col: 12, offset: 94880},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2794, col: 12, offset: 94880},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).calloncomponentParamList57,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2794, col: 21, offset: 94889},
																			val:        ")",
																			ignoreCase: false,
																			want:       "\")\"",
																		},
																	},
																},
															},
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).calloncomponentParamList64,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 708, col: 36, offset: 22840},
												run: (*parser).calloncomponentParamList65,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).calloncomponentParamList66,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 22506},
						run: (*parser).calloncomponentParamList72,
						expr: &actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).calloncomponentParamList73,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParams",
			pos:  position{line: 712, col: 1, offset: 22900},
			expr: &actionExpr{
				pos: position{line: 712, col: 20, offset: 22919},
				run: (*parser).calloncomponentParams1,
				expr: &seqExpr{
					pos: position{line: 712, col: 20, offset: 22919},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 712, col: 20, offset: 22919},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 27, offset: 22926},
								name: "componentParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 42, offset: 22941},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 712, col: 48, offset: 22947},
								expr: &seqExpr{
									pos: position{line: 712, col: 49, offset: 22948},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 712, col: 49, offset: 22948},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 712, col: 52, offset: 22951},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 712, col: 56, offset: 22955},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).calloncomponentParams15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 712, col: 60, offset: 22959},
											name: "componentParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParam",
			pos:  position{line: 716, col: 1, offset: 23049},
			expr: &actionExpr{
				pos: position{line: 716, col: 19, offset: 23067},
				run: (*parser).calloncomponentParam1,
				expr: &seqExpr{
					pos: position{line: 716, col: 19, offset: 23067},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 716, col: 19, offset: 23067},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 744, col: 23, offset: 24169},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 265, col: 10, offset: 7614},
										run: (*parser).calloncomponentParam5,
										expr: &labeledExpr{
											pos:   position{line: 265, col: 10, offset: 7614},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1682, col: 17, offset: 55568},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1665, col: 20, offset: 55323},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1682, col: 26, offset: 55577},
														expr: &charClassMatcher{
															pos:        position{line: 1665, col: 20, offset: 55323},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 744, col: 31, offset: 24177},
										run: (*parser).calloncomponentParam11,
										expr: &seqExpr{
											pos: position{line: 744, col: 31, offset: 24177},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 744, col: 31, offset: 24177},
													expr: &charClassMatcher{
														pos:        position{line: 744, col: 31, offset: 24177},
														val:        "[^\\r\\n :,)]",
														chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&andExpr{
													pos: position{line: 744, col: 44, offset: 24190},
													expr: &charClassMatcher{
														pos:        position{line: 744, col: 45, offset: 24191},
														val:        "[:,)]",
														chars:      []rune{':', ',', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 44, offset: 23092},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).calloncomponentParam18,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 53, offset: 23101},
							label: "typeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 716, col: 59, offset: 23107},
								expr: &ruleRefExpr{
									pos:  position{line: 716, col: 59, offset: 23107},
									name: "componentParamType",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 79, offset: 23127},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 716, col: 88, offset: 23136},
								expr: &ruleRefExpr{
									pos:  position{line: 716, col: 88, offset: 23136},
									name: "componentParamDefault",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamType",
			pos:  position{line: 748, col: 1, offset: 24276},
			expr: &actionExpr{
				pos: position{line: 748, col: 23, offset: 24298},
				run: (*parser).calloncomponentParamType1,
				expr: &seqExpr{
					pos: position{line: 748, col: 23, offset: 24298},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 748, col: 23, offset: 24298},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 748, col: 26, offset: 24301},
							label: "tI",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 29, offset: 24304},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamDefault",
			pos:  position{line: 752, col: 1, offset: 24333},
			expr: &actionExpr{
				pos: position{line: 752, col: 26, offset: 24358},
				run: (*parser).calloncomponentParamDefault1,
				expr: &seqExpr{
					pos: position{line: 752, col: 26, offset: 24358},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 752, col: 26, offset: 24358},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 752, col: 29, offset: 24361},
							label: "colonI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).calloncomponentParamDefault6,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 752, col: 40, offset: 24372},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 752, col: 44, offset: 24376},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 752, col: 47, offset: 24379},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 53, offset: 24385},
								name: "componentParamDefaultValue",
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamDefaultValue",
			pos:  position{line: 759, col: 1, offset: 24538},
			expr: &choiceExpr{
				pos: position{line: 759, col: 31, offset: 24568},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 759, col: 31, offset: 24568},
						run: (*parser).calloncomponentParamDefaultValue2,
						expr: &labeledExpr{
							pos:   position{line: 759, col: 31, offset: 24568},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 37, offset: 24574},
								name: "GoExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 761, col: 5, offset: 24629},
						run: (*parser).calloncomponentParamDefaultValue5,
						expr: &actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).calloncomponentParamDefaultValue6,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCall",
			pos:  position{line: 784, col: 1, offset: 25404},
			expr: &actionExpr{
				pos: position{line: 784, col: 18, offset: 25421},
				run: (*parser).callonComponentCall1,
				expr: &seqExpr{
					pos: position{line: 784, col: 18, offset: 25421},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 784, col: 18, offset: 25421},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 784, col: 22, offset: 25425},
							label: "headerI",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 30, offset: 25433},
								name: "ComponentCallHeader",
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 50, offset: 25453},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 56, offset: 25459},
								name: "ComponentCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCallHeader",
			pos:  position{line: 791, col: 1, offset: 25604},
			expr: &actionExpr{
				pos: position{line: 791, col: 24, offset: 25627},
				run: (*parser).callonComponentCallHeader1,
				expr: &seqExpr{
					pos: position{line: 791, col: 24, offset: 25627},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 791, col: 24, offset: 25627},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 791, col: 35, offset: 25638},
								expr: &actionExpr{
									pos: position{line: 269, col: 14, offset: 7720},
									run: (*parser).callonComponentCallHeader5,
									expr: &seqExpr{
										pos: position{line: 269, col: 14, offset: 7720},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 269, col: 14, offset: 7720},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 18, offset: 7724},
												label: "identI",
												expr: &actionExpr{
													pos: position{line: 265, col: 10, offset: 7614},
													run: (*parser).callonComponentCallHeader9,
													expr: &labeledExpr{
														pos:   position{line: 265, col: 10, offset: 7614},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 1682, col: 17, offset: 55568},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1665, col: 20, offset: 55323},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1682, col: 26, offset: 55577},
																	expr: &charClassMatcher{
																		pos:        position{line: 1665, col: 20, offset: 55323},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 46, offset: 25649},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 804, col: 22, offset: 26056},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 265, col: 10, offset: 7614},
										run: (*parser).callonComponentCallHeader17,
										expr: &labeledExpr{
											pos:   position{line: 265, col: 10, offset: 7614},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1682, col: 17, offset: 55568},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1665, col: 20, offset: 55323},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1682, col: 26, offset: 55577},
														expr: &charClassMatcher{
															pos:        position{line: 1665, col: 20, offset: 55323},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 804, col: 30, offset: 26064},
										run: (*parser).callonComponentCallHeader23,
										expr: &seqExpr{
											pos: position{line: 804, col: 30, offset: 26064},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 804, col: 30, offset: 26064},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 804, col: 37, offset: 26071},
														expr: &seqExpr{
															pos: position{line: 804, col: 38, offset: 26072},
															exprs: []any{
																&notExpr{
																	pos: position{line: 804, col: 38, offset: 26072},
																	expr: &seqExpr{
																		pos: position{line: 804, col: 40, offset: 26074},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 804, col: 40, offset: 26074},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 804, col: 43, offset: 26077},
																				val:        "[(};]",
																				chars:      []rune{'(', '}', ';'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 804, col: 50, offset: 26084},
																	val:        "[^\\r\\n(]",
																	chars:      []rune{'\r', '\n', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 804, col: 61, offset: 26095},
													expr: &litMatcher{
														pos:        position{line: 804, col: 62, offset: 26096},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 806, col: 5, offset: 26175},
										run: (*parser).callonComponentCallHeader36,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonComponentCallHeader37,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 70, offset: 25673},
							label: "typeArgsI",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 80, offset: 25683},
								name: "componentTypeArgList",
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 101, offset: 25704},
							label: "argsI",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 107, offset: 25710},
								name: "componentArgList",
							},
						},
					},
				},
			},
		},
		{
			name: "componentTypeArgList",
			pos:  position{line: 810, col: 1, offset: 26244},
			expr: &actionExpr{
				pos: position{line: 810, col: 25, offset: 26268},
				run: (*parser).calloncomponentTypeArgList1,
				expr: &seqExpr{
					pos: position{line: 810, col: 25, offset: 26268},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 810, col: 25, offset: 26268},
							label: "lBracketI",
							expr: &actionExpr{
								pos: position{line: 2875, col: 15, offset: 97696},
								run: (*parser).calloncomponentTypeArgList4,
								expr: &seqExpr{
									pos: position{line: 2875, col: 15, offset: 97696},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).calloncomponentTypeArgList6,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2841, col: 18, offset: 96619},
											run: (*parser).calloncomponentTypeArgList12,
										},
										&labeledExpr{
											pos:   position{line: 2875, col: 25, offset: 97706},
											label: "lBracketI",
											expr: &actionExpr{
												pos: position{line: 2799, col: 14, offset: 95067},
												run: (*parser).calloncomponentTypeArgList14,
												expr: &seqExpr{
													pos: position{line: 2799, col: 14, offset: 95067},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2799, col: 14, offset: 95067},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).calloncomponentTypeArgList17,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2799, col: 23, offset: 95076},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2875, col: 45, offset: 97726},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).calloncomponentTypeArgList28,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 46, offset: 26289},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 810, col: 52, offset: 26295},
								expr: &ruleRefExpr{
									pos:  position{line: 810, col: 52, offset: 26295},
									name: "typeArgs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 62, offset: 26305},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 818, col: 28, offset: 26552},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2879, col: 13, offset: 97789},
										run: (*parser).calloncomponentTypeArgList37,
										expr: &seqExpr{
											pos: position{line: 2879, col: 13, offset: 97789},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2879, col: 13, offset: 97789},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2879, col: 16, offset: 97792},
													expr: &seqExpr{
														pos: position{line: 2879, col: 17, offset: 97793},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2879, col: 17, offset: 97793},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2879, col: 21, offset: 97797},
																expr: &choiceExpr{
																	pos: position{line: 2787, col: 20, offset: 94555},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					run: (*parser).calloncomponentTypeArgList48,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2785, col: 37, offset: 94524},
																					expr: &litMatcher{
																						pos:        position{line: 2785, col: 37, offset: 94524},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2785, col: 43, offset: 94530},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2879, col: 27, offset: 97803},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2800, col: 14, offset: 95130},
														run: (*parser).calloncomponentTypeArgList53,
														expr: &seqExpr{
															pos: position{line: 2800, col: 14, offset: 95130},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2800, col: 14, offset: 95130},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).calloncomponentTypeArgList56,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2800, col: 23, offset: 95139},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).calloncomponentTypeArgList63,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 818, col: 39, offset: 26563},
										run: (*parser).calloncomponentTypeArgList64,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).calloncomponentTypeArgList65,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeArgs",
			pos:  position{line: 822, col: 1, offset: 26627},
			expr: &actionExpr{
				pos: position{line: 822, col: 13, offset: 26639},
				run: (*parser).callontypeArgs1,
				expr: &seqExpr{
					pos: position{line: 822, col: 13, offset: 26639},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 822, col: 13, offset: 26639},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 20, offset: 26646},
								name: "typeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 822, col: 28, offset: 26654},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 822, col: 34, offset: 26660},
								expr: &seqExpr{
									pos: position{line: 822, col: 35, offset: 26661},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 822, col: 35, offset: 26661},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 822, col: 38, offset: 26664},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 822, col: 42, offset: 26668},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).callontypeArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 822, col: 46, offset: 26672},
											name: "typeArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeArg",
			pos:  position{line: 826, col: 1, offset: 26745},
			expr: &choiceExpr{
				pos: position{line: 826, col: 12, offset: 26756},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 826, col: 12, offset: 26756},
						run: (*parser).callontypeArg2,
						expr: &labeledExpr{
							pos:   position{line: 826, col: 12, offset: 26756},
							label: "tI",
							expr: &ruleRefExpr{
								pos:  position{line: 826, col: 15, offset: 26759},
								name: "Type",
							},
						},
					},
					&actionExpr{
						pos: position{line: 828, col: 5, offset: 26789},
						run: (*parser).callontypeArg5,
						expr: &actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).callontypeArg6,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgList",
			pos:  position{line: 838, col: 1, offset: 27040},
			expr: &choiceExpr{
				pos: position{line: 838, col: 21, offset: 27060},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 838, col: 21, offset: 27060},
						run: (*parser).calloncomponentArgList2,
						expr: &seqExpr{
							pos: position{line: 838, col: 21, offset: 27060},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 838, col: 21, offset: 27060},
									label: "lParenI",
									expr: &actionExpr{
										pos: position{line: 2867, col: 14, offset: 97512},
										run: (*parser).calloncomponentArgList5,
										expr: &seqExpr{
											pos: position{line: 2867, col: 14, offset: 97512},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).calloncomponentArgList7,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).calloncomponentArgList13,
												},
												&labeledExpr{
													pos:   position{line: 2867, col: 24, offset: 97522},
													label: "lParenI",
													expr: &actionExpr{
														pos: position{line: 2793, col: 12, offset: 94819},
														run: (*parser).calloncomponentArgList15,
														expr: &seqExpr{
															pos: position{line: 2793, col: 12, offset: 94819},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2793, col: 12, offset: 94819},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).calloncomponentArgList18,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2793, col: 21, offset: 94828},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2867, col: 40, offset: 97538},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).calloncomponentArgList29,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 838, col: 39, offset: 27078},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 838, col: 45, offset: 27084},
										expr: &ruleRefExpr{
											pos:  position{line: 838, col: 45, offset: 27084},
											name: "componentArgs",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 838, col: 60, offset: 27099},
									label: "rParenI",
									expr: &choiceExpr{
										pos: position{line: 855, col: 24, offset: 27638},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2871, col: 12, offset: 97598},
												run: (*parser).calloncomponentArgList38,
												expr: &seqExpr{
													pos: position{line: 2871, col: 12, offset: 97598},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2871, col: 12, offset: 97598},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 2871, col: 15, offset: 97601},
															expr: &seqExpr{
																pos: position{line: 2871, col: 16, offset: 97602},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2871, col: 16, offset: 97602},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2871, col: 20, offset: 97606},
																		expr: &choiceExpr{
																			pos: position{line: 2787, col: 20, offset: 94555},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							run: (*parser).calloncomponentArgList49,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2785, col: 37, offset: 94524},
																							expr: &litMatcher{
																								pos:        position{line: 2785, col: 37, offset: 94524},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2785, col: 43, offset: 94530},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2871, col: 26, offset: 97612},
															label: "rParenI",
															expr: &actionExpr{
																pos: position{line: 2794, col: 12, offset: 94880},
																run: (*parser).calloncomponentArgList54,
																expr: &seqExpr{
																	pos: position{line: 2794, col: 12, offset: 94880},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2794, col: 12, offset: 94880},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).calloncomponentArgList57,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2794, col: 21, offset: 94889},
																			val:        ")",
																			ignoreCase: false,
																			want:       "\")\"",
																		},
																	},
																},
															},
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).calloncomponentArgList64,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 855, col: 34, offset: 27648},
												run: (*parser).calloncomponentArgList65,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).calloncomponentArgList66,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 27310},
						run: (*parser).calloncomponentArgList72,
						expr: &actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).calloncomponentArgList73,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgs",
			pos:  position{line: 859, col: 1, offset: 27707},
			expr: &actionExpr{
				pos: position{line: 859, col: 18, offset: 27724},
				run: (*parser).calloncomponentArgs1,
				expr: &seqExpr{
					pos: position{line: 859, col: 18, offset: 27724},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 859, col: 18, offset: 27724},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 25, offset: 27731},
								name: "componentArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 859, col: 38, offset: 27744},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 859, col: 44, offset: 27750},
								expr: &seqExpr{
									pos: position{line: 859, col: 45, offset: 27751},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 859, col: 45, offset: 27751},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 859, col: 48, offset: 27754},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 859, col: 52, offset: 27758},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).calloncomponentArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 859, col: 56, offset: 27762},
											name: "componentArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArg",
			pos:  position{line: 863, col: 1, offset: 27848},
			expr: &actionExpr{
				pos: position{line: 863, col: 17, offset: 27864},
				run: (*parser).calloncomponentArg1,
				expr: &seqExpr{
					pos: position{line: 863, col: 17, offset: 27864},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 863, col: 17, offset: 27864},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 870, col: 21, offset: 28058},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 265, col: 10, offset: 7614},
										run: (*parser).calloncomponentArg5,
										expr: &labeledExpr{
											pos:   position{line: 265, col: 10, offset: 7614},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1682, col: 17, offset: 55568},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1665, col: 20, offset: 55323},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1682, col: 26, offset: 55577},
														expr: &charClassMatcher{
															pos:        position{line: 1665, col: 20, offset: 55323},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 870, col: 29, offset: 28066},
										run: (*parser).calloncomponentArg11,
										expr: &seqExpr{
											pos: position{line: 870, col: 29, offset: 28066},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 870, col: 29, offset: 28066},
													expr: &charClassMatcher{
														pos:        position{line: 870, col: 29, offset: 28066},
														val:        "[^\\r\\n :,)]",
														chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&andExpr{
													pos: position{line: 870, col: 42, offset: 28079},
													expr: &charClassMatcher{
														pos:        position{line: 870, col: 43, offset: 28080},
														val:        "[:,)]",
														chars:      []rune{':', ',', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 863, col: 40, offset: 27887},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 43, offset: 27890},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 48, offset: 27895},
								name: "componentArgValue",
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgValue",
			pos:  position{line: 874, col: 1, offset: 28164},
			expr: &choiceExpr{
				pos: position{line: 874, col: 22, offset: 28185},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 874, col: 22, offset: 28185},
						run: (*parser).calloncomponentArgValue2,
						expr: &seqExpr{
							pos: position{line: 874, col: 22, offset: 28185},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 874, col: 22, offset: 28185},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 874, col: 26, offset: 28189},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).calloncomponentArgValue9,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 874, col: 30, offset: 28193},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 36, offset: 28199},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 28238},
						run: (*parser).calloncomponentArgValue15,
						expr: &seqExpr{
							pos: position{line: 876, col: 5, offset: 28238},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 876, col: 5, offset: 28238},
									expr: &litMatcher{
										pos:        position{line: 876, col: 5, offset: 28238},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 876, col: 10, offset: 28243},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 876, col: 13, offset: 28246},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).calloncomponentArgValue22,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCallBody",
			pos:  position{line: 894, col: 1, offset: 28879},
			expr: &actionExpr{
				pos: position{line: 894, col: 22, offset: 28900},
				run: (*parser).callonComponentCallBody1,
				expr: &seqExpr{
					pos: position{line: 894, col: 22, offset: 28900},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 894, col: 22, offset: 28900},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 25, offset: 28903},
							label: "bI",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 28, offset: 28906},
								name: "componentCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "componentCallBody",
			pos:  position{line: 895, col: 1, offset: 28943},
			expr: &choiceExpr{
				pos: position{line: 895, col: 22, offset: 28964},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 895, col: 22, offset: 28964},
						name: "UnderscoreBlockShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 49, offset: 28991},
						name: "Scope",
					},
					&actionExpr{
						pos: position{line: 895, col: 57, offset: 28999},
						run: (*parser).calloncomponentCallBody4,
						expr: &choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 83, offset: 29025},
						run: (*parser).calloncomponentCallBody24,
						expr: &seqExpr{
							pos: position{line: 895, col: 83, offset: 29025},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 895, col: 83, offset: 29025},
									label: "uI",
									expr: &actionExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										run: (*parser).calloncomponentCallBody27,
										expr: &seqExpr{
											pos: position{line: 2767, col: 35, offset: 93911},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2767, col: 35, offset: 93911},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 38, offset: 93914},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2767, col: 50, offset: 93926},
														expr: &seqExpr{
															pos: position{line: 2767, col: 51, offset: 93927},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2767, col: 51, offset: 93927},
																	expr: &choiceExpr{
																		pos: position{line: 2764, col: 27, offset: 93768},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2762, col: 23, offset: 93682},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										expr: &litMatcher{
																											pos:        position{line: 2762, col: 27, offset: 93686},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2762, col: 33, offset: 93692},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2761, col: 23, offset: 93657},
																								expr: &anyMatcher{
																									line: 2761, col: 24, offset: 93658,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 33, offset: 93774},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2764, col: 39, offset: 93780},
																				expr: &seqExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2764, col: 41, offset: 93782},
																							expr: &charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2764, col: 45, offset: 93786},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2764, col: 45, offset: 93786},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 51, offset: 93792},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2767, col: 57, offset: 93933},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2767, col: 57, offset: 93933},
																			expr: &charClassMatcher{
																				pos:        position{line: 2767, col: 57, offset: 93933},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2767, col: 71, offset: 93947},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2767, col: 71, offset: 93947},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2767, col: 75, offset: 93951},
																					expr: &charClassMatcher{
																						pos:        position{line: 2767, col: 75, offset: 93951},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2767, col: 81, offset: 93957},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 895, col: 97, offset: 29039},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnderscoreBlockShorthand",
			pos:  position{line: 911, col: 1, offset: 29616},
			expr: &actionExpr{
				pos: position{line: 911, col: 29, offset: 29644},
				run: (*parser).callonUnderscoreBlockShorthand1,
				expr: &seqExpr{
					pos: position{line: 911, col: 29, offset: 29644},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 911, col: 29, offset: 29644},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 911, col: 33, offset: 29648},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 911, col: 39, offset: 29654},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 922, col: 1, offset: 29967},
			expr: &actionExpr{
				pos: position{line: 922, col: 10, offset: 29976},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 922, col: 10, offset: 29976},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 922, col: 10, offset: 29976},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 928, col: 19, offset: 30137},
								run: (*parser).callonBlock4,
								expr: &seqExpr{
									pos: position{line: 928, col: 19, offset: 30137},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 928, col: 19, offset: 30137},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 928, col: 27, offset: 30145},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 935, col: 14, offset: 30277},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 935, col: 14, offset: 30277},
														run: (*parser).callonBlock9,
														expr: &seqExpr{
															pos: position{line: 935, col: 14, offset: 30277},
															exprs: []any{
																&oneOrMoreExpr{
																	pos: position{line: 935, col: 14, offset: 30277},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 935, col: 17, offset: 30280},
																	label: "identI",
																	expr: &actionExpr{
																		pos: position{line: 265, col: 10, offset: 7614},
																		run: (*parser).callonBlock14,
																		expr: &labeledExpr{
																			pos:   position{line: 265, col: 10, offset: 7614},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 1682, col: 17, offset: 55568},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 1665, col: 20, offset: 55323},
																						val:        "[_\\pL]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1682, col: 26, offset: 55577},
																						expr: &charClassMatcher{
																							pos:        position{line: 1665, col: 20, offset: 55323},
																							val:        "[_\\pL\\pNd]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 937, col: 5, offset: 30321},
														run: (*parser).callonBlock20,
														expr: &seqExpr{
															pos: position{line: 937, col: 5, offset: 30321},
															exprs: []any{
																&oneOrMoreExpr{
																	pos: position{line: 937, col: 5, offset: 30321},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 937, col: 8, offset: 30324},
																	label: "startI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonBlock25,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 937, col: 19, offset: 30335},
																	label: "identI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 937, col: 26, offset: 30342},
																		expr: &seqExpr{
																			pos: position{line: 937, col: 27, offset: 30343},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 937, col: 27, offset: 30343},
																					expr: &seqExpr{
																						pos: position{line: 937, col: 29, offset: 30345},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 937, col: 29, offset: 30345},
																								expr: &charClassMatcher{
																									pos:        position{line: 2784, col: 37, offset: 94482},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 937, col: 32, offset: 30348},
																								val:        "[[{};]",
																								chars:      []rune{'[', '{', '}', ';'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 937, col: 40, offset: 30356},
																					val:        "[^\\r\\n[{};]",
																					chars:      []rune{'\r', '\n', '[', '{', '}', ';'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&andExpr{
																	pos: position{line: 937, col: 54, offset: 30370},
																	expr: &charClassMatcher{
																		pos:        position{line: 937, col: 55, offset: 30371},
																		val:        "[[{};]",
																		chars:      []rune{'[', '{', '}', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 939, col: 5, offset: 30461},
														run: (*parser).callonBlock42,
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonBlock43,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 32, offset: 29998},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 38, offset: 30004},
								name: "OptionalBody",
							},
						},
					},
				},
			},
		},
		{
			name: "If",
			pos:  position{line: 958, col: 1, offset: 31005},
			expr: &actionExpr{
				pos: position{line: 958, col: 7, offset: 31011},
				run: (*parser).callonIf1,
				expr: &seqExpr{
					pos: position{line: 958, col: 7, offset: 31011},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 958, col: 7, offset: 31011},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&labeledExpr{
							pos:   position{line: 958, col: 12, offset: 31016},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 958, col: 18, offset: 31022},
								name: "ifCondition",
							},
						},
						&labeledExpr{
							pos:   position{line: 958, col: 30, offset: 31034},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 958, col: 36, offset: 31040},
								name: "Body",
							},
						},
						&labeledExpr{
							pos:   position{line: 958, col: 41, offset: 31045},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 958, col: 50, offset: 31054},
								expr: &ruleRefExpr{
									pos:  position{line: 958, col: 50, offset: 31054},
									name: "ElseIf",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 958, col: 58, offset: 31062},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 958, col: 64, offset: 31068},
								expr: &ruleRefExpr{
									pos:  position{line: 958, col: 64, offset: 31068},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIf",
			pos:  position{line: 968, col: 1, offset: 31325},
			expr: &actionExpr{
				pos: position{line: 968, col: 11, offset: 31335},
				run: (*parser).callonElseIf1,
				expr: &seqExpr{
					pos: position{line: 968, col: 11, offset: 31335},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 968, col: 11, offset: 31335},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonElseIf7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 968, col: 15, offset: 31339},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 968, col: 22, offset: 31346},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 968, col: 25, offset: 31349},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&labeledExpr{
							pos:   position{line: 968, col: 30, offset: 31354},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 36, offset: 31360},
								name: "ifCondition",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 968, col: 48, offset: 31372},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 51, offset: 31375},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 57, offset: 31381},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "Else",
			pos:  position{line: 976, col: 1, offset: 31544},
			expr: &actionExpr{
				pos: position{line: 976, col: 9, offset: 31552},
				run: (*parser).callonElse1,
				expr: &seqExpr{
					pos: position{line: 976, col: 9, offset: 31552},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 976, col: 9, offset: 31552},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonElse7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 976, col: 13, offset: 31556},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 976, col: 20, offset: 31563},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 23, offset: 31566},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 29, offset: 31572},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "ifCondition",
			pos:  position{line: 983, col: 1, offset: 31685},
			expr: &choiceExpr{
				pos: position{line: 983, col: 16, offset: 31700},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 983, col: 16, offset: 31700},
						run: (*parser).callonifCondition2,
						expr: &seqExpr{
							pos: position{line: 983, col: 16, offset: 31700},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 983, col: 16, offset: 31700},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 983, col: 19, offset: 31703},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 983, col: 25, offset: 31709},
										name: "IfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 31750},
						run: (*parser).callonifCondition8,
						expr: &actionExpr{
							pos: position{line: 943, col: 21, offset: 30554},
							run: (*parser).callonifCondition9,
							expr: &labeledExpr{
								pos:   position{line: 943, col: 21, offset: 30554},
								label: "posI",
								expr: &actionExpr{
									pos: position{line: 2774, col: 8, offset: 94166},
									run: (*parser).callonifCondition11,
									expr: &choiceExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										alternatives: []any{
											&andExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												expr: &anyMatcher{
													line: 2774, col: 10, offset: 94168,
												},
											},
											&notExpr{
												pos: position{line: 2774, col: 14, offset: 94172},
												expr: &anyMatcher{
													line: 2774, col: 15, offset: 94173,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 993, col: 1, offset: 31994},
			expr: &actionExpr{
				pos: position{line: 993, col: 11, offset: 32004},
				run: (*parser).callonSwitch1,
				expr: &seqExpr{
					pos: position{line: 993, col: 11, offset: 32004},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 993, col: 11, offset: 32004},
							val:        "switch",
							ignoreCase: false,
							want:       "\"switch\"",
						},
						&labeledExpr{
							pos:   position{line: 993, col: 20, offset: 32013},
							label: "comparatorI",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 32, offset: 32025},
								name: "switchComparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 993, col: 49, offset: 32042},
							label: "endI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).callonSwitch7,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 993, col: 58, offset: 32051},
							label: "casesI",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 65, offset: 32058},
								name: "switchCases",
							},
						},
					},
				},
			},
		},
		{
			name: "switchComparator",
			pos:  position{line: 1017, col: 1, offset: 32665},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 21, offset: 32685},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1017, col: 21, offset: 32685},
						run: (*parser).callonswitchComparator2,
						expr: &seqExpr{
							pos: position{line: 1017, col: 21, offset: 32685},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1017, col: 21, offset: 32685},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1017, col: 24, offset: 32688},
									expr: &litMatcher{
										pos:        position{line: 1017, col: 25, offset: 32689},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 32734},
						run: (*parser).callonswitchComparator8,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 32734},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1019, col: 5, offset: 32734},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 8, offset: 32737},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 14, offset: 32743},
										name: "ConditionalGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1019, col: 38, offset: 32767},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1019, col: 41, offset: 32770},
									expr: &litMatcher{
										pos:        position{line: 1019, col: 42, offset: 32771},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 32817},
						run: (*parser).callonswitchComparator18,
						expr: &seqExpr{
							pos: position{line: 1021, col: 5, offset: 32817},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1021, col: 5, offset: 32817},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 8, offset: 32820},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 14, offset: 32826},
										name: "ConditionalGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 38, offset: 32850},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonswitchComparator25,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1021, col: 49, offset: 32861},
									expr: &charClassMatcher{
										pos:        position{line: 1021, col: 49, offset: 32861},
										val:        "[^\\r\\n{]",
										chars:      []rune{'\r', '\n', '{'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 59, offset: 32871},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonswitchComparator34,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchCases",
			pos:  position{line: 1026, col: 1, offset: 33037},
			expr: &actionExpr{
				pos: position{line: 1026, col: 16, offset: 33052},
				run: (*parser).callonswitchCases1,
				expr: &seqExpr{
					pos: position{line: 1026, col: 16, offset: 33052},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2883, col: 15, offset: 97893},
							run: (*parser).callonswitchCases3,
							expr: &seqExpr{
								pos: position{line: 2883, col: 15, offset: 97893},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonswitchCases5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonswitchCases11,
									},
									&labeledExpr{
										pos:   position{line: 2883, col: 25, offset: 97903},
										label: "lBraceI",
										expr: &actionExpr{
											pos: position{line: 2796, col: 12, offset: 94942},
											run: (*parser).callonswitchCases13,
											expr: &seqExpr{
												pos: position{line: 2796, col: 12, offset: 94942},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2796, col: 12, offset: 94942},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonswitchCases16,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2796, col: 21, offset: 94951},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2883, col: 41, offset: 97919},
										expr: &choiceExpr{
											pos: position{line: 2787, col: 20, offset: 94555},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2787, col: 31, offset: 94566},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															run: (*parser).callonswitchCases27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2785, col: 37, offset: 94524},
															expr: &litMatcher{
																pos:        position{line: 2785, col: 37, offset: 94524},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2785, col: 43, offset: 94530},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1026, col: 27, offset: 33063},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonswitchCases35,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1026, col: 31, offset: 33067},
							expr: &ruleRefExpr{
								pos:  position{line: 1026, col: 31, offset: 33067},
								name: "preFirstCase",
							},
						},
						&labeledExpr{
							pos:   position{line: 1026, col: 45, offset: 33081},
							label: "itms",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1026, col: 50, offset: 33086},
								expr: &ruleRefExpr{
									pos:  position{line: 1026, col: 50, offset: 33086},
									name: "switchCase",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1026, col: 62, offset: 33098},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonswitchCases48,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1026, col: 66, offset: 33102},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 2887, col: 13, offset: 97980},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2887, col: 13, offset: 97980},
										run: (*parser).callonswitchCases54,
										expr: &seqExpr{
											pos: position{line: 2887, col: 13, offset: 97980},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2887, col: 13, offset: 97980},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).callonswitchCases60,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2887, col: 17, offset: 97984},
													label: "rBraceI",
													expr: &actionExpr{
														pos: position{line: 2797, col: 12, offset: 95003},
														run: (*parser).callonswitchCases65,
														expr: &seqExpr{
															pos: position{line: 2797, col: 12, offset: 95003},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2797, col: 12, offset: 95003},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonswitchCases68,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2797, col: 21, offset: 95012},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonswitchCases75,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2889, col: 5, offset: 98055},
										run: (*parser).callonswitchCases76,
										expr: &labeledExpr{
											pos:   position{line: 2889, col: 5, offset: 98055},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonswitchCases78,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "preFirstCase",
			pos:  position{line: 1059, col: 1, offset: 33996},
			expr: &actionExpr{
				pos: position{line: 1059, col: 17, offset: 34012},
				run: (*parser).callonpreFirstCase1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1059, col: 17, offset: 34012},
					expr: &choiceExpr{
						pos: position{line: 1059, col: 18, offset: 34013},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 1059, col: 18, offset: 34013},
								exprs: []any{
									&notExpr{
										pos: position{line: 1059, col: 18, offset: 34013},
										expr: &choiceExpr{
											pos: position{line: 1059, col: 20, offset: 34015},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 1059, col: 20, offset: 34015},
													val:        "case",
													ignoreCase: false,
													want:       "\"case\"",
												},
												&litMatcher{
													pos:        position{line: 1059, col: 29, offset: 34024},
													val:        "default",
													ignoreCase: false,
													want:       "\"default\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1059, col: 40, offset: 34035},
										val:        "[^{}]",
										chars:      []rune{'{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
							&seqExpr{
								pos: position{line: 1059, col: 48, offset: 34043},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1059, col: 48, offset: 34043},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 52, offset: 34047},
										name: "preFirstCase",
									},
									&zeroOrOneExpr{
										pos: position{line: 1059, col: 65, offset: 34060},
										expr: &litMatcher{
											pos:        position{line: 1059, col: 65, offset: 34060},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchCase",
			pos:  position{line: 1069, col: 1, offset: 34303},
			expr: &actionExpr{
				pos: position{line: 1069, col: 15, offset: 34317},
				run: (*parser).callonswitchCase1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 15, offset: 34317},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 1069, col: 15, offset: 34317},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonswitchCase7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 19, offset: 34321},
							label: "caseI",
							expr: &choiceExpr{
								pos: position{line: 1069, col: 26, offset: 34328},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1069, col: 26, offset: 34328},
										name: "Case",
									},
									&ruleRefExpr{
										pos:  position{line: 1069, col: 33, offset: 34335},
										name: "Default",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 1073, col: 1, offset: 34371},
			expr: &actionExpr{
				pos: position{line: 1073, col: 9, offset: 34379},
				run: (*parser).callonCase1,
				expr: &seqExpr{
					pos: position{line: 1073, col: 9, offset: 34379},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1073, col: 9, offset: 34379},
							val:        "case",
							ignoreCase: false,
							want:       "\"case\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1073, col: 16, offset: 34386},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 19, offset: 34389},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 1073, col: 25, offset: 34395},
								name: "caseCondition",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1073, col: 39, offset: 34409},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 42, offset: 34412},
							label: "colonI",
							expr: &choiceExpr{
								pos: position{line: 1090, col: 16, offset: 34883},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1090, col: 16, offset: 34883},
										run: (*parser).callonCase12,
										expr: &litMatcher{
											pos:        position{line: 1090, col: 16, offset: 34883},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
									},
									&actionExpr{
										pos: position{line: 1092, col: 5, offset: 34916},
										run: (*parser).callonCase14,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonCase15,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1073, col: 61, offset: 34431},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1073, col: 67, offset: 34437},
								expr: &ruleRefExpr{
									pos:  position{line: 1073, col: 67, offset: 34437},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 1082, col: 1, offset: 34657},
			expr: &actionExpr{
				pos: position{line: 1082, col: 12, offset: 34668},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 12, offset: 34668},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1082, col: 12, offset: 34668},
							val:        "default",
							ignoreCase: false,
							want:       "\"default\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1082, col: 22, offset: 34678},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 25, offset: 34681},
							label: "colonI",
							expr: &choiceExpr{
								pos: position{line: 1090, col: 16, offset: 34883},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1090, col: 16, offset: 34883},
										run: (*parser).callonDefault8,
										expr: &litMatcher{
											pos:        position{line: 1090, col: 16, offset: 34883},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
									},
									&actionExpr{
										pos: position{line: 1092, col: 5, offset: 34916},
										run: (*parser).callonDefault10,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonDefault11,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 44, offset: 34700},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1082, col: 50, offset: 34706},
								expr: &ruleRefExpr{
									pos:  position{line: 1082, col: 50, offset: 34706},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "caseCondition",
			pos:  position{line: 1102, col: 1, offset: 35146},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 18, offset: 35163},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1102, col: 18, offset: 35163},
						run: (*parser).calloncaseCondition2,
						expr: &seqExpr{
							pos: position{line: 1102, col: 18, offset: 35163},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1102, col: 18, offset: 35163},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 21, offset: 35166},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 27, offset: 35172},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 35211},
						run: (*parser).calloncaseCondition8,
						expr: &actionExpr{
							pos: position{line: 943, col: 21, offset: 30554},
							run: (*parser).calloncaseCondition9,
							expr: &labeledExpr{
								pos:   position{line: 943, col: 21, offset: 30554},
								label: "posI",
								expr: &actionExpr{
									pos: position{line: 2774, col: 8, offset: 94166},
									run: (*parser).calloncaseCondition11,
									expr: &choiceExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										alternatives: []any{
											&andExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												expr: &anyMatcher{
													line: 2774, col: 10, offset: 94168,
												},
											},
											&notExpr{
												pos: position{line: 2774, col: 14, offset: 94172},
												expr: &anyMatcher{
													line: 2774, col: 15, offset: 94173,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchThen",
			pos:  position{line: 1108, col: 1, offset: 35253},
			expr: &actionExpr{
				pos: position{line: 1108, col: 15, offset: 35267},
				run: (*parser).callonswitchThen1,
				expr: &labeledExpr{
					pos:   position{line: 1108, col: 15, offset: 35267},
					label: "itmsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1108, col: 21, offset: 35273},
						expr: &ruleRefExpr{
							pos:  position{line: 1108, col: 21, offset: 35273},
							name: "switchScopeItem",
						},
					},
				},
			},
		},
		{
			name: "switchScopeItem",
			pos:  position{line: 1112, col: 1, offset: 35360},
			expr: &actionExpr{
				pos: position{line: 1112, col: 20, offset: 35379},
				run: (*parser).callonswitchScopeItem1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 20, offset: 35379},
					exprs: []any{
						&notExpr{
							pos: position{line: 1112, col: 20, offset: 35379},
							expr: &choiceExpr{
								pos: position{line: 1112, col: 22, offset: 35381},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1112, col: 22, offset: 35381},
										val:        "}",
										ignoreCase: false,
										want:       "\"}\"",
									},
									&seqExpr{
										pos: position{line: 1112, col: 28, offset: 35387},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1112, col: 28, offset: 35387},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 1112, col: 35, offset: 35394},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1112, col: 40, offset: 35399},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1112, col: 40, offset: 35399},
												val:        "default",
												ignoreCase: false,
												want:       "\"default\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1112, col: 50, offset: 35409},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1112, col: 53, offset: 35412},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 58, offset: 35417},
							label: "itmI",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 63, offset: 35422},
								name: "ScopeItem",
							},
						},
					},
				},
			},
		},
		{
			name: "For",
			pos:  position{line: 1120, col: 1, offset: 35636},
			expr: &actionExpr{
				pos: position{line: 1120, col: 8, offset: 35643},
				run: (*parser).callonFor1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 8, offset: 35643},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1120, col: 8, offset: 35643},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 14, offset: 35649},
							label: "exprI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1120, col: 20, offset: 35655},
								expr: &ruleRefExpr{
									pos:  position{line: 1120, col: 20, offset: 35655},
									name: "forExpression",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1120, col: 35, offset: 35670},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 38, offset: 35673},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 44, offset: 35679},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "forExpression",
			pos:  position{line: 1128, col: 1, offset: 35850},
			expr: &actionExpr{
				pos: position{line: 1128, col: 18, offset: 35867},
				run: (*parser).callonforExpression1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 18, offset: 35867},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1128, col: 18, offset: 35867},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 21, offset: 35870},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 1128, col: 27, offset: 35876},
								name: "ForExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 1173, col: 1, offset: 37236},
			expr: &actionExpr{
				pos: position{line: 1173, col: 12, offset: 37247},
				run: (*parser).callonElement1,
				expr: &seqExpr{
					pos: position{line: 1173, col: 12, offset: 37247},
					exprs: []any{
						&notExpr{
							pos: position{line: 1173, col: 12, offset: 37247},
							expr: &choiceExpr{
								pos: position{line: 2772, col: 14, offset: 94053},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2772, col: 14, offset: 94053},
										val:        "if",
										ignoreCase: false,
										want:       "\"if\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 21, offset: 94060},
										val:        "else",
										ignoreCase: false,
										want:       "\"else\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 30, offset: 94069},
										val:        "switch",
										ignoreCase: false,
										want:       "\"switch\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 41, offset: 94080},
										val:        "case",
										ignoreCase: false,
										want:       "\"case\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 50, offset: 94089},
										val:        "default",
										ignoreCase: false,
										want:       "\"default\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 62, offset: 94101},
										val:        "for",
										ignoreCase: false,
										want:       "\"for\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 70, offset: 94109},
										val:        "return",
										ignoreCase: false,
										want:       "\"return\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 81, offset: 94120},
										val:        "break",
										ignoreCase: false,
										want:       "\"break\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 91, offset: 94130},
										val:        "continue",
										ignoreCase: false,
										want:       "\"continue\"",
									},
									&litMatcher{
										pos:        position{line: 2772, col: 104, offset: 94143},
										val:        "fallthrough",
										ignoreCase: false,
										want:       "\"fallthrough\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1173, col: 22, offset: 37257},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2151, col: 16, offset: 73075},
								expr: &charClassMatcher{
									pos:        position{line: 2137, col: 27, offset: 72414},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1173, col: 40, offset: 37275},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1173, col: 46, offset: 37281},
								expr: &litMatcher{
									pos:        position{line: 1173, col: 46, offset: 37281},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1173, col: 51, offset: 37286},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1173, col: 54, offset: 37289},
							label: "attrsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1173, col: 61, offset: 37296},
								expr: &ruleRefExpr{
									pos:  position{line: 1173, col: 61, offset: 37296},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1173, col: 82, offset: 37317},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1173, col: 88, offset: 37323},
								name: "OptionalBody",
							},
						},
					},
				},
			},
		},
		{
			name: "RawElement",
			pos:  position{line: 1187, col: 1, offset: 37769},
			expr: &actionExpr{
				pos: position{line: 1187, col: 15, offset: 37783},
				run: (*parser).callonRawElement1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 15, offset: 37783},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1187, col: 15, offset: 37783},
							val:        "!raw",
							ignoreCase: false,
							want:       "\"!raw\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1187, col: 22, offset: 37790},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 25, offset: 37793},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 31, offset: 37799},
								name: "rawElementBody",
							},
						},
					},
				},
			},
		},
		{
			name: "rawElementBody",
			pos:  position{line: 1194, col: 1, offset: 37928},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 19, offset: 37946},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1194, col: 19, offset: 37946},
						run: (*parser).callonrawElementBody2,
						expr: &seqExpr{
							pos: position{line: 1194, col: 19, offset: 37946},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1194, col: 19, offset: 37946},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 22, offset: 37949},
									label: "btI",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 26, offset: 37953},
										name: "BracketText",
									},
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 37995},
						run: (*parser).callonrawElementBody27,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 37995},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1196, col: 5, offset: 37995},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 8, offset: 37998},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonrawElementBody32,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1196, col: 17, offset: 38007},
									name: "Scope",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1205, col: 5, offset: 38334},
						run: (*parser).callonrawElementBody39,
						expr: &choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 38641},
						run: (*parser).callonrawElementBody59,
						expr: &seqExpr{
							pos: position{line: 1215, col: 5, offset: 38641},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1215, col: 5, offset: 38641},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1215, col: 8, offset: 38644},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonrawElementBody64,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2767, col: 35, offset: 93911},
									run: (*parser).callonrawElementBody70,
									expr: &seqExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2767, col: 35, offset: 93911},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2767, col: 38, offset: 93914},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2767, col: 50, offset: 93926},
													expr: &seqExpr{
														pos: position{line: 2767, col: 51, offset: 93927},
														exprs: []any{
															&notExpr{
																pos: position{line: 2767, col: 51, offset: 93927},
																expr: &choiceExpr{
																	pos: position{line: 2764, col: 27, offset: 93768},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									expr: &litMatcher{
																										pos:        position{line: 2762, col: 27, offset: 93686},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2762, col: 33, offset: 93692},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2761, col: 23, offset: 93657},
																							expr: &anyMatcher{
																								line: 2761, col: 24, offset: 93658,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 33, offset: 93774},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2764, col: 39, offset: 93780},
																			expr: &seqExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2764, col: 45, offset: 93786},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2764, col: 45, offset: 93786},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 51, offset: 93792},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2767, col: 57, offset: 93933},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2767, col: 57, offset: 93933},
																		expr: &charClassMatcher{
																			pos:        position{line: 2767, col: 57, offset: 93933},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2767, col: 71, offset: 93947},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2767, col: 71, offset: 93947},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2767, col: 75, offset: 93951},
																				expr: &charClassMatcher{
																					pos:        position{line: 2767, col: 75, offset: 93951},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2767, col: 81, offset: 93957},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1215, col: 30, offset: 38666},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 1220, col: 1, offset: 38841},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 18, offset: 38858},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 18, offset: 38858},
						name: "ChainExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 36, offset: 38876},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "ForExpression",
			pos:  position{line: 1221, col: 1, offset: 38889},
			expr: &choiceExpr{
				pos: position{line: 1221, col: 18, offset: 38906},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1221, col: 18, offset: 38906},
						name: "RangeExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 36, offset: 38924},
						name: "ChainExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 54, offset: 38942},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "IfExpression",
			pos:  position{line: 1223, col: 1, offset: 38956},
			expr: &actionExpr{
				pos: position{line: 1223, col: 17, offset: 38972},
				run: (*parser).callonIfExpression1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 17, offset: 38972},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1223, col: 17, offset: 38972},
							label: "stmtI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1223, col: 23, offset: 38978},
								expr: &ruleRefExpr{
									pos:  position{line: 1223, col: 23, offset: 38978},
									name: "goIfConditionStatement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1223, col: 47, offset: 39002},
							label: "condI",
							expr: &choiceExpr{
								pos: position{line: 1223, col: 54, offset: 39009},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1223, col: 54, offset: 39009},
										name: "ChainExpression",
									},
									&ruleRefExpr{
										pos:  position{line: 1223, col: 72, offset: 39027},
										name: "ConditionalGoExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goIfConditionStatement",
			pos:  position{line: 1229, col: 1, offset: 39196},
			expr: &actionExpr{
				pos: position{line: 1229, col: 27, offset: 39222},
				run: (*parser).callongoIfConditionStatement1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 27, offset: 39222},
					exprs: []any{
						&notExpr{
							pos: position{line: 1229, col: 27, offset: 39222},
							expr: &seqExpr{
								pos: position{line: 1229, col: 29, offset: 39224},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 1229, col: 29, offset: 39224},
										expr: &charClassMatcher{
											pos:        position{line: 1229, col: 29, offset: 39224},
											val:        "[^;\\r\\n{[]",
											chars:      []rune{';', '\r', '\n', '{', '['},
											ignoreCase: false,
											inverted:   true,
										},
									},
									&charClassMatcher{
										pos:        position{line: 1229, col: 41, offset: 39236},
										val:        "[{[]",
										chars:      []rune{'{', '['},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 47, offset: 39242},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 1229, col: 53, offset: 39248},
								name: "GoStatement",
							},
						},
						&choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1229, col: 69, offset: 39264},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callongoIfConditionStatement33,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RangeExpression",
			pos:  position{line: 1237, col: 1, offset: 39486},
			expr: &actionExpr{
				pos: position{line: 1237, col: 20, offset: 39505},
				run: (*parser).callonRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 20, offset: 39505},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1237, col: 20, offset: 39505},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1237, col: 26, offset: 39511},
								expr: &actionExpr{
									pos: position{line: 1245, col: 24, offset: 39788},
									run: (*parser).callonRangeExpression5,
									expr: &seqExpr{
										pos: position{line: 1245, col: 24, offset: 39788},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1245, col: 24, offset: 39788},
												label: "var1I",
												expr: &actionExpr{
													pos: position{line: 265, col: 10, offset: 7614},
													run: (*parser).callonRangeExpression8,
													expr: &labeledExpr{
														pos:   position{line: 265, col: 10, offset: 7614},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 1682, col: 17, offset: 55568},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1665, col: 20, offset: 55323},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1682, col: 26, offset: 55577},
																	expr: &charClassMatcher{
																		pos:        position{line: 1665, col: 20, offset: 55323},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1245, col: 36, offset: 39800},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1245, col: 42, offset: 39806},
													expr: &seqExpr{
														pos: position{line: 1245, col: 43, offset: 39807},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 1245, col: 43, offset: 39807},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1245, col: 46, offset: 39810},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1245, col: 50, offset: 39814},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&actionExpr{
																pos: position{line: 265, col: 10, offset: 7614},
																run: (*parser).callonRangeExpression22,
																expr: &labeledExpr{
																	pos:   position{line: 265, col: 10, offset: 7614},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1682, col: 17, offset: 55568},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1665, col: 20, offset: 55323},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1682, col: 26, offset: 55577},
																				expr: &charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1245, col: 61, offset: 39825},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1245, col: 64, offset: 39828},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonRangeExpression31,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1245, col: 75, offset: 39839},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1245, col: 85, offset: 39849},
													expr: &litMatcher{
														pos:        position{line: 1245, col: 85, offset: 39849},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1245, col: 90, offset: 39854},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1245, col: 94, offset: 39858},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 47, offset: 39532},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1237, col: 56, offset: 39541},
								expr: &seqExpr{
									pos: position{line: 1237, col: 57, offset: 39542},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1237, col: 57, offset: 39542},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1237, col: 67, offset: 39552},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1237, col: 72, offset: 39557},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1237, col: 80, offset: 39565},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 83, offset: 39568},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 89, offset: 39574},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpression",
			pos:  position{line: 1258, col: 1, offset: 40274},
			expr: &actionExpr{
				pos: position{line: 1258, col: 20, offset: 40293},
				run: (*parser).callonChainExpression1,
				expr: &seqExpr{
					pos: position{line: 1258, col: 20, offset: 40293},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1258, col: 20, offset: 40293},
							label: "derefsI",
							expr: &actionExpr{
								pos: position{line: 1291, col: 26, offset: 41713},
								run: (*parser).callonChainExpression4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1291, col: 26, offset: 41713},
									expr: &litMatcher{
										pos:        position{line: 1291, col: 26, offset: 41713},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 50, offset: 40323},
							label: "rootI",
							expr: &ruleRefExpr{
								pos:  position{line: 1258, col: 56, offset: 40329},
								name: "chainExpressionRoot",
							},
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 76, offset: 40349},
							label: "checkRootI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1258, col: 87, offset: 40360},
								expr: &litMatcher{
									pos:        position{line: 1258, col: 87, offset: 40360},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 92, offset: 40365},
							label: "chainI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1258, col: 99, offset: 40372},
								expr: &ruleRefExpr{
									pos:  position{line: 1258, col: 99, offset: 40372},
									name: "ChainExpressionItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 20, offset: 40412},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1259, col: 29, offset: 40421},
								expr: &ruleRefExpr{
									pos:  position{line: 1259, col: 29, offset: 40421},
									name: "chainExpressionDefault",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 53, offset: 40445},
							label: "endPosI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).callonChainExpression19,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1259, col: 65, offset: 40457},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1259, col: 68, offset: 40460},
							run: (*parser).callonChainExpression27,
						},
						&zeroOrOneExpr{
							pos: position{line: 1261, col: 3, offset: 40582},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 3, offset: 40582},
								name: "chainExpressionTrail",
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionTrail",
			pos:  position{line: 1270, col: 1, offset: 40880},
			expr: &actionExpr{
				pos: position{line: 1270, col: 26, offset: 40905},
				run: (*parser).callonchainExpressionTrail1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 26, offset: 40905},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1270, col: 26, offset: 40905},
							name: "GoExpression",
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 39, offset: 40918},
							label: "endI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).callonchainExpressionTrail5,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRoot",
			pos:  position{line: 1295, col: 1, offset: 41751},
			expr: &actionExpr{
				pos: position{line: 1295, col: 24, offset: 41774},
				run: (*parser).callonchainExpressionRoot1,
				expr: &choiceExpr{
					pos: position{line: 1295, col: 25, offset: 41775},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 1682, col: 17, offset: 55568},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1665, col: 20, offset: 55323},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1682, col: 26, offset: 55577},
									expr: &charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 1295, col: 40, offset: 41790},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1295, col: 40, offset: 41790},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 1295, col: 44, offset: 41794},
									expr: &ruleRefExpr{
										pos:  position{line: 1295, col: 44, offset: 41794},
										name: "chainExpressionRootParenContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1295, col: 77, offset: 41827},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRootParenContent",
			pos:  position{line: 1302, col: 1, offset: 41935},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 36, offset: 41970},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1302, col: 36, offset: 41970},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1302, col: 36, offset: 41970},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1302, col: 40, offset: 41974},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1302, col: 72, offset: 42006},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1303, col: 36, offset: 42047},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1303, col: 36, offset: 42047},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1303, col: 40, offset: 42051},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1303, col: 72, offset: 42083},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1304, col: 36, offset: 42124},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1304, col: 36, offset: 42124},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1304, col: 40, offset: 42128},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1304, col: 72, offset: 42160},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1305, col: 36, offset: 42201},
						expr: &charClassMatcher{
							pos:        position{line: 1305, col: 36, offset: 42201},
							val:        "[^({[]})]",
							chars:      []rune{'(', '{', '[', ']', '}', ')'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "chainExpressionDefault",
			pos:  position{line: 1307, col: 1, offset: 42214},
			expr: &actionExpr{
				pos: position{line: 1307, col: 27, offset: 42240},
				run: (*parser).callonchainExpressionDefault1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 27, offset: 42240},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1307, col: 27, offset: 42240},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).callonchainExpressionDefault4,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1307, col: 36, offset: 42249},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1307, col: 40, offset: 42253},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonchainExpressionDefault15,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 44, offset: 42257},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 50, offset: 42263},
								name: "GoExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpressionItem",
			pos:  position{line: 1318, col: 1, offset: 42449},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 24, offset: 42472},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1318, col: 24, offset: 42472},
						name: "IndexExpression",
					},
					&actionExpr{
						pos: position{line: 1333, col: 23, offset: 43011},
						run: (*parser).callonChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 1333, col: 23, offset: 43011},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1333, col: 23, offset: 43011},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1333, col: 27, offset: 43015},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonChainExpressionItem10,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1333, col: 31, offset: 43019},
									label: "identI",
									expr: &actionExpr{
										pos: position{line: 265, col: 10, offset: 7614},
										run: (*parser).callonChainExpressionItem15,
										expr: &labeledExpr{
											pos:   position{line: 265, col: 10, offset: 7614},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1682, col: 17, offset: 55568},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1665, col: 20, offset: 55323},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1682, col: 26, offset: 55577},
														expr: &charClassMatcher{
															pos:        position{line: 1665, col: 20, offset: 55323},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1333, col: 44, offset: 43032},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1333, col: 51, offset: 43039},
										expr: &litMatcher{
											pos:        position{line: 1333, col: 51, offset: 43039},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 63, offset: 42511},
						name: "ParenExpression",
					},
					&actionExpr{
						pos: position{line: 1356, col: 28, offset: 43728},
						run: (*parser).callonChainExpressionItem25,
						expr: &seqExpr{
							pos: position{line: 1356, col: 28, offset: 43728},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1356, col: 28, offset: 43728},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 32, offset: 43732},
									label: "lParenI",
									expr: &actionExpr{
										pos: position{line: 2793, col: 12, offset: 94819},
										run: (*parser).callonChainExpressionItem29,
										expr: &seqExpr{
											pos: position{line: 2793, col: 12, offset: 94819},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2793, col: 12, offset: 94819},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonChainExpressionItem32,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2793, col: 21, offset: 94828},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1356, col: 48, offset: 43748},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 51, offset: 43751},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1356, col: 57, offset: 43757},
										expr: &litMatcher{
											pos:        position{line: 1356, col: 57, offset: 43757},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1356, col: 62, offset: 43762},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 65, offset: 43765},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1356, col: 74, offset: 43774},
										expr: &actionExpr{
											pos: position{line: 269, col: 14, offset: 7720},
											run: (*parser).callonChainExpressionItem48,
											expr: &seqExpr{
												pos: position{line: 269, col: 14, offset: 7720},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 269, col: 14, offset: 7720},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&labeledExpr{
														pos:   position{line: 269, col: 18, offset: 7724},
														label: "identI",
														expr: &actionExpr{
															pos: position{line: 265, col: 10, offset: 7614},
															run: (*parser).callonChainExpressionItem52,
															expr: &labeledExpr{
																pos:   position{line: 265, col: 10, offset: 7614},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 1682, col: 17, offset: 55568},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 1665, col: 20, offset: 55323},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1682, col: 26, offset: 55577},
																			expr: &charClassMatcher{
																				pos:        position{line: 1665, col: 20, offset: 55323},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 85, offset: 43785},
									label: "typeI",
									expr: &actionExpr{
										pos: position{line: 265, col: 10, offset: 7614},
										run: (*parser).callonChainExpressionItem59,
										expr: &labeledExpr{
											pos:   position{line: 265, col: 10, offset: 7614},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1682, col: 17, offset: 55568},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1665, col: 20, offset: 55323},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1682, col: 26, offset: 55577},
														expr: &charClassMatcher{
															pos:        position{line: 1665, col: 20, offset: 55323},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1356, col: 97, offset: 43797},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 100, offset: 43800},
									label: "rParenI",
									expr: &actionExpr{
										pos: position{line: 2794, col: 12, offset: 94880},
										run: (*parser).callonChainExpressionItem68,
										expr: &seqExpr{
											pos: position{line: 2794, col: 12, offset: 94880},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2794, col: 12, offset: 94880},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonChainExpressionItem71,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2794, col: 21, offset: 94889},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 116, offset: 43816},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1356, col: 123, offset: 43823},
										expr: &litMatcher{
											pos:        position{line: 1356, col: 123, offset: 43823},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexExpression",
			pos:  position{line: 1320, col: 1, offset: 42554},
			expr: &actionExpr{
				pos: position{line: 1320, col: 20, offset: 42573},
				run: (*parser).callonIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 20, offset: 42573},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2875, col: 15, offset: 97696},
							run: (*parser).callonIndexExpression3,
							expr: &seqExpr{
								pos: position{line: 2875, col: 15, offset: 97696},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonIndexExpression5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonIndexExpression11,
									},
									&labeledExpr{
										pos:   position{line: 2875, col: 25, offset: 97706},
										label: "lBracketI",
										expr: &actionExpr{
											pos: position{line: 2799, col: 14, offset: 95067},
											run: (*parser).callonIndexExpression13,
											expr: &seqExpr{
												pos: position{line: 2799, col: 14, offset: 95067},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2799, col: 14, offset: 95067},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonIndexExpression16,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2799, col: 23, offset: 95076},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2875, col: 45, offset: 97726},
										expr: &choiceExpr{
											pos: position{line: 2787, col: 20, offset: 94555},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2787, col: 31, offset: 94566},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															run: (*parser).callonIndexExpression27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2785, col: 37, offset: 94524},
															expr: &litMatcher{
																pos:        position{line: 2785, col: 37, offset: 94524},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2785, col: 43, offset: 94530},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 31, offset: 42584},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 37, offset: 42590},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 50, offset: 42603},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1320, col: 62, offset: 42615},
								expr: &litMatcher{
									pos:        position{line: 1320, col: 62, offset: 42615},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 67, offset: 42620},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 1329, col: 23, offset: 42932},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2879, col: 13, offset: 97789},
										run: (*parser).callonIndexExpression38,
										expr: &seqExpr{
											pos: position{line: 2879, col: 13, offset: 97789},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2879, col: 13, offset: 97789},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2879, col: 16, offset: 97792},
													expr: &seqExpr{
														pos: position{line: 2879, col: 17, offset: 97793},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2879, col: 17, offset: 97793},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2879, col: 21, offset: 97797},
																expr: &choiceExpr{
																	pos: position{line: 2787, col: 20, offset: 94555},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					run: (*parser).callonIndexExpression49,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2785, col: 37, offset: 94524},
																					expr: &litMatcher{
																						pos:        position{line: 2785, col: 37, offset: 94524},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2785, col: 43, offset: 94530},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2879, col: 27, offset: 97803},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2800, col: 14, offset: 95130},
														run: (*parser).callonIndexExpression54,
														expr: &seqExpr{
															pos: position{line: 2800, col: 14, offset: 95130},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2800, col: 14, offset: 95130},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonIndexExpression57,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2800, col: 23, offset: 95139},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonIndexExpression64,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1329, col: 34, offset: 42943},
										run: (*parser).callonIndexExpression65,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonIndexExpression66,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 96, offset: 42649},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1320, col: 108, offset: 42661},
								expr: &litMatcher{
									pos:        position{line: 1320, col: 108, offset: 42661},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpression",
			pos:  position{line: 1341, col: 1, offset: 43194},
			expr: &actionExpr{
				pos: position{line: 1341, col: 20, offset: 43213},
				run: (*parser).callonParenExpression1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 20, offset: 43213},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2867, col: 14, offset: 97512},
							run: (*parser).callonParenExpression3,
							expr: &seqExpr{
								pos: position{line: 2867, col: 14, offset: 97512},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonParenExpression5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonParenExpression11,
									},
									&labeledExpr{
										pos:   position{line: 2867, col: 24, offset: 97522},
										label: "lParenI",
										expr: &actionExpr{
											pos: position{line: 2793, col: 12, offset: 94819},
											run: (*parser).callonParenExpression13,
											expr: &seqExpr{
												pos: position{line: 2793, col: 12, offset: 94819},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2793, col: 12, offset: 94819},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonParenExpression16,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2793, col: 21, offset: 94828},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2867, col: 40, offset: 97538},
										expr: &choiceExpr{
											pos: position{line: 2787, col: 20, offset: 94555},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2787, col: 31, offset: 94566},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															run: (*parser).callonParenExpression27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2785, col: 37, offset: 94524},
															expr: &litMatcher{
																pos:        position{line: 2785, col: 37, offset: 94524},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2785, col: 43, offset: 94530},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 30, offset: 43223},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1341, col: 36, offset: 43229},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 36, offset: 43229},
									name: "parenExpressionArgs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 57, offset: 43250},
							label: "rParen",
							expr: &choiceExpr{
								pos: position{line: 1349, col: 23, offset: 43500},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2871, col: 12, offset: 97598},
										run: (*parser).callonParenExpression36,
										expr: &seqExpr{
											pos: position{line: 2871, col: 12, offset: 97598},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2871, col: 12, offset: 97598},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2871, col: 15, offset: 97601},
													expr: &seqExpr{
														pos: position{line: 2871, col: 16, offset: 97602},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2871, col: 16, offset: 97602},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2871, col: 20, offset: 97606},
																expr: &choiceExpr{
																	pos: position{line: 2787, col: 20, offset: 94555},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					run: (*parser).callonParenExpression47,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2785, col: 37, offset: 94524},
																					expr: &litMatcher{
																						pos:        position{line: 2785, col: 37, offset: 94524},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2785, col: 43, offset: 94530},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2871, col: 26, offset: 97612},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2794, col: 12, offset: 94880},
														run: (*parser).callonParenExpression52,
														expr: &seqExpr{
															pos: position{line: 2794, col: 12, offset: 94880},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2794, col: 12, offset: 94880},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonParenExpression55,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2794, col: 21, offset: 94889},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonParenExpression62,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1349, col: 33, offset: 43510},
										run: (*parser).callonParenExpression63,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonParenExpression64,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 83, offset: 43276},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1341, col: 90, offset: 43283},
								expr: &litMatcher{
									pos:        position{line: 1341, col: 90, offset: 43283},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parenExpressionArgs",
			pos:  position{line: 1352, col: 1, offset: 43560},
			expr: &actionExpr{
				pos: position{line: 1352, col: 24, offset: 43583},
				run: (*parser).callonparenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 1352, col: 24, offset: 43583},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1352, col: 24, offset: 43583},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1352, col: 31, offset: 43590},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 1352, col: 44, offset: 43603},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1352, col: 50, offset: 43609},
								expr: &seqExpr{
									pos: position{line: 1352, col: 51, offset: 43610},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 1352, col: 51, offset: 43610},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 1352, col: 54, offset: 43613},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1352, col: 58, offset: 43617},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).callonparenExpressionArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1352, col: 62, offset: 43621},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoExpression",
			pos:  position{line: 1373, col: 1, offset: 44451},
			expr: &actionExpr{
				pos: position{line: 1373, col: 17, offset: 44467},
				run: (*parser).callonGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1373, col: 17, offset: 44467},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1373, col: 24, offset: 44474},
						expr: &choiceExpr{
							pos: position{line: 1373, col: 25, offset: 44475},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1373, col: 25, offset: 44475},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1373, col: 39, offset: 44489},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1469, col: 28, offset: 48373},
									run: (*parser).callonGoExpression7,
									expr: &seqExpr{
										pos: position{line: 1469, col: 28, offset: 48373},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1469, col: 28, offset: 48373},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1469, col: 36, offset: 48381},
													expr: &choiceExpr{
														pos: position{line: 1469, col: 37, offset: 48382},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1469, col: 37, offset: 48382},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1454, col: 34, offset: 47556},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1454, col: 34, offset: 47556},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1454, col: 49, offset: 47571},
																		expr: &choiceExpr{
																			pos: position{line: 2787, col: 20, offset: 94555},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							run: (*parser).callonGoExpression20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2785, col: 37, offset: 94524},
																							expr: &litMatcher{
																								pos:        position{line: 2785, col: 37, offset: 94524},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2785, col: 43, offset: 94530},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1469, col: 74, offset: 48419},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1485, col: 18, offset: 48832},
													run: (*parser).callonGoExpression25,
													expr: &seqExpr{
														pos: position{line: 1485, col: 18, offset: 48832},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1485, col: 18, offset: 48832},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1485, col: 26, offset: 48840},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 29, offset: 48843},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2867, col: 14, offset: 97512},
																	run: (*parser).callonGoExpression31,
																	expr: &seqExpr{
																		pos: position{line: 2867, col: 14, offset: 97512},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonGoExpression33,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2841, col: 18, offset: 96619},
																				run: (*parser).callonGoExpression39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2867, col: 24, offset: 97522},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2793, col: 12, offset: 94819},
																					run: (*parser).callonGoExpression41,
																					expr: &seqExpr{
																						pos: position{line: 2793, col: 12, offset: 94819},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2793, col: 12, offset: 94819},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2774, col: 8, offset: 94166},
																									run: (*parser).callonGoExpression44,
																									expr: &choiceExpr{
																										pos: position{line: 2774, col: 9, offset: 94167},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												expr: &anyMatcher{
																													line: 2774, col: 10, offset: 94168,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2774, col: 14, offset: 94172},
																												expr: &anyMatcher{
																													line: 2774, col: 15, offset: 94173,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2793, col: 21, offset: 94828},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2867, col: 40, offset: 97538},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonGoExpression55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 47, offset: 48861},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 265, col: 10, offset: 7614},
																	run: (*parser).callonGoExpression60,
																	expr: &labeledExpr{
																		pos:   position{line: 265, col: 10, offset: 7614},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1682, col: 17, offset: 55568},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1682, col: 26, offset: 55577},
																					expr: &charClassMatcher{
																						pos:        position{line: 1665, col: 20, offset: 55323},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 60, offset: 48874},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1494, col: 21, offset: 49117},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2871, col: 12, offset: 97598},
																			run: (*parser).callonGoExpression68,
																			expr: &seqExpr{
																				pos: position{line: 2871, col: 12, offset: 97598},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2871, col: 12, offset: 97598},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2871, col: 15, offset: 97601},
																						expr: &seqExpr{
																							pos: position{line: 2871, col: 16, offset: 97602},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2871, col: 16, offset: 97602},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2871, col: 20, offset: 97606},
																									expr: &choiceExpr{
																										pos: position{line: 2787, col: 20, offset: 94555},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2787, col: 31, offset: 94566},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2787, col: 31, offset: 94566},
																														run: (*parser).callonGoExpression79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2785, col: 37, offset: 94524},
																														expr: &litMatcher{
																															pos:        position{line: 2785, col: 37, offset: 94524},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2785, col: 43, offset: 94530},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2871, col: 26, offset: 97612},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2794, col: 12, offset: 94880},
																							run: (*parser).callonGoExpression84,
																							expr: &seqExpr{
																								pos: position{line: 2794, col: 12, offset: 94880},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2794, col: 12, offset: 94880},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2774, col: 8, offset: 94166},
																											run: (*parser).callonGoExpression87,
																											expr: &choiceExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2774, col: 9, offset: 94167},
																														expr: &anyMatcher{
																															line: 2774, col: 10, offset: 94168,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2774, col: 14, offset: 94172},
																														expr: &anyMatcher{
																															line: 2774, col: 15, offset: 94173,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2794, col: 21, offset: 94889},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2847, col: 13, offset: 96752},
																						run: (*parser).callonGoExpression94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1494, col: 31, offset: 49127},
																			run: (*parser).callonGoExpression95,
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonGoExpression96,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1443, col: 20, offset: 47197},
									run: (*parser).callonGoExpression102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1443, col: 20, offset: 47197},
										expr: &seqExpr{
											pos: position{line: 1457, col: 24, offset: 47652},
											exprs: []any{
												&notExpr{
													pos: position{line: 1457, col: 24, offset: 47652},
													expr: &seqExpr{
														pos: position{line: 1462, col: 35, offset: 48019},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1462, col: 36, offset: 48020},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1462, col: 36, offset: 48020},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1454, col: 34, offset: 47556},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1454, col: 34, offset: 47556},
																				val:        "[=&|^+/*%<>!-]",
																				chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1454, col: 49, offset: 47571},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonGoExpression116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1462, col: 72, offset: 48056},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1462, col: 80, offset: 48064},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1462, col: 83, offset: 48067},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1457, col: 57, offset: 47685},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1729, col: 14, offset: 56891},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1729, col: 14, offset: 56891},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1729, col: 20, offset: 56897},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1777, col: 19, offset: 59032},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1777, col: 19, offset: 59032},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1778, col: 5, offset: 59091},
																			run: (*parser).callonGoExpression134,
																			expr: &seqExpr{
																				pos: position{line: 1778, col: 5, offset: 59091},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1778, col: 5, offset: 59091},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 14, offset: 59100},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 26, offset: 59112},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 38, offset: 59124},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 50, offset: 59136},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1807, col: 16, offset: 60268},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1807, col: 16, offset: 60268},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1808, col: 5, offset: 60371},
																			run: (*parser).callonGoExpression155,
																			expr: &seqExpr{
																				pos: position{line: 1808, col: 5, offset: 60371},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1808, col: 5, offset: 60371},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 14, offset: 60380},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 26, offset: 60392},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 38, offset: 60404},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 50, offset: 60416},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 62, offset: 60428},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 74, offset: 60440},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 86, offset: 60452},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 98, offset: 60464},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1842, col: 24, offset: 61844},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1842, col: 24, offset: 61844},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1842, col: 29, offset: 61849},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1756, col: 75, offset: 58146},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1758, col: 24, offset: 58292},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1758, col: 24, offset: 58292},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1759, col: 24, offset: 58359},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1759, col: 24, offset: 58359},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1760, col: 5, offset: 58396},
																			run: (*parser).callonGoExpression187,
																			expr: &seqExpr{
																				pos: position{line: 1760, col: 5, offset: 58396},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1760, col: 5, offset: 58396},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 14, offset: 58405},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 26, offset: 58417},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1843, col: 24, offset: 61927},
																			run: (*parser).callonGoExpression194,
																			expr: &seqExpr{
																				pos: position{line: 1843, col: 24, offset: 61927},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1843, col: 24, offset: 61927},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1867, col: 5, offset: 62941},
																			run: (*parser).callonGoExpression205,
																			expr: &seqExpr{
																				pos: position{line: 1867, col: 5, offset: 62941},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1867, col: 5, offset: 62941},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1888, col: 5, offset: 63780},
																			run: (*parser).callonGoExpression212,
																			expr: &seqExpr{
																				pos: position{line: 1888, col: 5, offset: 63780},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1888, col: 5, offset: 63780},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1906, col: 5, offset: 64463},
																			run: (*parser).callonGoExpression217,
																			expr: &litMatcher{
																				pos:        position{line: 1906, col: 5, offset: 64463},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1729, col: 76, offset: 56953},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1730, col: 5, offset: 56964},
															run: (*parser).callonGoExpression220,
															expr: &seqExpr{
																pos: position{line: 1730, col: 5, offset: 56964},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1730, col: 5, offset: 56964},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 10, offset: 56969},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1730, col: 16, offset: 56975},
																			expr: &choiceExpr{
																				pos: position{line: 1730, col: 17, offset: 56976},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1777, col: 19, offset: 59032},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1777, col: 19, offset: 59032},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1778, col: 5, offset: 59091},
																						run: (*parser).callonGoExpression232,
																						expr: &seqExpr{
																							pos: position{line: 1778, col: 5, offset: 59091},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1778, col: 5, offset: 59091},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 14, offset: 59100},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 26, offset: 59112},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 38, offset: 59124},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 50, offset: 59136},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1807, col: 16, offset: 60268},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1807, col: 16, offset: 60268},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1808, col: 5, offset: 60371},
																						run: (*parser).callonGoExpression253,
																						expr: &seqExpr{
																							pos: position{line: 1808, col: 5, offset: 60371},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1808, col: 5, offset: 60371},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 14, offset: 60380},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 26, offset: 60392},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 38, offset: 60404},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 50, offset: 60416},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 62, offset: 60428},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 74, offset: 60440},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 86, offset: 60452},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 98, offset: 60464},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1842, col: 24, offset: 61844},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1842, col: 24, offset: 61844},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1842, col: 29, offset: 61849},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1756, col: 75, offset: 58146},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1758, col: 24, offset: 58292},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1758, col: 24, offset: 58292},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1759, col: 24, offset: 58359},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1759, col: 24, offset: 58359},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1760, col: 5, offset: 58396},
																						run: (*parser).callonGoExpression285,
																						expr: &seqExpr{
																							pos: position{line: 1760, col: 5, offset: 58396},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1760, col: 5, offset: 58396},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 14, offset: 58405},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 26, offset: 58417},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1843, col: 24, offset: 61927},
																						run: (*parser).callonGoExpression292,
																						expr: &seqExpr{
																							pos: position{line: 1843, col: 24, offset: 61927},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1843, col: 24, offset: 61927},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1867, col: 5, offset: 62941},
																						run: (*parser).callonGoExpression303,
																						expr: &seqExpr{
																							pos: position{line: 1867, col: 5, offset: 62941},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1867, col: 5, offset: 62941},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1888, col: 5, offset: 63780},
																						run: (*parser).callonGoExpression310,
																						expr: &seqExpr{
																							pos: position{line: 1888, col: 5, offset: 63780},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1888, col: 5, offset: 63780},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1906, col: 5, offset: 64463},
																						run: (*parser).callonGoExpression315,
																						expr: &litMatcher{
																							pos:        position{line: 1906, col: 5, offset: 64463},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1730, col: 74, offset: 57033},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 79, offset: 57038},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2774, col: 8, offset: 94166},
																			run: (*parser).callonGoExpression319,
																			expr: &choiceExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2774, col: 9, offset: 94167},
																						expr: &anyMatcher{
																							line: 2774, col: 10, offset: 94168,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2774, col: 14, offset: 94172},
																						expr: &anyMatcher{
																							line: 2774, col: 15, offset: 94173,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1454, col: 34, offset: 47556},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1454, col: 34, offset: 47556},
																	val:        "[=&|^+/*%<>!-]",
																	chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1454, col: 49, offset: 47571},
																	expr: &choiceExpr{
																		pos: position{line: 2787, col: 20, offset: 94555},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2787, col: 31, offset: 94566},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2787, col: 31, offset: 94566},
																						run: (*parser).callonGoExpression331,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2785, col: 37, offset: 94524},
																						expr: &litMatcher{
																							pos:        position{line: 2785, col: 37, offset: 94524},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2785, col: 43, offset: 94530},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1457, col: 101, offset: 47729},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1457, col: 101, offset: 47729},
																	expr: &seqExpr{
																		pos: position{line: 1457, col: 103, offset: 47731},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1457, col: 103, offset: 47731},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1457, col: 106, offset: 47734},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1457, col: 112, offset: 47740},
																	val:        "[^\\r\\n({[]}),;:\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ',', ';', ':', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "nestedGoCode",
			pos:  position{line: 1377, col: 1, offset: 44585},
			expr: &actionExpr{
				pos: position{line: 1377, col: 17, offset: 44601},
				run: (*parser).callonnestedGoCode1,
				expr: &labeledExpr{
					pos:   position{line: 1377, col: 17, offset: 44601},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1377, col: 24, offset: 44608},
						expr: &choiceExpr{
							pos: position{line: 1377, col: 25, offset: 44609},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1377, col: 25, offset: 44609},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1377, col: 39, offset: 44623},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1477, col: 27, offset: 48607},
									run: (*parser).callonnestedGoCode7,
									expr: &seqExpr{
										pos: position{line: 1477, col: 27, offset: 48607},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1477, col: 27, offset: 48607},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1477, col: 35, offset: 48615},
													expr: &choiceExpr{
														pos: position{line: 1477, col: 36, offset: 48616},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1477, col: 36, offset: 48616},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1454, col: 34, offset: 47556},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1454, col: 34, offset: 47556},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1454, col: 49, offset: 47571},
																		expr: &choiceExpr{
																			pos: position{line: 2787, col: 20, offset: 94555},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							run: (*parser).callonnestedGoCode20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2785, col: 37, offset: 94524},
																							expr: &litMatcher{
																								pos:        position{line: 2785, col: 37, offset: 94524},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2785, col: 43, offset: 94530},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1477, col: 73, offset: 48653},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1485, col: 18, offset: 48832},
													run: (*parser).callonnestedGoCode25,
													expr: &seqExpr{
														pos: position{line: 1485, col: 18, offset: 48832},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1485, col: 18, offset: 48832},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1485, col: 26, offset: 48840},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 29, offset: 48843},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2867, col: 14, offset: 97512},
																	run: (*parser).callonnestedGoCode31,
																	expr: &seqExpr{
																		pos: position{line: 2867, col: 14, offset: 97512},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonnestedGoCode33,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2841, col: 18, offset: 96619},
																				run: (*parser).callonnestedGoCode39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2867, col: 24, offset: 97522},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2793, col: 12, offset: 94819},
																					run: (*parser).callonnestedGoCode41,
																					expr: &seqExpr{
																						pos: position{line: 2793, col: 12, offset: 94819},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2793, col: 12, offset: 94819},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2774, col: 8, offset: 94166},
																									run: (*parser).callonnestedGoCode44,
																									expr: &choiceExpr{
																										pos: position{line: 2774, col: 9, offset: 94167},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												expr: &anyMatcher{
																													line: 2774, col: 10, offset: 94168,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2774, col: 14, offset: 94172},
																												expr: &anyMatcher{
																													line: 2774, col: 15, offset: 94173,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2793, col: 21, offset: 94828},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2867, col: 40, offset: 97538},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonnestedGoCode55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 47, offset: 48861},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 265, col: 10, offset: 7614},
																	run: (*parser).callonnestedGoCode60,
																	expr: &labeledExpr{
																		pos:   position{line: 265, col: 10, offset: 7614},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1682, col: 17, offset: 55568},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1682, col: 26, offset: 55577},
																					expr: &charClassMatcher{
																						pos:        position{line: 1665, col: 20, offset: 55323},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 60, offset: 48874},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1494, col: 21, offset: 49117},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2871, col: 12, offset: 97598},
																			run: (*parser).callonnestedGoCode68,
																			expr: &seqExpr{
																				pos: position{line: 2871, col: 12, offset: 97598},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2871, col: 12, offset: 97598},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2871, col: 15, offset: 97601},
																						expr: &seqExpr{
																							pos: position{line: 2871, col: 16, offset: 97602},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2871, col: 16, offset: 97602},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2871, col: 20, offset: 97606},
																									expr: &choiceExpr{
																										pos: position{line: 2787, col: 20, offset: 94555},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2787, col: 31, offset: 94566},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2787, col: 31, offset: 94566},
																														run: (*parser).callonnestedGoCode79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2785, col: 37, offset: 94524},
																														expr: &litMatcher{
																															pos:        position{line: 2785, col: 37, offset: 94524},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2785, col: 43, offset: 94530},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2871, col: 26, offset: 97612},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2794, col: 12, offset: 94880},
																							run: (*parser).callonnestedGoCode84,
																							expr: &seqExpr{
																								pos: position{line: 2794, col: 12, offset: 94880},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2794, col: 12, offset: 94880},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2774, col: 8, offset: 94166},
																											run: (*parser).callonnestedGoCode87,
																											expr: &choiceExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2774, col: 9, offset: 94167},
																														expr: &anyMatcher{
																															line: 2774, col: 10, offset: 94168,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2774, col: 14, offset: 94172},
																														expr: &anyMatcher{
																															line: 2774, col: 15, offset: 94173,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2794, col: 21, offset: 94889},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2847, col: 13, offset: 96752},
																						run: (*parser).callonnestedGoCode94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1494, col: 31, offset: 49127},
																			run: (*parser).callonnestedGoCode95,
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonnestedGoCode96,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1450, col: 20, offset: 47426},
									run: (*parser).callonnestedGoCode102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1450, col: 20, offset: 47426},
										expr: &seqExpr{
											pos: position{line: 1460, col: 24, offset: 47915},
											exprs: []any{
												&notExpr{
													pos: position{line: 1460, col: 24, offset: 47915},
													expr: &seqExpr{
														pos: position{line: 1463, col: 35, offset: 48105},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1463, col: 36, offset: 48106},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1463, col: 36, offset: 48106},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1455, col: 34, offset: 47608},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1455, col: 34, offset: 47608},
																				val:        "[=,&|^+/*%<>!-]",
																				chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1455, col: 50, offset: 47624},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonnestedGoCode116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1463, col: 71, offset: 48141},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1463, col: 79, offset: 48149},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1463, col: 82, offset: 48152},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1460, col: 56, offset: 47947},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1729, col: 14, offset: 56891},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1729, col: 14, offset: 56891},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1729, col: 20, offset: 56897},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1777, col: 19, offset: 59032},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1777, col: 19, offset: 59032},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1778, col: 5, offset: 59091},
																			run: (*parser).callonnestedGoCode134,
																			expr: &seqExpr{
																				pos: position{line: 1778, col: 5, offset: 59091},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1778, col: 5, offset: 59091},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 14, offset: 59100},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 26, offset: 59112},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 38, offset: 59124},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 50, offset: 59136},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1807, col: 16, offset: 60268},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1807, col: 16, offset: 60268},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1808, col: 5, offset: 60371},
																			run: (*parser).callonnestedGoCode155,
																			expr: &seqExpr{
																				pos: position{line: 1808, col: 5, offset: 60371},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1808, col: 5, offset: 60371},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 14, offset: 60380},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 26, offset: 60392},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 38, offset: 60404},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 50, offset: 60416},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 62, offset: 60428},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 74, offset: 60440},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 86, offset: 60452},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 98, offset: 60464},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1842, col: 24, offset: 61844},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1842, col: 24, offset: 61844},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1842, col: 29, offset: 61849},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1756, col: 75, offset: 58146},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1758, col: 24, offset: 58292},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1758, col: 24, offset: 58292},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1759, col: 24, offset: 58359},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1759, col: 24, offset: 58359},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1760, col: 5, offset: 58396},
																			run: (*parser).callonnestedGoCode187,
																			expr: &seqExpr{
																				pos: position{line: 1760, col: 5, offset: 58396},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1760, col: 5, offset: 58396},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 14, offset: 58405},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 26, offset: 58417},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1843, col: 24, offset: 61927},
																			run: (*parser).callonnestedGoCode194,
																			expr: &seqExpr{
																				pos: position{line: 1843, col: 24, offset: 61927},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1843, col: 24, offset: 61927},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1867, col: 5, offset: 62941},
																			run: (*parser).callonnestedGoCode205,
																			expr: &seqExpr{
																				pos: position{line: 1867, col: 5, offset: 62941},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1867, col: 5, offset: 62941},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1888, col: 5, offset: 63780},
																			run: (*parser).callonnestedGoCode212,
																			expr: &seqExpr{
																				pos: position{line: 1888, col: 5, offset: 63780},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1888, col: 5, offset: 63780},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1906, col: 5, offset: 64463},
																			run: (*parser).callonnestedGoCode217,
																			expr: &litMatcher{
																				pos:        position{line: 1906, col: 5, offset: 64463},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1729, col: 76, offset: 56953},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1730, col: 5, offset: 56964},
															run: (*parser).callonnestedGoCode220,
															expr: &seqExpr{
																pos: position{line: 1730, col: 5, offset: 56964},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1730, col: 5, offset: 56964},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 10, offset: 56969},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1730, col: 16, offset: 56975},
																			expr: &choiceExpr{
																				pos: position{line: 1730, col: 17, offset: 56976},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1777, col: 19, offset: 59032},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1777, col: 19, offset: 59032},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1778, col: 5, offset: 59091},
																						run: (*parser).callonnestedGoCode232,
																						expr: &seqExpr{
																							pos: position{line: 1778, col: 5, offset: 59091},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1778, col: 5, offset: 59091},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 14, offset: 59100},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 26, offset: 59112},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 38, offset: 59124},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 50, offset: 59136},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1807, col: 16, offset: 60268},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1807, col: 16, offset: 60268},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1808, col: 5, offset: 60371},
																						run: (*parser).callonnestedGoCode253,
																						expr: &seqExpr{
																							pos: position{line: 1808, col: 5, offset: 60371},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1808, col: 5, offset: 60371},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 14, offset: 60380},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 26, offset: 60392},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 38, offset: 60404},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 50, offset: 60416},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 62, offset: 60428},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 74, offset: 60440},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 86, offset: 60452},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 98, offset: 60464},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1842, col: 24, offset: 61844},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1842, col: 24, offset: 61844},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1842, col: 29, offset: 61849},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1756, col: 75, offset: 58146},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1758, col: 24, offset: 58292},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1758, col: 24, offset: 58292},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1759, col: 24, offset: 58359},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1759, col: 24, offset: 58359},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1760, col: 5, offset: 58396},
																						run: (*parser).callonnestedGoCode285,
																						expr: &seqExpr{
																							pos: position{line: 1760, col: 5, offset: 58396},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1760, col: 5, offset: 58396},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 14, offset: 58405},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 26, offset: 58417},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1843, col: 24, offset: 61927},
																						run: (*parser).callonnestedGoCode292,
																						expr: &seqExpr{
																							pos: position{line: 1843, col: 24, offset: 61927},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1843, col: 24, offset: 61927},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1867, col: 5, offset: 62941},
																						run: (*parser).callonnestedGoCode303,
																						expr: &seqExpr{
																							pos: position{line: 1867, col: 5, offset: 62941},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1867, col: 5, offset: 62941},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1888, col: 5, offset: 63780},
																						run: (*parser).callonnestedGoCode310,
																						expr: &seqExpr{
																							pos: position{line: 1888, col: 5, offset: 63780},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1888, col: 5, offset: 63780},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1906, col: 5, offset: 64463},
																						run: (*parser).callonnestedGoCode315,
																						expr: &litMatcher{
																							pos:        position{line: 1906, col: 5, offset: 64463},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1730, col: 74, offset: 57033},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 79, offset: 57038},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2774, col: 8, offset: 94166},
																			run: (*parser).callonnestedGoCode319,
																			expr: &choiceExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2774, col: 9, offset: 94167},
																						expr: &anyMatcher{
																							line: 2774, col: 10, offset: 94168,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2774, col: 14, offset: 94172},
																						expr: &anyMatcher{
																							line: 2774, col: 15, offset: 94173,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 1460, col: 68, offset: 47959},
															expr: &choiceExpr{
																pos: position{line: 2787, col: 20, offset: 94555},
																alternatives: []any{
																	&charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 2787, col: 31, offset: 94566},
																				run: (*parser).callonnestedGoCode329,
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2785, col: 37, offset: 94524},
																				expr: &litMatcher{
																					pos:        position{line: 2785, col: 37, offset: 94524},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2785, col: 43, offset: 94530},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1460, col: 74, offset: 47965},
															val:        "[^\\r\\n({[]})\\\"`]",
															chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', '\'', '"', '`'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParenExpr",
			pos:  position{line: 1381, col: 1, offset: 44703},
			expr: &choiceExpr{
				pos: position{line: 1381, col: 16, offset: 44718},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1381, col: 16, offset: 44718},
						run: (*parser).callongoParenExpr2,
						expr: &seqExpr{
							pos: position{line: 1381, col: 16, offset: 44718},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1381, col: 16, offset: 44718},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1389, col: 21, offset: 45086},
										run: (*parser).callongoParenExpr5,
										expr: &seqExpr{
											pos: position{line: 1389, col: 21, offset: 45086},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1389, col: 21, offset: 45086},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1389, col: 24, offset: 45089},
													expr: &litMatcher{
														pos:        position{line: 1389, col: 25, offset: 45090},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callongoParenExpr11,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).callongoParenExpr17,
												},
												&litMatcher{
													pos:        position{line: 1389, col: 39, offset: 45104},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1381, col: 39, offset: 44741},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1381, col: 45, offset: 44747},
										expr: &ruleRefExpr{
											pos:  position{line: 1381, col: 45, offset: 44747},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1381, col: 59, offset: 44761},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1398, col: 19, offset: 45405},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1398, col: 19, offset: 45405},
												run: (*parser).callongoParenExpr24,
												expr: &seqExpr{
													pos: position{line: 1398, col: 19, offset: 45405},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1398, col: 19, offset: 45405},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).callongoParenExpr27,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1400, col: 5, offset: 45484},
												run: (*parser).callongoParenExpr28,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callongoParenExpr29,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1383, col: 5, offset: 44833},
						run: (*parser).callongoParenExpr35,
						expr: &seqExpr{
							pos: position{line: 1383, col: 5, offset: 44833},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1383, col: 5, offset: 44833},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1392, col: 21, offset: 45192},
										run: (*parser).callongoParenExpr38,
										expr: &seqExpr{
											pos: position{line: 1392, col: 21, offset: 45192},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1392, col: 21, offset: 45192},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1392, col: 24, offset: 45195},
													expr: &litMatcher{
														pos:        position{line: 1392, col: 25, offset: 45196},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callongoParenExpr44,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).callongoParenExpr50,
												},
												&litMatcher{
													pos:        position{line: 1392, col: 39, offset: 45210},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1383, col: 28, offset: 44856},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1383, col: 34, offset: 44862},
										expr: &ruleRefExpr{
											pos:  position{line: 1383, col: 34, offset: 44862},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1383, col: 48, offset: 44876},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1403, col: 19, offset: 45548},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1403, col: 19, offset: 45548},
												run: (*parser).callongoParenExpr57,
												expr: &seqExpr{
													pos: position{line: 1403, col: 19, offset: 45548},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1403, col: 19, offset: 45548},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).callongoParenExpr60,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1405, col: 5, offset: 45627},
												run: (*parser).callongoParenExpr61,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callongoParenExpr62,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1385, col: 5, offset: 44948},
						run: (*parser).callongoParenExpr68,
						expr: &seqExpr{
							pos: position{line: 1385, col: 5, offset: 44948},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1385, col: 5, offset: 44948},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1395, col: 23, offset: 45301},
										run: (*parser).callongoParenExpr71,
										expr: &seqExpr{
											pos: position{line: 1395, col: 23, offset: 45301},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1395, col: 23, offset: 45301},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1395, col: 26, offset: 45304},
													expr: &litMatcher{
														pos:        position{line: 1395, col: 27, offset: 45305},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callongoParenExpr77,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).callongoParenExpr83,
												},
												&litMatcher{
													pos:        position{line: 1395, col: 41, offset: 45319},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 30, offset: 44973},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1385, col: 36, offset: 44979},
										expr: &ruleRefExpr{
											pos:  position{line: 1385, col: 36, offset: 44979},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 50, offset: 44993},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1408, col: 21, offset: 45693},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1408, col: 21, offset: 45693},
												run: (*parser).callongoParenExpr90,
												expr: &seqExpr{
													pos: position{line: 1408, col: 21, offset: 45693},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1408, col: 21, offset: 45693},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).callongoParenExpr93,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1410, col: 5, offset: 45772},
												run: (*parser).callongoParenExpr94,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callongoParenExpr95,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalGoExpression",
			pos:  position{line: 1419, col: 1, offset: 46108},
			expr: &actionExpr{
				pos: position{line: 1419, col: 28, offset: 46135},
				run: (*parser).callonConditionalGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1419, col: 28, offset: 46135},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1419, col: 35, offset: 46142},
						expr: &choiceExpr{
							pos: position{line: 1419, col: 36, offset: 46143},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1419, col: 36, offset: 46143},
									name: "conditionalGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1419, col: 61, offset: 46168},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1469, col: 28, offset: 48373},
									run: (*parser).callonConditionalGoExpression7,
									expr: &seqExpr{
										pos: position{line: 1469, col: 28, offset: 48373},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1469, col: 28, offset: 48373},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1469, col: 36, offset: 48381},
													expr: &choiceExpr{
														pos: position{line: 1469, col: 37, offset: 48382},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1469, col: 37, offset: 48382},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1454, col: 34, offset: 47556},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1454, col: 34, offset: 47556},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1454, col: 49, offset: 47571},
																		expr: &choiceExpr{
																			pos: position{line: 2787, col: 20, offset: 94555},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							run: (*parser).callonConditionalGoExpression20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2785, col: 37, offset: 94524},
																							expr: &litMatcher{
																								pos:        position{line: 2785, col: 37, offset: 94524},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2785, col: 43, offset: 94530},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1469, col: 74, offset: 48419},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1485, col: 18, offset: 48832},
													run: (*parser).callonConditionalGoExpression25,
													expr: &seqExpr{
														pos: position{line: 1485, col: 18, offset: 48832},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1485, col: 18, offset: 48832},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1485, col: 26, offset: 48840},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 29, offset: 48843},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2867, col: 14, offset: 97512},
																	run: (*parser).callonConditionalGoExpression31,
																	expr: &seqExpr{
																		pos: position{line: 2867, col: 14, offset: 97512},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonConditionalGoExpression33,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2841, col: 18, offset: 96619},
																				run: (*parser).callonConditionalGoExpression39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2867, col: 24, offset: 97522},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2793, col: 12, offset: 94819},
																					run: (*parser).callonConditionalGoExpression41,
																					expr: &seqExpr{
																						pos: position{line: 2793, col: 12, offset: 94819},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2793, col: 12, offset: 94819},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2774, col: 8, offset: 94166},
																									run: (*parser).callonConditionalGoExpression44,
																									expr: &choiceExpr{
																										pos: position{line: 2774, col: 9, offset: 94167},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												expr: &anyMatcher{
																													line: 2774, col: 10, offset: 94168,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2774, col: 14, offset: 94172},
																												expr: &anyMatcher{
																													line: 2774, col: 15, offset: 94173,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2793, col: 21, offset: 94828},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2867, col: 40, offset: 97538},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonConditionalGoExpression55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 47, offset: 48861},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 265, col: 10, offset: 7614},
																	run: (*parser).callonConditionalGoExpression60,
																	expr: &labeledExpr{
																		pos:   position{line: 265, col: 10, offset: 7614},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1682, col: 17, offset: 55568},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1682, col: 26, offset: 55577},
																					expr: &charClassMatcher{
																						pos:        position{line: 1665, col: 20, offset: 55323},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 60, offset: 48874},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1494, col: 21, offset: 49117},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2871, col: 12, offset: 97598},
																			run: (*parser).callonConditionalGoExpression68,
																			expr: &seqExpr{
																				pos: position{line: 2871, col: 12, offset: 97598},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2871, col: 12, offset: 97598},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2871, col: 15, offset: 97601},
																						expr: &seqExpr{
																							pos: position{line: 2871, col: 16, offset: 97602},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2871, col: 16, offset: 97602},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2871, col: 20, offset: 97606},
																									expr: &choiceExpr{
																										pos: position{line: 2787, col: 20, offset: 94555},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2787, col: 31, offset: 94566},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2787, col: 31, offset: 94566},
																														run: (*parser).callonConditionalGoExpression79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2785, col: 37, offset: 94524},
																														expr: &litMatcher{
																															pos:        position{line: 2785, col: 37, offset: 94524},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2785, col: 43, offset: 94530},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2871, col: 26, offset: 97612},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2794, col: 12, offset: 94880},
																							run: (*parser).callonConditionalGoExpression84,
																							expr: &seqExpr{
																								pos: position{line: 2794, col: 12, offset: 94880},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2794, col: 12, offset: 94880},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2774, col: 8, offset: 94166},
																											run: (*parser).callonConditionalGoExpression87,
																											expr: &choiceExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2774, col: 9, offset: 94167},
																														expr: &anyMatcher{
																															line: 2774, col: 10, offset: 94168,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2774, col: 14, offset: 94172},
																														expr: &anyMatcher{
																															line: 2774, col: 15, offset: 94173,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2794, col: 21, offset: 94889},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2847, col: 13, offset: 96752},
																						run: (*parser).callonConditionalGoExpression94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1494, col: 31, offset: 49127},
																			run: (*parser).callonConditionalGoExpression95,
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonConditionalGoExpression96,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1443, col: 20, offset: 47197},
									run: (*parser).callonConditionalGoExpression102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1443, col: 20, offset: 47197},
										expr: &seqExpr{
											pos: position{line: 1457, col: 24, offset: 47652},
											exprs: []any{
												&notExpr{
													pos: position{line: 1457, col: 24, offset: 47652},
													expr: &seqExpr{
														pos: position{line: 1462, col: 35, offset: 48019},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1462, col: 36, offset: 48020},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1462, col: 36, offset: 48020},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1454, col: 34, offset: 47556},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1454, col: 34, offset: 47556},
																				val:        "[=&|^+/*%<>!-]",
																				chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1454, col: 49, offset: 47571},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonConditionalGoExpression116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1462, col: 72, offset: 48056},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1462, col: 80, offset: 48064},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1462, col: 83, offset: 48067},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1457, col: 57, offset: 47685},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1729, col: 14, offset: 56891},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1729, col: 14, offset: 56891},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1729, col: 20, offset: 56897},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1777, col: 19, offset: 59032},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1777, col: 19, offset: 59032},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1778, col: 5, offset: 59091},
																			run: (*parser).callonConditionalGoExpression134,
																			expr: &seqExpr{
																				pos: position{line: 1778, col: 5, offset: 59091},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1778, col: 5, offset: 59091},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 14, offset: 59100},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 26, offset: 59112},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 38, offset: 59124},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 50, offset: 59136},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1807, col: 16, offset: 60268},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1807, col: 16, offset: 60268},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1808, col: 5, offset: 60371},
																			run: (*parser).callonConditionalGoExpression155,
																			expr: &seqExpr{
																				pos: position{line: 1808, col: 5, offset: 60371},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1808, col: 5, offset: 60371},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 14, offset: 60380},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 26, offset: 60392},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 38, offset: 60404},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 50, offset: 60416},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 62, offset: 60428},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 74, offset: 60440},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 86, offset: 60452},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 98, offset: 60464},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1842, col: 24, offset: 61844},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1842, col: 24, offset: 61844},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1842, col: 29, offset: 61849},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1756, col: 75, offset: 58146},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1758, col: 24, offset: 58292},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1758, col: 24, offset: 58292},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1759, col: 24, offset: 58359},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1759, col: 24, offset: 58359},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1760, col: 5, offset: 58396},
																			run: (*parser).callonConditionalGoExpression187,
																			expr: &seqExpr{
																				pos: position{line: 1760, col: 5, offset: 58396},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1760, col: 5, offset: 58396},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 14, offset: 58405},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 26, offset: 58417},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1843, col: 24, offset: 61927},
																			run: (*parser).callonConditionalGoExpression194,
																			expr: &seqExpr{
																				pos: position{line: 1843, col: 24, offset: 61927},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1843, col: 24, offset: 61927},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1867, col: 5, offset: 62941},
																			run: (*parser).callonConditionalGoExpression205,
																			expr: &seqExpr{
																				pos: position{line: 1867, col: 5, offset: 62941},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1867, col: 5, offset: 62941},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1888, col: 5, offset: 63780},
																			run: (*parser).callonConditionalGoExpression212,
																			expr: &seqExpr{
																				pos: position{line: 1888, col: 5, offset: 63780},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1888, col: 5, offset: 63780},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1906, col: 5, offset: 64463},
																			run: (*parser).callonConditionalGoExpression217,
																			expr: &litMatcher{
																				pos:        position{line: 1906, col: 5, offset: 64463},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1729, col: 76, offset: 56953},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1730, col: 5, offset: 56964},
															run: (*parser).callonConditionalGoExpression220,
															expr: &seqExpr{
																pos: position{line: 1730, col: 5, offset: 56964},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1730, col: 5, offset: 56964},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 10, offset: 56969},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1730, col: 16, offset: 56975},
																			expr: &choiceExpr{
																				pos: position{line: 1730, col: 17, offset: 56976},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1777, col: 19, offset: 59032},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1777, col: 19, offset: 59032},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1778, col: 5, offset: 59091},
																						run: (*parser).callonConditionalGoExpression232,
																						expr: &seqExpr{
																							pos: position{line: 1778, col: 5, offset: 59091},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1778, col: 5, offset: 59091},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 14, offset: 59100},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 26, offset: 59112},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 38, offset: 59124},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 50, offset: 59136},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1807, col: 16, offset: 60268},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1807, col: 16, offset: 60268},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1808, col: 5, offset: 60371},
																						run: (*parser).callonConditionalGoExpression253,
																						expr: &seqExpr{
																							pos: position{line: 1808, col: 5, offset: 60371},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1808, col: 5, offset: 60371},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 14, offset: 60380},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 26, offset: 60392},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 38, offset: 60404},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 50, offset: 60416},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 62, offset: 60428},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 74, offset: 60440},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 86, offset: 60452},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 98, offset: 60464},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1842, col: 24, offset: 61844},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1842, col: 24, offset: 61844},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1842, col: 29, offset: 61849},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1756, col: 75, offset: 58146},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1758, col: 24, offset: 58292},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1758, col: 24, offset: 58292},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1759, col: 24, offset: 58359},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1759, col: 24, offset: 58359},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1760, col: 5, offset: 58396},
																						run: (*parser).callonConditionalGoExpression285,
																						expr: &seqExpr{
																							pos: position{line: 1760, col: 5, offset: 58396},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1760, col: 5, offset: 58396},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 14, offset: 58405},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 26, offset: 58417},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1843, col: 24, offset: 61927},
																						run: (*parser).callonConditionalGoExpression292,
																						expr: &seqExpr{
																							pos: position{line: 1843, col: 24, offset: 61927},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1843, col: 24, offset: 61927},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1867, col: 5, offset: 62941},
																						run: (*parser).callonConditionalGoExpression303,
																						expr: &seqExpr{
																							pos: position{line: 1867, col: 5, offset: 62941},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1867, col: 5, offset: 62941},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1888, col: 5, offset: 63780},
																						run: (*parser).callonConditionalGoExpression310,
																						expr: &seqExpr{
																							pos: position{line: 1888, col: 5, offset: 63780},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1888, col: 5, offset: 63780},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1906, col: 5, offset: 64463},
																						run: (*parser).callonConditionalGoExpression315,
																						expr: &litMatcher{
																							pos:        position{line: 1906, col: 5, offset: 64463},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1730, col: 74, offset: 57033},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 79, offset: 57038},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2774, col: 8, offset: 94166},
																			run: (*parser).callonConditionalGoExpression319,
																			expr: &choiceExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2774, col: 9, offset: 94167},
																						expr: &anyMatcher{
																							line: 2774, col: 10, offset: 94168,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2774, col: 14, offset: 94172},
																						expr: &anyMatcher{
																							line: 2774, col: 15, offset: 94173,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1454, col: 34, offset: 47556},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1454, col: 34, offset: 47556},
																	val:        "[=&|^+/*%<>!-]",
																	chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1454, col: 49, offset: 47571},
																	expr: &choiceExpr{
																		pos: position{line: 2787, col: 20, offset: 94555},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2787, col: 31, offset: 94566},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2787, col: 31, offset: 94566},
																						run: (*parser).callonConditionalGoExpression331,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2785, col: 37, offset: 94524},
																						expr: &litMatcher{
																							pos:        position{line: 2785, col: 37, offset: 94524},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2785, col: 43, offset: 94530},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1457, col: 101, offset: 47729},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1457, col: 101, offset: 47729},
																	expr: &seqExpr{
																		pos: position{line: 1457, col: 103, offset: 47731},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1457, col: 103, offset: 47731},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1457, col: 106, offset: 47734},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1457, col: 112, offset: 47740},
																	val:        "[^\\r\\n({[]}),;:\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ',', ';', ':', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "conditionalGoParenExpr",
			pos:  position{line: 1423, col: 1, offset: 46264},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 27, offset: 46290},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1423, col: 27, offset: 46290},
						run: (*parser).callonconditionalGoParenExpr2,
						expr: &seqExpr{
							pos: position{line: 1423, col: 27, offset: 46290},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1423, col: 27, offset: 46290},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1389, col: 21, offset: 45086},
										run: (*parser).callonconditionalGoParenExpr5,
										expr: &seqExpr{
											pos: position{line: 1389, col: 21, offset: 45086},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1389, col: 21, offset: 45086},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1389, col: 24, offset: 45089},
													expr: &litMatcher{
														pos:        position{line: 1389, col: 25, offset: 45090},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonconditionalGoParenExpr11,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).callonconditionalGoParenExpr17,
												},
												&litMatcher{
													pos:        position{line: 1389, col: 39, offset: 45104},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1423, col: 50, offset: 46313},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1423, col: 56, offset: 46319},
										expr: &ruleRefExpr{
											pos:  position{line: 1423, col: 56, offset: 46319},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1423, col: 70, offset: 46333},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1398, col: 19, offset: 45405},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1398, col: 19, offset: 45405},
												run: (*parser).callonconditionalGoParenExpr24,
												expr: &seqExpr{
													pos: position{line: 1398, col: 19, offset: 45405},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1398, col: 19, offset: 45405},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).callonconditionalGoParenExpr27,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1400, col: 5, offset: 45484},
												run: (*parser).callonconditionalGoParenExpr28,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonconditionalGoParenExpr29,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 46405},
						run: (*parser).callonconditionalGoParenExpr35,
						expr: &seqExpr{
							pos: position{line: 1425, col: 5, offset: 46405},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1425, col: 5, offset: 46405},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1392, col: 21, offset: 45192},
										run: (*parser).callonconditionalGoParenExpr38,
										expr: &seqExpr{
											pos: position{line: 1392, col: 21, offset: 45192},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1392, col: 21, offset: 45192},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1392, col: 24, offset: 45195},
													expr: &litMatcher{
														pos:        position{line: 1392, col: 25, offset: 45196},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonconditionalGoParenExpr44,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).callonconditionalGoParenExpr50,
												},
												&litMatcher{
													pos:        position{line: 1392, col: 39, offset: 45210},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1425, col: 28, offset: 46428},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1425, col: 34, offset: 46434},
										expr: &ruleRefExpr{
											pos:  position{line: 1425, col: 34, offset: 46434},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1425, col: 48, offset: 46448},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1403, col: 19, offset: 45548},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1403, col: 19, offset: 45548},
												run: (*parser).callonconditionalGoParenExpr57,
												expr: &seqExpr{
													pos: position{line: 1403, col: 19, offset: 45548},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1403, col: 19, offset: 45548},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).callonconditionalGoParenExpr60,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1405, col: 5, offset: 45627},
												run: (*parser).callonconditionalGoParenExpr61,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonconditionalGoParenExpr62,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1425, col: 70, offset: 46470},
									expr: &choiceExpr{
										pos: position{line: 1425, col: 72, offset: 46472},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 1425, col: 78, offset: 46478},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1425, col: 78, offset: 46478},
														expr: &choiceExpr{
															pos: position{line: 2787, col: 20, offset: 94555},
															alternatives: []any{
																&charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 2787, col: 31, offset: 94566},
																	exprs: []any{
																		&andCodeExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			run: (*parser).callonconditionalGoParenExpr93,
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 2785, col: 37, offset: 94524},
																			expr: &litMatcher{
																				pos:        position{line: 2785, col: 37, offset: 94524},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2785, col: 43, offset: 94530},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1425, col: 82, offset: 46482},
														val:        "else",
														ignoreCase: false,
														want:       "\"else\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 46540},
						run: (*parser).callonconditionalGoParenExpr98,
						expr: &seqExpr{
							pos: position{line: 1427, col: 5, offset: 46540},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1427, col: 5, offset: 46540},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1395, col: 23, offset: 45301},
										run: (*parser).callonconditionalGoParenExpr101,
										expr: &seqExpr{
											pos: position{line: 1395, col: 23, offset: 45301},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1395, col: 23, offset: 45301},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1395, col: 26, offset: 45304},
													expr: &litMatcher{
														pos:        position{line: 1395, col: 27, offset: 45305},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonconditionalGoParenExpr107,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).callonconditionalGoParenExpr113,
												},
												&litMatcher{
													pos:        position{line: 1395, col: 41, offset: 45319},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 30, offset: 46565},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1427, col: 36, offset: 46571},
										expr: &ruleRefExpr{
											pos:  position{line: 1427, col: 36, offset: 46571},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 50, offset: 46585},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1408, col: 21, offset: 45693},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1408, col: 21, offset: 45693},
												run: (*parser).callonconditionalGoParenExpr120,
												expr: &seqExpr{
													pos: position{line: 1408, col: 21, offset: 45693},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1408, col: 21, offset: 45693},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).callonconditionalGoParenExpr123,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1410, col: 5, offset: 45772},
												run: (*parser).callonconditionalGoParenExpr124,
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonconditionalGoParenExpr125,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1427, col: 74, offset: 46609},
									expr: &choiceExpr{
										pos: position{line: 1427, col: 76, offset: 46611},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 1427, col: 82, offset: 46617},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1427, col: 82, offset: 46617},
														expr: &choiceExpr{
															pos: position{line: 2787, col: 20, offset: 94555},
															alternatives: []any{
																&charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 2787, col: 31, offset: 94566},
																	exprs: []any{
																		&andCodeExpr{
																			pos: position{line: 2787, col: 31, offset: 94566},
																			run: (*parser).callonconditionalGoParenExpr156,
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 2785, col: 37, offset: 94524},
																			expr: &litMatcher{
																				pos:        position{line: 2785, col: 37, offset: 94524},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2785, col: 43, offset: 94530},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1427, col: 86, offset: 46621},
														val:        "else",
														ignoreCase: false,
														want:       "\"else\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoStatement",
			pos:  position{line: 1435, col: 1, offset: 46865},
			expr: &actionExpr{
				pos: position{line: 1435, col: 16, offset: 46880},
				run: (*parser).callonGoStatement1,
				expr: &labeledExpr{
					pos:   position{line: 1435, col: 16, offset: 46880},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1435, col: 23, offset: 46887},
						expr: &choiceExpr{
							pos: position{line: 1435, col: 24, offset: 46888},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1435, col: 24, offset: 46888},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1435, col: 38, offset: 46902},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1477, col: 27, offset: 48607},
									run: (*parser).callonGoStatement7,
									expr: &seqExpr{
										pos: position{line: 1477, col: 27, offset: 48607},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1477, col: 27, offset: 48607},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1477, col: 35, offset: 48615},
													expr: &choiceExpr{
														pos: position{line: 1477, col: 36, offset: 48616},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1477, col: 36, offset: 48616},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1454, col: 34, offset: 47556},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1454, col: 34, offset: 47556},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1454, col: 49, offset: 47571},
																		expr: &choiceExpr{
																			pos: position{line: 2787, col: 20, offset: 94555},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2787, col: 31, offset: 94566},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							run: (*parser).callonGoStatement20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2785, col: 37, offset: 94524},
																							expr: &litMatcher{
																								pos:        position{line: 2785, col: 37, offset: 94524},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2785, col: 43, offset: 94530},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1477, col: 73, offset: 48653},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1485, col: 18, offset: 48832},
													run: (*parser).callonGoStatement25,
													expr: &seqExpr{
														pos: position{line: 1485, col: 18, offset: 48832},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1485, col: 18, offset: 48832},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1485, col: 26, offset: 48840},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 29, offset: 48843},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2867, col: 14, offset: 97512},
																	run: (*parser).callonGoStatement31,
																	expr: &seqExpr{
																		pos: position{line: 2867, col: 14, offset: 97512},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonGoStatement33,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2841, col: 18, offset: 96619},
																				run: (*parser).callonGoStatement39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2867, col: 24, offset: 97522},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2793, col: 12, offset: 94819},
																					run: (*parser).callonGoStatement41,
																					expr: &seqExpr{
																						pos: position{line: 2793, col: 12, offset: 94819},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2793, col: 12, offset: 94819},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2774, col: 8, offset: 94166},
																									run: (*parser).callonGoStatement44,
																									expr: &choiceExpr{
																										pos: position{line: 2774, col: 9, offset: 94167},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												expr: &anyMatcher{
																													line: 2774, col: 10, offset: 94168,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2774, col: 14, offset: 94172},
																												expr: &anyMatcher{
																													line: 2774, col: 15, offset: 94173,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2793, col: 21, offset: 94828},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2867, col: 40, offset: 97538},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonGoStatement55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 47, offset: 48861},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 265, col: 10, offset: 7614},
																	run: (*parser).callonGoStatement60,
																	expr: &labeledExpr{
																		pos:   position{line: 265, col: 10, offset: 7614},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1682, col: 17, offset: 55568},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1682, col: 26, offset: 55577},
																					expr: &charClassMatcher{
																						pos:        position{line: 1665, col: 20, offset: 55323},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1485, col: 60, offset: 48874},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1494, col: 21, offset: 49117},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2871, col: 12, offset: 97598},
																			run: (*parser).callonGoStatement68,
																			expr: &seqExpr{
																				pos: position{line: 2871, col: 12, offset: 97598},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2871, col: 12, offset: 97598},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2871, col: 15, offset: 97601},
																						expr: &seqExpr{
																							pos: position{line: 2871, col: 16, offset: 97602},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2871, col: 16, offset: 97602},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2871, col: 20, offset: 97606},
																									expr: &choiceExpr{
																										pos: position{line: 2787, col: 20, offset: 94555},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2787, col: 31, offset: 94566},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2787, col: 31, offset: 94566},
																														run: (*parser).callonGoStatement79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2785, col: 37, offset: 94524},
																														expr: &litMatcher{
																															pos:        position{line: 2785, col: 37, offset: 94524},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2785, col: 43, offset: 94530},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2871, col: 26, offset: 97612},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2794, col: 12, offset: 94880},
																							run: (*parser).callonGoStatement84,
																							expr: &seqExpr{
																								pos: position{line: 2794, col: 12, offset: 94880},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2794, col: 12, offset: 94880},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2774, col: 8, offset: 94166},
																											run: (*parser).callonGoStatement87,
																											expr: &choiceExpr{
																												pos: position{line: 2774, col: 9, offset: 94167},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2774, col: 9, offset: 94167},
																														expr: &anyMatcher{
																															line: 2774, col: 10, offset: 94168,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2774, col: 14, offset: 94172},
																														expr: &anyMatcher{
																															line: 2774, col: 15, offset: 94173,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2794, col: 21, offset: 94889},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2847, col: 13, offset: 96752},
																						run: (*parser).callonGoStatement94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1494, col: 31, offset: 49127},
																			run: (*parser).callonGoStatement95,
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonGoStatement96,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1446, col: 19, offset: 47311},
									run: (*parser).callonGoStatement102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1446, col: 19, offset: 47311},
										expr: &seqExpr{
											pos: position{line: 1458, col: 24, offset: 47785},
											exprs: []any{
												&notExpr{
													pos: position{line: 1458, col: 24, offset: 47785},
													expr: &seqExpr{
														pos: position{line: 1463, col: 35, offset: 48105},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1463, col: 36, offset: 48106},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1463, col: 36, offset: 48106},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1455, col: 34, offset: 47608},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1455, col: 34, offset: 47608},
																				val:        "[=,&|^+/*%<>!-]",
																				chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1455, col: 50, offset: 47624},
																				expr: &choiceExpr{
																					pos: position{line: 2787, col: 20, offset: 94555},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2787, col: 31, offset: 94566},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2787, col: 31, offset: 94566},
																									run: (*parser).callonGoStatement116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2785, col: 37, offset: 94524},
																									expr: &litMatcher{
																										pos:        position{line: 2785, col: 37, offset: 94524},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2785, col: 43, offset: 94530},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1463, col: 71, offset: 48141},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1463, col: 79, offset: 48149},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1463, col: 82, offset: 48152},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1458, col: 56, offset: 47817},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1729, col: 14, offset: 56891},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1729, col: 14, offset: 56891},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1729, col: 20, offset: 56897},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1777, col: 19, offset: 59032},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1777, col: 19, offset: 59032},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1778, col: 5, offset: 59091},
																			run: (*parser).callonGoStatement134,
																			expr: &seqExpr{
																				pos: position{line: 1778, col: 5, offset: 59091},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1778, col: 5, offset: 59091},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 14, offset: 59100},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 26, offset: 59112},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 38, offset: 59124},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1778, col: 50, offset: 59136},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1807, col: 16, offset: 60268},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1807, col: 16, offset: 60268},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1808, col: 5, offset: 60371},
																			run: (*parser).callonGoStatement155,
																			expr: &seqExpr{
																				pos: position{line: 1808, col: 5, offset: 60371},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1808, col: 5, offset: 60371},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 14, offset: 60380},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 26, offset: 60392},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 38, offset: 60404},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 50, offset: 60416},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 62, offset: 60428},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 74, offset: 60440},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 86, offset: 60452},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1808, col: 98, offset: 60464},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1842, col: 24, offset: 61844},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1842, col: 24, offset: 61844},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1842, col: 29, offset: 61849},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1756, col: 75, offset: 58146},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1758, col: 24, offset: 58292},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1758, col: 24, offset: 58292},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1675, col: 19, offset: 55493},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1759, col: 24, offset: 58359},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1759, col: 24, offset: 58359},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1676, col: 19, offset: 55517},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1760, col: 5, offset: 58396},
																			run: (*parser).callonGoStatement187,
																			expr: &seqExpr{
																				pos: position{line: 1760, col: 5, offset: 58396},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1760, col: 5, offset: 58396},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 14, offset: 58405},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1760, col: 26, offset: 58417},
																						expr: &charClassMatcher{
																							pos:        position{line: 1676, col: 19, offset: 55517},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1843, col: 24, offset: 61927},
																			run: (*parser).callonGoStatement194,
																			expr: &seqExpr{
																				pos: position{line: 1843, col: 24, offset: 61927},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1843, col: 24, offset: 61927},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1867, col: 5, offset: 62941},
																			run: (*parser).callonGoStatement205,
																			expr: &seqExpr{
																				pos: position{line: 1867, col: 5, offset: 62941},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1867, col: 5, offset: 62941},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1888, col: 5, offset: 63780},
																			run: (*parser).callonGoStatement212,
																			expr: &seqExpr{
																				pos: position{line: 1888, col: 5, offset: 63780},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1888, col: 5, offset: 63780},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1676, col: 19, offset: 55517},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1906, col: 5, offset: 64463},
																			run: (*parser).callonGoStatement217,
																			expr: &litMatcher{
																				pos:        position{line: 1906, col: 5, offset: 64463},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1729, col: 76, offset: 56953},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1730, col: 5, offset: 56964},
															run: (*parser).callonGoStatement220,
															expr: &seqExpr{
																pos: position{line: 1730, col: 5, offset: 56964},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1730, col: 5, offset: 56964},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 10, offset: 56969},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1730, col: 16, offset: 56975},
																			expr: &choiceExpr{
																				pos: position{line: 1730, col: 17, offset: 56976},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1777, col: 19, offset: 59032},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1777, col: 19, offset: 59032},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1778, col: 5, offset: 59091},
																						run: (*parser).callonGoStatement232,
																						expr: &seqExpr{
																							pos: position{line: 1778, col: 5, offset: 59091},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1778, col: 5, offset: 59091},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 14, offset: 59100},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 26, offset: 59112},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 38, offset: 59124},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1778, col: 50, offset: 59136},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1807, col: 16, offset: 60268},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1807, col: 16, offset: 60268},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1808, col: 5, offset: 60371},
																						run: (*parser).callonGoStatement253,
																						expr: &seqExpr{
																							pos: position{line: 1808, col: 5, offset: 60371},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1808, col: 5, offset: 60371},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 14, offset: 60380},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 26, offset: 60392},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 38, offset: 60404},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 50, offset: 60416},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 62, offset: 60428},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 74, offset: 60440},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 86, offset: 60452},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1808, col: 98, offset: 60464},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1842, col: 24, offset: 61844},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1842, col: 24, offset: 61844},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1842, col: 29, offset: 61849},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1756, col: 75, offset: 58146},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1758, col: 24, offset: 58292},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1758, col: 24, offset: 58292},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1675, col: 19, offset: 55493},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1759, col: 24, offset: 58359},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1759, col: 24, offset: 58359},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1676, col: 19, offset: 55517},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1760, col: 5, offset: 58396},
																						run: (*parser).callonGoStatement285,
																						expr: &seqExpr{
																							pos: position{line: 1760, col: 5, offset: 58396},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1760, col: 5, offset: 58396},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 14, offset: 58405},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1760, col: 26, offset: 58417},
																									expr: &charClassMatcher{
																										pos:        position{line: 1676, col: 19, offset: 55517},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1843, col: 24, offset: 61927},
																						run: (*parser).callonGoStatement292,
																						expr: &seqExpr{
																							pos: position{line: 1843, col: 24, offset: 61927},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1843, col: 24, offset: 61927},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1867, col: 5, offset: 62941},
																						run: (*parser).callonGoStatement303,
																						expr: &seqExpr{
																							pos: position{line: 1867, col: 5, offset: 62941},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1867, col: 5, offset: 62941},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1888, col: 5, offset: 63780},
																						run: (*parser).callonGoStatement310,
																						expr: &seqExpr{
																							pos: position{line: 1888, col: 5, offset: 63780},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1888, col: 5, offset: 63780},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1676, col: 19, offset: 55517},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1906, col: 5, offset: 64463},
																						run: (*parser).callonGoStatement315,
																						expr: &litMatcher{
																							pos:        position{line: 1906, col: 5, offset: 64463},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1730, col: 74, offset: 57033},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1730, col: 79, offset: 57038},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2774, col: 8, offset: 94166},
																			run: (*parser).callonGoStatement319,
																			expr: &choiceExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2774, col: 9, offset: 94167},
																						expr: &anyMatcher{
																							line: 2774, col: 10, offset: 94168,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2774, col: 14, offset: 94172},
																						expr: &anyMatcher{
																							line: 2774, col: 15, offset: 94173,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1455, col: 34, offset: 47608},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1455, col: 34, offset: 47608},
																	val:        "[=,&|^+/*%<>!-]",
																	chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1455, col: 50, offset: 47624},
																	expr: &choiceExpr{
																		pos: position{line: 2787, col: 20, offset: 94555},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2787, col: 31, offset: 94566},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2787, col: 31, offset: 94566},
																						run: (*parser).callonGoStatement331,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2785, col: 37, offset: 94524},
																						expr: &litMatcher{
																							pos:        position{line: 2785, col: 37, offset: 94524},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2785, col: 43, offset: 94530},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1458, col: 99, offset: 47860},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1458, col: 99, offset: 47860},
																	expr: &seqExpr{
																		pos: position{line: 1458, col: 101, offset: 47862},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1458, col: 101, offset: 47862},
																				expr: &charClassMatcher{
																					pos:        position{line: 2784, col: 37, offset: 94482},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1458, col: 104, offset: 47865},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1458, col: 110, offset: 47871},
																	val:        "[^\\r\\n({[]});\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ';', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 1502, col: 1, offset: 49374},
			expr: &choiceExpr{
				pos: position{line: 1502, col: 11, offset: 49384},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1502, col: 11, offset: 49384},
						name: "InterpretedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1502, col: 31, offset: 49404},
						name: "RawString",
					},
				},
			},
		},
		{
			name: "InterpretedString",
			pos:  position{line: 1504, col: 1, offset: 49415},
			expr: &actionExpr{
				pos: position{line: 1504, col: 22, offset: 49436},
				run: (*parser).callonInterpretedString1,
				expr: &seqExpr{
					pos: position{line: 1504, col: 22, offset: 49436},
					exprs: []any{
						&actionExpr{
							pos: position{line: 1513, col: 27, offset: 49727},
							run: (*parser).callonInterpretedString3,
							expr: &seqExpr{
								pos: position{line: 1513, col: 27, offset: 49727},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonInterpretedString5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonInterpretedString11,
									},
									&labeledExpr{
										pos:   position{line: 1513, col: 37, offset: 49737},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonInterpretedString13,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 1513, col: 48, offset: 49748},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1504, col: 45, offset: 49459},
							label: "contentsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1504, col: 55, offset: 49469},
								expr: &ruleRefExpr{
									pos:  position{line: 1504, col: 55, offset: 49469},
									name: "InterpretedStringItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1504, col: 78, offset: 49492},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 1514, col: 25, offset: 49815},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1514, col: 25, offset: 49815},
										run: (*parser).callonInterpretedString25,
										expr: &seqExpr{
											pos: position{line: 1514, col: 25, offset: 49815},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1514, col: 25, offset: 49815},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 1514, col: 29, offset: 49819},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonInterpretedString29,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonInterpretedString35,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1516, col: 5, offset: 49880},
										run: (*parser).callonInterpretedString36,
										expr: &labeledExpr{
											pos:   position{line: 1516, col: 5, offset: 49880},
											label: "endI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonInterpretedString38,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawString",
			pos:  position{line: 1535, col: 1, offset: 50430},
			expr: &actionExpr{
				pos: position{line: 1535, col: 14, offset: 50443},
				run: (*parser).callonRawString1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 14, offset: 50443},
					exprs: []any{
						&actionExpr{
							pos: position{line: 1544, col: 19, offset: 50702},
							run: (*parser).callonRawString3,
							expr: &seqExpr{
								pos: position{line: 1544, col: 19, offset: 50702},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonRawString5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonRawString11,
									},
									&labeledExpr{
										pos:   position{line: 1544, col: 29, offset: 50712},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonRawString13,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 1544, col: 40, offset: 50723},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 29, offset: 50458},
							label: "contentsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1535, col: 39, offset: 50468},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 39, offset: 50468},
									name: "RawStringItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 54, offset: 50483},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 1545, col: 17, offset: 50782},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1545, col: 17, offset: 50782},
										run: (*parser).callonRawString25,
										expr: &seqExpr{
											pos: position{line: 1545, col: 17, offset: 50782},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1545, col: 17, offset: 50782},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonRawString28,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1545, col: 26, offset: 50791},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonRawString35,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1547, col: 5, offset: 50847},
										run: (*parser).callonRawString36,
										expr: &labeledExpr{
											pos:   position{line: 1547, col: 5, offset: 50847},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonRawString38,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpretedStringItem",
			pos:  position{line: 1557, col: 1, offset: 51107},
			expr: &choiceExpr{
				pos: position{line: 1557, col: 26, offset: 51132},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1560, col: 26, offset: 51263},
						run: (*parser).callonInterpretedStringItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1560, col: 26, offset: 51263},
							expr: &choiceExpr{
								pos: position{line: 1560, col: 27, offset: 51264},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1560, col: 27, offset: 51264},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1560, col: 34, offset: 51271},
										exprs: []any{
											&notExpr{
												pos: position{line: 1560, col: 34, offset: 51271},
												expr: &actionExpr{
													pos: position{line: 1653, col: 37, offset: 54954},
													run: (*parser).callonInterpretedStringItem8,
													expr: &seqExpr{
														pos: position{line: 1653, col: 37, offset: 54954},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 1653, col: 37, offset: 54954},
																label: "posI",
																expr: &actionExpr{
																	pos: position{line: 2774, col: 8, offset: 94166},
																	run: (*parser).callonInterpretedStringItem11,
																	expr: &choiceExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				expr: &anyMatcher{
																					line: 2774, col: 10, offset: 94168,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2774, col: 14, offset: 94172},
																				expr: &anyMatcher{
																					line: 2774, col: 15, offset: 94173,
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1653, col: 47, offset: 54964},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 1653, col: 47, offset: 54964},
																		val:        "#%",
																		ignoreCase: false,
																		want:       "\"#%\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1653, col: 54, offset: 54971},
																		val:        "#{",
																		ignoreCase: false,
																		want:       "\"#{\"",
																	},
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 1560, col: 69, offset: 51306},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 1777, col: 19, offset: 59032},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1777, col: 19, offset: 59032},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1778, col: 5, offset: 59091},
														run: (*parser).callonInterpretedStringItem27,
														expr: &seqExpr{
															pos: position{line: 1778, col: 5, offset: 59091},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1778, col: 5, offset: 59091},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 14, offset: 59100},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 26, offset: 59112},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 38, offset: 59124},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 50, offset: 59136},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1807, col: 16, offset: 60268},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1807, col: 16, offset: 60268},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1808, col: 5, offset: 60371},
														run: (*parser).callonInterpretedStringItem48,
														expr: &seqExpr{
															pos: position{line: 1808, col: 5, offset: 60371},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1808, col: 5, offset: 60371},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 14, offset: 60380},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 26, offset: 60392},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 38, offset: 60404},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 50, offset: 60416},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 62, offset: 60428},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 74, offset: 60440},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 86, offset: 60452},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 98, offset: 60464},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2035, col: 36, offset: 69308},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2035, col: 36, offset: 69308},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2035, col: 41, offset: 69313},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2033, col: 38, offset: 69200},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 1758, col: 24, offset: 58292},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1758, col: 24, offset: 58292},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1675, col: 19, offset: 55493},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1675, col: 19, offset: 55493},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1675, col: 19, offset: 55493},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 1759, col: 24, offset: 58359},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1759, col: 24, offset: 58359},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1760, col: 5, offset: 58396},
														run: (*parser).callonInterpretedStringItem80,
														expr: &seqExpr{
															pos: position{line: 1760, col: 5, offset: 58396},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1760, col: 5, offset: 58396},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1760, col: 14, offset: 58405},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1760, col: 26, offset: 58417},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1922, col: 37, offset: 65029},
														run: (*parser).callonInterpretedStringItem87,
														expr: &seqExpr{
															pos: position{line: 1922, col: 37, offset: 65029},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1922, col: 37, offset: 65029},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1946, col: 5, offset: 66044},
														run: (*parser).callonInterpretedStringItem98,
														expr: &seqExpr{
															pos: position{line: 1946, col: 5, offset: 66044},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1946, col: 5, offset: 66044},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1967, col: 5, offset: 66884},
														run: (*parser).callonInterpretedStringItem105,
														expr: &seqExpr{
															pos: position{line: 1967, col: 5, offset: 66884},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1967, col: 5, offset: 66884},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1985, col: 5, offset: 67568},
														run: (*parser).callonInterpretedStringItem110,
														expr: &litMatcher{
															pos:        position{line: 1985, col: 5, offset: 67568},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1557, col: 50, offset: 51156},
						name: "StringInterpolation",
					},
				},
			},
		},
		{
			name: "RawStringItem",
			pos:  position{line: 1558, col: 1, offset: 51176},
			expr: &choiceExpr{
				pos: position{line: 1558, col: 26, offset: 51201},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1566, col: 18, offset: 51510},
						run: (*parser).callonRawStringItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1566, col: 18, offset: 51510},
							expr: &choiceExpr{
								pos: position{line: 1566, col: 19, offset: 51511},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1566, col: 19, offset: 51511},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1566, col: 26, offset: 51518},
										exprs: []any{
											&notExpr{
												pos: position{line: 1566, col: 26, offset: 51518},
												expr: &actionExpr{
													pos: position{line: 1653, col: 37, offset: 54954},
													run: (*parser).callonRawStringItem8,
													expr: &seqExpr{
														pos: position{line: 1653, col: 37, offset: 54954},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 1653, col: 37, offset: 54954},
																label: "posI",
																expr: &actionExpr{
																	pos: position{line: 2774, col: 8, offset: 94166},
																	run: (*parser).callonRawStringItem11,
																	expr: &choiceExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				expr: &anyMatcher{
																					line: 2774, col: 10, offset: 94168,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2774, col: 14, offset: 94172},
																				expr: &anyMatcher{
																					line: 2774, col: 15, offset: 94173,
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1653, col: 47, offset: 54964},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 1653, col: 47, offset: 54964},
																		val:        "#%",
																		ignoreCase: false,
																		want:       "\"#%\"",
																	},
																	&litMatcher{
																		pos:        position{line: 1653, col: 54, offset: 54971},
																		val:        "#{",
																		ignoreCase: false,
																		want:       "\"#{\"",
																	},
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2921, col: 17, offset: 98977},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2921, col: 17, offset: 98977},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2921, col: 17, offset: 98977},
																run: (*parser).callonRawStringItem22,
															},
															&notExpr{
																pos: position{line: 2921, col: 50, offset: 99010},
																expr: &charClassMatcher{
																	pos:        position{line: 2921, col: 51, offset: 99011},
																	val:        "[\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 2921, col: 60, offset: 99020},
														run: (*parser).callonRawStringItem25,
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 2019, col: 27, offset: 68583},
												val:        "[^`]",
												chars:      []rune{'`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1558, col: 42, offset: 51217},
						name: "StringInterpolation",
					},
				},
			},
		},
		{
			name: "StringInterpolation",
			pos:  position{line: 1573, col: 1, offset: 51694},
			expr: &actionExpr{
				pos: position{line: 1573, col: 24, offset: 51717},
				run: (*parser).callonStringInterpolation1,
				expr: &seqExpr{
					pos: position{line: 1573, col: 24, offset: 51717},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2569, col: 23, offset: 86381},
							run: (*parser).callonStringInterpolation3,
							expr: &seqExpr{
								pos: position{line: 2569, col: 23, offset: 86381},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonStringInterpolation5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonStringInterpolation11,
									},
									&labeledExpr{
										pos:   position{line: 2569, col: 33, offset: 86391},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonStringInterpolation13,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2569, col: 44, offset: 86402},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 43, offset: 51736},
							label: "fmtDirectiveI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1573, col: 57, offset: 51750},
								expr: &choiceExpr{
									pos: position{line: 1610, col: 17, offset: 53133},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1610, col: 17, offset: 53133},
											run: (*parser).callonStringInterpolation23,
											expr: &seqExpr{
												pos: position{line: 1610, col: 17, offset: 53133},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1610, col: 17, offset: 53133},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1610, col: 21, offset: 53137},
														expr: &charClassMatcher{
															pos:        position{line: 1626, col: 12, offset: 53819},
															val:        "[-+# 0]",
															chars:      []rune{'-', '+', '#', ' ', '0'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1610, col: 30, offset: 53146},
														expr: &seqExpr{
															pos: position{line: 1610, col: 31, offset: 53147},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1610, col: 31, offset: 53147},
																	val:        "[1-9]",
																	ranges:     []rune{'1', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1610, col: 36, offset: 53152},
																	expr: &charClassMatcher{
																		pos:        position{line: 1610, col: 36, offset: 53152},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1610, col: 45, offset: 53161},
														expr: &seqExpr{
															pos: position{line: 1610, col: 46, offset: 53162},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1610, col: 46, offset: 53162},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1610, col: 50, offset: 53166},
																	expr: &charClassMatcher{
																		pos:        position{line: 1610, col: 50, offset: 53166},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 1627, col: 12, offset: 53838},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 1627, col: 12, offset: 53838},
																val:        "[bcdeEfFgGoOpqstTUvX]",
																chars:      []rune{'b', 'c', 'd', 'e', 'E', 'f', 'F', 'g', 'G', 'o', 'O', 'p', 'q', 's', 't', 'T', 'U', 'v', 'X'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 1627, col: 36, offset: 53862},
																run: (*parser).callonStringInterpolation40,
																expr: &andExpr{
																	pos: position{line: 1627, col: 36, offset: 53862},
																	expr: &charClassMatcher{
																		pos:        position{line: 1627, col: 38, offset: 53864},
																		val:        "[{\"`]",
																		chars:      []rune{'{', '"', '`'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1639, col: 5, offset: 54399},
																run: (*parser).callonStringInterpolation43,
																expr: &anyMatcher{
																	line: 1639, col: 5, offset: 54399,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1612, col: 5, offset: 53224},
											run: (*parser).callonStringInterpolation45,
											expr: &seqExpr{
												pos: position{line: 1612, col: 5, offset: 53224},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1612, col: 5, offset: 53224},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1612, col: 9, offset: 53228},
														expr: &charClassMatcher{
															pos:        position{line: 1612, col: 9, offset: 53228},
															val:        "[^`\"{]",
															chars:      []rune{'`', '"', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&labeledExpr{
														pos:   position{line: 1612, col: 17, offset: 53236},
														label: "endI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonStringInterpolation51,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 71, offset: 51764},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1573, col: 77, offset: 51770},
								name: "stringInterpolationExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "stringInterpolationExpression",
			pos:  position{line: 1580, col: 1, offset: 51963},
			expr: &choiceExpr{
				pos: position{line: 1580, col: 34, offset: 51996},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1580, col: 34, offset: 51996},
						run: (*parser).callonstringInterpolationExpression2,
						expr: &seqExpr{
							pos: position{line: 1580, col: 34, offset: 51996},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1580, col: 34, offset: 51996},
									label: "lBraceI",
									expr: &actionExpr{
										pos: position{line: 2572, col: 33, offset: 86555},
										run: (*parser).callonstringInterpolationExpression5,
										expr: &seqExpr{
											pos: position{line: 2572, col: 33, offset: 86555},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonstringInterpolationExpression7,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2841, col: 18, offset: 96619},
													run: (*parser).callonstringInterpolationExpression13,
												},
												&labeledExpr{
													pos:   position{line: 2572, col: 43, offset: 86565},
													label: "lBraceI",
													expr: &actionExpr{
														pos: position{line: 2796, col: 12, offset: 94942},
														run: (*parser).callonstringInterpolationExpression15,
														expr: &seqExpr{
															pos: position{line: 2796, col: 12, offset: 94942},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2796, col: 12, offset: 94942},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonstringInterpolationExpression18,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2796, col: 21, offset: 94951},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 2907, col: 16, offset: 98776},
									run: (*parser).callonstringInterpolationExpression25,
								},
								&labeledExpr{
									pos:   position{line: 1580, col: 83, offset: 52045},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1580, col: 89, offset: 52051},
										name: "Expression",
									},
								},
								&stateCodeExpr{
									pos: position{line: 2914, col: 14, offset: 98875},
									run: (*parser).callonstringInterpolationExpression28,
								},
								&labeledExpr{
									pos:   position{line: 1580, col: 110, offset: 52072},
									label: "rBraceI",
									expr: &choiceExpr{
										pos: position{line: 2573, col: 31, offset: 86651},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2573, col: 31, offset: 86651},
												run: (*parser).callonstringInterpolationExpression31,
												expr: &seqExpr{
													pos: position{line: 2573, col: 31, offset: 86651},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2573, col: 31, offset: 86651},
															label: "rBrace",
															expr: &actionExpr{
																pos: position{line: 2797, col: 12, offset: 95003},
																run: (*parser).callonstringInterpolationExpression34,
																expr: &seqExpr{
																	pos: position{line: 2797, col: 12, offset: 95003},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2797, col: 12, offset: 95003},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 2774, col: 8, offset: 94166},
																				run: (*parser).callonstringInterpolationExpression37,
																				expr: &choiceExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2774, col: 9, offset: 94167},
																							expr: &anyMatcher{
																								line: 2774, col: 10, offset: 94168,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2774, col: 14, offset: 94172},
																							expr: &anyMatcher{
																								line: 2774, col: 15, offset: 94173,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2797, col: 21, offset: 95012},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
														&stateCodeExpr{
															pos: position{line: 2847, col: 13, offset: 96752},
															run: (*parser).callonstringInterpolationExpression44,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2575, col: 5, offset: 86721},
												run: (*parser).callonstringInterpolationExpression45,
												expr: &labeledExpr{
													pos:   position{line: 2575, col: 5, offset: 86721},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonstringInterpolationExpression47,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1586, col: 5, offset: 52302},
						run: (*parser).callonstringInterpolationExpression53,
						expr: &actionExpr{
							pos: position{line: 2774, col: 8, offset: 94166},
							run: (*parser).callonstringInterpolationExpression54,
							expr: &choiceExpr{
								pos: position{line: 2774, col: 9, offset: 94167},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										expr: &anyMatcher{
											line: 2774, col: 10, offset: 94168,
										},
									},
									&notExpr{
										pos: position{line: 2774, col: 14, offset: 94172},
										expr: &anyMatcher{
											line: 2774, col: 15, offset: 94173,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goType",
			pos:  position{line: 2041, col: 1, offset: 69385},
			expr: &choiceExpr{
				pos: position{line: 2041, col: 15, offset: 69399},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2041, col: 16, offset: 69400},
						exprs: []any{
							&choiceExpr{
								pos: position{line: 2042, col: 15, offset: 69478},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 1699, col: 21, offset: 56120},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 1665, col: 20, offset: 55323},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1682, col: 26, offset: 55577},
												expr: &charClassMatcher{
													pos:        position{line: 1665, col: 20, offset: 55323},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1699, col: 35, offset: 56134},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1699, col: 38, offset: 56137},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1699, col: 42, offset: 56141},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&charClassMatcher{
												pos:        position{line: 1665, col: 20, offset: 55323},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1682, col: 26, offset: 55577},
												expr: &charClassMatcher{
													pos:        position{line: 1665, col: 20, offset: 55323},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1682, col: 17, offset: 55568},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 1665, col: 20, offset: 55323},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1682, col: 26, offset: 55577},
												expr: &charClassMatcher{
													pos:        position{line: 1665, col: 20, offset: 55323},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 2041, col: 27, offset: 69411},
								expr: &seqExpr{
									pos: position{line: 2041, col: 28, offset: 69412},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2041, col: 28, offset: 69412},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2041, col: 31, offset: 69415},
											name: "goTypeArgs",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2041, col: 47, offset: 69431},
						name: "goTypeLit",
					},
					&seqExpr{
						pos: position{line: 2041, col: 59, offset: 69443},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 2041, col: 59, offset: 69443},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2041, col: 63, offset: 69447},
								expr: &charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2041, col: 66, offset: 69450},
								name: "goType",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2041, col: 73, offset: 69457},
								expr: &charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 2041, col: 76, offset: 69460},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeArgs",
			pos:  position{line: 2043, col: 1, offset: 69510},
			expr: &seqExpr{
				pos: position{line: 2043, col: 15, offset: 69524},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2043, col: 15, offset: 69524},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2043, col: 19, offset: 69528},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2043, col: 22, offset: 69531},
						name: "goTypeList",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2043, col: 33, offset: 69542},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2043, col: 36, offset: 69545},
						expr: &seqExpr{
							pos: position{line: 2043, col: 37, offset: 69546},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2043, col: 37, offset: 69546},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2043, col: 41, offset: 69550},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2043, col: 46, offset: 69555},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "goTypeList",
			pos:  position{line: 2044, col: 1, offset: 69559},
			expr: &seqExpr{
				pos: position{line: 2044, col: 15, offset: 69573},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2044, col: 15, offset: 69573},
						name: "goType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2044, col: 22, offset: 69580},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2044, col: 25, offset: 69583},
						expr: &seqExpr{
							pos: position{line: 2044, col: 26, offset: 69584},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2044, col: 26, offset: 69584},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2044, col: 30, offset: 69588},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2044, col: 33, offset: 69591},
									name: "goType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeLit",
			pos:  position{line: 2045, col: 1, offset: 69600},
			expr: &choiceExpr{
				pos: position{line: 2045, col: 16, offset: 69615},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2045, col: 16, offset: 69615},
						name: "goArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 30, offset: 69629},
						name: "goStructType",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 45, offset: 69644},
						name: "goPointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 61, offset: 69660},
						name: "goFunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 78, offset: 69677},
						name: "goInterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 96, offset: 69695},
						name: "goSliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 110, offset: 69709},
						name: "goMapType",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 122, offset: 69721},
						name: "goChannelType",
					},
				},
			},
		},
		{
			name: "goArrayType",
			pos:  position{line: 2051, col: 1, offset: 69759},
			expr: &seqExpr{
				pos: position{line: 2051, col: 18, offset: 69776},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2051, col: 18, offset: 69776},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2051, col: 22, offset: 69780},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2051, col: 25, offset: 69783},
						name: "goArrayLength",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2051, col: 39, offset: 69797},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 2051, col: 42, offset: 69800},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2051, col: 46, offset: 69804},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2051, col: 49, offset: 69807},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goArrayLength",
			pos:  position{line: 2052, col: 1, offset: 69821},
			expr: &seqExpr{
				pos: position{line: 2052, col: 18, offset: 69838},
				exprs: []any{
					&oneOrMoreExpr{
						pos: position{line: 2052, col: 18, offset: 69838},
						expr: &charClassMatcher{
							pos:        position{line: 2052, col: 18, offset: 69838},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2052, col: 25, offset: 69845},
						expr: &seqExpr{
							pos: position{line: 2052, col: 26, offset: 69846},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 2052, col: 26, offset: 69846},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2052, col: 30, offset: 69850},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2052, col: 30, offset: 69850},
											val:        "<<",
											ignoreCase: false,
											want:       "\"<<\"",
										},
										&litMatcher{
											pos:        position{line: 2052, col: 37, offset: 69857},
											val:        ">>",
											ignoreCase: false,
											want:       "\">>\"",
										},
										&charClassMatcher{
											pos:        position{line: 2052, col: 44, offset: 69864},
											val:        "[+-*/]",
											chars:      []rune{'+', '-', '*', '/'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2052, col: 67, offset: 69887},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2052, col: 70, offset: 69890},
									name: "goArrayLength",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goElementType",
			pos:  position{line: 2053, col: 1, offset: 69987},
			expr: &ruleRefExpr{
				pos:  position{line: 2053, col: 18, offset: 70004},
				name: "goType",
			},
		},
		{
			name: "goSliceType",
			pos:  position{line: 2059, col: 1, offset: 70034},
			expr: &seqExpr{
				pos: position{line: 2059, col: 16, offset: 70049},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2059, col: 16, offset: 70049},
						val:        "[]",
						ignoreCase: false,
						want:       "\"[]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2059, col: 21, offset: 70054},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2059, col: 24, offset: 70057},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goStructType",
			pos:  position{line: 2065, col: 1, offset: 70095},
			expr: &seqExpr{
				pos: position{line: 2065, col: 20, offset: 70114},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2065, col: 20, offset: 70114},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2065, col: 29, offset: 70123},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 2065, col: 32, offset: 70126},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2065, col: 36, offset: 70130},
						expr: &seqExpr{
							pos: position{line: 2065, col: 37, offset: 70131},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 2065, col: 37, offset: 70131},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callongoStructType12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2065, col: 41, offset: 70135},
									expr: &ruleRefExpr{
										pos:  position{line: 2065, col: 41, offset: 70135},
										name: "goFieldDecl",
									},
								},
								&choiceExpr{
									pos: position{line: 2065, col: 55, offset: 70149},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2065, col: 55, offset: 70149},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&seqExpr{
											pos: position{line: 2785, col: 37, offset: 94524},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2785, col: 37, offset: 94524},
													expr: &litMatcher{
														pos:        position{line: 2785, col: 37, offset: 94524},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2785, col: 43, offset: 94530},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2065, col: 72, offset: 70166},
						expr: &choiceExpr{
							pos: position{line: 2787, col: 20, offset: 94555},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2787, col: 31, offset: 94566},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2787, col: 31, offset: 94566},
											run: (*parser).callongoStructType28,
										},
										&zeroOrOneExpr{
											pos: position{line: 2785, col: 37, offset: 94524},
											expr: &litMatcher{
												pos:        position{line: 2785, col: 37, offset: 94524},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2785, col: 43, offset: 94530},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2065, col: 76, offset: 70170},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goFieldDecl",
			pos:  position{line: 2066, col: 1, offset: 70174},
			expr: &seqExpr{
				pos: position{line: 2066, col: 20, offset: 70193},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 2066, col: 21, offset: 70194},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 2066, col: 21, offset: 70194},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 26, offset: 55577},
										expr: &charClassMatcher{
											pos:        position{line: 1665, col: 20, offset: 55323},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2117, col: 34, offset: 71389},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2117, col: 37, offset: 71392},
										expr: &seqExpr{
											pos: position{line: 2117, col: 38, offset: 71393},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2117, col: 38, offset: 71393},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2117, col: 42, offset: 71397},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).callongoFieldDecl16,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 1665, col: 20, offset: 55323},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1682, col: 26, offset: 55577},
													expr: &charClassMatcher{
														pos:        position{line: 1665, col: 20, offset: 55323},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2066, col: 38, offset: 70211},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2066, col: 41, offset: 70214},
										name: "goType",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2066, col: 50, offset: 70223},
								name: "goEmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2066, col: 67, offset: 70240},
						expr: &choiceExpr{
							pos: position{line: 2006, col: 16, offset: 68141},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2008, col: 19, offset: 68200},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 2008, col: 19, offset: 68200},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2008, col: 23, offset: 68204},
											expr: &charClassMatcher{
												pos:        position{line: 2019, col: 27, offset: 68583},
												val:        "[^`]",
												chars:      []rune{'`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 2008, col: 47, offset: 68228},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2009, col: 5, offset: 68238},
									run: (*parser).callongoFieldDecl34,
									expr: &seqExpr{
										pos: position{line: 2009, col: 5, offset: 68238},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2009, col: 5, offset: 68238},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2009, col: 9, offset: 68242},
												expr: &charClassMatcher{
													pos:        position{line: 2019, col: 27, offset: 68583},
													val:        "[^`]",
													chars:      []rune{'`'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2762, col: 27, offset: 93686},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														exprs: []any{
															&zeroOrOneExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																expr: &litMatcher{
																	pos:        position{line: 2762, col: 27, offset: 93686},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2762, col: 33, offset: 93692},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 2761, col: 23, offset: 93657},
														expr: &anyMatcher{
															line: 2761, col: 24, offset: 93658,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 2021, col: 27, offset: 68615},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 2021, col: 27, offset: 68615},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2021, col: 31, offset: 68619},
											expr: &choiceExpr{
												pos: position{line: 2021, col: 32, offset: 68620},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 1777, col: 19, offset: 59032},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1777, col: 19, offset: 59032},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1778, col: 5, offset: 59091},
														run: (*parser).callongoFieldDecl58,
														expr: &seqExpr{
															pos: position{line: 1778, col: 5, offset: 59091},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1778, col: 5, offset: 59091},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 14, offset: 59100},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 26, offset: 59112},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 38, offset: 59124},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1778, col: 50, offset: 59136},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1807, col: 16, offset: 60268},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1807, col: 16, offset: 60268},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1808, col: 5, offset: 60371},
														run: (*parser).callongoFieldDecl79,
														expr: &seqExpr{
															pos: position{line: 1808, col: 5, offset: 60371},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1808, col: 5, offset: 60371},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 14, offset: 60380},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 26, offset: 60392},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 38, offset: 60404},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 50, offset: 60416},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 62, offset: 60428},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 74, offset: 60440},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 86, offset: 60452},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1808, col: 98, offset: 60464},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2035, col: 36, offset: 69308},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2035, col: 36, offset: 69308},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2035, col: 41, offset: 69313},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2033, col: 38, offset: 69200},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 1758, col: 24, offset: 58292},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1758, col: 24, offset: 58292},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1675, col: 19, offset: 55493},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1675, col: 19, offset: 55493},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1675, col: 19, offset: 55493},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 1759, col: 24, offset: 58359},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1759, col: 24, offset: 58359},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1676, col: 19, offset: 55517},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1760, col: 5, offset: 58396},
														run: (*parser).callongoFieldDecl111,
														expr: &seqExpr{
															pos: position{line: 1760, col: 5, offset: 58396},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1760, col: 5, offset: 58396},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1760, col: 14, offset: 58405},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1760, col: 26, offset: 58417},
																	expr: &charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1922, col: 37, offset: 65029},
														run: (*parser).callongoFieldDecl118,
														expr: &seqExpr{
															pos: position{line: 1922, col: 37, offset: 65029},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1922, col: 37, offset: 65029},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1946, col: 5, offset: 66044},
														run: (*parser).callongoFieldDecl129,
														expr: &seqExpr{
															pos: position{line: 1946, col: 5, offset: 66044},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1946, col: 5, offset: 66044},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1967, col: 5, offset: 66884},
														run: (*parser).callongoFieldDecl136,
														expr: &seqExpr{
															pos: position{line: 1967, col: 5, offset: 66884},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1967, col: 5, offset: 66884},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1985, col: 5, offset: 67568},
														run: (*parser).callongoFieldDecl141,
														expr: &litMatcher{
															pos:        position{line: 1985, col: 5, offset: 67568},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2021, col: 115, offset: 68703},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2022, col: 5, offset: 68713},
									run: (*parser).callongoFieldDecl144,
									expr: &seqExpr{
										pos: position{line: 2022, col: 5, offset: 68713},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2022, col: 5, offset: 68713},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2022, col: 9, offset: 68717},
												expr: &choiceExpr{
													pos: position{line: 2022, col: 10, offset: 68718},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1777, col: 19, offset: 59032},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1777, col: 19, offset: 59032},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1778, col: 5, offset: 59091},
															run: (*parser).callongoFieldDecl155,
															expr: &seqExpr{
																pos: position{line: 1778, col: 5, offset: 59091},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1778, col: 5, offset: 59091},
																		val:        "\\u",
																		ignoreCase: false,
																		want:       "\"\\\\u\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1778, col: 14, offset: 59100},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1778, col: 26, offset: 59112},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1778, col: 38, offset: 59124},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1778, col: 50, offset: 59136},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1807, col: 16, offset: 60268},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1807, col: 16, offset: 60268},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1808, col: 5, offset: 60371},
															run: (*parser).callongoFieldDecl176,
															expr: &seqExpr{
																pos: position{line: 1808, col: 5, offset: 60371},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1808, col: 5, offset: 60371},
																		val:        "\\U",
																		ignoreCase: false,
																		want:       "\"\\\\U\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 14, offset: 60380},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 26, offset: 60392},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 38, offset: 60404},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 50, offset: 60416},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 62, offset: 60428},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 74, offset: 60440},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 86, offset: 60452},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1808, col: 98, offset: 60464},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2035, col: 36, offset: 69308},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 2035, col: 36, offset: 69308},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2035, col: 41, offset: 69313},
																	val:        "[abfnrtv\\\\\"]",
																	chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2033, col: 38, offset: 69200},
															val:        "[^\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
														&seqExpr{
															pos: position{line: 1758, col: 24, offset: 58292},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1758, col: 24, offset: 58292},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1675, col: 19, offset: 55493},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1675, col: 19, offset: 55493},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1675, col: 19, offset: 55493},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&seqExpr{
															pos: position{line: 1759, col: 24, offset: 58359},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1759, col: 24, offset: 58359},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1676, col: 19, offset: 55517},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1760, col: 5, offset: 58396},
															run: (*parser).callongoFieldDecl208,
															expr: &seqExpr{
																pos: position{line: 1760, col: 5, offset: 58396},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1760, col: 5, offset: 58396},
																		val:        "\\x",
																		ignoreCase: false,
																		want:       "\"\\\\x\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1760, col: 14, offset: 58405},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1760, col: 26, offset: 58417},
																		expr: &charClassMatcher{
																			pos:        position{line: 1676, col: 19, offset: 55517},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1922, col: 37, offset: 65029},
															run: (*parser).callongoFieldDecl215,
															expr: &seqExpr{
																pos: position{line: 1922, col: 37, offset: 65029},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1922, col: 37, offset: 65029},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1946, col: 5, offset: 66044},
															run: (*parser).callongoFieldDecl226,
															expr: &seqExpr{
																pos: position{line: 1946, col: 5, offset: 66044},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1946, col: 5, offset: 66044},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1967, col: 5, offset: 66884},
															run: (*parser).callongoFieldDecl233,
															expr: &seqExpr{
																pos: position{line: 1967, col: 5, offset: 66884},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1967, col: 5, offset: 66884},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1676, col: 19, offset: 55517},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1985, col: 5, offset: 67568},
															run: (*parser).callongoFieldDecl238,
															expr: &litMatcher{
																pos:        position{line: 1985, col: 5, offset: 67568},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2761, col: 23, offset: 93657},
												expr: &anyMatcher{
													line: 2761, col: 24, offset: 93658,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goEmbeddedField",
			pos:  position{line: 2067, col: 1, offset: 70247},
			expr: &seqExpr{
				pos: position{line: 2067, col: 20, offset: 70266},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 2067, col: 20, offset: 70266},
						expr: &litMatcher{
							pos:        position{line: 2067, col: 20, offset: 70266},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2067, col: 25, offset: 70271},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&choiceExpr{
						pos: position{line: 2042, col: 15, offset: 69478},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 1699, col: 21, offset: 56120},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 26, offset: 55577},
										expr: &charClassMatcher{
											pos:        position{line: 1665, col: 20, offset: 55323},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1699, col: 35, offset: 56134},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 1699, col: 38, offset: 56137},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1699, col: 42, offset: 56141},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 26, offset: 55577},
										expr: &charClassMatcher{
											pos:        position{line: 1665, col: 20, offset: 55323},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1682, col: 17, offset: 55568},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 26, offset: 55577},
										expr: &charClassMatcher{
											pos:        position{line: 1665, col: 20, offset: 55323},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2067, col: 39, offset: 70285},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2067, col: 42, offset: 70288},
						expr: &ruleRefExpr{
							pos:  position{line: 2067, col: 42, offset: 70288},
							name: "goTypeArgs",
						},
					},
				},
			},
		},
		{
			name: "goPointerType",
			pos:  position{line: 2074, col: 1, offset: 70356},
			expr: &seqExpr{
				pos: position{line: 2074, col: 18, offset: 70373},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2074, col: 18, offset: 70373},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2074, col: 22, offset: 70377},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2074, col: 25, offset: 70380},
						name: "goBaseType",
					},
				},
			},
		},
		{
			name: "goBaseType",
			pos:  position{line: 2075, col: 1, offset: 70391},
			expr: &ruleRefExpr{
				pos:  position{line: 2075, col: 18, offset: 70408},
				name: "goType",
			},
		},
		{
			name: "goFunctionType",
			pos:  position{line: 2081, col: 1, offset: 70441},
			expr: &seqExpr{
				pos: position{line: 2081, col: 20, offset: 70460},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2081, col: 20, offset: 70460},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2081, col: 27, offset: 70467},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2081, col: 30, offset: 70470},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goSignature",
			pos:  position{line: 2082, col: 1, offset: 70482},
			expr: &seqExpr{
				pos: position{line: 2082, col: 20, offset: 70501},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2082, col: 20, offset: 70501},
						name: "goParameters",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2082, col: 33, offset: 70514},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2082, col: 36, offset: 70517},
						expr: &ruleRefExpr{
							pos:  position{line: 2082, col: 36, offset: 70517},
							name: "goResult",
						},
					},
				},
			},
		},
		{
			name: "goResult",
			pos:  position{line: 2083, col: 1, offset: 70527},
			expr: &choiceExpr{
				pos: position{line: 2083, col: 20, offset: 70546},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2083, col: 20, offset: 70546},
						name: "goParameters",
					},
					&ruleRefExpr{
						pos:  position{line: 2083, col: 35, offset: 70561},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goParameters",
			pos:  position{line: 2084, col: 1, offset: 70568},
			expr: &seqExpr{
				pos: position{line: 2084, col: 20, offset: 70587},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2084, col: 20, offset: 70587},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2084, col: 24, offset: 70591},
						expr: &choiceExpr{
							pos: position{line: 2787, col: 20, offset: 94555},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2787, col: 31, offset: 94566},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2787, col: 31, offset: 94566},
											run: (*parser).callongoParameters7,
										},
										&zeroOrOneExpr{
											pos: position{line: 2785, col: 37, offset: 94524},
											expr: &litMatcher{
												pos:        position{line: 2785, col: 37, offset: 94524},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2785, col: 43, offset: 94530},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2084, col: 28, offset: 70595},
						expr: &seqExpr{
							pos: position{line: 2084, col: 29, offset: 70596},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2084, col: 29, offset: 70596},
									name: "goParameterList",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2084, col: 45, offset: 70612},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2084, col: 48, offset: 70615},
									expr: &seqExpr{
										pos: position{line: 2084, col: 49, offset: 70616},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2084, col: 49, offset: 70616},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2084, col: 53, offset: 70620},
												expr: &choiceExpr{
													pos: position{line: 2787, col: 20, offset: 94555},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2787, col: 31, offset: 94566},
																	run: (*parser).callongoParameters23,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2785, col: 37, offset: 94524},
																	expr: &litMatcher{
																		pos:        position{line: 2785, col: 37, offset: 94524},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2785, col: 43, offset: 94530},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2084, col: 61, offset: 70628},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "goParameterList",
			pos:  position{line: 2085, col: 1, offset: 70632},
			expr: &seqExpr{
				pos: position{line: 2085, col: 20, offset: 70651},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2085, col: 20, offset: 70651},
						name: "goParameterDecl",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2085, col: 36, offset: 70667},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2085, col: 39, offset: 70670},
						expr: &seqExpr{
							pos: position{line: 2085, col: 40, offset: 70671},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2085, col: 40, offset: 70671},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2085, col: 44, offset: 70675},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callongoParameterList12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2085, col: 48, offset: 70679},
									name: "goParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParameterDecl",
			pos:  position{line: 2086, col: 1, offset: 70697},
			expr: &seqExpr{
				pos: position{line: 2086, col: 20, offset: 70716},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 2086, col: 20, offset: 70716},
						expr: &seqExpr{
							pos: position{line: 2117, col: 21, offset: 71376},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1665, col: 20, offset: 55323},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1682, col: 26, offset: 55577},
									expr: &charClassMatcher{
										pos:        position{line: 1665, col: 20, offset: 55323},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2117, col: 34, offset: 71389},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2117, col: 37, offset: 71392},
									expr: &seqExpr{
										pos: position{line: 2117, col: 38, offset: 71393},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2117, col: 38, offset: 71393},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2117, col: 42, offset: 71397},
												expr: &choiceExpr{
													pos: position{line: 2787, col: 20, offset: 94555},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2787, col: 31, offset: 94566},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2787, col: 31, offset: 94566},
																	run: (*parser).callongoParameterDecl16,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2785, col: 37, offset: 94524},
																	expr: &litMatcher{
																		pos:        position{line: 2785, col: 37, offset: 94524},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2785, col: 43, offset: 94530},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1665, col: 20, offset: 55323},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1682, col: 26, offset: 55577},
												expr: &charClassMatcher{
													pos:        position{line: 1665, col: 20, offset: 55323},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2086, col: 38, offset: 70734},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2086, col: 41, offset: 70737},
						expr: &litMatcher{
							pos:        position{line: 2086, col: 41, offset: 70737},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2086, col: 48, offset: 70744},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2086, col: 51, offset: 70747},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goInterfaceType",
			pos:  position{line: 2092, col: 1, offset: 70781},
			expr: &seqExpr{
				pos: position{line: 2092, col: 21, offset: 70801},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2092, col: 21, offset: 70801},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2092, col: 33, offset: 70813},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 2092, col: 36, offset: 70816},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2092, col: 40, offset: 70820},
						expr: &seqExpr{
							pos: position{line: 2092, col: 41, offset: 70821},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 2092, col: 41, offset: 70821},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callongoInterfaceType12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2092, col: 45, offset: 70825},
									name: "goInterfaceElem",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2092, col: 61, offset: 70841},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2092, col: 65, offset: 70845},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2092, col: 65, offset: 70845},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2092, col: 71, offset: 70851},
											expr: &seqExpr{
												pos: position{line: 2763, col: 28, offset: 93731},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2763, col: 28, offset: 93731},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2092, col: 86, offset: 70866},
						expr: &choiceExpr{
							pos: position{line: 2787, col: 20, offset: 94555},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2784, col: 37, offset: 94482},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2787, col: 31, offset: 94566},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2787, col: 31, offset: 94566},
											run: (*parser).callongoInterfaceType32,
										},
										&zeroOrOneExpr{
											pos: position{line: 2785, col: 37, offset: 94524},
											expr: &litMatcher{
												pos:        position{line: 2785, col: 37, offset: 94524},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2785, col: 43, offset: 94530},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2092, col: 90, offset: 70870},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goInterfaceElem",
			pos:  position{line: 2093, col: 1, offset: 70874},
			expr: &choiceExpr{
				pos: position{line: 2093, col: 21, offset: 70894},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2093, col: 21, offset: 70894},
						name: "goMethodElem",
					},
					&ruleRefExpr{
						pos:  position{line: 2093, col: 36, offset: 70909},
						name: "goTypeElem",
					},
				},
			},
		},
		{
			name: "goMethodElem",
			pos:  position{line: 2094, col: 1, offset: 70920},
			expr: &seqExpr{
				pos: position{line: 2094, col: 21, offset: 70940},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1665, col: 20, offset: 55323},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1682, col: 26, offset: 55577},
						expr: &charClassMatcher{
							pos:        position{line: 1665, col: 20, offset: 55323},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2094, col: 34, offset: 70953},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goTypeElem",
			pos:  position{line: 2096, col: 1, offset: 70998},
			expr: &seqExpr{
				pos: position{line: 2096, col: 21, offset: 71018},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2096, col: 21, offset: 71018},
						name: "goTypeTerm",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2096, col: 32, offset: 71029},
						expr: &seqExpr{
							pos: position{line: 2096, col: 33, offset: 71030},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 2096, col: 33, offset: 71030},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 2096, col: 36, offset: 71033},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2096, col: 40, offset: 71037},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callongoTypeElem12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2096, col: 44, offset: 71041},
									name: "goTypeTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeTerm",
			pos:  position{line: 2097, col: 1, offset: 71054},
			expr: &choiceExpr{
				pos: position{line: 2097, col: 21, offset: 71074},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2097, col: 21, offset: 71074},
						name: "goType",
					},
					&ruleRefExpr{
						pos:  position{line: 2097, col: 30, offset: 71083},
						name: "goUnderlyingType",
					},
				},
			},
		},
		{
			name: "goUnderlyingType",
			pos:  position{line: 2098, col: 1, offset: 71100},
			expr: &seqExpr{
				pos: position{line: 2098, col: 21, offset: 71120},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2098, col: 21, offset: 71120},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2098, col: 25, offset: 71124},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goMapType",
			pos:  position{line: 2104, col: 1, offset: 71152},
			expr: &seqExpr{
				pos: position{line: 2104, col: 14, offset: 71165},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2104, col: 14, offset: 71165},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2104, col: 20, offset: 71171},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 2104, col: 23, offset: 71174},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2104, col: 27, offset: 71178},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2104, col: 30, offset: 71181},
						name: "goKeyType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2104, col: 40, offset: 71191},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 2104, col: 43, offset: 71194},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2104, col: 47, offset: 71198},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2104, col: 50, offset: 71201},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goKeyType",
			pos:  position{line: 2105, col: 1, offset: 71215},
			expr: &ruleRefExpr{
				pos:  position{line: 2105, col: 14, offset: 71228},
				name: "goType",
			},
		},
		{
			name: "goChannelType",
			pos:  position{line: 2111, col: 1, offset: 71260},
			expr: &seqExpr{
				pos: position{line: 2111, col: 18, offset: 71277},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 2111, col: 18, offset: 71277},
						expr: &seqExpr{
							pos: position{line: 2111, col: 19, offset: 71278},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2111, col: 19, offset: 71278},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2111, col: 24, offset: 71283},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2111, col: 29, offset: 71288},
						val:        "chan",
						ignoreCase: false,
						want:       "\"chan\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2111, col: 36, offset: 71295},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 37, offset: 94482},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2111, col: 39, offset: 71298},
						expr: &seqExpr{
							pos: position{line: 2111, col: 40, offset: 71299},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2111, col: 40, offset: 71299},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2111, col: 45, offset: 71304},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2111, col: 50, offset: 71309},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "State",
			pos:  position{line: 2307, col: 1, offset: 77959},
			expr: &choiceExpr{
				pos: position{line: 2307, col: 10, offset: 77968},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2307, col: 10, offset: 77968},
						name: "SingleState",
					},
					&ruleRefExpr{
						pos:  position{line: 2307, col: 24, offset: 77982},
						name: "GroupState",
					},
					&actionExpr{
						pos: position{line: 2337, col: 13, offset: 78780},
						run: (*parser).callonState4,
						expr: &seqExpr{
							pos: position{line: 2337, col: 13, offset: 78780},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2337, col: 13, offset: 78780},
									val:        "state",
									ignoreCase: false,
									want:       "\"state\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2337, col: 21, offset: 78788},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 2337, col: 24, offset: 78791},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonState10,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2337, col: 35, offset: 78802},
									label: "badI",
									expr: &actionExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										run: (*parser).callonState17,
										expr: &seqExpr{
											pos: position{line: 2767, col: 35, offset: 93911},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2767, col: 35, offset: 93911},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 38, offset: 93914},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2767, col: 50, offset: 93926},
														expr: &seqExpr{
															pos: position{line: 2767, col: 51, offset: 93927},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2767, col: 51, offset: 93927},
																	expr: &choiceExpr{
																		pos: position{line: 2764, col: 27, offset: 93768},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2762, col: 23, offset: 93682},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										expr: &litMatcher{
																											pos:        position{line: 2762, col: 27, offset: 93686},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2762, col: 33, offset: 93692},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2761, col: 23, offset: 93657},
																								expr: &anyMatcher{
																									line: 2761, col: 24, offset: 93658,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 33, offset: 93774},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2764, col: 39, offset: 93780},
																				expr: &seqExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2764, col: 41, offset: 93782},
																							expr: &charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2764, col: 45, offset: 93786},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2764, col: 45, offset: 93786},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 51, offset: 93792},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2767, col: 57, offset: 93933},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2767, col: 57, offset: 93933},
																			expr: &charClassMatcher{
																				pos:        position{line: 2767, col: 57, offset: 93933},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2767, col: 71, offset: 93947},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2767, col: 71, offset: 93947},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2767, col: 75, offset: 93951},
																					expr: &charClassMatcher{
																						pos:        position{line: 2767, col: 75, offset: 93951},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2767, col: 81, offset: 93957},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2337, col: 51, offset: 78818},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleState",
			pos:  position{line: 2309, col: 1, offset: 78005},
			expr: &actionExpr{
				pos: position{line: 2309, col: 16, offset: 78020},
				run: (*parser).callonSingleState1,
				expr: &seqExpr{
					pos: position{line: 2309, col: 16, offset: 78020},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2309, col: 16, offset: 78020},
							val:        "state",
							ignoreCase: false,
							want:       "\"state\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 2309, col: 24, offset: 78028},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2309, col: 27, offset: 78031},
							label: "varI",
							expr: &ruleRefExpr{
								pos:  position{line: 2309, col: 32, offset: 78036},
								name: "StateVar",
							},
						},
						&choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupState",
			pos:  position{line: 2316, col: 1, offset: 78175},
			expr: &actionExpr{
				pos: position{line: 2316, col: 15, offset: 78189},
				run: (*parser).callonGroupState1,
				expr: &seqExpr{
					pos: position{line: 2316, col: 15, offset: 78189},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2316, col: 15, offset: 78189},
							val:        "state",
							ignoreCase: false,
							want:       "\"state\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2316, col: 23, offset: 78197},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2316, col: 26, offset: 78200},
							label: "lParenI",
							expr: &actionExpr{
								pos: position{line: 2867, col: 14, offset: 97512},
								run: (*parser).callonGroupState7,
								expr: &seqExpr{
									pos: position{line: 2867, col: 14, offset: 97512},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonGroupState9,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2841, col: 18, offset: 96619},
											run: (*parser).callonGroupState15,
										},
										&labeledExpr{
											pos:   position{line: 2867, col: 24, offset: 97522},
											label: "lParenI",
											expr: &actionExpr{
												pos: position{line: 2793, col: 12, offset: 94819},
												run: (*parser).callonGroupState17,
												expr: &seqExpr{
													pos: position{line: 2793, col: 12, offset: 94819},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2793, col: 12, offset: 94819},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonGroupState20,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2793, col: 21, offset: 94828},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2867, col: 40, offset: 97538},
											expr: &choiceExpr{
												pos: position{line: 2787, col: 20, offset: 94555},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																run: (*parser).callonGroupState31,
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2316, col: 44, offset: 78218},
							label: "itmsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2316, col: 50, offset: 78224},
								expr: &ruleRefExpr{
									pos:  position{line: 2316, col: 50, offset: 78224},
									name: "stateScopeItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2316, col: 66, offset: 78240},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 2325, col: 18, offset: 78483},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2325, col: 18, offset: 78483},
										run: (*parser).callonGroupState40,
										expr: &seqExpr{
											pos: position{line: 2325, col: 18, offset: 78483},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2325, col: 18, offset: 78483},
													expr: &choiceExpr{
														pos: position{line: 2787, col: 20, offset: 94555},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2787, col: 31, offset: 94566},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2787, col: 31, offset: 94566},
																		run: (*parser).callonGroupState46,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2785, col: 37, offset: 94524},
																		expr: &litMatcher{
																			pos:        position{line: 2785, col: 37, offset: 94524},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2785, col: 43, offset: 94530},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2325, col: 22, offset: 78487},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2794, col: 12, offset: 94880},
														run: (*parser).callonGroupState51,
														expr: &seqExpr{
															pos: position{line: 2794, col: 12, offset: 94880},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2794, col: 12, offset: 94880},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonGroupState54,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2794, col: 21, offset: 94889},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2327, col: 5, offset: 78533},
										run: (*parser).callonGroupState61,
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonGroupState62,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateScopeItem",
			pos:  position{line: 2357, col: 1, offset: 79420},
			expr: &actionExpr{
				pos: position{line: 2357, col: 19, offset: 79438},
				run: (*parser).callonstateScopeItem1,
				expr: &seqExpr{
					pos: position{line: 2357, col: 19, offset: 79438},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 2357, col: 19, offset: 79438},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonstateScopeItem7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2357, col: 23, offset: 79442},
							label: "itmI",
							expr: &choiceExpr{
								pos: position{line: 2357, col: 29, offset: 79448},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 492, col: 15, offset: 15700},
										run: (*parser).callonstateScopeItem13,
										expr: &seqExpr{
											pos: position{line: 492, col: 15, offset: 15700},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 492, col: 15, offset: 15700},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 492, col: 20, offset: 15705},
													expr: &litMatcher{
														pos:        position{line: 492, col: 21, offset: 15706},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 492, col: 25, offset: 15710},
													label: "textI",
													expr: &seqExpr{
														pos: position{line: 492, col: 32, offset: 15717},
														exprs: []any{
															&notExpr{
																pos: position{line: 492, col: 32, offset: 15717},
																expr: &seqExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&anyMatcher{
																line: 492, col: 37, offset: 15722,
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2357, col: 42, offset: 79461},
										name: "StateVar",
									},
									&actionExpr{
										pos: position{line: 2447, col: 16, offset: 82422},
										run: (*parser).callonstateScopeItem42,
										expr: &seqExpr{
											pos: position{line: 2447, col: 16, offset: 82422},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2447, col: 16, offset: 82422},
													label: "lineI",
													expr: &actionExpr{
														pos: position{line: 2767, col: 35, offset: 93911},
														run: (*parser).callonstateScopeItem45,
														expr: &seqExpr{
															pos: position{line: 2767, col: 35, offset: 93911},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2767, col: 35, offset: 93911},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2767, col: 38, offset: 93914},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2767, col: 50, offset: 93926},
																		expr: &seqExpr{
																			pos: position{line: 2767, col: 51, offset: 93927},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2767, col: 51, offset: 93927},
																					expr: &choiceExpr{
																						pos: position{line: 2764, col: 27, offset: 93768},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 23, offset: 93682},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2762, col: 23, offset: 93682},
																										expr: &charClassMatcher{
																											pos:        position{line: 2784, col: 37, offset: 94482},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2762, col: 27, offset: 93686},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2762, col: 27, offset: 93686},
																														expr: &litMatcher{
																															pos:        position{line: 2762, col: 27, offset: 93686},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2762, col: 33, offset: 93692},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2761, col: 23, offset: 93657},
																												expr: &anyMatcher{
																													line: 2761, col: 24, offset: 93658,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 33, offset: 93774},
																								val:        ";",
																								ignoreCase: false,
																								want:       "\";\"",
																							},
																							&andExpr{
																								pos: position{line: 2764, col: 39, offset: 93780},
																								expr: &seqExpr{
																									pos: position{line: 2764, col: 41, offset: 93782},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2764, col: 41, offset: 93782},
																											expr: &charClassMatcher{
																												pos:        position{line: 2784, col: 37, offset: 94482},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2764, col: 45, offset: 93786},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2764, col: 45, offset: 93786},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2764, col: 51, offset: 93792},
																													val:        "//",
																													ignoreCase: false,
																													want:       "\"//\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2767, col: 57, offset: 93933},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2767, col: 57, offset: 93933},
																							expr: &charClassMatcher{
																								pos:        position{line: 2767, col: 57, offset: 93933},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2767, col: 71, offset: 93947},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2767, col: 71, offset: 93947},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2767, col: 75, offset: 93951},
																									expr: &charClassMatcher{
																										pos:        position{line: 2767, col: 75, offset: 93951},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2767, col: 81, offset: 93957},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2764, col: 27, offset: 93768},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2764, col: 33, offset: 93774},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2764, col: 39, offset: 93780},
															expr: &seqExpr{
																pos: position{line: 2764, col: 41, offset: 93782},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2764, col: 41, offset: 93782},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2764, col: 45, offset: 93786},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2764, col: 45, offset: 93786},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 51, offset: 93792},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StateVar",
			pos:  position{line: 2361, col: 1, offset: 79511},
			expr: &actionExpr{
				pos: position{line: 2361, col: 13, offset: 79523},
				run: (*parser).callonStateVar1,
				expr: &seqExpr{
					pos: position{line: 2361, col: 13, offset: 79523},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2361, col: 13, offset: 79523},
							label: "namesI",
							expr: &actionExpr{
								pos: position{line: 2392, col: 18, offset: 80606},
								run: (*parser).callonStateVar4,
								expr: &seqExpr{
									pos: position{line: 2392, col: 18, offset: 80606},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 2392, col: 18, offset: 80606},
											label: "firstI",
											expr: &choiceExpr{
												pos: position{line: 2400, col: 18, offset: 80867},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 265, col: 10, offset: 7614},
														run: (*parser).callonStateVar8,
														expr: &labeledExpr{
															pos:   position{line: 265, col: 10, offset: 7614},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 1682, col: 17, offset: 55568},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1665, col: 20, offset: 55323},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1682, col: 26, offset: 55577},
																		expr: &charClassMatcher{
																			pos:        position{line: 1665, col: 20, offset: 55323},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2400, col: 26, offset: 80875},
														run: (*parser).callonStateVar14,
														expr: &oneOrMoreExpr{
															pos: position{line: 2400, col: 26, offset: 80875},
															expr: &charClassMatcher{
																pos:        position{line: 2400, col: 26, offset: 80875},
																val:        "[^\\r\\n\\t ,=]",
																chars:      []rune{'\r', '\n', '\t', ' ', ',', '='},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2392, col: 39, offset: 80627},
											label: "restI",
											expr: &zeroOrMoreExpr{
												pos: position{line: 2392, col: 45, offset: 80633},
												expr: &seqExpr{
													pos: position{line: 2392, col: 46, offset: 80634},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2392, col: 46, offset: 80634},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2392, col: 49, offset: 80637},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 2392, col: 53, offset: 80641},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2400, col: 18, offset: 80867},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 265, col: 10, offset: 7614},
																	run: (*parser).callonStateVar26,
																	expr: &labeledExpr{
																		pos:   position{line: 265, col: 10, offset: 7614},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1682, col: 17, offset: 55568},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1665, col: 20, offset: 55323},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1682, col: 26, offset: 55577},
																					expr: &charClassMatcher{
																						pos:        position{line: 1665, col: 20, offset: 55323},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2400, col: 26, offset: 80875},
																	run: (*parser).callonStateVar32,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2400, col: 26, offset: 80875},
																		expr: &charClassMatcher{
																			pos:        position{line: 2400, col: 26, offset: 80875},
																			val:        "[^\\r\\n\\t ,=]",
																			chars:      []rune{'\r', '\n', '\t', ' ', ',', '='},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2361, col: 34, offset: 79544},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2361, col: 37, offset: 79547},
							label: "typI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2361, col: 42, offset: 79552},
								expr: &ruleRefExpr{
									pos:  position{line: 2361, col: 42, offset: 79552},
									name: "stateVarType",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2361, col: 56, offset: 79566},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2361, col: 59, offset: 79569},
							label: "assignI",
							expr: &actionExpr{
								pos: position{line: 2774, col: 8, offset: 94166},
								run: (*parser).callonStateVar43,
								expr: &choiceExpr{
									pos: position{line: 2774, col: 9, offset: 94167},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											expr: &anyMatcher{
												line: 2774, col: 10, offset: 94168,
											},
										},
										&notExpr{
											pos: position{line: 2774, col: 14, offset: 94172},
											expr: &anyMatcher{
												line: 2774, col: 15, offset: 94173,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2361, col: 71, offset: 79581},
							label: "valsI",
							expr: &ruleRefExpr{
								pos:  position{line: 2361, col: 77, offset: 79587},
								name: "stateVarValues",
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarType",
			pos:  position{line: 2404, col: 1, offset: 80963},
			expr: &choiceExpr{
				pos: position{line: 2404, col: 17, offset: 80979},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2404, col: 17, offset: 80979},
						run: (*parser).callonstateVarType2,
						expr: &seqExpr{
							pos: position{line: 2404, col: 17, offset: 80979},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2404, col: 17, offset: 80979},
									label: "typI",
									expr: &ruleRefExpr{
										pos:  position{line: 2404, col: 22, offset: 80984},
										name: "Type",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2404, col: 27, offset: 80989},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2406, col: 5, offset: 81019},
						run: (*parser).callonstateVarType8,
						expr: &seqExpr{
							pos: position{line: 2406, col: 5, offset: 81019},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 2406, col: 5, offset: 81019},
									expr: &seqExpr{
										pos: position{line: 2406, col: 6, offset: 81020},
										exprs: []any{
											&notExpr{
												pos: position{line: 2406, col: 6, offset: 81020},
												expr: &seqExpr{
													pos: position{line: 2406, col: 8, offset: 81022},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2406, col: 8, offset: 81022},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2406, col: 11, offset: 81025},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 2406, col: 16, offset: 81030},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2406, col: 26, offset: 81040},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarValues",
			pos:  position{line: 2420, col: 1, offset: 81375},
			expr: &choiceExpr{
				pos: position{line: 2420, col: 19, offset: 81393},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2420, col: 19, offset: 81393},
						run: (*parser).callonstateVarValues2,
						expr: &seqExpr{
							pos: position{line: 2420, col: 19, offset: 81393},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2420, col: 19, offset: 81393},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2420, col: 23, offset: 81397},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonstateVarValues9,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2420, col: 27, offset: 81401},
									label: "valsI",
									expr: &ruleRefExpr{
										pos:  position{line: 2420, col: 33, offset: 81407},
										name: "stateVarValueList",
									},
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2422, col: 5, offset: 81457},
						run: (*parser).callonstateVarValues34,
						expr: &seqExpr{
							pos: position{line: 2422, col: 5, offset: 81457},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2422, col: 5, offset: 81457},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2422, col: 9, offset: 81461},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonstateVarValues41,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2422, col: 13, offset: 81465},
									label: "valsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2422, col: 19, offset: 81471},
										expr: &ruleRefExpr{
											pos:  position{line: 2422, col: 19, offset: 81471},
											name: "stateVarValueList",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2422, col: 38, offset: 81490},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonstateVarValues49,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2422, col: 49, offset: 81501},
									label: "badI",
									expr: &actionExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										run: (*parser).callonstateVarValues56,
										expr: &seqExpr{
											pos: position{line: 2767, col: 35, offset: 93911},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2767, col: 35, offset: 93911},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 38, offset: 93914},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2767, col: 50, offset: 93926},
														expr: &seqExpr{
															pos: position{line: 2767, col: 51, offset: 93927},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2767, col: 51, offset: 93927},
																	expr: &choiceExpr{
																		pos: position{line: 2764, col: 27, offset: 93768},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2762, col: 23, offset: 93682},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2762, col: 23, offset: 93682},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2762, col: 27, offset: 93686},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2762, col: 27, offset: 93686},
																										expr: &litMatcher{
																											pos:        position{line: 2762, col: 27, offset: 93686},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2762, col: 33, offset: 93692},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2761, col: 23, offset: 93657},
																								expr: &anyMatcher{
																									line: 2761, col: 24, offset: 93658,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2764, col: 33, offset: 93774},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2764, col: 39, offset: 93780},
																				expr: &seqExpr{
																					pos: position{line: 2764, col: 41, offset: 93782},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2764, col: 41, offset: 93782},
																							expr: &charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2764, col: 45, offset: 93786},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2764, col: 45, offset: 93786},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2764, col: 51, offset: 93792},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2767, col: 57, offset: 93933},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2767, col: 57, offset: 93933},
																			expr: &charClassMatcher{
																				pos:        position{line: 2767, col: 57, offset: 93933},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2767, col: 71, offset: 93947},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2767, col: 71, offset: 93947},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2767, col: 75, offset: 93951},
																					expr: &charClassMatcher{
																						pos:        position{line: 2767, col: 75, offset: 93951},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2767, col: 81, offset: 93957},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2422, col: 65, offset: 81517},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2425, col: 5, offset: 81677},
						run: (*parser).callonstateVarValues111,
						expr: &seqExpr{
							pos: position{line: 2425, col: 5, offset: 81677},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2425, col: 5, offset: 81677},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2425, col: 9, offset: 81681},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonstateVarValues118,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2425, col: 13, offset: 81685},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonstateVarValues123,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2767, col: 35, offset: 93911},
									run: (*parser).callonstateVarValues129,
									expr: &seqExpr{
										pos: position{line: 2767, col: 35, offset: 93911},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2767, col: 35, offset: 93911},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2767, col: 38, offset: 93914},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2767, col: 50, offset: 93926},
													expr: &seqExpr{
														pos: position{line: 2767, col: 51, offset: 93927},
														exprs: []any{
															&notExpr{
																pos: position{line: 2767, col: 51, offset: 93927},
																expr: &choiceExpr{
																	pos: position{line: 2764, col: 27, offset: 93768},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					expr: &charClassMatcher{
																						pos:        position{line: 2784, col: 37, offset: 94482},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									expr: &litMatcher{
																										pos:        position{line: 2762, col: 27, offset: 93686},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2762, col: 33, offset: 93692},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2761, col: 23, offset: 93657},
																							expr: &anyMatcher{
																								line: 2761, col: 24, offset: 93658,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2764, col: 33, offset: 93774},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2764, col: 39, offset: 93780},
																			expr: &seqExpr{
																				pos: position{line: 2764, col: 41, offset: 93782},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						expr: &charClassMatcher{
																							pos:        position{line: 2784, col: 37, offset: 94482},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2764, col: 45, offset: 93786},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2764, col: 45, offset: 93786},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2764, col: 51, offset: 93792},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2767, col: 57, offset: 93933},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2767, col: 57, offset: 93933},
																		expr: &charClassMatcher{
																			pos:        position{line: 2767, col: 57, offset: 93933},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2767, col: 71, offset: 93947},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2767, col: 71, offset: 93947},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2767, col: 75, offset: 93951},
																				expr: &charClassMatcher{
																					pos:        position{line: 2767, col: 75, offset: 93951},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2767, col: 81, offset: 93957},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2425, col: 35, offset: 81707},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 27, offset: 93768},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2764, col: 33, offset: 93774},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2764, col: 39, offset: 93780},
												expr: &seqExpr{
													pos: position{line: 2764, col: 41, offset: 93782},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2764, col: 41, offset: 93782},
															expr: &charClassMatcher{
																pos:        position{line: 2784, col: 37, offset: 94482},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2764, col: 45, offset: 93786},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2764, col: 45, offset: 93786},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2764, col: 51, offset: 93792},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2435, col: 5, offset: 82090},
						run: (*parser).callonstateVarValues184,
						expr: &choiceExpr{
							pos: position{line: 2764, col: 27, offset: 93768},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															expr: &litMatcher{
																pos:        position{line: 2762, col: 27, offset: 93686},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2762, col: 33, offset: 93692},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2761, col: 23, offset: 93657},
													expr: &anyMatcher{
														line: 2761, col: 24, offset: 93658,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2764, col: 33, offset: 93774},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2764, col: 39, offset: 93780},
									expr: &seqExpr{
										pos: position{line: 2764, col: 41, offset: 93782},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												expr: &charClassMatcher{
													pos:        position{line: 2784, col: 37, offset: 94482},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 45, offset: 93786},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2764, col: 45, offset: 93786},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2764, col: 51, offset: 93792},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarValueList",
			pos:  position{line: 2439, col: 1, offset: 82136},
			expr: &actionExpr{
				pos: position{line: 2439, col: 22, offset: 82157},
				run: (*parser).callonstateVarValueList1,
				expr: &seqExpr{
					pos: position{line: 2439, col: 22, offset: 82157},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2439, col: 22, offset: 82157},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2439, col: 29, offset: 82164},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2439, col: 42, offset: 82177},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2439, col: 48, offset: 82183},
								expr: &seqExpr{
									pos: position{line: 2439, col: 49, offset: 82184},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2439, col: 49, offset: 82184},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2439, col: 52, offset: 82187},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2439, col: 56, offset: 82191},
											expr: &charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2439, col: 59, offset: 82194},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlock",
			pos:  position{line: 2466, col: 1, offset: 83004},
			expr: &choiceExpr{
				pos: position{line: 2466, col: 15, offset: 83018},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2466, col: 15, offset: 83018},
						run: (*parser).callonArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 2466, col: 15, offset: 83018},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2774, col: 8, offset: 94166},
									run: (*parser).callonArrowBlock4,
									expr: &choiceExpr{
										pos: position{line: 2774, col: 9, offset: 94167},
										alternatives: []any{
											&andExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												expr: &anyMatcher{
													line: 2774, col: 10, offset: 94168,
												},
											},
											&notExpr{
												pos: position{line: 2774, col: 14, offset: 94172},
												expr: &anyMatcher{
													line: 2774, col: 15, offset: 94173,
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 2806, col: 24, offset: 95425},
									run: (*parser).callonArrowBlock10,
								},
								&litMatcher{
									pos:        position{line: 2466, col: 31, offset: 83034},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 2466, col: 36, offset: 83039},
									label: "firstI",
									expr: &choiceExpr{
										pos: position{line: 2466, col: 44, offset: 83047},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2466, col: 44, offset: 83047},
												name: "ArrowBlockLine",
											},
											&seqExpr{
												pos: position{line: 2762, col: 23, offset: 93682},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2762, col: 23, offset: 93682},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 27, offset: 93686},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		expr: &litMatcher{
																			pos:        position{line: 2762, col: 27, offset: 93686},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2762, col: 33, offset: 93692},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2761, col: 23, offset: 93657},
																expr: &anyMatcher{
																	line: 2761, col: 24, offset: 93658,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2466, col: 66, offset: 83069},
									label: "restI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2466, col: 72, offset: 83075},
										expr: &seqExpr{
											pos: position{line: 2466, col: 73, offset: 83076},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2466, col: 73, offset: 83076},
													expr: &seqExpr{
														pos: position{line: 2763, col: 28, offset: 93731},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2763, col: 28, offset: 93731},
																expr: &charClassMatcher{
																	pos:        position{line: 2784, col: 37, offset: 94482},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 2785, col: 37, offset: 94524},
																expr: &litMatcher{
																	pos:        position{line: 2785, col: 37, offset: 94524},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2785, col: 43, offset: 94530},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2466, col: 85, offset: 83088},
													name: "INDENTATION2",
												},
												&ruleRefExpr{
													pos:  position{line: 2466, col: 98, offset: 83101},
													name: "ArrowBlockLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2487, col: 5, offset: 83556},
						run: (*parser).callonArrowBlock37,
						expr: &seqExpr{
							pos: position{line: 2487, col: 5, offset: 83556},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2487, col: 5, offset: 83556},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2762, col: 23, offset: 93682},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2762, col: 27, offset: 93686},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													expr: &litMatcher{
														pos:        position{line: 2762, col: 27, offset: 93686},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2762, col: 33, offset: 93692},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2761, col: 23, offset: 93657},
											expr: &anyMatcher{
												line: 2761, col: 24, offset: 93658,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BracketText",
			pos:  position{line: 2495, col: 1, offset: 83805},
			expr: &choiceExpr{
				pos: position{line: 2495, col: 16, offset: 83820},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2495, col: 16, offset: 83820},
						run: (*parser).callonBracketText2,
						expr: &seqExpr{
							pos: position{line: 2495, col: 16, offset: 83820},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2799, col: 14, offset: 95067},
									run: (*parser).callonBracketText4,
									expr: &seqExpr{
										pos: position{line: 2799, col: 14, offset: 95067},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 2799, col: 14, offset: 95067},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonBracketText7,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2799, col: 23, offset: 95076},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2495, col: 26, offset: 83830},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonBracketText18,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2495, col: 30, offset: 83834},
									label: "btI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2495, col: 34, offset: 83838},
										expr: &ruleRefExpr{
											pos:  position{line: 2495, col: 34, offset: 83838},
											name: "BracketTextLine",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2495, col: 51, offset: 83855},
									expr: &choiceExpr{
										pos: position{line: 2787, col: 20, offset: 94555},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2784, col: 37, offset: 94482},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2787, col: 31, offset: 94566},
														run: (*parser).callonBracketText29,
													},
													&zeroOrOneExpr{
														pos: position{line: 2785, col: 37, offset: 94524},
														expr: &litMatcher{
															pos:        position{line: 2785, col: 37, offset: 94524},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2785, col: 43, offset: 94530},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2495, col: 55, offset: 83859},
									label: "rBracketI",
									expr: &actionExpr{
										pos: position{line: 2800, col: 14, offset: 95130},
										run: (*parser).callonBracketText34,
										expr: &seqExpr{
											pos: position{line: 2800, col: 14, offset: 95130},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2800, col: 14, offset: 95130},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2774, col: 8, offset: 94166},
														run: (*parser).callonBracketText37,
														expr: &choiceExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	expr: &anyMatcher{
																		line: 2774, col: 10, offset: 94168,
																	},
																},
																&notExpr{
																	pos: position{line: 2774, col: 14, offset: 94172},
																	expr: &anyMatcher{
																		line: 2774, col: 15, offset: 94173,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2800, col: 23, offset: 95139},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2764, col: 27, offset: 93768},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2762, col: 23, offset: 93682},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2762, col: 23, offset: 93682},
													expr: &charClassMatcher{
														pos:        position{line: 2784, col: 37, offset: 94482},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2762, col: 27, offset: 93686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2762, col: 27, offset: 93686},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	expr: &litMatcher{
																		pos:        position{line: 2762, col: 27, offset: 93686},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2762, col: 33, offset: 93692},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2761, col: 23, offset: 93657},
															expr: &anyMatcher{
																line: 2761, col: 24, offset: 93658,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2764, col: 33, offset: 93774},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2764, col: 39, offset: 93780},
											expr: &seqExpr{
												pos: position{line: 2764, col: 41, offset: 93782},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2764, col: 41, offset: 93782},
														expr: &charClassMatcher{
															pos:        position{line: 2784, col: 37, offset: 94482},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2764, col: 45, offset: 93786},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2764, col: 45, offset: 93786},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2764, col: 51, offset: 93792},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2501, col: 5, offset: 84046},
						run: (*parser).callonBracketText63,
						expr: &seqExpr{
							pos: position{line: 2501, col: 5, offset: 84046},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2799, col: 14, offset: 95067},
									run: (*parser).callonBracketText65,
									expr: &seqExpr{
										pos: position{line: 2799, col: 14, offset: 95067},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 2799, col: 14, offset: 95067},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 2774, col: 8, offset: 94166},
													run: (*parser).callonBracketText68,
													expr: &choiceExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																expr: &anyMatcher{
																	line: 2774, col: 10, offset: 94168,
																},
															},
															&notExpr{
																pos: position{line: 2774, col: 14, offset: 94172},
																expr: &anyMatcher{
																	line: 2774, col: 15, offset: 94173,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2799, col: 23, offset: 95076},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2501, col: 15, offset: 84056},
									label: "btI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2501, col: 19, offset: 84060},
										expr: &ruleRefExpr{
											pos:  position{line: 2501, col: 19, offset: 84060},
											name: "BracketTextLine",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2501, col: 36, offset: 84077},
									expr: &anyMatcher{
										line: 2501, col: 36, offset: 84077,
									},
								},
								&notExpr{
									pos: position{line: 2761, col: 23, offset: 93657},
									expr: &anyMatcher{
										line: 2761, col: 24, offset: 93658,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlockLine",
			pos:  position{line: 2518, col: 1, offset: 84584},
			expr: &actionExpr{
				pos: position{line: 2518, col: 19, offset: 84602},
				run: (*parser).callonArrowBlockLine1,
				expr: &seqExpr{
					pos: position{line: 2518, col: 19, offset: 84602},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2518, col: 19, offset: 84602},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2518, col: 26, offset: 84609},
								expr: &ruleRefExpr{
									pos:  position{line: 2518, col: 26, offset: 84609},
									name: "ArrowBlockTextItem",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2762, col: 23, offset: 93682},
							expr: &charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 2762, col: 27, offset: 93686},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2762, col: 27, offset: 93686},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 2762, col: 27, offset: 93686},
											expr: &litMatcher{
												pos:        position{line: 2762, col: 27, offset: 93686},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2762, col: 33, offset: 93692},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 2761, col: 23, offset: 93657},
									expr: &anyMatcher{
										line: 2761, col: 24, offset: 93658,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BracketTextLine",
			pos:  position{line: 2521, col: 1, offset: 84697},
			expr: &actionExpr{
				pos: position{line: 2521, col: 20, offset: 84716},
				run: (*parser).callonBracketTextLine1,
				expr: &seqExpr{
					pos: position{line: 2521, col: 20, offset: 84716},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 2521, col: 20, offset: 84716},
							expr: &choiceExpr{
								pos: position{line: 2787, col: 20, offset: 94555},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2784, col: 37, offset: 94482},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2787, col: 31, offset: 94566},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2787, col: 31, offset: 94566},
												run: (*parser).callonBracketTextLine7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2785, col: 37, offset: 94524},
												expr: &litMatcher{
													pos:        position{line: 2785, col: 37, offset: 94524},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2785, col: 43, offset: 94530},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2521, col: 24, offset: 84720},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2521, col: 31, offset: 84727},
								expr: &ruleRefExpr{
									pos:  position{line: 2521, col: 31, offset: 84727},
									name: "BracketTextTextItem",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2521, col: 52, offset: 84748},
							expr: &seqExpr{
								pos: position{line: 2762, col: 23, offset: 93682},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2762, col: 23, offset: 93682},
										expr: &charClassMatcher{
											pos:        position{line: 2784, col: 37, offset: 94482},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 2762, col: 27, offset: 93686},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2762, col: 27, offset: 93686},
												exprs: []any{
													&zeroOrOneExpr{
														pos: position{line: 2762, col: 27, offset: 93686},
														expr: &litMatcher{
															pos:        position{line: 2762, col: 27, offset: 93686},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2762, col: 33, offset: 93692},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&notExpr{
												pos: position{line: 2761, col: 23, offset: 93657},
												expr: &anyMatcher{
													line: 2761, col: 24, offset: 93658,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpolationValueLine",
			pos:  position{line: 2524, col: 1, offset: 84817},
			expr: &actionExpr{
				pos: position{line: 2524, col: 27, offset: 84843},
				run: (*parser).callonInterpolationValueLine1,
				expr: &labeledExpr{
					pos:   position{line: 2524, col: 27, offset: 84843},
					label: "itemsI",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2524, col: 34, offset: 84850},
						expr: &ruleRefExpr{
							pos:  position{line: 2524, col: 34, offset: 84850},
							name: "InterpolationValueTextItem",
						},
					},
				},
			},
		},
		{
			name: "ArrowBlockTextItem",
			pos:  position{line: 2532, col: 1, offset: 85126},
			expr: &choiceExpr{
				pos: position{line: 2532, col: 31, offset: 85156},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2540, col: 19, offset: 85516},
						run: (*parser).callonArrowBlockTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 2540, col: 19, offset: 85516},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2540, col: 25, offset: 85522},
								expr: &choiceExpr{
									pos: position{line: 2540, col: 26, offset: 85523},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2540, col: 26, offset: 85523},
											expr: &seqExpr{
												pos: position{line: 2540, col: 27, offset: 85524},
												exprs: []any{
													&notExpr{
														pos: position{line: 2540, col: 27, offset: 85524},
														expr: &seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2540, col: 32, offset: 85529},
														val:        "[^#]",
														chars:      []rune{'#'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2540, col: 41, offset: 85538},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2532, col: 48, offset: 85173},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "BracketTextTextItem",
			pos:  position{line: 2533, col: 1, offset: 85187},
			expr: &choiceExpr{
				pos: position{line: 2533, col: 31, offset: 85217},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2547, col: 20, offset: 85662},
						run: (*parser).callonBracketTextTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 2547, col: 20, offset: 85662},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2547, col: 26, offset: 85668},
								expr: &choiceExpr{
									pos: position{line: 2547, col: 27, offset: 85669},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2547, col: 27, offset: 85669},
											expr: &seqExpr{
												pos: position{line: 2547, col: 28, offset: 85670},
												exprs: []any{
													&notExpr{
														pos: position{line: 2547, col: 28, offset: 85670},
														expr: &choiceExpr{
															pos: position{line: 2547, col: 30, offset: 85672},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2762, col: 23, offset: 93682},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							expr: &litMatcher{
																								pos:        position{line: 2762, col: 27, offset: 93686},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2762, col: 33, offset: 93692},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2761, col: 23, offset: 93657},
																					expr: &anyMatcher{
																						line: 2761, col: 24, offset: 93658,
																					},
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2547, col: 36, offset: 85678},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2547, col: 36, offset: 85678},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2800, col: 14, offset: 95130},
																			run: (*parser).callonBracketTextTextItem23,
																			expr: &seqExpr{
																				pos: position{line: 2800, col: 14, offset: 95130},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 2800, col: 14, offset: 95130},
																						label: "posI",
																						expr: &actionExpr{
																							pos: position{line: 2774, col: 8, offset: 94166},
																							run: (*parser).callonBracketTextTextItem26,
																							expr: &choiceExpr{
																								pos: position{line: 2774, col: 9, offset: 94167},
																								alternatives: []any{
																									&andExpr{
																										pos: position{line: 2774, col: 9, offset: 94167},
																										expr: &anyMatcher{
																											line: 2774, col: 10, offset: 94168,
																										},
																									},
																									&notExpr{
																										pos: position{line: 2774, col: 14, offset: 94172},
																										expr: &anyMatcher{
																											line: 2774, col: 15, offset: 94173,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2800, col: 23, offset: 95139},
																						val:        "]",
																						ignoreCase: false,
																						want:       "\"]\"",
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2764, col: 27, offset: 93768},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2762, col: 23, offset: 93682},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2762, col: 23, offset: 93682},
																							expr: &charClassMatcher{
																								pos:        position{line: 2784, col: 37, offset: 94482},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2762, col: 27, offset: 93686},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2762, col: 27, offset: 93686},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2762, col: 27, offset: 93686},
																											expr: &litMatcher{
																												pos:        position{line: 2762, col: 27, offset: 93686},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2762, col: 33, offset: 93692},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2761, col: 23, offset: 93657},
																									expr: &anyMatcher{
																										line: 2761, col: 24, offset: 93658,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2764, col: 33, offset: 93774},
																					val:        ";",
																					ignoreCase: false,
																					want:       "\";\"",
																				},
																				&andExpr{
																					pos: position{line: 2764, col: 39, offset: 93780},
																					expr: &seqExpr{
																						pos: position{line: 2764, col: 41, offset: 93782},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2764, col: 41, offset: 93782},
																								expr: &charClassMatcher{
																									pos:        position{line: 2784, col: 37, offset: 94482},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2764, col: 45, offset: 93786},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2764, col: 45, offset: 93786},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2764, col: 51, offset: 93792},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2547, col: 54, offset: 85696},
														val:        "[^#]]",
														chars:      []rune{'#', ']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2547, col: 65, offset: 85707},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
										&seqExpr{
											pos: position{line: 2547, col: 72, offset: 85714},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2800, col: 14, offset: 95130},
													run: (*parser).callonBracketTextTextItem55,
													expr: &seqExpr{
														pos: position{line: 2800, col: 14, offset: 95130},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 2800, col: 14, offset: 95130},
																label: "posI",
																expr: &actionExpr{
																	pos: position{line: 2774, col: 8, offset: 94166},
																	run: (*parser).callonBracketTextTextItem58,
																	expr: &choiceExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2774, col: 9, offset: 94167},
																				expr: &anyMatcher{
																					line: 2774, col: 10, offset: 94168,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2774, col: 14, offset: 94172},
																				expr: &anyMatcher{
																					line: 2774, col: 15, offset: 94173,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2800, col: 23, offset: 95139},
																val:        "]",
																ignoreCase: false,
																want:       "\"]\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2547, col: 82, offset: 85724},
													expr: &choiceExpr{
														pos: position{line: 2764, col: 27, offset: 93768},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2762, col: 23, offset: 93682},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2762, col: 23, offset: 93682},
																		expr: &charClassMatcher{
																			pos:        position{line: 2784, col: 37, offset: 94482},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2762, col: 27, offset: 93686},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2762, col: 27, offset: 93686},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2762, col: 27, offset: 93686},
																						expr: &litMatcher{
																							pos:        position{line: 2762, col: 27, offset: 93686},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2762, col: 33, offset: 93692},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2761, col: 23, offset: 93657},
																				expr: &anyMatcher{
																					line: 2761, col: 24, offset: 93658,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2764, col: 33, offset: 93774},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2764, col: 39, offset: 93780},
																expr: &seqExpr{
																	pos: position{line: 2764, col: 41, offset: 93782},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2764, col: 41, offset: 93782},
																			expr: &charClassMatcher{
																				pos:        position{line: 2784, col: 37, offset: 94482},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2764, col: 45, offset: 93786},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2764, col: 45, offset: 93786},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2764, col: 51, offset: 93792},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2533, col: 49, offset: 85235},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "InterpolationValueTextItem",
			pos:  position{line: 2534, col: 1, offset: 85249},
			expr: &choiceExpr{
				pos: position{line: 2534, col: 31, offset: 85279},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2554, col: 27, offset: 85855},
						run: (*parser).callonInterpolationValueTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 2554, col: 27, offset: 85855},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2554, col: 33, offset: 85861},
								expr: &choiceExpr{
									pos: position{line: 2554, col: 34, offset: 85862},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2554, col: 34, offset: 85862},
											expr: &seqExpr{
												pos: position{line: 2554, col: 35, offset: 85863},
												exprs: []any{
													&notExpr{
														pos: position{line: 2554, col: 35, offset: 85863},
														expr: &seqExpr{
															pos: position{line: 2762, col: 23, offset: 93682},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2762, col: 23, offset: 93682},
																	expr: &charClassMatcher{
																		pos:        position{line: 2784, col: 37, offset: 94482},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2762, col: 27, offset: 93686},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2762, col: 27, offset: 93686},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2762, col: 27, offset: 93686},
																					expr: &litMatcher{
																						pos:        position{line: 2762, col: 27, offset: 93686},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2762, col: 33, offset: 93692},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2761, col: 23, offset: 93657},
																			expr: &anyMatcher{
																				line: 2761, col: 24, offset: 93658,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2554, col: 40, offset: 85868},
														val:        "[^#]]",
														chars:      []rune{'#', ']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2554, col: 51, offset: 85879},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2534, col: 56, offset: 85304},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 2565, col: 1, offset: 86172},
			expr: &actionExpr{
				pos: position{line: 2565, col: 18, offset: 86189},
				run: (*parser).callonInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2565, col: 18, offset: 86189},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2569, col: 23, offset: 86381},
							run: (*parser).callonInterpolation3,
							expr: &seqExpr{
								pos: position{line: 2569, col: 23, offset: 86381},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonInterpolation5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonInterpolation11,
									},
									&labeledExpr{
										pos:   position{line: 2569, col: 33, offset: 86391},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonInterpolation13,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2569, col: 44, offset: 86402},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2565, col: 37, offset: 86208},
							label: "interpI",
							expr: &choiceExpr{
								pos: position{line: 2565, col: 46, offset: 86217},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2565, col: 46, offset: 86217},
										name: "ExpressionInterpolation",
									},
									&ruleRefExpr{
										pos:  position{line: 2565, col: 72, offset: 86243},
										name: "ElementInterpolation",
									},
									&ruleRefExpr{
										pos:  position{line: 2565, col: 95, offset: 86266},
										name: "ComponentCallInterpolation",
									},
									&actionExpr{
										pos: position{line: 2736, col: 21, offset: 92691},
										run: (*parser).callonInterpolation25,
										expr: &litMatcher{
											pos:        position{line: 2736, col: 21, offset: 92691},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 2570, col: 23, offset: 86467},
							run: (*parser).callonInterpolation27,
							expr: &seqExpr{
								pos: position{line: 2570, col: 23, offset: 86467},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 2570, col: 23, offset: 86467},
										label: "endI",
										expr: &actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonInterpolation30,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2847, col: 13, offset: 96752},
										run: (*parser).callonInterpolation36,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionInterpolation",
			pos:  position{line: 2634, col: 1, offset: 88873},
			expr: &actionExpr{
				pos: position{line: 2634, col: 28, offset: 88900},
				run: (*parser).callonExpressionInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2634, col: 28, offset: 88900},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2634, col: 28, offset: 88900},
							label: "fmtDirectiveI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2634, col: 42, offset: 88914},
								expr: &choiceExpr{
									pos: position{line: 1610, col: 17, offset: 53133},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1610, col: 17, offset: 53133},
											run: (*parser).callonExpressionInterpolation6,
											expr: &seqExpr{
												pos: position{line: 1610, col: 17, offset: 53133},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1610, col: 17, offset: 53133},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1610, col: 21, offset: 53137},
														expr: &charClassMatcher{
															pos:        position{line: 1626, col: 12, offset: 53819},
															val:        "[-+# 0]",
															chars:      []rune{'-', '+', '#', ' ', '0'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1610, col: 30, offset: 53146},
														expr: &seqExpr{
															pos: position{line: 1610, col: 31, offset: 53147},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1610, col: 31, offset: 53147},
																	val:        "[1-9]",
																	ranges:     []rune{'1', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1610, col: 36, offset: 53152},
																	expr: &charClassMatcher{
																		pos:        position{line: 1610, col: 36, offset: 53152},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1610, col: 45, offset: 53161},
														expr: &seqExpr{
															pos: position{line: 1610, col: 46, offset: 53162},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1610, col: 46, offset: 53162},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1610, col: 50, offset: 53166},
																	expr: &charClassMatcher{
																		pos:        position{line: 1610, col: 50, offset: 53166},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 1627, col: 12, offset: 53838},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 1627, col: 12, offset: 53838},
																val:        "[bcdeEfFgGoOpqstTUvX]",
																chars:      []rune{'b', 'c', 'd', 'e', 'E', 'f', 'F', 'g', 'G', 'o', 'O', 'p', 'q', 's', 't', 'T', 'U', 'v', 'X'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 1627, col: 36, offset: 53862},
																run: (*parser).callonExpressionInterpolation23,
																expr: &andExpr{
																	pos: position{line: 1627, col: 36, offset: 53862},
																	expr: &charClassMatcher{
																		pos:        position{line: 1627, col: 38, offset: 53864},
																		val:        "[{\"`]",
																		chars:      []rune{'{', '"', '`'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1639, col: 5, offset: 54399},
																run: (*parser).callonExpressionInterpolation26,
																expr: &anyMatcher{
																	line: 1639, col: 5, offset: 54399,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1612, col: 5, offset: 53224},
											run: (*parser).callonExpressionInterpolation28,
											expr: &seqExpr{
												pos: position{line: 1612, col: 5, offset: 53224},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1612, col: 5, offset: 53224},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1612, col: 9, offset: 53228},
														expr: &charClassMatcher{
															pos:        position{line: 1612, col: 9, offset: 53228},
															val:        "[^`\"{]",
															chars:      []rune{'`', '"', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&labeledExpr{
														pos:   position{line: 1612, col: 17, offset: 53236},
														label: "endI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonExpressionInterpolation34,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2634, col: 56, offset: 88928},
							label: "lBraceI",
							expr: &actionExpr{
								pos: position{line: 2572, col: 33, offset: 86555},
								run: (*parser).callonExpressionInterpolation41,
								expr: &seqExpr{
									pos: position{line: 2572, col: 33, offset: 86555},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2774, col: 8, offset: 94166},
											run: (*parser).callonExpressionInterpolation43,
											expr: &choiceExpr{
												pos: position{line: 2774, col: 9, offset: 94167},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2774, col: 9, offset: 94167},
														expr: &anyMatcher{
															line: 2774, col: 10, offset: 94168,
														},
													},
													&notExpr{
														pos: position{line: 2774, col: 14, offset: 94172},
														expr: &anyMatcher{
															line: 2774, col: 15, offset: 94173,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2841, col: 18, offset: 96619},
											run: (*parser).callonExpressionInterpolation49,
										},
										&labeledExpr{
											pos:   position{line: 2572, col: 43, offset: 86565},
											label: "lBraceI",
											expr: &actionExpr{
												pos: position{line: 2796, col: 12, offset: 94942},
												run: (*parser).callonExpressionInterpolation51,
												expr: &seqExpr{
													pos: position{line: 2796, col: 12, offset: 94942},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2796, col: 12, offset: 94942},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2774, col: 8, offset: 94166},
																run: (*parser).callonExpressionInterpolation54,
																expr: &choiceExpr{
																	pos: position{line: 2774, col: 9, offset: 94167},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			expr: &anyMatcher{
																				line: 2774, col: 10, offset: 94168,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2774, col: 14, offset: 94172},
																			expr: &anyMatcher{
																				line: 2774, col: 15, offset: 94173,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2796, col: 21, offset: 94951},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2907, col: 16, offset: 98776},
							run: (*parser).callonExpressionInterpolation61,
						},
						&labeledExpr{
							pos:   position{line: 2634, col: 105, offset: 88977},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2634, col: 111, offset: 88983},
								name: "Expression",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2914, col: 14, offset: 98875},
							run: (*parser).callonExpressionInterpolation64,
						},
						&labeledExpr{
							pos:   position{line: 2634, col: 132, offset: 89004},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2573, col: 31, offset: 86651},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2573, col: 31, offset: 86651},
										run: (*parser).callonExpressionInterpolation67,
										expr: &seqExpr{
											pos: position{line: 2573, col: 31, offset: 86651},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2573, col: 31, offset: 86651},
													label: "rBrace",
													expr: &actionExpr{
														pos: position{line: 2797, col: 12, offset: 95003},
														run: (*parser).callonExpressionInterpolation70,
														expr: &seqExpr{
															pos: position{line: 2797, col: 12, offset: 95003},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2797, col: 12, offset: 95003},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonExpressionInterpolation73,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2797, col: 21, offset: 95012},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonExpressionInterpolation80,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2575, col: 5, offset: 86721},
										run: (*parser).callonExpressionInterpolation81,
										expr: &labeledExpr{
											pos:   position{line: 2575, col: 5, offset: 86721},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonExpressionInterpolation83,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementInterpolation",
			pos:  position{line: 2679, col: 1, offset: 90539},
			expr: &choiceExpr{
				pos: position{line: 2679, col: 25, offset: 90563},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2679, col: 25, offset: 90563},
						name: "elementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 2679, col: 48, offset: 90586},
						name: "voidElementInterpolation",
					},
				},
			},
		},
		{
			name: "elementInterpolation",
			pos:  position{line: 2681, col: 1, offset: 90612},
			expr: &actionExpr{
				pos: position{line: 2681, col: 25, offset: 90636},
				run: (*parser).callonelementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2681, col: 25, offset: 90636},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2681, col: 25, offset: 90636},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2151, col: 16, offset: 73075},
								expr: &charClassMatcher{
									pos:        position{line: 2137, col: 27, offset: 72414},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2907, col: 16, offset: 98776},
							run: (*parser).callonelementInterpolation6,
						},
						&labeledExpr{
							pos:   position{line: 2681, col: 55, offset: 90666},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2681, col: 62, offset: 90673},
								expr: &ruleRefExpr{
									pos:  position{line: 2681, col: 62, offset: 90673},
									name: "AttributeCollection",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2914, col: 14, offset: 98875},
							run: (*parser).callonelementInterpolation10,
						},
						&labeledExpr{
							pos:   position{line: 2681, col: 93, offset: 90704},
							label: "valI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2681, col: 98, offset: 90709},
								expr: &ruleRefExpr{
									pos:  position{line: 2681, col: 98, offset: 90709},
									name: "InterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "voidElementInterpolation",
			pos:  position{line: 2693, col: 1, offset: 91051},
			expr: &actionExpr{
				pos: position{line: 2693, col: 29, offset: 91079},
				run: (*parser).callonvoidElementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2693, col: 29, offset: 91079},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2693, col: 29, offset: 91079},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2151, col: 16, offset: 73075},
								expr: &charClassMatcher{
									pos:        position{line: 2137, col: 27, offset: 72414},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2693, col: 47, offset: 91097},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&stateCodeExpr{
							pos: position{line: 2907, col: 16, offset: 98776},
							run: (*parser).callonvoidElementInterpolation7,
						},
						&labeledExpr{
							pos:   position{line: 2693, col: 63, offset: 91113},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2693, col: 70, offset: 91120},
								expr: &ruleRefExpr{
									pos:  position{line: 2693, col: 70, offset: 91120},
									name: "AttributeCollection",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2914, col: 14, offset: 98875},
							run: (*parser).callonvoidElementInterpolation11,
						},
					},
				},
			},
		},
		{
			name: "ComponentCallInterpolation",
			pos:  position{line: 2709, col: 1, offset: 91646},
			expr: &actionExpr{
				pos: position{line: 2709, col: 31, offset: 91676},
				run: (*parser).callonComponentCallInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2709, col: 31, offset: 91676},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2709, col: 31, offset: 91676},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&stateCodeExpr{
							pos: position{line: 2907, col: 16, offset: 98776},
							run: (*parser).callonComponentCallInterpolation4,
						},
						&labeledExpr{
							pos:   position{line: 2709, col: 47, offset: 91692},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 2709, col: 53, offset: 91698},
								name: "ComponentCallHeader",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2914, col: 14, offset: 98875},
							run: (*parser).callonComponentCallInterpolation7,
						},
						&labeledExpr{
							pos:   position{line: 2709, col: 83, offset: 91728},
							label: "valI",
							expr: &choiceExpr{
								pos: position{line: 2709, col: 89, offset: 91734},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2709, col: 89, offset: 91734},
										name: "InterpolationValue",
									},
									&stateCodeExpr{
										pos: position{line: 2847, col: 13, offset: 96752},
										run: (*parser).callonComponentCallInterpolation11,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpolationValue",
			pos:  position{line: 2724, col: 1, offset: 92213},
			expr: &actionExpr{
				pos: position{line: 2724, col: 23, offset: 92235},
				run: (*parser).callonInterpolationValue1,
				expr: &seqExpr{
					pos: position{line: 2724, col: 23, offset: 92235},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2601, col: 27, offset: 87621},
							run: (*parser).callonInterpolationValue3,
							expr: &seqExpr{
								pos: position{line: 2601, col: 27, offset: 87621},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2774, col: 8, offset: 94166},
										run: (*parser).callonInterpolationValue5,
										expr: &choiceExpr{
											pos: position{line: 2774, col: 9, offset: 94167},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													expr: &anyMatcher{
														line: 2774, col: 10, offset: 94168,
													},
												},
												&notExpr{
													pos: position{line: 2774, col: 14, offset: 94172},
													expr: &anyMatcher{
														line: 2774, col: 15, offset: 94173,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2841, col: 18, offset: 96619},
										run: (*parser).callonInterpolationValue11,
									},
									&labeledExpr{
										pos:   position{line: 2601, col: 37, offset: 87631},
										label: "lBracketI",
										expr: &actionExpr{
											pos: position{line: 2799, col: 14, offset: 95067},
											run: (*parser).callonInterpolationValue13,
											expr: &seqExpr{
												pos: position{line: 2799, col: 14, offset: 95067},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2799, col: 14, offset: 95067},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2774, col: 8, offset: 94166},
															run: (*parser).callonInterpolationValue16,
															expr: &choiceExpr{
																pos: position{line: 2774, col: 9, offset: 94167},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2774, col: 9, offset: 94167},
																		expr: &anyMatcher{
																			line: 2774, col: 10, offset: 94168,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2774, col: 14, offset: 94172},
																		expr: &anyMatcher{
																			line: 2774, col: 15, offset: 94173,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2799, col: 23, offset: 95076},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2724, col: 46, offset: 92258},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 2724, col: 51, offset: 92263},
								name: "InterpolationValueLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2724, col: 74, offset: 92286},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 2602, col: 25, offset: 87717},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2602, col: 25, offset: 87717},
										run: (*parser).callonInterpolationValue27,
										expr: &seqExpr{
											pos: position{line: 2602, col: 25, offset: 87717},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2602, col: 25, offset: 87717},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2800, col: 14, offset: 95130},
														run: (*parser).callonInterpolationValue30,
														expr: &seqExpr{
															pos: position{line: 2800, col: 14, offset: 95130},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2800, col: 14, offset: 95130},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2774, col: 8, offset: 94166},
																		run: (*parser).callonInterpolationValue33,
																		expr: &choiceExpr{
																			pos: position{line: 2774, col: 9, offset: 94167},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2774, col: 9, offset: 94167},
																					expr: &anyMatcher{
																						line: 2774, col: 10, offset: 94168,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2774, col: 14, offset: 94172},
																					expr: &anyMatcher{
																						line: 2774, col: 15, offset: 94173,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2800, col: 23, offset: 95139},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2847, col: 13, offset: 96752},
													run: (*parser).callonInterpolationValue40,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2604, col: 5, offset: 87794},
										run: (*parser).callonInterpolationValue41,
										expr: &labeledExpr{
											pos:   position{line: 2604, col: 5, offset: 87794},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2774, col: 8, offset: 94166},
												run: (*parser).callonInterpolationValue43,
												expr: &choiceExpr{
													pos: position{line: 2774, col: 9, offset: 94167},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2774, col: 9, offset: 94167},
															expr: &anyMatcher{
																line: 2774, col: 10, offset: 94168,
															},
														},
														&notExpr{
															pos: position{line: 2774, col: 14, offset: 94172},
															expr: &anyMatcher{
																line: 2774, col: 15, offset: 94173,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION2",
			pos:  position{line: 2818, col: 1, offset: 95844},
			expr: &choiceExpr{
				pos: position{line: 2818, col: 17, offset: 95860},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2818, col: 17, offset: 95860},
						exprs: []any{
							&andCodeExpr{
								pos: position{line: 2818, col: 17, offset: 95860},
								run: (*parser).callonINDENTATION23,
							},
							&charClassMatcher{
								pos:        position{line: 2784, col: 37, offset: 94482},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
							&stateCodeExpr{
								pos: position{line: 2820, col: 5, offset: 95942},
								run: (*parser).callonINDENTATION25,
							},
							&ruleRefExpr{
								pos:  position{line: 2825, col: 3, offset: 96035},
								name: "INDENTATION2",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2825, col: 18, offset: 96050},
						exprs: []any{
							&andCodeExpr{
								pos: position{line: 2825, col: 18, offset: 96050},
								run: (*parser).callonINDENTATION28,
							},
							&litMatcher{
								pos:        position{line: 2827, col: 3, offset: 96131},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
							&stateCodeExpr{
								pos: position{line: 2827, col: 8, offset: 96136},
								run: (*parser).callonINDENTATION210,
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onAST3() error {
	newState(c)
	return nil
}

func (p *parser) callonAST3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST3()
}

func (c *current) onAST16(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAST16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST16(stack["textI"])
}

func (c *current) onAST5(commentsI any) (any, error) {
	commentIs := slice(commentsI)
	comments := make([]*ast.DevComment, 0, len(commentIs))
	for _, cI := range commentIs {
		if c, ok := cI.(*ast.DevComment); ok {
			comments = append(comments, c)
		}
	}
	comments = comments[:len(comments):len(comments)]
	return comments, nil
}

func (p *parser) callonAST5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST5(stack["commentsI"])
}

func (c *current) onAST63(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonAST63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST63(stack["identI"])
}

func (c *current) onAST60(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonAST60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST60(stack["identI"])
}

func (c *current) onAST78() (any, error) {
	return (*ast.Ident)(nil), &fileerr.Error{
		Message: "missing package name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a package name",
		}),
		Example: "`package woof`",
	}
}

func (p *parser) callonAST78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST78()
}

func (c *current) onAST92() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAST92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST92()
}

func (c *current) onAST99(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonAST99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST99(stack["unexpectedI"])
}

func (c *current) onAST89(startI, identI any) (any, error) {
	return invalidIdent(c, "package", *startI.(*ast.Position), identI.(string))
}

func (p *parser) callonAST89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST89(stack["startI"], stack["identI"])
}

func (c *current) onAST53(nameI any) (any, error) {
	return &ast.PackageDirective{
		Name:     nameI.(*ast.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAST53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST53(stack["nameI"])
}

func (c *current) onAST144() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAST144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST144()
}

func (c *current) onAST143() (any, error) {
	return (*ast.PackageDirective)(nil), &fileerr.Error{
		Message: "missing package directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected `package` directive as first non-comment, found this instead",
		}),
		Example: "`package woof`",
	}
}

func (p *parser) callonAST143() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST143()
}

func (c *current) onAST1(docI, pkgI, scopeI any) (any, error) {
	return &ast.AST{
		PackageDoc:       optCast[[]*ast.DevComment](docI),
		PackageDirective: optCast[*ast.PackageDirective](pkgI),
		Scope:            scopeI.(*ast.Scope),
	}, nil
}

func (p *parser) callonAST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST1(stack["docI"], stack["pkgI"], stack["scopeI"])
}

func (c *current) onAnd1(collsI any) (any, error) {
	return &ast.And{
		Attributes: collsI.([]*ast.AttributeCollection),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd1(stack["collsI"])
}

func (c *current) onandAttributes6(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonandAttributes6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes6(stack["unexpectedI"])
}

func (c *current) onandAttributes42() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonandAttributes42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes42()
}

func (c *current) onandAttributes4(unexpectedI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "bad attribute syntax",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "this is not a valid attribute list",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
				Example:    "`&#bark .woof (title=\"howl\")`",
				ShouldBe:   "`&#bark.woof(title=\"howl\")`",
			},
			{Suggestion: "write a class shorthand", Example: "`&.woof`"},
			{Suggestion: "write an id shorthand", Example: "`&#bark`"},
			{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
		},
	}
}

func (p *parser) callonandAttributes4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes4(stack["unexpectedI"], stack["endI"])
}

func (c *current) onandAttributes49(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonandAttributes49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes49(stack["unexpectedI"])
}

func (c *current) onandAttributes48(unexpectedI any) (any, error) {
	return ([]*ast.AttributeCollection)(nil), &fileerr.Error{
		Message: "`&` with no attributes",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected attributes",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "write a class shorthand", Example: "`&.woof`"},
			{Suggestion: "write an id shorthand", Example: "`&#bark`"},
			{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
		},
	}
}

func (p *parser) callonandAttributes48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes48(stack["unexpectedI"])
}

func (c *current) onAttributeCollection1(attrsI any) (any, error) {
	return sliceOf[*ast.AttributeCollection](attrsI), nil
}

func (p *parser) callonAttributeCollection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection1(stack["attrsI"])
}

func (c *current) onattributeCollectionItem12() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonattributeCollectionItem12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem12()
}

func (c *current) onattributeCollectionItem16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonattributeCollectionItem16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem16()
}

func (c *current) onattributeCollectionItem15() (any, error) {
	return "", &fileerr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an id",
		}),
	}
}

func (p *parser) callonattributeCollectionItem15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem15()
}

func (c *current) onattributeCollectionItem7(idI any) (any, error) {
	return &ast.IDShorthand{
		ID:       idI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonattributeCollectionItem7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem7(stack["idI"])
}

func (c *current) onattributeCollectionItem27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonattributeCollectionItem27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem27()
}

func (c *current) onattributeCollectionItem31() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonattributeCollectionItem31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem31()
}

func (c *current) onattributeCollectionItem30() (any, error) {
	return "", &fileerr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a class name",
		}),
	}
}

func (p *parser) callonattributeCollectionItem30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem30()
}

func (c *current) onattributeCollectionItem22(nameI any) (any, error) {
	return &ast.ClassShorthand{
		Name:     nameI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonattributeCollectionItem22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem22(stack["nameI"])
}

func (c *current) onattributeCollectionItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonattributeCollectionItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollectionItem1(stack["itmI"])
}

func (c *current) onAttributeList5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList5()
}

func (c *current) onAttributeList11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonAttributeList11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList11()
}

func (c *current) onAttributeList16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList16()
}

func (c *current) onAttributeList13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonAttributeList13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList13(stack["posI"])
}

func (c *current) onAttributeList27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonAttributeList27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList27()
}

func (c *current) onAttributeList3(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonAttributeList3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList3(stack["lParenI"])
}

func (c *current) onAttributeList47() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonAttributeList47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList47()
}

func (c *current) onAttributeList55() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList55()
}

func (c *current) onAttributeList52(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonAttributeList52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList52(stack["posI"])
}

func (c *current) onAttributeList62(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonAttributeList62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList62(stack["rParenI"])
}

func (c *current) onAttributeList36(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonAttributeList36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList36(stack["rParenI"])
}

func (c *current) onAttributeList64() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList64()
}

func (c *current) onAttributeList63() (any, error) {
	return unclosedList(c, "attribute list")
}

func (p *parser) callonAttributeList63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList63()
}

func (c *current) onAttributeList1(lParenI, attributesI, rParenI any) (any, error) {
	return &ast.AttributeList{
		LParen:     pos(c),
		Attributes: optCast[[]*ast.Attribute](attributesI),
		RParen:     rParenI.(*ast.Position),
	}, nil
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["lParenI"], stack["attributesI"], stack["rParenI"])
}

func (c *current) onattributes15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonattributes15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes15()
}

func (c *current) onattributes1(firstI, restI any) (any, error) {
	return collectList[ast.Attribute](firstI, restI, -1), nil
}

func (p *parser) callonattributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes1(stack["firstI"], stack["restI"])
}

func (c *current) onAttribute2() (any, error) {
	return &ast.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonAttribute2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute2()
}

func (c *current) onSimpleAttribute5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSimpleAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute5()
}

func (c *current) onSimpleAttribute19() (any, error) {
	return string(c.text), &fileerr.Error{
		Message: "attribute: invalid name",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        len(c.text),
			Annotation: "contains characters not allowed by the HTML5 spec",
		}),
	}
}

func (p *parser) callonSimpleAttribute19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute19()
}

func (c *current) onSimpleAttribute1(nameI, valI any) (any, error) {
	a := valI.(ast.SimpleAttribute)
	a.Name = nameI.(string)
	a.Position = pos(c)
	return &a, nil
}

func (p *parser) callonSimpleAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute1(stack["nameI"], stack["valI"])
}

func (c *current) onsimpleAttributeValue2() (any, error) {
	return ast.SimpleAttribute{}, nil
}

func (p *parser) callonsimpleAttributeValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue2()
}

func (c *current) onsimpleAttributeValue8() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonsimpleAttributeValue8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue8()
}

func (c *current) onsimpleAttributeValue19() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonsimpleAttributeValue19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue19()
}

func (c *current) onsimpleAttributeValue5(assignI, valI any) (any, error) {
	return ast.SimpleAttribute{
		Assign: assignI.(*ast.Position),
		Value:  optCast[ast.AttributeValue](valI),
	}, nil
}

func (p *parser) callonsimpleAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue5(stack["assignI"], stack["valI"])
}

func (c *current) onAttributeValue6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeValue6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue6()
}

func (c *current) onAttributeValue5() (any, error) {
	return nil, &fileerr.Error{
		Message: "attribute: missing value",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an expression or component call",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you want to write a static boolean attribute, remove the equal sign",
				Example:    "`input(disabled)`",
			},
		},
	}
}

func (p *parser) callonAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue5()
}

func (c *current) onTypedAttributeValue5() (any, error) {
	return attrtype.Plain, nil
}

func (p *parser) callonTypedAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue5()
}

func (c *current) onTypedAttributeValue7() (any, error) {
	return attrtype.CSS, nil
}

func (p *parser) callonTypedAttributeValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue7()
}

func (c *current) onTypedAttributeValue9() (any, error) {
	return attrtype.JS, nil
}

func (p *parser) callonTypedAttributeValue9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue9()
}

func (c *current) onTypedAttributeValue11() (any, error) {
	return attrtype.URL, nil
}

func (p *parser) callonTypedAttributeValue11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue11()
}

func (c *current) onTypedAttributeValue13() (any, error) {
	return attrtype.URLList, nil
}

func (p *parser) callonTypedAttributeValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue13()
}

func (c *current) onTypedAttributeValue15() (any, error) {
	return attrtype.ResourceURL, nil
}

func (p *parser) callonTypedAttributeValue15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue15()
}

func (c *current) onTypedAttributeValue17() (any, error) {
	return attrtype.Srcset, nil
}

func (p *parser) callonTypedAttributeValue17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue17()
}

func (c *current) onTypedAttributeValue19() (any, error) {
	return attrtype.Unsafe, nil
}

func (p *parser) callonTypedAttributeValue19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue19()
}

func (c *current) onTypedAttributeValue26() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue26()
}

func (c *current) onTypedAttributeValue32() error {
	pushStart(c)
	return nil
}

func (p *parser) callonTypedAttributeValue32() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue32()
}

func (c *current) onTypedAttributeValue37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue37()
}

func (c *current) onTypedAttributeValue34(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue34(stack["posI"])
}

func (c *current) onTypedAttributeValue48() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonTypedAttributeValue48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue48()
}

func (c *current) onTypedAttributeValue24(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue24(stack["lParenI"])
}

func (c *current) onTypedAttributeValue67() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonTypedAttributeValue67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue67()
}

func (c *current) onTypedAttributeValue75() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue75()
}

func (c *current) onTypedAttributeValue72(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue72(stack["posI"])
}

func (c *current) onTypedAttributeValue82(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonTypedAttributeValue82() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue82(stack["rParenI"])
}

func (c *current) onTypedAttributeValue56(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue56(stack["rParenI"])
}

func (c *current) onTypedAttributeValue84() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue84()
}

func (c *current) onTypedAttributeValue83() (any, error) {
	return unclosedList(c, "attribute value")
}

func (p *parser) callonTypedAttributeValue83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue83()
}

func (c *current) onTypedAttributeValue1(typeI, lParenI, valI, rParenI any) (any, error) {
	return &ast.TypedAttributeValue{
		Type:     typeI.(attrtype.Type),
		LParen:   lParenI.(*ast.Position),
		Value:    optCast[ast.Expression](valI),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTypedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue1(stack["typeI"], stack["lParenI"], stack["valI"], stack["rParenI"])
}

func (c *current) onComponentCallAttributeValue4() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallAttributeValue4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue4()
}

func (c *current) onComponentCallAttributeValue7(headerI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallAttributeValue7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue7(stack["headerI"])
}

func (c *current) onComponentCallAttributeValue1(headerI, valueI any) (any, error) {
	return &ast.ComponentCallAttribute{
		ComponentCall: headerI.(*ast.ComponentCall),
		Value:         optCast[*ast.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonComponentCallAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue1(stack["headerI"], stack["valueI"])
}

func (c *current) onType1(typeI any) (any, error) {
	return &ast.Type{Type: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onType1(stack["typeI"])
}

func (c *current) onBody2(bodyI any) (any, error) {
	return bodyI, nil
}

func (p *parser) callonBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody2(stack["bodyI"])
}

func (c *current) onBody8() (any, error) {
	return nil, &fileerr.Error{
		Message: "missing body",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a body",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "start a scope", Example: "`{ ... }`"},
			{Suggestion: "write bracketed text", Example: "`[ woof woof ]`"},
		},
	}
}

func (p *parser) callonBody8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody8()
}

func (c *current) onBody33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBody33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody33()
}

func (c *current) onBody42() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBody42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody42()
}

func (c *current) onBody28(startI, endI, bodyI any) (any, error) {
	return bodyI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
}

func (p *parser) callonBody28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody28(stack["startI"], stack["endI"], stack["bodyI"])
}

func (c *current) onBody57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBody57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody57()
}

func (c *current) onBody63(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonBody63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody63(stack["startI"], stack["unexpectedI"])
}

func (c *current) onBody52(startI, unexpectedI, endI any) (any, error) {
	return nil, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected a body")
}

func (p *parser) callonBody52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody52(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onOptionalBody2(bodyI any) (any, error) {
	return bodyI, nil
}

func (p *parser) callonOptionalBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody2(stack["bodyI"])
}

func (c *current) onOptionalBody8() (any, error) {
	return nil, nil
}

func (p *parser) callonOptionalBody8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody8()
}

func (c *current) onOptionalBody33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonOptionalBody33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody33()
}

func (c *current) onOptionalBody42() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonOptionalBody42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody42()
}

func (c *current) onOptionalBody28(startI, endI, bodyI any) (any, error) {
	return bodyI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
}

func (p *parser) callonOptionalBody28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody28(stack["startI"], stack["endI"], stack["bodyI"])
}

func (c *current) onOptionalBody57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonOptionalBody57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody57()
}

func (c *current) onOptionalBody63(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonOptionalBody63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody63(stack["startI"], stack["unexpectedI"])
}

func (c *current) onOptionalBody52(startI, unexpectedI, endI any) (any, error) {
	return nil, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected a body, or nothing")
}

func (p *parser) callonOptionalBody52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody52(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onGlobalScope5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope5()
}

func (c *current) onGlobalScope11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGlobalScope11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope11()
}

func (c *current) onGlobalScope16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope16()
}

func (c *current) onGlobalScope13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope13(stack["posI"])
}

func (c *current) onGlobalScope27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGlobalScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope27()
}

func (c *current) onGlobalScope3(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope3(stack["lBraceI"])
}

func (c *current) onGlobalScope42() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGlobalScope42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope42()
}

func (c *current) onGlobalScope50() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope50()
}

func (c *current) onGlobalScope47(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope47(stack["posI"])
}

func (c *current) onGlobalScope57(rBraceI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGlobalScope57() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope57(stack["rBraceI"])
}

func (c *current) onGlobalScope36(rBraceI any) (any, error) {
	return rBraceI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope36(stack["rBraceI"])
}

func (c *current) onGlobalScope60() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope60()
}

func (c *current) onGlobalScope58(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed `{`",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "expected a closing `}` for this `{`",
		}),
	}
}

func (p *parser) callonGlobalScope58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope58(stack["posI"])
}

func (c *current) onGlobalScope1(lBraceI, itmsI, rBraceI any) (any, error) {
	return &ast.Scope{
		LBrace: pos(c),
		Items:  sliceOf[ast.ScopeItem](itemsI),
		RBrace: rBraceI.(*ast.Position),
	}, nil
}

func (p *parser) callonGlobalScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope1(stack["lBraceI"], stack["itmsI"], stack["rBraceI"])
}

func (c *current) onglobalScopeItem7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem7()
}

func (c *current) onglobalScopeItem17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem17()
}

func (c *current) onglobalScopeItem14(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem14(stack["posI"])
}

func (c *current) onglobalScopeItem13(posI any) (any, error) {
	return &ast.BadItem{
			Line:     "}",
			Position: pos(c),
		}, &fileerr.Error{
			Message: "lone brace",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -2,
				Start:             pos(c),
				Annotation:        "does not belong to a scope",
			}),
		}
}

func (p *parser) callonglobalScopeItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem13(stack["posI"])
}

func (c *current) onglobalScopeItem35() (any, error) {
	return ast.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem35()
}

func (c *current) onglobalScopeItem43(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem43(stack["identI"])
}

func (c *current) onglobalScopeItem40(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonglobalScopeItem40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem40(stack["identI"])
}

func (c *current) onglobalScopeItem51() (any, error) {
	return invalidIdent(c, "import alias", pos(c), string(c.text))
}

func (p *parser) callonglobalScopeItem51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem51()
}

func (c *current) onglobalScopeItem66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem66()
}

func (c *current) onglobalScopeItem72() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem72() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem72()
}

func (c *current) onglobalScopeItem74() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem74()
}

func (c *current) onglobalScopeItem64(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem64(stack["startI"])
}

func (c *current) onglobalScopeItem89() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem89()
}

func (c *current) onglobalScopeItem96(posI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem96() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem96(stack["posI"])
}

func (c *current) onglobalScopeItem86(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem86(stack["posI"])
}

func (c *current) onglobalScopeItem99() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem99()
}

func (c *current) onglobalScopeItem97(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "you never closed this ```",
		}),
	}
}

func (p *parser) callonglobalScopeItem97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem97(stack["posI"])
}

func (c *current) onglobalScopeItem62(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Start:    pos(c),
		Quote:    '`',
		Contents: concat(contentsI),
		End:      endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem62(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem109() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem109()
}

func (c *current) onglobalScopeItem115() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem115() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem115()
}

func (c *current) onglobalScopeItem117() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem117()
}

func (c *current) onglobalScopeItem107(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem107(stack["startI"])
}

func (c *current) onglobalScopeItem126() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonglobalScopeItem126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem126()
}

func (c *current) onglobalScopeItem138() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem138()
}

func (c *current) onglobalScopeItem144(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem144() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem144(stack["endI"])
}

func (c *current) onglobalScopeItem134(endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem134(stack["endI"])
}

func (c *current) onglobalScopeItem147() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem147()
}

func (c *current) onglobalScopeItem145(endI any) (any, error) {
	start := popStart(c)
	return endI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:       start,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the string literal started here",
			}),
		},
	}
}

func (p *parser) callonglobalScopeItem145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem145(stack["endI"])
}

func (c *current) onglobalScopeItem105(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Start:    pos(c),
		Quote:    '"',
		Contents: optCast[string](contentsI),
		End:      endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem105() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem105(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem30(aliasI, pathI any) (any, error) {
	return &ast.ImportSpec{
		Alias:    optCast[*ast.Ident](aliasI),
		Path:     pathI.(*ast.StaticString),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem30(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeItem24(specI any) (any, error) {
	return ast.Import{
		Imports:  []ast.ImportScopeItem{specI.(ast.ImportSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem24(stack["specI"])
}

func (c *current) onglobalScopeItem199() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem199() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem199()
}

func (c *current) onglobalScopeItem205() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem205() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem205()
}

func (c *current) onglobalScopeItem210() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem210()
}

func (c *current) onglobalScopeItem207(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem207() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem207(stack["posI"])
}

func (c *current) onglobalScopeItem221() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem221() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem221()
}

func (c *current) onglobalScopeItem197(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem197() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem197(stack["lParenI"])
}

func (c *current) onglobalScopeItem233() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem233() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem233()
}

func (c *current) onglobalScopeItem239(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem239() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem239(stack["textI"])
}

func (c *current) onglobalScopeItem272() (any, error) {
	return ast.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem272() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem272()
}

func (c *current) onglobalScopeItem280(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem280() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem280(stack["identI"])
}

func (c *current) onglobalScopeItem277(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonglobalScopeItem277() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem277(stack["identI"])
}

func (c *current) onglobalScopeItem288() (any, error) {
	return invalidIdent(c, "import alias", pos(c), string(c.text))
}

func (p *parser) callonglobalScopeItem288() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem288()
}

func (c *current) onglobalScopeItem303() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem303()
}

func (c *current) onglobalScopeItem309() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem309() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem309()
}

func (c *current) onglobalScopeItem311() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem311() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem311()
}

func (c *current) onglobalScopeItem301(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem301() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem301(stack["startI"])
}

func (c *current) onglobalScopeItem326() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem326() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem326()
}

func (c *current) onglobalScopeItem333(posI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem333() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem333(stack["posI"])
}

func (c *current) onglobalScopeItem323(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem323() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem323(stack["posI"])
}

func (c *current) onglobalScopeItem336() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem336() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem336()
}

func (c *current) onglobalScopeItem334(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "you never closed this ```",
		}),
	}
}

func (p *parser) callonglobalScopeItem334() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem334(stack["posI"])
}

func (c *current) onglobalScopeItem299(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Start:    pos(c),
		Quote:    '`',
		Contents: concat(contentsI),
		End:      endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem299() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem299(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem346() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem346() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem346()
}

func (c *current) onglobalScopeItem352() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem352() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem352()
}

func (c *current) onglobalScopeItem354() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem354() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem354()
}

func (c *current) onglobalScopeItem344(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem344() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem344(stack["startI"])
}

func (c *current) onglobalScopeItem363() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonglobalScopeItem363() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem363()
}

func (c *current) onglobalScopeItem375() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem375() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem375()
}

func (c *current) onglobalScopeItem381(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem381() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem381(stack["endI"])
}

func (c *current) onglobalScopeItem371(endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem371() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem371(stack["endI"])
}

func (c *current) onglobalScopeItem384() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem384() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem384()
}

func (c *current) onglobalScopeItem382(endI any) (any, error) {
	start := popStart(c)
	return endI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:       start,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the string literal started here",
			}),
		},
	}
}

func (p *parser) callonglobalScopeItem382() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem382(stack["endI"])
}

func (c *current) onglobalScopeItem342(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Start:    pos(c),
		Quote:    '"',
		Contents: optCast[string](contentsI),
		End:      endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem342() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem342(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem267(aliasI, pathI any) (any, error) {
	return &ast.ImportSpec{
		Alias:    optCast[*ast.Ident](aliasI),
		Path:     pathI.(*ast.StaticString),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem267() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem267(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeItem412(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonglobalScopeItem412() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem412(stack["unexpectedI"])
}

func (c *current) onglobalScopeItem409(lineI any) (any, error) {
	line := lineI.(string)
	return &ast.BadImportSpec{
			Line:     line,
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid import spec",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        len(line),
				Annotation: "expected an import path, optionally preceded by an import alias",
			}),
		}
}

func (p *parser) callonglobalScopeItem409() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem409(stack["lineI"])
}

func (c *current) onglobalScopeItem227(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonglobalScopeItem227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem227(stack["itmI"])
}

func (c *current) onglobalScopeItem474() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem474() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem474()
}

func (c *current) onglobalScopeItem482() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem482() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem482()
}

func (c *current) onglobalScopeItem479(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeItem479() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem479(stack["posI"])
}

func (c *current) onglobalScopeItem468(rParenI any) (any, error) {
	return rParenI, nil
}

func (p *parser) callonglobalScopeItem468() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem468(stack["rParenI"])
}

func (c *current) onglobalScopeItem490() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem490() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem490()
}

func (c *current) onglobalScopeItem489() (any, error) {
	return nil, &fileerr.Error{
		Message: "missing `)`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected `)` to close the import group",
		}),
	}
}

func (p *parser) callonglobalScopeItem489() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem489()
}

func (c *current) onglobalScopeItem191(lParenI, itmsI, rParenI any) (any, error) {
	return ast.Import{
		LParen:   lParenI.(*ast.Position),
		Imports:  sliceOf[ast.ImportScopeItem](itmsI),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem191() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem191(stack["lParenI"], stack["itmsI"], stack["rParenI"])
}

func (c *current) onglobalScopeItem502() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeItem502() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem502()
}

func (c *current) onglobalScopeItem509(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonglobalScopeItem509() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem509(stack["unexpectedI"])
}

func (c *current) onglobalScopeItem496(startI, badI, endI any) (any, error) {
	return &ast.Import{
			Imports: []ast.ImportScopeItem{
				ast.BadImportSpec{
					Line:     badI.(string),
					Position: *startI.(*ast.Position),
				},
			},
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid import",
			ErrorAnnotation: anno(c, annotation{
				Start: *startI.(*ast.Position),
				End:   *endI.(*ast.Position),
				Annotation: "expected an import path, optionally preceded by an import alias\n" +
					"or a group of imports",
			}),
			Example: "`import \"fmt\"`",
		}
}

func (p *parser) callonglobalScopeItem496() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem496(stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onglobalScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonglobalScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem1(stack["itmI"])
}

func (c *current) onScope5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope5()
}

func (c *current) onScope11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonScope11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope11()
}

func (c *current) onScope16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope16()
}

func (c *current) onScope13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonScope13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope13(stack["posI"])
}

func (c *current) onScope27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope27()
}

func (c *current) onScope3(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonScope3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope3(stack["lBraceI"])
}

func (c *current) onScope42() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScope42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope42()
}

func (c *current) onScope50() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope50()
}

func (c *current) onScope47(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonScope47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope47(stack["posI"])
}

func (c *current) onScope57(rBraceI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonScope57() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope57(stack["rBraceI"])
}

func (c *current) onScope36(rBraceI any) (any, error) {
	return rBraceI.(*ast.Position), nil
}

func (p *parser) callonScope36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope36(stack["rBraceI"])
}

func (c *current) onScope60() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope60()
}

func (c *current) onScope58(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed `{`",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "expected a closing `}` for this `{`",
		}),
	}
}

func (p *parser) callonScope58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope58(stack["posI"])
}

func (c *current) onScope1(lBraceI, itemsI, rBraceI any) (any, error) {
	return &ast.Scope{
		LBrace: pos(c),
		Items:  sliceOf[ast.ScopeItem](itemsI),
		RBrace: rBraceI.(*ast.Position),
	}, nil
}

func (p *parser) callonScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["lBraceI"], stack["itemsI"], stack["rBraceI"])
}

func (c *current) onScopeItem7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScopeItem7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopeItem7()
}

func (c *current) onScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopeItem1(stack["itmI"])
}

func (c *current) onValidScopeItem7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonValidScopeItem7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValidScopeItem7()
}

func (c *current) onValidScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonValidScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValidScopeItem1(stack["itmI"])
}

func (c *current) onvalidScopeItem3(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeItem3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem3(stack["textI"])
}

func (c *current) onvalidScopeItem38() (any, error) {
	return (*ast.Ident)(nil), nil
}

func (p *parser) callonvalidScopeItem38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem38()
}

func (c *current) onvalidScopeItem63(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeItem63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem63(stack["identI"])
}

func (c *current) onvalidScopeItem58(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonvalidScopeItem58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem58(stack["identI"])
}

func (c *current) onvalidScopeItem93(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeItem93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem93(stack["identI"])
}

func (c *current) onvalidScopeItem100() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem100()
}

func (c *current) onvalidScopeItem106(identI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeItem106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem106(stack["identI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeItem88(identI, startI, unexpectedI, endI any) (any, error) {
	return identI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens after break/continue label")
}

func (p *parser) callonvalidScopeItem88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem88(stack["identI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeItem166() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem166()
}

func (c *current) onvalidScopeItem172(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeItem172() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem172(stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeItem161(startI, unexpectedI, endI any) (any, error) {
	return (*ast.Ident)(nil), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected nothing, or a label")
}

func (p *parser) callonvalidScopeItem161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem161(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeItem33(labelI any) (any, error) {
	return &ast.Continue{
		Label:    labelI.(*ast.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeItem33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem33(stack["labelI"])
}

func (c *current) onvalidScopeItem232() (any, error) {
	return (*ast.Ident)(nil), nil
}

func (p *parser) callonvalidScopeItem232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem232()
}

func (c *current) onvalidScopeItem257(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeItem257() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem257(stack["identI"])
}

func (c *current) onvalidScopeItem252(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonvalidScopeItem252() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem252(stack["identI"])
}

func (c *current) onvalidScopeItem287(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeItem287() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem287(stack["identI"])
}

func (c *current) onvalidScopeItem294() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem294() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem294()
}

func (c *current) onvalidScopeItem300(identI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeItem300() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem300(stack["identI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeItem282(identI, startI, unexpectedI, endI any) (any, error) {
	return identI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens after break/continue label")
}

func (p *parser) callonvalidScopeItem282() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem282(stack["identI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeItem360() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem360() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem360()
}

func (c *current) onvalidScopeItem366(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeItem366() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem366(stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeItem355(startI, unexpectedI, endI any) (any, error) {
	return (*ast.Ident)(nil), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected nothing, or a label")
}

func (p *parser) callonvalidScopeItem355() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem355(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeItem227(labelI any) (any, error) {
	return &ast.Break{
		Label:    labelI.(*ast.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeItem227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem227(stack["labelI"])
}

func (c *current) onvalidScopeItem432() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonvalidScopeItem432() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem432()
}

func (c *current) onvalidScopeItem426(commentI any) (any, error) {
	return &ast.HTMLComment{
		Comment:  commentI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeItem426() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem426(stack["commentI"])
}

func (c *current) onvalidScopeItem467() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem467() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem467()
}

func (c *current) onvalidScopeItem473() error {
	pushStart(c)
	return nil
}

func (p *parser) callonvalidScopeItem473() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem473()
}

func (c *current) onvalidScopeItem478() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem478() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem478()
}

func (c *current) onvalidScopeItem475(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeItem475() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem475(stack["posI"])
}

func (c *current) onvalidScopeItem489() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvalidScopeItem489() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem489()
}

func (c *current) onvalidScopeItem465(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeItem465() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem465(stack["lParenI"])
}

func (c *current) onvalidScopeItem506() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvalidScopeItem506() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem506()
}

func (c *current) onvalidScopeItem514() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem514() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem514()
}

func (c *current) onvalidScopeItem511(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeItem511() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem511(stack["posI"])
}

func (c *current) onvalidScopeItem521(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonvalidScopeItem521() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem521(stack["rParenI"])
}

func (c *current) onvalidScopeItem495(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeItem495() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem495(stack["rParenI"])
}

func (c *current) onvalidScopeItem523() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem523() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem523()
}

func (c *current) onvalidScopeItem522() (any, error) {
	return unclosedList(c, "attribute list")
}

func (p *parser) callonvalidScopeItem522() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem522()
}

func (c *current) onvalidScopeItem553() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeItem553() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem553()
}

func (c *current) onvalidScopeItem559(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeItem559() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem559(stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeItem548(startI, unexpectedI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "use of non-HTML5 doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      *startI.(*ast.Position),
			End:        *endI.(*ast.Position),
			EndOffset:  -1,
			Annotation: "this is not part of the HTML5 doctype",
		}),
		ShouldBe: "`!doctype(html)`",
	}
}

func (p *parser) callonvalidScopeItem548() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem548(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeItem458() (any, error) {
	return &ast.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeItem458() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeItem458()
}

func (c *current) onBadItem16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBadItem16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem16()
}

func (c *current) onBadItem25(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonBadItem25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem25(stack["unexpectedI"])
}

func (c *current) onBadItem2(endI any) (any, error) {
	return &ast.BadItem{
			Line:     string(c.globalStore["lines"].([]string)[pos(c).Line-1]),
			Body:     optCast[ast.Body](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "potential use of reserved word",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        *endI.(*ast.Position),
				EndOffset:  -1,
				Annotation: "cannot use reserved word",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this is supposed to be an element, uppercase the first letter"},
				{Suggestion: "if this is Go code, you are seeing this error because you have a syntax error"},
			},
		}
}

func (p *parser) callonBadItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem2(stack["endI"])
}

func (c *current) onBadItem79(lineI, bodyI any) (any, error) {
	line := concat(lineI)

	firstWordLen := strings.IndexByte(line, ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(line))
	}

	return &ast.BadItem{
			Line:     line,
			Body:     optCast[ast.Body](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "unrecognized directive or invalid element name",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a valid directive or an element name",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
				{Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
				{
					Suggestion: "use a valid directive",
					ShouldBe: "a block (`block`), code (`-`), a conditional (`if`, `else if`, `else`, `switch`),\n" +
						"a loop (`for`), & attributes (`&`), a component call (`+`), an arrow block (`>`)",
				},
			},
		}
}

func (p *parser) callonBadItem79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem79(stack["lineI"], stack["bodyI"])
}

func (c *current) onLoneBody1(bodyI any) (any, error) {
	return &ast.BadItem{
			Body:     optCast[ast.Body](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "lone body",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "this body is not attached to a directive or element",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this belongs to a directive, make sure it starts on the same line"},
				{Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
				{
					Suggestion: "place a directive requiring a body in front",
					ShouldBe: "a block (`block`), a conditional (`if`, `else if`, `else`),\n" +
						"a loop (`for`), a component call (`+`)",
				},
			},
		}
}

func (p *parser) callonLoneBody1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoneBody1(stack["bodyI"])
}

func (c *current) onGlobalCode1(stmtI any) (any, error) {
	return &ast.Code{Statements: []*ast.GoCode{stmtI.(*ast.GoCode)}, Position: pos(c)}, nil
}

func (p *parser) callonGlobalCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalCode1(stack["stmtI"])
}

func (c *current) onexplicitCode3() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonexplicitCode3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode3()
}

func (c *current) onexplicitCode9() error {
	editState(c, func(s *State) {
		s.Indentation.Target = c.pos.col - 1 // col is 1-indexed
	})
	return nil
}

func (p *parser) callonexplicitCode9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode9()
}

func (c *current) onexplicitCode1(codeStatementsI any) (any, error) {
	return &ast.Code{
		Statements: codeStatementsI.([]*ast.GoCode),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonexplicitCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode1(stack["codeStatementsI"])
}

func (c *current) oncodeStatements2(firstLineI, restI any) (any, error) {
	restIs := slice(restI)
	stmts := make([]*ast.GoCode, 1+len(restIs))
	stmts[0] = firstLineI.(*ast.GoCode)
	for i, restI := range restIs {
		stmts[i+1] = restI.(*ast.GoCode)
	}
	return stmts, nil
}

func (p *parser) calloncodeStatements2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatements2(stack["firstLineI"], stack["restI"])
}

func (c *current) oncodeStatements9() (any, error) {
	return ([]*ast.GoCode)(nil), &fileerr.Error{
		Message: "empty code block",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected code",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "either write some code, or delete this line"},
		},
	}
}

func (p *parser) calloncodeStatements9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatements9()
}

func (c *current) oncodeStatement2(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) calloncodeStatement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement2(stack["stmtI"])
}

func (c *current) oncodeStatement39(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) calloncodeStatement39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement39(stack["stmtI"])
}

func (c *current) onimplicitCode1(stmtI any) (any, error) {
	return &ast.Code{
		Statements: []ast.GoCode{deref[ast.GoCode](stmtI)},
		Position:   pos(c),
	}, nil
}

func (p *parser) callonimplicitCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitCode1(stack["stmtI"])
}

func (c *current) onimplicitAhead18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonimplicitAhead18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead18()
}

func (c *current) onimplicitAhead4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonimplicitAhead4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead4()
}

func (c *current) onimplicitAhead71() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonimplicitAhead71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead71()
}

func (c *current) ondeclaration15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callondeclaration15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondeclaration15()
}

func (c *current) onvarDecl18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDecl18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDecl18()
}

func (c *current) onvarDecl27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDecl27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDecl27()
}

func (c *current) onvarDeclLine14() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDeclLine14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDeclLine14()
}

func (c *current) onReturn1(errI any) (any, error) {
	return &ast.Return{
		Err:      errI.(*ast.GoCode),
		Position: pos(c),
	}, nil
}

func (p *parser) callonReturn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn1(stack["errI"])
}

func (c *current) onreturnErr2() (any, error) {
	return (*ast.GoCode)(nil), nil
}

func (p *parser) callonreturnErr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr2()
}

func (c *current) onreturnErr22(errI any) (any, error) {
	return errI.(*ast.GoCode), nil
}

func (p *parser) callonreturnErr22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr22(stack["errI"])
}

func (c *current) onreturnErr54() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonreturnErr54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr54()
}

func (c *current) onreturnErr60(errI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonreturnErr60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr60(stack["errI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onreturnErr47(errI, startI, unexpectedI, endI any) (any, error) {
	return errI.(*ast.GoCode), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens after return value")
}

func (p *parser) callonreturnErr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr47(stack["errI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onreturnErr120() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonreturnErr120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr120()
}

func (c *current) onreturnErr126(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonreturnErr126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr126(stack["startI"], stack["unexpectedI"])
}

func (c *current) onreturnErr115(startI, unexpectedI, endI any) (any, error) {
	return (*ast.GoCode)(nil), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected nothing, or an error to be returned")
}

func (p *parser) callonreturnErr115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr115(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onComponent11(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponent11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent11(stack["identI"])
}

func (c *current) onComponent6(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonComponent6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent6(stack["identI"])
}

func (c *current) onComponent22() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonComponent22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent22()
}

func (c *current) onComponent17(startI, identI any) (any, error) {
	return invalidIdent(c, "component", *startI.(*ast.Position), concat(identI))
}

func (p *parser) callonComponent17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent17(stack["startI"], stack["identI"])
}

func (c *current) onComponent40() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonComponent40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent40()
}

func (c *current) onComponent39() (any, error) {
	return missingIdent(c, "component", "`comp foo()`", 1)
}

func (p *parser) callonComponent39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent39()
}

func (c *current) onComponent1(nameI, typeParamsI, paramsI, bodyI any) (any, error) {
	comp := paramsI.(ast.Component)
	comp.Name = nameI.(*ast.Ident)

	typeParams := optCast[ast.Component](typeParamsI)
	comp.LBracket = typeParams.LBracket
	comp.TypeParams = typeParams.TypeParams
	comp.RBracket = typeParams.RBracket

	comp.Body = optCast[ast.Body](bodyI)
	comp.Position = pos(c)
	return &comp, nil
}

func (p *parser) callonComponent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent1(stack["nameI"], stack["typeParamsI"], stack["paramsI"], stack["bodyI"])
}

func (c *current) oncomponentTypeParamList6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList6()
}

func (c *current) oncomponentTypeParamList12() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentTypeParamList12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList12()
}

func (c *current) oncomponentTypeParamList17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList17()
}

func (c *current) oncomponentTypeParamList14(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList14(stack["posI"])
}

func (c *current) oncomponentTypeParamList28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeParamList28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList28()
}

func (c *current) oncomponentTypeParamList4(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList4(stack["lBracketI"])
}

func (c *current) oncomponentTypeParamList48() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeParamList48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList48()
}

func (c *current) oncomponentTypeParamList56() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList56()
}

func (c *current) oncomponentTypeParamList53(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList53(stack["posI"])
}

func (c *current) oncomponentTypeParamList63(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentTypeParamList63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList63(stack["rBracketI"])
}

func (c *current) oncomponentTypeParamList37(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList37(stack["rBracketI"])
}

func (c *current) oncomponentTypeParamList65() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList65()
}

func (c *current) oncomponentTypeParamList64() (any, error) {
	return unclosedList(c, "component type parameters")
}

func (p *parser) calloncomponentTypeParamList64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList64()
}

func (c *current) oncomponentTypeParamList1(lBracketI, paramsI, rBracketI any) (any, error) {
	return ast.Component{
		LBracket:   lBracketI.(*ast.Position),
		TypeParams: optCast[[]*ast.TypeParam](paramsI),
		RBracket:   rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentTypeParamList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList1(stack["lBracketI"], stack["paramsI"], stack["rBracketI"])
}

func (c *current) ontypeParams15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callontypeParams15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParams15()
}

func (c *current) ontypeParams1(firstI, restI any) (any, error) {
	return collectList[*ast.TypeParam](firstI, restI, -1), nil
}

func (p *parser) callontypeParams1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParams1(stack["firstI"], stack["restI"])
}

func (c *current) ontypeParam8(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callontypeParam8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam8(stack["identI"])
}

func (c *current) ontypeParam14() (any, error) {
	return invalidIdent(c, "type parameter", pos(c), string(c.text))
}

func (p *parser) callontypeParam14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam14()
}

func (c *current) ontypeParam30() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callontypeParam30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam30()
}

func (c *current) ontypeParam35(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callontypeParam35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam35(stack["identI"])
}

func (c *current) ontypeParam41() (any, error) {
	return invalidIdent(c, "type parameter", pos(c), string(c.text))
}

func (p *parser) callontypeParam41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam41()
}

func (c *current) ontypeParam4(firstI, restI any) (any, error) {
	return collectList[*ast.Ident](firstI, restI, -1), nil
}

func (p *parser) callontypeParam4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam4(stack["firstI"], stack["restI"])
}

func (c *current) ontypeParam48() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callontypeParam48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam48()
}

func (c *current) ontypeParam1(namesI, posI, typeI any) (any, error) {
	return &ast.TypeParam{
		Names: namesI.([]*ast.Ident),
		Type:  typeI.(*ast.Type),
	}, nil
}

func (p *parser) callontypeParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam1(stack["namesI"], stack["posI"], stack["typeI"])
}

func (c *current) ontypeParamType2(tI any) (any, error) {
	return tI, nil
}

func (p *parser) callontypeParamType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParamType2(stack["tI"])
}

func (c *current) ontypeParamType9() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callontypeParamType9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParamType9()
}

func (c *current) ontypeParamType8() (any, error) {
	return (*ast.Type)(nil), &fileerr.Error{
		Message: "type param: missing type",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a space and a type",
		}),
	}
}

func (p *parser) callontypeParamType8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParamType8()
}

func (c *current) oncomponentParamList7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList7()
}

func (c *current) oncomponentParamList13() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentParamList13() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList13()
}

func (c *current) oncomponentParamList18() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList18()
}

func (c *current) oncomponentParamList15(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList15(stack["posI"])
}

func (c *current) oncomponentParamList29() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParamList29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList29()
}

func (c *current) oncomponentParamList5(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList5(stack["lParenI"])
}

func (c *current) oncomponentParamList49() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParamList49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList49()
}

func (c *current) oncomponentParamList57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList57()
}

func (c *current) oncomponentParamList54(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList54(stack["posI"])
}

func (c *current) oncomponentParamList64(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentParamList64() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList64(stack["rParenI"])
}

func (c *current) oncomponentParamList38(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList38(stack["rParenI"])
}

func (c *current) oncomponentParamList66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList66()
}

func (c *current) oncomponentParamList65() (any, error) {
	return unclosedList(c, "component parameters")
}

func (p *parser) calloncomponentParamList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList65()
}

func (c *current) oncomponentParamList2(lParenI, paramsI, rParenI any) (any, error) {
	return ast.Component{
		LParen: lParenI.(*ast.Position),
		Params: optCast[[]*ast.ComponentParam](paramsI),
		RParen: rParenI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentParamList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList2(stack["lParenI"], stack["paramsI"], stack["rParenI"])
}

func (c *current) oncomponentParamList73() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList73()
}

func (c *current) oncomponentParamList72() (any, error) {
	return ast.Component{}, &fileerr.Error{
		Message: "component: missing parameters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a parameter list",
		}),
		Example: "`comp foo(bar string, baz: 123)`",
	}
}

func (p *parser) calloncomponentParamList72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList72()
}

func (c *current) oncomponentParams15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParams15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParams15()
}

func (c *current) oncomponentParams1(firstI, restI any) (any, error) {
	return collectList[*ast.ComponentParam](firstI, restI, -1), nil
}

func (p *parser) calloncomponentParams1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParams1(stack["firstI"], stack["restI"])
}

func (c *current) oncomponentParam5(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) calloncomponentParam5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam5(stack["identI"])
}

func (c *current) oncomponentParam11() (any, error) {
	return invalidIdent(c, "component parameter", pos(c), string(c.text))
}

func (p *parser) calloncomponentParam11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam11()
}

func (c *current) oncomponentParam18() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParam18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam18()
}

func (c *current) oncomponentParam1(nameI, posI, typeI, defaultI any) (any, error) {
	paramDefault := optCast[ast.ComponentParam](defaultI)

	p := &ast.ComponentParam{
		Name:     nameI.(*ast.Ident),
		Type:     optCast[*ast.Type](typeI),
		Colon:    paramDefault.Colon,
		Default:  paramDefault.Default,
		Position: pos(c),
	}
	if p.Type == nil && p.Default == nil {
		return p, &fileerr.Error{
			Message: "component parameter: need either a type or a default",
			ErrorAnnotation: anno(c, annotation{
				Start:      p.Position,
				Len:        len(p.Name.Ident),
				Annotation: "param needs either a type or a default",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "give this parameter a type", Code: "`" + p.Name.Ident + " string`"},
				{Suggestion: "give this parameter a default with an inferrable type", Code: "`" + p.Name.Ident + ": \"woof\"`"},
			},
		}
	}

	return p, nil
}

func (p *parser) calloncomponentParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam1(stack["nameI"], stack["posI"], stack["typeI"], stack["defaultI"])
}

func (c *current) oncomponentParamType1(tI any) (any, error) {
	return tI, nil
}

func (p *parser) calloncomponentParamType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamType1(stack["tI"])
}

func (c *current) oncomponentParamDefault6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamDefault6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefault6()
}

func (c *current) oncomponentParamDefault1(colonI, exprI any) (any, error) {
	return ast.ComponentParam{
		Colon:   colonI.(*ast.Position),
		Default: exprI.(*ast.GoCode),
	}, nil
}

func (p *parser) calloncomponentParamDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefault1(stack["colonI"], stack["exprI"])
}

func (c *current) oncomponentParamDefaultValue2(exprI any) (any, error) {
	return exprI.(*ast.GoCode), nil
}

func (p *parser) calloncomponentParamDefaultValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue2(stack["exprI"])
}

func (c *current) oncomponentParamDefaultValue6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamDefaultValue6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue6()
}

func (c *current) oncomponentParamDefaultValue5() (any, error) {
	return (*ast.GoCode)(nil), &fileerr.Error{
		Message: "component param: missing default",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "expected a default because of this `:`",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "remove the `:`, if you didn't mean to define a default"},
		},
	}
}

func (p *parser) calloncomponentParamDefaultValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue5()
}

func (c *current) onComponentCall1(headerI, bodyI any) (any, error) {
	cc := headerI.(ast.ComponentCall)
	cc.Body = optCast[ast.Body](bodyI)
	cc.Position = pos(c)
	return &cc, nil
}

func (p *parser) callonComponentCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCall1(stack["headerI"], stack["bodyI"])
}

func (c *current) onComponentCallHeader9(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponentCallHeader9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader9(stack["identI"])
}

func (c *current) onComponentCallHeader5(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonComponentCallHeader5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader5(stack["identI"])
}

func (c *current) onComponentCallHeader17(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponentCallHeader17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader17(stack["identI"])
}

func (c *current) onComponentCallHeader23(identI any) (any, error) {
	return invalidIdent(c, "component call", pos(c), concat(identI))
}

func (p *parser) callonComponentCallHeader23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader23(stack["identI"])
}

func (c *current) onComponentCallHeader37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonComponentCallHeader37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader37()
}

func (c *current) onComponentCallHeader36() (any, error) {
	return missingIdent(c, "component call", "`+foo()`", 1)
}

func (p *parser) callonComponentCallHeader36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader36()
}

func (c *current) onComponentCallHeader1(namespaceI, nameI, typeArgsI, argsI any) (any, error) {
	cc := argsI.(ast.ComponentCall)
	cc.Namespace = optCast[*ast.Ident](namespaceI)
	cc.Name = nameI.(*ast.Ident)

	typeArgs := optCast[ast.ComponentCall](typeArgsI)
	cc.LBracket = typeArgs.LBracket
	cc.TypeArgs = typeArgs.TypeArgs
	cc.RBracket = typeArgs.RBracket

	return cc, nil
}

func (p *parser) callonComponentCallHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader1(stack["namespaceI"], stack["nameI"], stack["typeArgsI"], stack["argsI"])
}

func (c *current) oncomponentTypeArgList6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList6()
}

func (c *current) oncomponentTypeArgList12() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentTypeArgList12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList12()
}

func (c *current) oncomponentTypeArgList17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList17()
}

func (c *current) oncomponentTypeArgList14(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList14(stack["posI"])
}

func (c *current) oncomponentTypeArgList28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeArgList28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList28()
}

func (c *current) oncomponentTypeArgList4(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList4(stack["lBracketI"])
}

func (c *current) oncomponentTypeArgList48() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeArgList48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList48()
}

func (c *current) oncomponentTypeArgList56() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList56()
}

func (c *current) oncomponentTypeArgList53(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList53(stack["posI"])
}

func (c *current) oncomponentTypeArgList63(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentTypeArgList63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList63(stack["rBracketI"])
}

func (c *current) oncomponentTypeArgList37(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList37(stack["rBracketI"])
}

func (c *current) oncomponentTypeArgList65() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList65()
}

func (c *current) oncomponentTypeArgList64() (any, error) {
	return unclosedList(c, "component type arguments")
}

func (p *parser) calloncomponentTypeArgList64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList64()
}

func (c *current) oncomponentTypeArgList1(lBracketI, argsI, rBracketI any) (any, error) {
	return ast.ComponentCall{
		LBracket: lBracketI.(*ast.Position),
		TypeArgs: optCast[[]*ast.TypeArg](argsI),
		RBracket: rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentTypeArgList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList1(stack["lBracketI"], stack["argsI"], stack["rBracketI"])
}

func (c *current) ontypeArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callontypeArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArgs15()
}

func (c *current) ontypeArgs1(firstI, restI any) (any, error) {
	return collectList[*ast.Type](firstI, restI, -1), nil
}

func (p *parser) callontypeArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArgs1(stack["firstI"], stack["restI"])
}

func (c *current) ontypeArg2(tI any) (any, error) {
	return tI, nil
}

func (p *parser) callontypeArg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArg2(stack["tI"])
}

func (c *current) ontypeArg6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callontypeArg6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArg6()
}

func (c *current) ontypeArg5() (any, error) {
	return &ast.Type{Position: pos(c)}, &fileerr.Error{
		Message: "invalid or missing type argument",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a type",
		}),
	}
}

func (p *parser) callontypeArg5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArg5()
}

func (c *current) oncomponentArgList7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList7()
}

func (c *current) oncomponentArgList13() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentArgList13() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList13()
}

func (c *current) oncomponentArgList18() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList18()
}

func (c *current) oncomponentArgList15(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList15(stack["posI"])
}

func (c *current) oncomponentArgList29() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgList29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList29()
}

func (c *current) oncomponentArgList5(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList5(stack["lParenI"])
}

func (c *current) oncomponentArgList49() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgList49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList49()
}

func (c *current) oncomponentArgList57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList57()
}

func (c *current) oncomponentArgList54(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList54(stack["posI"])
}

func (c *current) oncomponentArgList64(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentArgList64() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList64(stack["rParenI"])
}

func (c *current) oncomponentArgList38(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList38(stack["rParenI"])
}

func (c *current) oncomponentArgList66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList66()
}

func (c *current) oncomponentArgList65() (any, error) {
	return unclosedList(c, "component arguments")
}

func (p *parser) calloncomponentArgList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList65()
}

func (c *current) oncomponentArgList2(lParenI, argsI, rParenI any) (any, error) {
	return ast.ComponentCall{
		LParen: plParenI.(*ast.Position),
		Args:   optCast[[]*ast.ComponentArg](argsI),
		RParen: rParenI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentArgList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList2(stack["lParenI"], stack["argsI"], stack["rParenI"])
}

func (c *current) oncomponentArgList73() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList73()
}

func (c *current) oncomponentArgList72() (any, error) {
	return ast.ComponentCall{}, &fileerr.Error{
		Message: "component call: missing arguments",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an argument list",
		}),
		Example: "`+foo(bar: \"foo\", baz: 123)`",
	}
}

func (p *parser) calloncomponentArgList72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList72()
}

func (c *current) oncomponentArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgs15()
}

func (c *current) oncomponentArgs1(firstI, restI any) (any, error) {
	return collectList[*ast.ComponentArg](firstI, restI, -1), nil
}

func (p *parser) calloncomponentArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgs1(stack["firstI"], stack["restI"])
}

func (c *current) oncomponentArg5(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) calloncomponentArg5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg5(stack["identI"])
}

func (c *current) oncomponentArg11() (any, error) {
	return invalidIdent(c, "component argument", pos(c), string(c.text))
}

func (p *parser) calloncomponentArg11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg11()
}

func (c *current) oncomponentArg1(nameI, valI any) (any, error) {
	return &ast.ComponentArg{
		Name:  nameI.(ast.Ident),
		Value: optCast[ast.Expression](valI),
	}, nil
}

func (p *parser) calloncomponentArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg1(stack["nameI"], stack["valI"])
}

func (c *current) oncomponentArgValue9() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgValue9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue9()
}

func (c *current) oncomponentArgValue2(exprI any) (any, error) {
	return exprI, nil
}

func (p *parser) calloncomponentArgValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue2(stack["exprI"])
}

func (c *current) oncomponentArgValue22() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgValue22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue22()
}

func (c *current) oncomponentArgValue15(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "missing component argument value",
		ErrorAnnotation: anno(c, annotation{
			Start:      *posI.(*ast.Position),
			Annotation: "expected a value",
		}),
		Example: "`argName: 123`",
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "remember to always write the name of the argument before it's value"},
		},
	}
}

func (p *parser) calloncomponentArgValue15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue15(stack["posI"])
}

func (c *current) onComponentCallBody1(bI any) (any, error) {
	return bI, nil
}

func (p *parser) callonComponentCallBody1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallBody1(stack["bI"])
}

func (c *current) oncomponentCallBody4() (any, error) {
	return nil, nil
}

func (p *parser) calloncomponentCallBody4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody4()
}

func (c *current) oncomponentCallBody27(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) calloncomponentCallBody27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody27(stack["unexpectedI"])
}

func (c *current) oncomponentCallBody24(uI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "expected a body or the end of command",
		}),
		Example: "`+foo()`\n`+foo() { ... }`\n`+foo() _[ ... ]`\n`+foo() _{ ... }`",
	}
}

func (p *parser) calloncomponentCallBody24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody24(stack["uI"], stack["endI"])
}

func (c *current) onUnderscoreBlockShorthand1(bodyI any) (any, error) {
	return &ast.UnderscoreBlockShorthand{
		Body:     optCast[ast.Body](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonUnderscoreBlockShorthand1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnderscoreBlockShorthand1(stack["bodyI"])
}

func (c *current) onBlock14(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock14(stack["identI"])
}

func (c *current) onBlock9(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonBlock9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock9(stack["identI"])
}

func (c *current) onBlock25() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBlock25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock25()
}

func (c *current) onBlock20(startI, identI any) (any, error) {
	return invalidIdent(c, "block", *startI.(*ast.Position), concat(identI))
}

func (p *parser) callonBlock20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock20(stack["startI"], stack["identI"])
}

func (c *current) onBlock43() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBlock43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock43()
}

func (c *current) onBlock42() (any, error) {
	return missingIdent(c, "block", "`block bark [ woof ]`", 1)
}

func (p *parser) callonBlock42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock42()
}

func (c *current) onBlock4(nameI any) (any, error) {
	return &ast.Block{
		Name:     nameI.(*ast.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlock4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock4(stack["nameI"])
}

func (c *current) onBlock1(blockI, bodyI any) (any, error) {
	block := blockI.(ast.Block)
	block.Body = optCast[ast.Body](bodyI)
	return &block, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["blockI"], stack["bodyI"])
}

func (c *current) onIf1(condI, thenI, elseIfsI, elseI any) (any, error) {
	return &ast.If{
		Condition: condI.(*ast.IfExpression),
		Then:      optCast[ast.Body](thenI),
		ElseIfs:   sliceOf[*ast.ElseIf](elseIfsI),
		Else:      optCast[*ast.Else](elseI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonIf1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIf1(stack["condI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onElseIf7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonElseIf7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf7()
}

func (c *current) onElseIf1(condI, thenI any) (any, error) {
	return &ast.ElseIf{
		Condition: condI.(*ast.IfExpression),
		Then:      optCast[ast.Body](thenI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonElseIf1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf1(stack["condI"], stack["thenI"])
}

func (c *current) onElse7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonElse7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse7()
}

func (c *current) onElse1(thenI any) (any, error) {
	return &ast.Else{
		Then:     optCast[ast.Body](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse1(stack["thenI"])
}

func (c *current) onifCondition2(condI any) (any, error) {
	return condI, nil
}

func (p *parser) callonifCondition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition2(stack["condI"])
}

func (c *current) onifCondition11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonifCondition11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition11()
}

func (c *current) onifCondition9(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       *posI.(*ast.Position),
			StartOffset: 1,
			Annotation:  "expected an expression",
		}),
	}
}

func (p *parser) callonifCondition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition9(stack["posI"])
}

func (c *current) onifCondition8(posI any) (any, error) {
	return (*ast.IfExpression)(nil), nil
}

func (p *parser) callonifCondition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition8(stack["posI"])
}

func (c *current) onSwitch7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonSwitch7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch7()
}

func (c *current) onSwitch1(comparatorI, endI, casesI any) (any, error) {
	s := ast.Switch{
		Comparator: comparatorI.(*ast.GoCode),
		Cases:      casesI.([]*ast.Case),
		Position:   pos(c),
	}

	for _, c := range s.Cases {
		if c.Expression != nil {
			return s, nil
		}
	}

	return s, &fileerr.Error{
		Message: "switch: no cases",
		ErrorAnnotation: anno(c, annotation{
			ContextEndDelta: 1,
			Start:           pos(c),
			End:             *endI.(*ast.Position),
			Annotation:      "expected switch to have at least one non-default case",
		}),
	}
}

func (p *parser) callonSwitch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch1(stack["comparatorI"], stack["endI"], stack["casesI"])
}

func (c *current) onswitchComparator2() (any, error) {
	return (*ast.GoCode)(nil), nil
}

func (p *parser) callonswitchComparator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator2()
}

func (c *current) onswitchComparator8(compI any) (any, error) {
	return compI.(*ast.GoCode), nil
}

func (p *parser) callonswitchComparator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator8(stack["compI"])
}

func (c *current) onswitchComparator25() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchComparator25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator25()
}

func (c *current) onswitchComparator34() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchComparator34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator34()
}

func (c *current) onswitchComparator18(compI, startI, endI any) (any, error) {
	return compI.(*ast.GoCode),
		newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "switch comparator terminated early")
}

func (p *parser) callonswitchComparator18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator18(stack["compI"], stack["startI"], stack["endI"])
}

func (c *current) onswitchCases5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchCases5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases5()
}

func (c *current) onswitchCases11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonswitchCases11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases11()
}

func (c *current) onswitchCases16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchCases16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases16()
}

func (c *current) onswitchCases13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonswitchCases13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases13(stack["posI"])
}

func (c *current) onswitchCases27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases27()
}

func (c *current) onswitchCases3(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonswitchCases3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases3(stack["lBraceI"])
}

func (c *current) onswitchCases35() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases35()
}

func (c *current) onswitchCases48() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases48()
}

func (c *current) onswitchCases60() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases60()
}

func (c *current) onswitchCases68() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchCases68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases68()
}

func (c *current) onswitchCases65(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonswitchCases65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases65(stack["posI"])
}

func (c *current) onswitchCases75(rBraceI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonswitchCases75() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases75(stack["rBraceI"])
}

func (c *current) onswitchCases54(rBraceI any) (any, error) {
	return rBraceI.(*ast.Position), nil
}

func (p *parser) callonswitchCases54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases54(stack["rBraceI"])
}

func (c *current) onswitchCases78() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchCases78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases78()
}

func (c *current) onswitchCases76(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed `{`",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "expected a closing `}` for this `{`",
		}),
	}
}

func (p *parser) callonswitchCases76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases76(stack["posI"])
}

func (c *current) onswitchCases1(lBraceI, itms, endI any) (any, error) {
	cases := sliceOf[*ast.Case](itms)

	var firstDefault *ast.Case
	for _, ca := range cases {
		if ca.Expression != nil {
			continue
		}
		if firstDefault == nil {
			firstDefault = ca
			continue
		}

		return cases, &fileerr.Error{
			Message: "multiple default cases in switch",
			ErrorAnnotation: anno(c, annotation{
				Start:      ca.Position,
				Len:        len("default"),
				Annotation: "second default case",
			}),
			HintAnnotations: []fileerr.Annotation{
				anno(c, annotation{
					Start:      firstDefault.Position,
					Len:        len("default"),
					Annotation: "first default case",
				}),
			},
		}
	}

	return cases, nil
}

func (p *parser) callonswitchCases1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases1(stack["lBraceI"], stack["itms"], stack["endI"])
}

func (c *current) onpreFirstCase1() (any, error) {
	return nil, &fileerr.Error{
		Message: "switch: unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a `case` or `default`",
		}),
	}
}

func (p *parser) callonpreFirstCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreFirstCase1()
}

func (c *current) onswitchCase7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCase7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCase7()
}

func (c *current) onswitchCase1(caseI any) (any, error) {
	return caseI, nil
}

func (p *parser) callonswitchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCase1(stack["caseI"])
}

func (c *current) onCase12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonCase12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase12()
}

func (c *current) onCase15() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonCase15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase15()
}

func (c *current) onCase14() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "switch case: missing colon",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a colon",
		}),
	}
}

func (p *parser) callonCase14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase14()
}

func (c *current) onCase1(condI, colonI, thenI any) (any, error) {
	return &ast.Case{
		Expression: optCast[ast.Expression](condI),
		Colon:      colonI.(*ast.Position),
		Then:       optCast[ast.Body](thenI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase1(stack["condI"], stack["colonI"], stack["thenI"])
}

func (c *current) onDefault8() (any, error) {
	return pos(c), nil
}

func (p *parser) callonDefault8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault8()
}

func (c *current) onDefault11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonDefault11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault11()
}

func (c *current) onDefault10() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "switch case: missing colon",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a colon",
		}),
	}
}

func (p *parser) callonDefault10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault10()
}

func (c *current) onDefault1(colonI, thenI any) (any, error) {
	return &ast.Case{
		Colon:    colonI.(*ast.Position),
		Then:     optCast[ast.Body](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["colonI"], stack["thenI"])
}

func (c *current) oncaseCondition2(condI any) (any, error) {
	return condI, nil
}

func (p *parser) calloncaseCondition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition2(stack["condI"])
}

func (c *current) oncaseCondition11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncaseCondition11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition11()
}

func (c *current) oncaseCondition9(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       *posI.(*ast.Position),
			StartOffset: 1,
			Annotation:  "expected an expression",
		}),
	}
}

func (p *parser) calloncaseCondition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition9(stack["posI"])
}

func (c *current) oncaseCondition8(posI any) (any, error) {
	return nil, nil
}

func (p *parser) calloncaseCondition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition8(stack["posI"])
}

func (c *current) onswitchThen1(itmsI any) (any, error) {
	return &ast.Scope{Items: sliceOf[ast.ScopeItem](itmsI)}, nil
}

func (p *parser) callonswitchThen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchThen1(stack["itmsI"])
}

func (c *current) onswitchScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonswitchScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchScopeItem1(stack["itmI"])
}

func (c *current) onFor1(exprI, bodyI any) (any, error) {
	return &ast.For{
		Expression: optCast[ast.ForExpression](exprI),
		Body:       optCast[ast.Body](bodyI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonFor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onforExpression1(condI any) (any, error) {
	return condI, nil
}

func (p *parser) callonforExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onforExpression1(stack["condI"])
}

func (c *current) onElement1(nameI, voidI, attrsI, bodyI any) (any, error) {
	return ast.Element{
		Name:       concat(nameI),
		Attributes: optCast[[]ast.AttributeCollection](attrsI),
		Body:       optCast[ast.Body](bodyI),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["nameI"], stack["voidI"], stack["attrsI"], stack["bodyI"])
}

func (c *current) onRawElement1(bodyI any) (any, error) {
	return &ast.RawElement{
		Body:     bodyI.(*ast.BracketText),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawElement1(stack["bodyI"])
}

func (c *current) onrawElementBody2(btI any) (any, error) {
	return btI, nil
}

func (p *parser) callonrawElementBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody2(stack["btI"])
}

func (c *current) onrawElementBody32() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonrawElementBody32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody32()
}

func (c *current) onrawElementBody27(posI any) (any, error) {
	return (*ast.BracketText)(nil), &fileerr.Error{
		Message: "`!raw` with scope",
		ErrorAnnotation: anno(c, annotation{
			Start:      *posI.(*ast.Position),
			Annotation: "the `!raw` element must have bracketed text as body",
		}),
		ShouldBe: "`!raw [ ... ]`",
	}
}

func (p *parser) callonrawElementBody27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody27(stack["posI"])
}

func (c *current) onrawElementBody39() (any, error) {
	return (*ast.BracketText)(nil), &fileerr.Error{
		Message: "empty `!raw` element",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a body",
		}),
		ShouldBe: "`!raw [ ... ]`",
	}
}

func (p *parser) callonrawElementBody39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody39()
}

func (c *current) onrawElementBody64() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonrawElementBody64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody64()
}

func (c *current) onrawElementBody70(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonrawElementBody70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody70(stack["startI"], stack["unexpectedI"])
}

func (c *current) onrawElementBody59(startI, unexpectedI, endI any) (any, error) {
	return (*ast.BracketText)(nil),
		newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected the body of the `!raw` element")
}

func (p *parser) callonrawElementBody59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody59(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onIfExpression1(stmtI, condI any) (any, error) {
	return &ast.IfExpression{
		Statement: optCast[*ast.GoCode](stmtI),
		Condition: optCast[ast.Expression](condI),
	}, nil
}

func (p *parser) callonIfExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression1(stack["stmtI"], stack["condI"])
}

func (c *current) ongoIfConditionStatement33() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoIfConditionStatement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfConditionStatement33()
}

func (c *current) ongoIfConditionStatement1(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) callongoIfConditionStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfConditionStatement1(stack["stmtI"])
}

func (c *current) onRangeExpression8(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression8(stack["identI"])
}

func (c *current) onRangeExpression22(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression22(stack["identI"])
}

func (c *current) onRangeExpression31() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRangeExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression31()
}

func (c *current) onRangeExpression5(var1I, var2I, eqPosI, declaresI any) (any, error) {
	return ast.RangeExpression{
		Var1:      var1I.(*ast.Ident),
		Var2:      optGetTuple[*ast.Ident](var2I, -1),
		EqualSign: eqPosI.(*ast.Position),
		Declares:  declaresI != nil,
	}, nil
}

func (p *parser) callonRangeExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onRangeExpression1(varsI, orderedI, exprI any) (any, error) {
	e := optCast[ast.RangeExpression](varsI)
	e.Ordered = orderedI != nil
	e.RangeExpression = optCast[ast.Expression](exprI)
	e.Position = pos(c)
	return &e, nil
}

func (p *parser) callonRangeExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression1(stack["varsI"], stack["orderedI"], stack["exprI"])
}

func (c *current) onChainExpression4() (any, error) {
	return len(c.text), nil
}

func (p *parser) callonChainExpression4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression4()
}

func (c *current) onChainExpression19() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonChainExpression19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression19()
}

func (c *current) onChainExpression27(derefsI, rootI, checkRootI, chainI, defaultI, endPosI any) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(sliceOf[ast.ChainExpressionItem](chainI)) || defaultI != nil, nil
}

func (p *parser) callonChainExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression27(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression1(derefsI, rootI, checkRootI, chainI, defaultI, endPosI any) (any, error) {
	expr := optCast[ast.ChainExpression](defaultI)
	expr.Root = rootI.(*ast.RawGoCode)
	expr.CheckRoot = checkRootI != nil
	expr.Chain = sliceOf[ast.ChainExpressionItem](chainI)
	expr.DerefCount = derefsI.(int)
	expr.Position = pos(c)
	return &expr, nil
}

func (p *parser) callonChainExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression1(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onchainExpressionTrail5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonchainExpressionTrail5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionTrail5()
}

func (c *current) onchainExpressionTrail1(endI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "unable to parse this line or the lines below",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "did you mean to put a default? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonchainExpressionTrail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionTrail1(stack["endI"])
}

func (c *current) onchainExpressionRoot1() (any, error) {
	return &ast.RawGoCode{
		Code:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonchainExpressionRoot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot1()
}

func (c *current) onchainExpressionDefault4() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonchainExpressionDefault4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault4()
}

func (c *current) onchainExpressionDefault15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonchainExpressionDefault15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault15()
}

func (c *current) onchainExpressionDefault1(posI, exprI any) (any, error) {
	return ast.ChainExpression{
		DefaultOperator: posI.(*ast.Position),
		Default:         exprI.(*ast.GoCode),
	}, nil
}

func (p *parser) callonchainExpressionDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault1(stack["posI"], stack["exprI"])
}

func (c *current) onChainExpressionItem10() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonChainExpressionItem10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem10()
}

func (c *current) onChainExpressionItem15(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem15(stack["identI"])
}

func (c *current) onChainExpressionItem3(identI, checkI any) (any, error) {
	return &ast.DotIdentExpression{
		Ident:    identI.(*ast.Ident),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonChainExpressionItem3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onChainExpressionItem32() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonChainExpressionItem32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem32()
}

func (c *current) onChainExpressionItem29(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonChainExpressionItem29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem29(stack["posI"])
}

func (c *current) onChainExpressionItem52(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem52(stack["identI"])
}

func (c *current) onChainExpressionItem48(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonChainExpressionItem48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem48(stack["identI"])
}

func (c *current) onChainExpressionItem59(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem59(stack["identI"])
}

func (c *current) onChainExpressionItem71() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonChainExpressionItem71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem71()
}

func (c *current) onChainExpressionItem68(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonChainExpressionItem68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem68(stack["posI"])
}

func (c *current) onChainExpressionItem25(lParenI, ptrsI, packageI, typeI, rParenI, checkI any) (any, error) {
	return &ast.TypeAssertionExpression{
		LParen:       lParenI.(*ast.Position),
		PointerCount: len(slice(ptrsI)),
		Package:      optCast[*ast.Ident](packageI),
		Type:         typeI.(*ast.Ident),
		RParen:       rParenI.(*ast.Position),
		Check:        checkI != nil,
		Position:     pos(c),
	}, nil
}

func (p *parser) callonChainExpressionItem25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem25(stack["lParenI"], stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenI"], stack["checkI"])
}

func (c *current) onIndexExpression5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression5()
}

func (c *current) onIndexExpression11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonIndexExpression11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression11()
}

func (c *current) onIndexExpression16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression16()
}

func (c *current) onIndexExpression13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression13(stack["posI"])
}

func (c *current) onIndexExpression27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonIndexExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression27()
}

func (c *current) onIndexExpression3(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression3(stack["lBracketI"])
}

func (c *current) onIndexExpression49() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonIndexExpression49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression49()
}

func (c *current) onIndexExpression57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression57()
}

func (c *current) onIndexExpression54(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression54(stack["posI"])
}

func (c *current) onIndexExpression64(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonIndexExpression64() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression64(stack["rBracketI"])
}

func (c *current) onIndexExpression38(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression38(stack["rBracketI"])
}

func (c *current) onIndexExpression66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression66()
}

func (c *current) onIndexExpression65() (any, error) {
	return unclosedIndex(c, "index")
}

func (p *parser) callonIndexExpression65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression65()
}

func (c *current) onIndexExpression1(lBracketI, exprI, checkIndexI, rBracketI, checkValueI any) (any, error) {
	return &ast.IndexExpression{
		LBracket:   pos(c),
		Index:      exprI.(*ast.GoCode),
		RBracket:   rBracketI.(*ast.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonIndexExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression1(stack["lBracketI"], stack["exprI"], stack["checkIndexI"], stack["rBracketI"], stack["checkValueI"])
}

func (c *current) onParenExpression5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression5()
}

func (c *current) onParenExpression11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonParenExpression11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression11()
}

func (c *current) onParenExpression16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression16()
}

func (c *current) onParenExpression13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonParenExpression13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression13(stack["posI"])
}

func (c *current) onParenExpression27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonParenExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression27()
}

func (c *current) onParenExpression3(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonParenExpression3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression3(stack["lParenI"])
}

func (c *current) onParenExpression47() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonParenExpression47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression47()
}

func (c *current) onParenExpression55() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression55()
}

func (c *current) onParenExpression52(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonParenExpression52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression52(stack["posI"])
}

func (c *current) onParenExpression62(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonParenExpression62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression62(stack["rParenI"])
}

func (c *current) onParenExpression36(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonParenExpression36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression36(stack["rParenI"])
}

func (c *current) onParenExpression64() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression64()
}

func (c *current) onParenExpression63() (any, error) {
	return unclosedList(c, "parentheses")
}

func (p *parser) callonParenExpression63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression63()
}

func (c *current) onParenExpression1(lParenI, argsI, rParen, checkI any) (any, error) {
	return &ast.ParenExpression{
		LParen: pos(c),
		Args:   optCast[[]*ast.GoCode](argsI),
		RParen: rParen.(*ast.Position),
		Check:  checkI != nil,
	}, nil
}

func (p *parser) callonParenExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression1(stack["lParenI"], stack["argsI"], stack["rParen"], stack["checkI"])
}

func (c *current) onparenExpressionArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonparenExpressionArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs15()
}

func (c *current) onparenExpressionArgs1(firstI, restI any) (any, error) {
	return collectList[*ast.GoCode](firstI, restI, -1), nil
}

func (p *parser) callonparenExpressionArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onGoExpression20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression20()
}

func (c *current) onGoExpression33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression33()
}

func (c *current) onGoExpression39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGoExpression39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression39()
}

func (c *current) onGoExpression44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression44()
}

func (c *current) onGoExpression41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoExpression41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression41(stack["posI"])
}

func (c *current) onGoExpression55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression55()
}

func (c *current) onGoExpression31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonGoExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression31(stack["lParenI"])
}

func (c *current) onGoExpression60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoExpression60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression60(stack["identI"])
}

func (c *current) onGoExpression79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression79()
}

func (c *current) onGoExpression87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression87()
}

func (c *current) onGoExpression84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoExpression84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression84(stack["posI"])
}

func (c *current) onGoExpression94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGoExpression94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression94(stack["rParenI"])
}

func (c *current) onGoExpression68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonGoExpression68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression68(stack["rParenI"])
}

func (c *current) onGoExpression96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression96()
}

func (c *current) onGoExpression95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonGoExpression95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression95()
}

func (c *current) onGoExpression25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGoExpression25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onGoExpression7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonGoExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression7(stack["prefixI"], stack["bfI"])
}

func (c *current) onGoExpression116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression116()
}

func (c *current) onGoExpression134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression134()
}

func (c *current) onGoExpression155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression155()
}

func (c *current) onGoExpression187() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression187()
}

func (c *current) onGoExpression194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression194()
}

func (c *current) onGoExpression205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression205()
}

func (c *current) onGoExpression212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression212()
}

func (c *current) onGoExpression217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression217()
}

func (c *current) onGoExpression232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression232()
}

func (c *current) onGoExpression253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression253()
}

func (c *current) onGoExpression285() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression285()
}

func (c *current) onGoExpression292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression292()
}

func (c *current) onGoExpression303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression303()
}

func (c *current) onGoExpression310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression310()
}

func (c *current) onGoExpression315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression315()
}

func (c *current) onGoExpression319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression319()
}

func (c *current) onGoExpression220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoExpression220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression220(stack["valsI"], stack["endI"])
}

func (c *current) onGoExpression331() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression331() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression331()
}

func (c *current) onGoExpression102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoExpression102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression102()
}

func (c *current) onGoExpression1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonGoExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression1(stack["codesI"])
}

func (c *current) onnestedGoCode20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode20()
}

func (c *current) onnestedGoCode33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode33()
}

func (c *current) onnestedGoCode39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonnestedGoCode39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode39()
}

func (c *current) onnestedGoCode44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode44()
}

func (c *current) onnestedGoCode41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode41(stack["posI"])
}

func (c *current) onnestedGoCode55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode55()
}

func (c *current) onnestedGoCode31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode31(stack["lParenI"])
}

func (c *current) onnestedGoCode60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonnestedGoCode60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode60(stack["identI"])
}

func (c *current) onnestedGoCode79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode79()
}

func (c *current) onnestedGoCode87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode87()
}

func (c *current) onnestedGoCode84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode84(stack["posI"])
}

func (c *current) onnestedGoCode94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonnestedGoCode94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode94(stack["rParenI"])
}

func (c *current) onnestedGoCode68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode68(stack["rParenI"])
}

func (c *current) onnestedGoCode96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode96()
}

func (c *current) onnestedGoCode95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonnestedGoCode95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode95()
}

func (c *current) onnestedGoCode25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonnestedGoCode25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onnestedGoCode7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonnestedGoCode7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode7(stack["prefixI"], stack["bfI"])
}

func (c *current) onnestedGoCode116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode116()
}

func (c *current) onnestedGoCode134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode134()
}

func (c *current) onnestedGoCode155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode155()
}

func (c *current) onnestedGoCode187() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonnestedGoCode187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode187()
}

func (c *current) onnestedGoCode194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode194()
}

func (c *current) onnestedGoCode205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode205()
}

func (c *current) onnestedGoCode212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode212()
}

func (c *current) onnestedGoCode217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode217()
}

func (c *current) onnestedGoCode232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode232()
}

func (c *current) onnestedGoCode253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode253()
}

func (c *current) onnestedGoCode285() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonnestedGoCode285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode285()
}

func (c *current) onnestedGoCode292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode292()
}

func (c *current) onnestedGoCode303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode303()
}

func (c *current) onnestedGoCode310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode310()
}

func (c *current) onnestedGoCode315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode315()
}

func (c *current) onnestedGoCode319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode319()
}

func (c *current) onnestedGoCode220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonnestedGoCode220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode220(stack["valsI"], stack["endI"])
}

func (c *current) onnestedGoCode329() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode329() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode329()
}

func (c *current) onnestedGoCode102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonnestedGoCode102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode102()
}

func (c *current) onnestedGoCode1(exprsI any) (any, error) {
	return exprsI, nil
}

func (p *parser) callonnestedGoCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode1(stack["exprsI"])
}

func (c *current) ongoParenExpr11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr11()
}

func (c *current) ongoParenExpr17() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr17() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr17()
}

func (c *current) ongoParenExpr5() (any, error) {
	return &ast.RawGoCode{Code: "(", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr5()
}

func (c *current) ongoParenExpr27() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr27()
}

func (c *current) ongoParenExpr24() (any, error) {
	return &ast.RawGoCode{Code: ")", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr24()
}

func (c *current) ongoParenExpr29() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr29()
}

func (c *current) ongoParenExpr28() (any, error) {
	return unclosedParen(c, "(", ")")
}

func (p *parser) callongoParenExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr28()
}

func (c *current) ongoParenExpr2(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr2(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) ongoParenExpr44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr44()
}

func (c *current) ongoParenExpr50() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr50()
}

func (c *current) ongoParenExpr38() (any, error) {
	return &ast.RawGoCode{Code: "{", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr38()
}

func (c *current) ongoParenExpr60() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr60() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr60()
}

func (c *current) ongoParenExpr57() (any, error) {
	return &ast.RawGoCode{Code: "}", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr57()
}

func (c *current) ongoParenExpr62() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr62()
}

func (c *current) ongoParenExpr61() (any, error) {
	return unclosedParen(c, "{", "}")
}

func (p *parser) callongoParenExpr61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr61()
}

func (c *current) ongoParenExpr35(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr35(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) ongoParenExpr77() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr77()
}

func (c *current) ongoParenExpr83() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr83() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr83()
}

func (c *current) ongoParenExpr71() (any, error) {
	return &ast.RawGoCode{Code: "[", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr71()
}

func (c *current) ongoParenExpr93() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr93() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr93()
}

func (c *current) ongoParenExpr90() (any, error) {
	return &ast.RawGoCode{Code: "]", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr90()
}

func (c *current) ongoParenExpr95() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr95()
}

func (c *current) ongoParenExpr94() (any, error) {
	return unclosedParen(c, "[", "]")
}

func (p *parser) callongoParenExpr94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr94()
}

func (c *current) ongoParenExpr68(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr68(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onConditionalGoExpression20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression20()
}

func (c *current) onConditionalGoExpression33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression33()
}

func (c *current) onConditionalGoExpression39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonConditionalGoExpression39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression39()
}

func (c *current) onConditionalGoExpression44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression44()
}

func (c *current) onConditionalGoExpression41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression41(stack["posI"])
}

func (c *current) onConditionalGoExpression55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression55()
}

func (c *current) onConditionalGoExpression31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression31(stack["lParenI"])
}

func (c *current) onConditionalGoExpression60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonConditionalGoExpression60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression60(stack["identI"])
}

func (c *current) onConditionalGoExpression79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression79()
}

func (c *current) onConditionalGoExpression87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression87()
}

func (c *current) onConditionalGoExpression84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression84(stack["posI"])
}

func (c *current) onConditionalGoExpression94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonConditionalGoExpression94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression94(stack["rParenI"])
}

func (c *current) onConditionalGoExpression68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression68(stack["rParenI"])
}

func (c *current) onConditionalGoExpression96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression96()
}

func (c *current) onConditionalGoExpression95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonConditionalGoExpression95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression95()
}

func (c *current) onConditionalGoExpression25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonConditionalGoExpression25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onConditionalGoExpression7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonConditionalGoExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression7(stack["prefixI"], stack["bfI"])
}

func (c *current) onConditionalGoExpression116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression116()
}

func (c *current) onConditionalGoExpression134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression134()
}

func (c *current) onConditionalGoExpression155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression155()
}

func (c *current) onConditionalGoExpression187() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression187()
}

func (c *current) onConditionalGoExpression194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression194()
}

func (c *current) onConditionalGoExpression205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression205()
}

func (c *current) onConditionalGoExpression212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression212()
}

func (c *current) onConditionalGoExpression217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression217()
}

func (c *current) onConditionalGoExpression232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression232()
}

func (c *current) onConditionalGoExpression253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression253()
}

func (c *current) onConditionalGoExpression285() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression285()
}

func (c *current) onConditionalGoExpression292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression292()
}

func (c *current) onConditionalGoExpression303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression303()
}

func (c *current) onConditionalGoExpression310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression310()
}

func (c *current) onConditionalGoExpression315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression315()
}

func (c *current) onConditionalGoExpression319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression319()
}

func (c *current) onConditionalGoExpression220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression220(stack["valsI"], stack["endI"])
}

func (c *current) onConditionalGoExpression331() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression331() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression331()
}

func (c *current) onConditionalGoExpression102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonConditionalGoExpression102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression102()
}

func (c *current) onConditionalGoExpression1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonConditionalGoExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression1(stack["codesI"])
}

func (c *current) onconditionalGoParenExpr11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr11()
}

func (c *current) onconditionalGoParenExpr17() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr17() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr17()
}

func (c *current) onconditionalGoParenExpr5() (any, error) {
	return &ast.RawGoCode{Code: "(", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr5()
}

func (c *current) onconditionalGoParenExpr27() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr27()
}

func (c *current) onconditionalGoParenExpr24() (any, error) {
	return &ast.RawGoCode{Code: ")", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr24()
}

func (c *current) onconditionalGoParenExpr29() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr29()
}

func (c *current) onconditionalGoParenExpr28() (any, error) {
	return unclosedParen(c, "(", ")")
}

func (p *parser) callonconditionalGoParenExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr28()
}

func (c *current) onconditionalGoParenExpr2(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr2(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onconditionalGoParenExpr44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr44()
}

func (c *current) onconditionalGoParenExpr50() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr50()
}

func (c *current) onconditionalGoParenExpr38() (any, error) {
	return &ast.RawGoCode{Code: "{", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr38()
}

func (c *current) onconditionalGoParenExpr60() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr60() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr60()
}

func (c *current) onconditionalGoParenExpr57() (any, error) {
	return &ast.RawGoCode{Code: "}", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr57()
}

func (c *current) onconditionalGoParenExpr62() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr62()
}

func (c *current) onconditionalGoParenExpr61() (any, error) {
	return unclosedParen(c, "{", "}")
}

func (p *parser) callonconditionalGoParenExpr61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr61()
}

func (c *current) onconditionalGoParenExpr93() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonconditionalGoParenExpr93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr93()
}

func (c *current) onconditionalGoParenExpr35(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr35(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onconditionalGoParenExpr107() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr107()
}

func (c *current) onconditionalGoParenExpr113() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr113() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr113()
}

func (c *current) onconditionalGoParenExpr101() (any, error) {
	return &ast.RawGoCode{Code: "[", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr101()
}

func (c *current) onconditionalGoParenExpr123() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr123() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr123()
}

func (c *current) onconditionalGoParenExpr120() (any, error) {
	return &ast.RawGoCode{Code: "]", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr120()
}

func (c *current) onconditionalGoParenExpr125() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr125() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr125()
}

func (c *current) onconditionalGoParenExpr124() (any, error) {
	return unclosedParen(c, "[", "]")
}

func (p *parser) callonconditionalGoParenExpr124() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr124()
}

func (c *current) onconditionalGoParenExpr156() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonconditionalGoParenExpr156() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr156()
}

func (c *current) onconditionalGoParenExpr98(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr98(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onGoStatement20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement20()
}

func (c *current) onGoStatement33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement33()
}

func (c *current) onGoStatement39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGoStatement39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement39()
}

func (c *current) onGoStatement44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement44()
}

func (c *current) onGoStatement41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoStatement41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement41(stack["posI"])
}

func (c *current) onGoStatement55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement55()
}

func (c *current) onGoStatement31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonGoStatement31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement31(stack["lParenI"])
}

func (c *current) onGoStatement60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoStatement60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement60(stack["identI"])
}

func (c *current) onGoStatement79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement79()
}

func (c *current) onGoStatement87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement87()
}

func (c *current) onGoStatement84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoStatement84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement84(stack["posI"])
}

func (c *current) onGoStatement94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGoStatement94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement94(stack["rParenI"])
}

func (c *current) onGoStatement68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonGoStatement68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement68(stack["rParenI"])
}

func (c *current) onGoStatement96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement96()
}

func (c *current) onGoStatement95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonGoStatement95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement95()
}

func (c *current) onGoStatement25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGoStatement25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onGoStatement7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonGoStatement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement7(stack["prefixI"], stack["bfI"])
}

func (c *current) onGoStatement116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement116()
}

func (c *current) onGoStatement134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement134()
}

func (c *current) onGoStatement155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement155()
}

func (c *current) onGoStatement187() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoStatement187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement187()
}

func (c *current) onGoStatement194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement194()
}

func (c *current) onGoStatement205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement205()
}

func (c *current) onGoStatement212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement212()
}

func (c *current) onGoStatement217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoStatement217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement217()
}

func (c *current) onGoStatement232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement232()
}

func (c *current) onGoStatement253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement253()
}

func (c *current) onGoStatement285() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoStatement285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement285()
}

func (c *current) onGoStatement292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement292()
}

func (c *current) onGoStatement303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement303()
}

func (c *current) onGoStatement310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement310()
}

func (c *current) onGoStatement315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoStatement315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement315()
}

func (c *current) onGoStatement319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement319()
}

func (c *current) onGoStatement220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoStatement220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement220(stack["valsI"], stack["endI"])
}

func (c *current) onGoStatement331() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement331() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement331()
}

func (c *current) onGoStatement102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoStatement102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement102()
}

func (c *current) onGoStatement1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonGoStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement1(stack["codesI"])
}

func (c *current) onInterpretedString5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString5()
}

func (c *current) onInterpretedString11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpretedString11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString11()
}

func (c *current) onInterpretedString13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString13()
}

func (c *current) onInterpretedString3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonInterpretedString3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString3(stack["startI"])
}

func (c *current) onInterpretedString29() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString29()
}

func (c *current) onInterpretedString35(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpretedString35() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString35(stack["endI"])
}

func (c *current) onInterpretedString25(endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonInterpretedString25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString25(stack["endI"])
}

func (c *current) onInterpretedString38() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString38()
}

func (c *current) onInterpretedString36(endI any) (any, error) {
	start := popStart(c)
	return endI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:       start,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the string literal started here",
			}),
		},
	}
}

func (p *parser) callonInterpretedString36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString36(stack["endI"])
}

func (c *current) onInterpretedString1(startI, contentsI, endI any) (any, error) {
	return &ast.String{
		Start:    pos(c),
		Quote:    '"',
		Contents: sliceOf[ast.StringItem](contentsI),
		End:      endI.(*ast.Position),
	}, nil
}

func (p *parser) callonInterpretedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString1(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onRawString5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString5()
}

func (c *current) onRawString11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonRawString11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString11()
}

func (c *current) onRawString13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString13()
}

func (c *current) onRawString3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonRawString3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString3(stack["startI"])
}

func (c *current) onRawString28() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString28()
}

func (c *current) onRawString35(posI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonRawString35() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString35(stack["posI"])
}

func (c *current) onRawString25(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonRawString25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString25(stack["posI"])
}

func (c *current) onRawString38() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString38()
}

func (c *current) onRawString36(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "you never closed this ```",
		}),
	}
}

func (p *parser) callonRawString36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString36(stack["posI"])
}

func (c *current) onRawString1(startI, contentsI, endI any) (any, error) {
	return &ast.String{
		Start:    pos(c),
		Quote:    '`',
		Contents: sliceOf[ast.StringItem](contentsI),
		End:      endI.(*ast.Position),
	}, nil
}

func (p *parser) callonRawString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString1(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onInterpretedStringItem11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedStringItem11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem11()
}

func (c *current) onInterpretedStringItem8(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonInterpretedStringItem8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem8(stack["posI"])
}

func (c *current) onInterpretedStringItem27() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringItem27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem27()
}

func (c *current) onInterpretedStringItem48() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringItem48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem48()
}

func (c *current) onInterpretedStringItem80() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonInterpretedStringItem80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem80()
}

func (c *current) onInterpretedStringItem87() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem87()
}

func (c *current) onInterpretedStringItem98() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem98()
}

func (c *current) onInterpretedStringItem105() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem105() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem105()
}

func (c *current) onInterpretedStringItem110() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem110()
}

func (c *current) onInterpretedStringItem2() (any, error) {
	return &ast.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem2()
}

func (c *current) onRawStringItem11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawStringItem11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem11()
}

func (c *current) onRawStringItem8(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonRawStringItem8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem8(stack["posI"])
}

func (c *current) onRawStringItem22() (bool, error) {
	return state(c).Inline, nil
}

func (p *parser) callonRawStringItem22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem22()
}

func (c *current) onRawStringItem25() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonRawStringItem25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem25()
}

func (c *current) onRawStringItem2() (any, error) {
	return &ast.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem2()
}

func (c *current) onStringInterpolation5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStringInterpolation5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation5()
}

func (c *current) onStringInterpolation11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonStringInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation11()
}

func (c *current) onStringInterpolation13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStringInterpolation13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation13()
}

func (c *current) onStringInterpolation3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonStringInterpolation3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation3(stack["startI"])
}

func (c *current) onStringInterpolation40() (any, error) {
	return []byte(nil), &fileerr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringInterpolation40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation40()
}

func (c *current) onStringInterpolation43() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid format verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringInterpolation43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation43()
}

func (c *current) onStringInterpolation23() (any, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringInterpolation23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation23()
}

func (c *current) onStringInterpolation51() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStringInterpolation51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation51()
}

func (c *current) onStringInterpolation45(endI any) (any, error) {
	return string(c.text[1:]), &fileerr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonStringInterpolation45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation45(stack["endI"])
}

func (c *current) onStringInterpolation1(startI, fmtDirectiveI, exprI any) (any, error) {
	interp := exprI.(ast.StringInterpolation)
	interp.FormatDirective = optCast[string](fmtDirectiveI)
	interp.Position = pos(c)
	return interp, nil
}

func (p *parser) callonStringInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation1(stack["startI"], stack["fmtDirectiveI"], stack["exprI"])
}

func (c *current) onstringInterpolationExpression7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstringInterpolationExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression7()
}

func (c *current) onstringInterpolationExpression13() error {
	pushStart(c)
	return nil
}

func (p *parser) callonstringInterpolationExpression13() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression13()
}

func (c *current) onstringInterpolationExpression18() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstringInterpolationExpression18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression18()
}

func (c *current) onstringInterpolationExpression15(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonstringInterpolationExpression15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression15(stack["posI"])
}

func (c *current) onstringInterpolationExpression5(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonstringInterpolationExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression5(stack["lBraceI"])
}

func (c *current) onstringInterpolationExpression25(lBraceI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonstringInterpolationExpression25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression25(stack["lBraceI"])
}

func (c *current) onstringInterpolationExpression28(lBraceI, exprI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonstringInterpolationExpression28() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression28(stack["lBraceI"], stack["exprI"])
}

func (c *current) onstringInterpolationExpression37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstringInterpolationExpression37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression37()
}

func (c *current) onstringInterpolationExpression34(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonstringInterpolationExpression34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression34(stack["posI"])
}

func (c *current) onstringInterpolationExpression44(rBrace any) error {
	popStart(c)
	return nil
}

func (p *parser) callonstringInterpolationExpression44() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression44(stack["rBrace"])
}

func (c *current) onstringInterpolationExpression31(rBrace any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonstringInterpolationExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression31(stack["rBrace"])
}

func (c *current) onstringInterpolationExpression47() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstringInterpolationExpression47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression47()
}

func (c *current) onstringInterpolationExpression45(posI any) (any, error) {
	braceStart := popStart(c)
	hashStart := peekStart(c, 0)
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:       braceStart,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `}` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      hashStart,
				End:        braceStart,
				EndOffset:  1,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `}`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonstringInterpolationExpression45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression45(stack["posI"])
}

func (c *current) onstringInterpolationExpression2(lBraceI, exprI, rBraceI any) (any, error) {
	return ast.StringInterpolation{
		LBrace:     lBraceI.(*ast.Position),
		Expression: optCast[ast.Expression](exprI),
		RBrace:     rBraceI.(*ast.Position),
	}, nil
}

func (p *parser) callonstringInterpolationExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression2(stack["lBraceI"], stack["exprI"], stack["rBraceI"])
}

func (c *current) onstringInterpolationExpression54() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstringInterpolationExpression54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression54()
}

func (c *current) onstringInterpolationExpression53() (any, error) {
	start := popStart(c)
	return (*ast.StringInterpolation)(nil), &fileerr.Error{
		Message: "string interpolation: missing expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a `{`",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "add an expression enclosed in braces",
				Example:    "`#" + string(c.text) + "{1+1}`",
			},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonstringInterpolationExpression53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression53()
}

func (c *current) ongoStructType12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoStructType12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoStructType12()
}

func (c *current) ongoStructType28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoStructType28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoStructType28()
}

func (c *current) ongoFieldDecl16() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoFieldDecl16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl16()
}

func (c *current) ongoFieldDecl34() (any, error) {
	return c.text, &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a ``` somewhere here",
		}),
	}
}

func (p *parser) callongoFieldDecl34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl34()
}

func (c *current) ongoFieldDecl58() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl58()
}

func (c *current) ongoFieldDecl79() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl79()
}

func (c *current) ongoFieldDecl111() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl111()
}

func (c *current) ongoFieldDecl118() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl118()
}

func (c *current) ongoFieldDecl129() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl129()
}

func (c *current) ongoFieldDecl136() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl136()
}

func (c *current) ongoFieldDecl141() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl141() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl141()
}

func (c *current) ongoFieldDecl155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl155()
}

func (c *current) ongoFieldDecl176() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl176() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl176()
}

func (c *current) ongoFieldDecl208() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl208() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl208()
}

func (c *current) ongoFieldDecl215() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl215()
}

func (c *current) ongoFieldDecl226() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl226()
}

func (c *current) ongoFieldDecl233() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl233() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl233()
}

func (c *current) ongoFieldDecl238() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl238() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl238()
}

func (c *current) ongoFieldDecl144() (any, error) {
	return c.text, &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a `\"` somewhere here",
		}),
	}

}

func (p *parser) callongoFieldDecl144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl144()
}

func (c *current) ongoParameters7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameters7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameters7()
}

func (c *current) ongoParameters23() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameters23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameters23()
}

func (c *current) ongoParameterList12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameterList12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameterList12()
}

func (c *current) ongoParameterDecl16() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameterDecl16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameterDecl16()
}

func (c *current) ongoInterfaceType12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoInterfaceType12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoInterfaceType12()
}

func (c *current) ongoInterfaceType32() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoInterfaceType32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoInterfaceType32()
}

func (c *current) ongoTypeElem12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoTypeElem12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoTypeElem12()
}

func (c *current) onState10() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonState10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState10()
}

func (c *current) onState17(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonState17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState17(stack["unexpectedI"])
}

func (c *current) onState4(startI, badI, endI any) (any, error) {
	return &ast.State{
			Vars: []ast.StateScopeItem{
				&ast.BadStateVar{
					Line:     badI.(string),
					Position: *startI.(*ast.Position),
				},
			},
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid state",
			ErrorAnnotation: anno(c, annotation{
				Start:      *startI.(*ast.Position),
				End:        *endI.(*ast.Position),
				Annotation: "expected a state variable declaration or a group of state variables",
			}),
			Example: "`state bark = \"woof\"`",
		}
}

func (p *parser) callonState4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState4(stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onSingleState1(varI any) (any, error) {
	return ast.State{
		Vars:     []ast.StateScopeItem{varI.(*ast.StateVar)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleState1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleState1(stack["varI"])
}

func (c *current) onGroupState9() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState9()
}

func (c *current) onGroupState15() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGroupState15() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState15()
}

func (c *current) onGroupState20() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState20()
}

func (c *current) onGroupState17(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGroupState17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState17(stack["posI"])
}

func (c *current) onGroupState31() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGroupState31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState31()
}

func (c *current) onGroupState7(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonGroupState7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState7(stack["lParenI"])
}

func (c *current) onGroupState46() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGroupState46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState46()
}

func (c *current) onGroupState54() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState54()
}

func (c *current) onGroupState51(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGroupState51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState51(stack["posI"])
}

func (c *current) onGroupState40(rParenI any) (any, error) {
	return rParenI, nil
}

func (p *parser) callonGroupState40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState40(stack["rParenI"])
}

func (c *current) onGroupState62() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState62()
}

func (c *current) onGroupState61() (any, error) {
	return nil, &fileerr.Error{
		Message: "missing `)`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected `)` to close the state group",
		}),
	}
}

func (p *parser) callonGroupState61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState61()
}

func (c *current) onGroupState1(lParenI, itmsI, rParenI any) (any, error) {
	return ast.State{
		LParen:   lParenI.(*ast.Position),
		Vars:     sliceOf[ast.StateScopeItem](itmsI),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGroupState1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState1(stack["lParenI"], stack["itmsI"], stack["rParenI"])
}

func (c *current) onstateScopeItem7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateScopeItem7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem7()
}

func (c *current) onstateScopeItem13(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonstateScopeItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem13(stack["textI"])
}

func (c *current) onstateScopeItem45(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateScopeItem45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem45(stack["unexpectedI"])
}

func (c *current) onstateScopeItem42(lineI any) (any, error) {
	line := lineI.(string)
	return &ast.BadStateVar{
			Line:     line,
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid state variable",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        len(line),
				Annotation: "expected a state variable declaration",
			}),
		}
}

func (p *parser) callonstateScopeItem42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem42(stack["lineI"])
}

func (c *current) onstateScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonstateScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem1(stack["itmI"])
}

func (c *current) onStateVar8(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonStateVar8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar8(stack["identI"])
}

func (c *current) onStateVar14() (any, error) {
	return invalidIdent(c, "state variable", pos(c), string(c.text))
}

func (p *parser) callonStateVar14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar14()
}

func (c *current) onStateVar26(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonStateVar26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar26(stack["identI"])
}

func (c *current) onStateVar32() (any, error) {
	return invalidIdent(c, "state variable", pos(c), string(c.text))
}

func (p *parser) callonStateVar32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar32()
}

func (c *current) onStateVar4(firstI, restI any) (any, error) {
	rest := getTuples[*ast.Ident](restI, -1)
	names := make([]*ast.Ident, 1, 1+len(rest))
	names[0] = firstI.(*ast.Ident)
	names = append(names, rest...)
	return names, nil
}

func (p *parser) callonStateVar4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar4(stack["firstI"], stack["restI"])
}

func (c *current) onStateVar43() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStateVar43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar43()
}

func (c *current) onStateVar1(namesI, typI, assignI, valsI any) (any, error) {
	names := namesI.([]*ast.Ident)
	vals := valsI.([]*ast.GoCode)

	if len(names) != len(vals) && len(vals) > 0 {
		return (*ast.StateVar)(nil), &fileerr.Error{
			Message: "state variable: unequal number of declarations and initializations",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: fmt.Sprintf("have %d declarations and %d initializations", len(names), len(vals)),
			}),
			Example: "`state bark, howl = \"woof\", \"awoooo\"`",
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "the number of variable names must always match the number of expressions"},
			},
		}
	}

	var assign *ast.Position
	if len(vals) > 0 {
		assign = assignI.(*ast.Position)
	}

	return ast.StateVar{
		Names:  names,
		Type:   optCast[*ast.Type](typI),
		Assign: assign,
		Values: vals,
	}, nil
}

func (p *parser) callonStateVar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar1(stack["namesI"], stack["typI"], stack["assignI"], stack["valsI"])
}

func (c *current) onstateVarType2(typI any) (any, error) {
	return typI, nil
}

func (p *parser) callonstateVarType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarType2(stack["typI"])
}

func (c *current) onstateVarType8() (any, error) {
	return ast.Type{
			Type:     string(c.text),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid type",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        len(c.text),
				Annotation: "this is not a valid Go type",
			}),
		}
}

func (p *parser) callonstateVarType8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarType8()
}

func (c *current) onstateVarValues9() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues9()
}

func (c *current) onstateVarValues2(valsI any) (any, error) {
	return valsI, nil
}

func (p *parser) callonstateVarValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues2(stack["valsI"])
}

func (c *current) onstateVarValues41() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues41()
}

func (c *current) onstateVarValues49() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstateVarValues49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues49()
}

func (c *current) onstateVarValues56(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateVarValues56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues56(stack["unexpectedI"])
}

func (c *current) onstateVarValues34(valsI, startI, badI, endI any) (any, error) {
	return optCast[[]*ast.GoCode](valsI),
		newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
}

func (p *parser) callonstateVarValues34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues34(stack["valsI"], stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onstateVarValues118() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues118()
}

func (c *current) onstateVarValues123() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstateVarValues123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues123()
}

func (c *current) onstateVarValues129(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateVarValues129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues129(stack["startI"], stack["unexpectedI"])
}

func (c *current) onstateVarValues111(startI, unexpectedI, endI any) (any, error) {
	return ([]*ast.GoCode)(nil), &fileerr.Error{
		Message: "invalid state variable values",
		ErrorAnnotation: anno(c, annotation{
			Start:      *startI.(*ast.Position),
			End:        *endI.(*ast.Position),
			Annotation: "expected one or more Go expressions",
		}),
		Example: "`state bark = \"woof\"`",
	}
}

func (p *parser) callonstateVarValues111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues111(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onstateVarValues184() (any, error) {
	return ([]*ast.GoCode)(nil), nil
}

func (p *parser) callonstateVarValues184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues184()
}

func (c *current) onstateVarValueList1(firstI, restI any) (any, error) {
	rest := getTuples[*ast.GoCode](restI, -1)
	values := make([]*ast.GoCode, 1, 1+len(rest))
	values[0] = firstI.(*ast.GoCode)
	values = append(values, rest...)
	return values, nil
}

func (p *parser) callonstateVarValueList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValueList1(stack["firstI"], stack["restI"])
}

func (c *current) onArrowBlock4() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonArrowBlock4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock4()
}

func (c *current) onArrowBlock10() error {
	editState(c, func(s *State) {
		s.Indentation.Target = c.pos.col - 1 // col is 1-indexed
	})
	return nil
}

func (p *parser) callonArrowBlock10() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock10()
}

func (c *current) onArrowBlock2(firstI, restI any) (any, error) {
	first, firstOk := firstI.(ast.TextLine)
	restTuples := slice(restI)

	n := len(restTuples)
	if firstOk {
		n++
	}

	lines := make([]ast.TextLine, 0, n)
	if firstOk {
		lines = append(lines, first)
	}
	for _, lt := range restTuples {
		lines = append(lines, getTuple[ast.TextLine](lt, -1))
	}

	return &ast.ArrowBlock{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock2(stack["firstI"], stack["restI"])
}

func (c *current) onArrowBlock37() (any, error) {
	return ast.ArrowBlock{Position: pos(c)}, nil
}

func (p *parser) callonArrowBlock37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock37()
}

func (c *current) onBracketText7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketText7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText7()
}

func (c *current) onBracketText4(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketText4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText4(stack["posI"])
}

func (c *current) onBracketText18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketText18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText18()
}

func (c *current) onBracketText29() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketText29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText29()
}

func (c *current) onBracketText37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketText37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText37()
}

func (c *current) onBracketText34(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketText34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText34(stack["posI"])
}

func (c *current) onBracketText2(posI, btI, rBracketI any) (any, error) {
	return &ast.BracketText{
		LBracket: pos(c),
		Lines:    sliceOf[ast.TextLine](btI),
		RBracket: rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) callonBracketText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText2(stack["posI"], stack["btI"], stack["rBracketI"])
}

func (c *current) onBracketText68() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketText68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText68()
}

func (c *current) onBracketText65(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketText65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText65(stack["posI"])
}

func (c *current) onBracketText63(posI, btI any) (any, error) {
	return &ast.BracketText{
			LBracket: pos(c),
			Lines:    sliceOf[ast.TextLine](btI),
		}, &fileerr.Error{
			Message: "unclosed bracket text",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened, but never closed",
			}),
		}
}

func (p *parser) callonBracketText63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText63(stack["posI"], stack["btI"])
}

func (c *current) onArrowBlockLine1(itemsI any) (any, error) {
	return ast.TextLine(sliceOf[ast.TextItem](itemsI)), nil
}

func (p *parser) callonArrowBlockLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockLine1(stack["itemsI"])
}

func (c *current) onBracketTextLine7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketTextLine7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextLine7()
}

func (c *current) onBracketTextLine1(itemsI any) (any, error) {
	return ast.TextLine(sliceOf[ast.TextItem](itemsI)), nil
}

func (p *parser) callonBracketTextLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextLine1(stack["itemsI"])
}

func (c *current) onInterpolationValueLine1(itemsI any) (any, error) {
	return ast.TextLine(sliceOf[ast.TextItem](itemsI)), nil
}

func (p *parser) callonInterpolationValueLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueLine1(stack["itemsI"])
}

func (c *current) onArrowBlockTextItem2(textI any) (any, error) {
	return &ast.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlockTextItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockTextItem2(stack["textI"])
}

func (c *current) onBracketTextTextItem26() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketTextTextItem26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem26()
}

func (c *current) onBracketTextTextItem23(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketTextTextItem23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem23(stack["posI"])
}

func (c *current) onBracketTextTextItem58() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketTextTextItem58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem58()
}

func (c *current) onBracketTextTextItem55(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketTextTextItem55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem55(stack["posI"])
}

func (c *current) onBracketTextTextItem2(textI any) (any, error) {
	return &ast.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBracketTextTextItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem2(stack["textI"])
}

func (c *current) onInterpolationValueTextItem2(textI any) (any, error) {
	return &ast.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpolationValueTextItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueTextItem2(stack["textI"])
}

func (c *current) onInterpolation5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolation5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation5()
}

func (c *current) onInterpolation11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation11()
}

func (c *current) onInterpolation13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolation13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation13()
}

func (c *current) onInterpolation3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonInterpolation3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation3(stack["startI"])
}

func (c *current) onInterpolation25() (any, error) {
	return &ast.BadInterpolation{Position: pos(c)}, &fileerr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "start of interpolation",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation: "expected an expression interpolation, text interpolation, a component call,\n" +
					"or an element interpolation",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonInterpolation25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation25()
}

func (c *current) onInterpolation30() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolation30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation30()
}

func (c *current) onInterpolation36(startI, interpI, endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpolation36() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation36(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onInterpolation27(startI, interpI, endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonInterpolation27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation27(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onInterpolation1(startI, interpI, endI any) (any, error) {
	return interpI, nil
}

func (p *parser) callonInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation1(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onExpressionInterpolation23() (any, error) {
	return []byte(nil), &fileerr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation23()
}

func (c *current) onExpressionInterpolation26() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid format verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation26()
}

func (c *current) onExpressionInterpolation6() (any, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonExpressionInterpolation6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation6()
}

func (c *current) onExpressionInterpolation34() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonExpressionInterpolation34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation34()
}

func (c *current) onExpressionInterpolation28(endI any) (any, error) {
	return string(c.text[1:]), &fileerr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        *endI.(*ast.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation28(stack["endI"])
}

func (c *current) onExpressionInterpolation43() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonExpressionInterpolation43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation43()
}

func (c *current) onExpressionInterpolation49() error {
	pushStart(c)
	return nil
}

func (p *parser) callonExpressionInterpolation49() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation49()
}

func (c *current) onExpressionInterpolation54() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonExpressionInterpolation54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation54()
}

func (c *current) onExpressionInterpolation51(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonExpressionInterpolation51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation51(stack["posI"])
}

func (c *current) onExpressionInterpolation41(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonExpressionInterpolation41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation41(stack["lBraceI"])
}

func (c *current) onExpressionInterpolation61(fmtDirectiveI, lBraceI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonExpressionInterpolation61() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation61(stack["fmtDirectiveI"], stack["lBraceI"])
}

func (c *current) onExpressionInterpolation64(fmtDirectiveI, lBraceI, exprI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonExpressionInterpolation64() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation64(stack["fmtDirectiveI"], stack["lBraceI"], stack["exprI"])
}

func (c *current) onExpressionInterpolation73() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonExpressionInterpolation73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation73()
}

func (c *current) onExpressionInterpolation70(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonExpressionInterpolation70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation70(stack["posI"])
}

func (c *current) onExpressionInterpolation80(rBrace any) error {
	popStart(c)
	return nil
}

func (p *parser) callonExpressionInterpolation80() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation80(stack["rBrace"])
}

func (c *current) onExpressionInterpolation67(rBrace any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonExpressionInterpolation67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation67(stack["rBrace"])
}

func (c *current) onExpressionInterpolation83() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonExpressionInterpolation83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation83()
}

func (c *current) onExpressionInterpolation81(posI any) (any, error) {
	braceStart := popStart(c)
	hashStart := peekStart(c, 0)
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:       braceStart,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `}` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      hashStart,
				End:        braceStart,
				EndOffset:  1,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `}`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation81(stack["posI"])
}

func (c *current) onExpressionInterpolation1(fmtDirectiveI, lBraceI, exprI, rBraceI any) (any, error) {
	return &ast.ExpressionInterpolation{
		FormatDirective: optCast[string](fmtDirectiveI),
		LBrace:          lBraceI.(*ast.Position),
		Expression:      optCast[ast.Expression](exprI),
		RBrace:          rBraceI.(*ast.Position),
		Position:        peekStart(c),
	}, nil
}

func (p *parser) callonExpressionInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation1(stack["fmtDirectiveI"], stack["lBraceI"], stack["exprI"], stack["rBraceI"])
}

func (c *current) onelementInterpolation6(nameI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonelementInterpolation6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation6(stack["nameI"])
}

func (c *current) onelementInterpolation10(nameI, attrsI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonelementInterpolation10() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation10(stack["nameI"], stack["attrsI"])
}

func (c *current) onelementInterpolation1(nameI, attrsI, valI any) (any, error) {
	return &ast.ElementInterpolation{
		Element: ast.Element{
			Name:       concat(nameI),
			Attributes: sliceOf[ast.AttributeCollection](attrsI),
			Position:   pos(c),
		},
		Value:    optDeref[ast.InterpolationValue](valI),
		Position: peekStart(c),
	}, nil
}

func (p *parser) callonelementInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation1(stack["nameI"], stack["attrsI"], stack["valI"])
}

func (c *current) onvoidElementInterpolation7(nameI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonvoidElementInterpolation7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation7(stack["nameI"])
}

func (c *current) onvoidElementInterpolation11(nameI, attrsI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonvoidElementInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation11(stack["nameI"], stack["attrsI"])
}

func (c *current) onvoidElementInterpolation1(nameI, attrsI any) (any, error) {
	return &ast.ElementInterpolation{
		Element: ast.Element{
			Name:       concat(nameI),
			Attributes: sliceOf[ast.AttributeCollection](attrsI),
			Void:       true,
			Position:   pos(c),
		},
		Position: peekStart(c),
	}, nil
}

func (p *parser) callonvoidElementInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation1(stack["nameI"], stack["attrsI"])
}

func (c *current) onComponentCallInterpolation4() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallInterpolation4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation4()
}

func (c *current) onComponentCallInterpolation7(callI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallInterpolation7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation7(stack["callI"])
}

func (c *current) onComponentCallInterpolation11() error {
	popStart(c)
	return nil
}

func (p *parser) callonComponentCallInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation11()
}

func (c *current) onComponentCallInterpolation1(callI, valI any) (any, error) {
	call := deref[ast.ComponentCall](callI)
	call.Position = pos(c)

	return &ast.ComponentCallInterpolation{
		ComponentCall: call,
		Value:         optCast[*ast.InterpolationValue](valI),
		Position:      pos(c),
	}, nil
}

func (p *parser) callonComponentCallInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation1(stack["callI"], stack["valI"])
}

func (c *current) onInterpolationValue5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue5()
}

func (c *current) onInterpolationValue11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpolationValue11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue11()
}

func (c *current) onInterpolationValue16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue16()
}

func (c *current) onInterpolationValue13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue13(stack["posI"])
}

func (c *current) onInterpolationValue3(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue3(stack["lBracketI"])
}

func (c *current) onInterpolationValue33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue33()
}

func (c *current) onInterpolationValue30(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue30(stack["posI"])
}

func (c *current) onInterpolationValue40(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpolationValue40() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue40(stack["rBracketI"])
}

func (c *current) onInterpolationValue27(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue27(stack["rBracketI"])
}

func (c *current) onInterpolationValue43() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue43()
}

func (c *current) onInterpolationValue41(posI any) (any, error) {
	bracketStart := popStart(c)
	hashStart := peekStart(c, 0)
	return posI.(*ast.Position), &fileerr.Error{
		Message: "unclosed interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:       bracketStart,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `]` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      hashStart,
				End:        bracketStart,
				EndOffset:  1,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `]`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonInterpolationValue41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue41(stack["posI"])
}

func (c *current) onInterpolationValue1(lBracketI, valI, rBracketI any) (any, error) {
	return &ast.InterpolationValue{
		LBracket: pos(c),
		Text:     valI.(ast.TextLine),
		RBracket: rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) callonInterpolationValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue1(stack["lBracketI"], stack["valI"], stack["rBracketI"])
}

func (c *current) onINDENTATION23() (bool, error) {
	return state(c).Indentation.Current < state(c).Indentation.Target, nil
}

func (p *parser) callonINDENTATION23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION23()
}

func (c *current) onINDENTATION25() error {
	editState(c, func(s *State) {
		s.Indentation.Current++
	})
	return nil
}

func (p *parser) callonINDENTATION25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION25()
}

func (c *current) onINDENTATION28() (bool, error) {
	return state(c).Indentation.Current == state(c).Indentation.Target, nil
}

func (p *parser) callonINDENTATION28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION28()
}

func (c *current) onINDENTATION210() error {
	editState(c, func(s *State) {
		s.Indentation.Current = 0
	})
	return nil
}

func (p *parser) callonINDENTATION210() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION210()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
