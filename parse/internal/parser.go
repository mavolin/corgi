// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mavolin/corgi/corgierr"
	"github.com/mavolin/corgi/file"
	"github.com/mavolin/corgi/internal/stack"
)

// todo: rm these as soon as pigeon#115 is fixed
const lbrace = "{"
const rbrace = "}"

type ErrList = errList
type ParserError = parserError

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 12, col: 1, offset: 189},
			expr: &actionExpr{
				pos: position{line: 13, col: 5, offset: 201},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 13, col: 5, offset: 201},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 128, col: 9, offset: 3669},
							run: (*parser).callonFile3,
						},
						&zeroOrOneExpr{
							pos: position{line: 14, col: 5, offset: 210},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 15, col: 5, offset: 223},
							label: "extendComments",
							expr: &zeroOrOneExpr{
								pos: position{line: 15, col: 20, offset: 238},
								expr: &ruleRefExpr{
									pos:  position{line: 15, col: 20, offset: 238},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 15, col: 35, offset: 253},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 16, col: 5, offset: 266},
							label: "extendI",
							expr: &zeroOrOneExpr{
								pos: position{line: 16, col: 13, offset: 274},
								expr: &actionExpr{
									pos: position{line: 3089, col: 11, offset: 106950},
									run: (*parser).callonFile25,
									expr: &seqExpr{
										pos: position{line: 3089, col: 11, offset: 106950},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 11, offset: 106950},
												val:        "extend",
												ignoreCase: false,
												want:       "\"extend\"",
											},
											&labeledExpr{
												pos:   position{line: 3089, col: 20, offset: 106959},
												label: "extendI",
												expr: &choiceExpr{
													pos: position{line: 3059, col: 18, offset: 105981},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3059, col: 18, offset: 105981},
															run: (*parser).callonFile30,
															expr: &seqExpr{
																pos: position{line: 3059, col: 18, offset: 105981},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 3059, col: 18, offset: 105981},
																		expr: &litMatcher{
																			pos:        position{line: 3059, col: 18, offset: 105981},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3059, col: 23, offset: 105986},
																		label: "sI",
																		expr: &choiceExpr{
																			pos: position{line: 760, col: 11, offset: 23384},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 766, col: 14, offset: 23471},
																					run: (*parser).callonFile36,
																					expr: &seqExpr{
																						pos: position{line: 766, col: 14, offset: 23471},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 766, col: 14, offset: 23471},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 766, col: 18, offset: 23475},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 766, col: 23, offset: 23480},
																									expr: &charClassMatcher{
																										pos:        position{line: 2597, col: 27, offset: 90336},
																										val:        "[^\\n`]",
																										chars:      []rune{'\n', '`'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 766, col: 47, offset: 23504},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 768, col: 5, offset: 23596},
																					run: (*parser).callonFile43,
																					expr: &seqExpr{
																						pos: position{line: 768, col: 5, offset: 23596},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 768, col: 5, offset: 23596},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 768, col: 9, offset: 23600},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 768, col: 14, offset: 23605},
																									expr: &charClassMatcher{
																										pos:        position{line: 2597, col: 27, offset: 90336},
																										val:        "[^\\n`]",
																										chars:      []rune{'\n', '`'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 768, col: 38, offset: 23629},
																								expr: &seqExpr{
																									pos: position{line: 3606, col: 12, offset: 123342},
																									exprs: []interface{}{
																										&zeroOrMoreExpr{
																											pos: position{line: 3606, col: 12, offset: 123342},
																											expr: &charClassMatcher{
																												pos:        position{line: 3618, col: 36, offset: 123689},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3606, col: 16, offset: 123346},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 3606, col: 16, offset: 123346},
																													exprs: []interface{}{
																														&zeroOrOneExpr{
																															pos: position{line: 3606, col: 16, offset: 123346},
																															expr: &litMatcher{
																																pos:        position{line: 3606, col: 16, offset: 123346},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3606, col: 22, offset: 123352},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3605, col: 12, offset: 123328},
																													expr: &anyMatcher{
																														line: 3605, col: 13, offset: 123329,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 787, col: 22, offset: 24033},
																					run: (*parser).callonFile60,
																					expr: &seqExpr{
																						pos: position{line: 787, col: 22, offset: 24033},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 787, col: 22, offset: 24033},
																								val:        "\"",
																								ignoreCase: false,
																								want:       "\"\\\"\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 787, col: 26, offset: 24037},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 787, col: 31, offset: 24042},
																									expr: &choiceExpr{
																										pos: position{line: 787, col: 32, offset: 24043},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2336, col: 24, offset: 79999},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2336, col: 24, offset: 79999},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2253, col: 19, offset: 77188},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2253, col: 19, offset: 77188},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2253, col: 19, offset: 77188},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2337, col: 24, offset: 80066},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2337, col: 24, offset: 80066},
																														val:        "\\x",
																														ignoreCase: false,
																														want:       "\"\\\\x\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2338, col: 5, offset: 80103},
																												run: (*parser).callonFile75,
																												expr: &seqExpr{
																													pos: position{line: 2338, col: 5, offset: 80103},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2338, col: 5, offset: 80103},
																															val:        "\\x",
																															ignoreCase: false,
																															want:       "\"\\\\x\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2338, col: 14, offset: 80112},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2338, col: 26, offset: 80124},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2355, col: 19, offset: 80741},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2355, col: 19, offset: 80741},
																														val:        "\\u",
																														ignoreCase: false,
																														want:       "\"\\\\u\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2356, col: 5, offset: 80800},
																												run: (*parser).callonFile88,
																												expr: &seqExpr{
																													pos: position{line: 2356, col: 5, offset: 80800},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2356, col: 5, offset: 80800},
																															val:        "\\u",
																															ignoreCase: false,
																															want:       "\"\\\\u\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 14, offset: 80809},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 26, offset: 80821},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 38, offset: 80833},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 50, offset: 80845},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2385, col: 16, offset: 81981},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2385, col: 16, offset: 81981},
																														val:        "\\U",
																														ignoreCase: false,
																														want:       "\"\\\\U\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2386, col: 5, offset: 82084},
																												run: (*parser).callonFile109,
																												expr: &seqExpr{
																													pos: position{line: 2386, col: 5, offset: 82084},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2386, col: 5, offset: 82084},
																															val:        "\\U",
																															ignoreCase: false,
																															want:       "\"\\\\U\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 14, offset: 82093},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 26, offset: 82105},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 38, offset: 82117},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 50, offset: 82129},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 62, offset: 82141},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 74, offset: 82153},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 86, offset: 82165},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 98, offset: 82177},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2613, col: 36, offset: 91114},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2613, col: 36, offset: 91114},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2613, col: 41, offset: 91119},
																														val:        "[abfnrtv\\\\\"]",
																														chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2611, col: 38, offset: 91006},
																												val:        "[^\"\\\\\\n]",
																												chars:      []rune{'"', '\\', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																											&actionExpr{
																												pos: position{line: 2500, col: 37, offset: 86764},
																												run: (*parser).callonFile132,
																												expr: &seqExpr{
																													pos: position{line: 2500, col: 37, offset: 86764},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2500, col: 37, offset: 86764},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2524, col: 5, offset: 87781},
																												run: (*parser).callonFile143,
																												expr: &seqExpr{
																													pos: position{line: 2524, col: 5, offset: 87781},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2524, col: 5, offset: 87781},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2545, col: 5, offset: 88623},
																												run: (*parser).callonFile150,
																												expr: &seqExpr{
																													pos: position{line: 2545, col: 5, offset: 88623},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2545, col: 5, offset: 88623},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2563, col: 5, offset: 89309},
																												run: (*parser).callonFile155,
																												expr: &seqExpr{
																													pos: position{line: 2563, col: 5, offset: 89309},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2563, col: 5, offset: 89309},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2563, col: 10, offset: 89314},
																															expr: &charClassMatcher{
																																pos:        position{line: 3607, col: 12, offset: 123375},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 787, col: 115, offset: 24126},
																								val:        "\"",
																								ignoreCase: false,
																								want:       "\"\\\"\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 789, col: 5, offset: 24218},
																					run: (*parser).callonFile161,
																					expr: &seqExpr{
																						pos: position{line: 789, col: 5, offset: 24218},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 789, col: 5, offset: 24218},
																								val:        "\"",
																								ignoreCase: false,
																								want:       "\"\\\"\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 789, col: 9, offset: 24222},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 789, col: 14, offset: 24227},
																									expr: &choiceExpr{
																										pos: position{line: 789, col: 15, offset: 24228},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2336, col: 24, offset: 79999},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2336, col: 24, offset: 79999},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2253, col: 19, offset: 77188},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2253, col: 19, offset: 77188},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2253, col: 19, offset: 77188},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2337, col: 24, offset: 80066},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2337, col: 24, offset: 80066},
																														val:        "\\x",
																														ignoreCase: false,
																														want:       "\"\\\\x\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2338, col: 5, offset: 80103},
																												run: (*parser).callonFile176,
																												expr: &seqExpr{
																													pos: position{line: 2338, col: 5, offset: 80103},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2338, col: 5, offset: 80103},
																															val:        "\\x",
																															ignoreCase: false,
																															want:       "\"\\\\x\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2338, col: 14, offset: 80112},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2338, col: 26, offset: 80124},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2355, col: 19, offset: 80741},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2355, col: 19, offset: 80741},
																														val:        "\\u",
																														ignoreCase: false,
																														want:       "\"\\\\u\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2356, col: 5, offset: 80800},
																												run: (*parser).callonFile189,
																												expr: &seqExpr{
																													pos: position{line: 2356, col: 5, offset: 80800},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2356, col: 5, offset: 80800},
																															val:        "\\u",
																															ignoreCase: false,
																															want:       "\"\\\\u\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 14, offset: 80809},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 26, offset: 80821},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 38, offset: 80833},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2356, col: 50, offset: 80845},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2385, col: 16, offset: 81981},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2385, col: 16, offset: 81981},
																														val:        "\\U",
																														ignoreCase: false,
																														want:       "\"\\\\U\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2386, col: 5, offset: 82084},
																												run: (*parser).callonFile210,
																												expr: &seqExpr{
																													pos: position{line: 2386, col: 5, offset: 82084},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2386, col: 5, offset: 82084},
																															val:        "\\U",
																															ignoreCase: false,
																															want:       "\"\\\\U\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 14, offset: 82093},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 26, offset: 82105},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 38, offset: 82117},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 50, offset: 82129},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 62, offset: 82141},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 74, offset: 82153},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 86, offset: 82165},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2386, col: 98, offset: 82177},
																															expr: &charClassMatcher{
																																pos:        position{line: 2254, col: 19, offset: 77212},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2613, col: 36, offset: 91114},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2613, col: 36, offset: 91114},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2613, col: 41, offset: 91119},
																														val:        "[abfnrtv\\\\\"]",
																														chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2611, col: 38, offset: 91006},
																												val:        "[^\"\\\\\\n]",
																												chars:      []rune{'"', '\\', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																											&actionExpr{
																												pos: position{line: 2500, col: 37, offset: 86764},
																												run: (*parser).callonFile233,
																												expr: &seqExpr{
																													pos: position{line: 2500, col: 37, offset: 86764},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2500, col: 37, offset: 86764},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2524, col: 5, offset: 87781},
																												run: (*parser).callonFile244,
																												expr: &seqExpr{
																													pos: position{line: 2524, col: 5, offset: 87781},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2524, col: 5, offset: 87781},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2545, col: 5, offset: 88623},
																												run: (*parser).callonFile251,
																												expr: &seqExpr{
																													pos: position{line: 2545, col: 5, offset: 88623},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2545, col: 5, offset: 88623},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2254, col: 19, offset: 77212},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2563, col: 5, offset: 89309},
																												run: (*parser).callonFile256,
																												expr: &seqExpr{
																													pos: position{line: 2563, col: 5, offset: 89309},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2563, col: 5, offset: 89309},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2563, col: 10, offset: 89314},
																															expr: &charClassMatcher{
																																pos:        position{line: 3607, col: 12, offset: 123375},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 789, col: 98, offset: 24311},
																								label: "endPosI",
																								expr: &actionExpr{
																									pos: position{line: 3609, col: 8, offset: 123391},
																									run: (*parser).callonFile262,
																									expr: &choiceExpr{
																										pos: position{line: 3609, col: 9, offset: 123392},
																										alternatives: []interface{}{
																											&andExpr{
																												pos: position{line: 3609, col: 9, offset: 123392},
																												expr: &anyMatcher{
																													line: 3609, col: 10, offset: 123393,
																												},
																											},
																											&notExpr{
																												pos: position{line: 3609, col: 14, offset: 123397},
																												expr: &anyMatcher{
																													line: 3609, col: 15, offset: 123398,
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 789, col: 110, offset: 24323},
																								expr: &seqExpr{
																									pos: position{line: 3606, col: 12, offset: 123342},
																									exprs: []interface{}{
																										&zeroOrMoreExpr{
																											pos: position{line: 3606, col: 12, offset: 123342},
																											expr: &charClassMatcher{
																												pos:        position{line: 3618, col: 36, offset: 123689},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3606, col: 16, offset: 123346},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 3606, col: 16, offset: 123346},
																													exprs: []interface{}{
																														&zeroOrOneExpr{
																															pos: position{line: 3606, col: 16, offset: 123346},
																															expr: &litMatcher{
																																pos:        position{line: 3606, col: 16, offset: 123346},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3606, col: 22, offset: 123352},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3605, col: 12, offset: 123328},
																													expr: &anyMatcher{
																														line: 3605, col: 13, offset: 123329,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 808, col: 22, offset: 24729},
																					run: (*parser).callonFile279,
																					expr: &seqExpr{
																						pos: position{line: 808, col: 22, offset: 24729},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 808, col: 22, offset: 24729},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 808, col: 27, offset: 24734},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 808, col: 32, offset: 24739},
																									expr: &charClassMatcher{
																										pos:        position{line: 808, col: 32, offset: 24739},
																										val:        "[^\\\\r\\n]",
																										chars:      []rune{'\'', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 808, col: 42, offset: 24749},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 808, col: 47, offset: 24754},
																								label: "endPosI",
																								expr: &actionExpr{
																									pos: position{line: 3609, col: 8, offset: 123391},
																									run: (*parser).callonFile287,
																									expr: &choiceExpr{
																										pos: position{line: 3609, col: 9, offset: 123392},
																										alternatives: []interface{}{
																											&andExpr{
																												pos: position{line: 3609, col: 9, offset: 123392},
																												expr: &anyMatcher{
																													line: 3609, col: 10, offset: 123393,
																												},
																											},
																											&notExpr{
																												pos: position{line: 3609, col: 14, offset: 123397},
																												expr: &anyMatcher{
																													line: 3609, col: 15, offset: 123398,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3061, col: 5, offset: 106021},
															run: (*parser).callonFile293,
															expr: &seqExpr{
																pos: position{line: 3061, col: 5, offset: 106021},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3061, col: 5, offset: 106021},
																		expr: &litMatcher{
																			pos:        position{line: 3061, col: 5, offset: 106021},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3061, col: 10, offset: 106026},
																		label: "pathI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 3061, col: 16, offset: 106032},
																			expr: &charClassMatcher{
																				pos:        position{line: 3607, col: 12, offset: 123375},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												expr: &charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3606, col: 16, offset: 123346},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																expr: &litMatcher{
																	pos:        position{line: 3606, col: 16, offset: 123346},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3606, col: 22, offset: 123352},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3605, col: 12, offset: 123328},
														expr: &anyMatcher{
															line: 3605, col: 13, offset: 123329,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 16, col: 21, offset: 282},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 295},
							label: "importsAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 25, offset: 315},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 25, offset: 315},
									name: "importsAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 17, col: 45, offset: 335},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 5, offset: 348},
							label: "usesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 22, offset: 365},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 22, offset: 365},
									name: "usesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 18, col: 39, offset: 382},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 395},
							label: "globalCodeAndFuncI",
							expr: &zeroOrOneExpr{
								pos: position{line: 19, col: 24, offset: 414},
								expr: &ruleRefExpr{
									pos:  position{line: 19, col: 24, offset: 414},
									name: "globalCodeAndFunc",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 19, col: 43, offset: 433},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 20, col: 5, offset: 446},
							label: "doctypeCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 20, col: 22, offset: 463},
								expr: &ruleRefExpr{
									pos:  position{line: 20, col: 22, offset: 463},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 20, col: 37, offset: 478},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 5, offset: 491},
							label: "doctypeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 14, offset: 500},
								expr: &choiceExpr{
									pos: position{line: 870, col: 12, offset: 26811},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 870, col: 12, offset: 26811},
											run: (*parser).callonFile364,
											expr: &seqExpr{
												pos: position{line: 870, col: 12, offset: 26811},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 870, col: 12, offset: 26811},
														val:        "doctype",
														ignoreCase: false,
														want:       "\"doctype\"",
													},
													&choiceExpr{
														pos: position{line: 883, col: 18, offset: 27234},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 883, col: 18, offset: 27234},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 883, col: 18, offset: 27234},
																		val:        " html",
																		ignoreCase: false,
																		want:       "\" html\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 884, col: 5, offset: 27252},
																run: (*parser).callonFile379,
																expr: &seqExpr{
																	pos: position{line: 884, col: 5, offset: 27252},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 884, col: 5, offset: 27252},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&labeledExpr{
																			pos:   position{line: 884, col: 9, offset: 27256},
																			label: "startPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonFile383,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 884, col: 23, offset: 27270},
																			expr: &charClassMatcher{
																				pos:        position{line: 3607, col: 12, offset: 123375},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3606, col: 12, offset: 123342},
																			expr: &charClassMatcher{
																				pos:        position{line: 3618, col: 36, offset: 123689},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							expr: &litMatcher{
																								pos:        position{line: 3606, col: 16, offset: 123346},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3606, col: 22, offset: 123352},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3605, col: 12, offset: 123328},
																					expr: &anyMatcher{
																						line: 3605, col: 13, offset: 123329,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 894, col: 9, offset: 27651},
																run: (*parser).callonFile400,
																expr: &seqExpr{
																	pos: position{line: 894, col: 9, offset: 27651},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 894, col: 9, offset: 27651},
																			expr: &litMatcher{
																				pos:        position{line: 894, col: 9, offset: 27651},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 894, col: 14, offset: 27656},
																			expr: &charClassMatcher{
																				pos:        position{line: 3607, col: 12, offset: 123375},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3606, col: 12, offset: 123342},
																			expr: &charClassMatcher{
																				pos:        position{line: 3618, col: 36, offset: 123689},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							expr: &litMatcher{
																								pos:        position{line: 3606, col: 16, offset: 123346},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3606, col: 22, offset: 123352},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3605, col: 12, offset: 123328},
																					expr: &anyMatcher{
																						line: 3605, col: 13, offset: 123329,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 872, col: 5, offset: 26888},
											run: (*parser).callonFile415,
											expr: &seqExpr{
												pos: position{line: 872, col: 5, offset: 26888},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 872, col: 5, offset: 26888},
														val:        "!doctype",
														ignoreCase: false,
														want:       "\"!doctype\"",
													},
													&choiceExpr{
														pos: position{line: 883, col: 18, offset: 27234},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 883, col: 18, offset: 27234},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 883, col: 18, offset: 27234},
																		val:        " html",
																		ignoreCase: false,
																		want:       "\" html\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 884, col: 5, offset: 27252},
																run: (*parser).callonFile430,
																expr: &seqExpr{
																	pos: position{line: 884, col: 5, offset: 27252},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 884, col: 5, offset: 27252},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																		&labeledExpr{
																			pos:   position{line: 884, col: 9, offset: 27256},
																			label: "startPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonFile434,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 884, col: 23, offset: 27270},
																			expr: &charClassMatcher{
																				pos:        position{line: 3607, col: 12, offset: 123375},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3606, col: 12, offset: 123342},
																			expr: &charClassMatcher{
																				pos:        position{line: 3618, col: 36, offset: 123689},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							expr: &litMatcher{
																								pos:        position{line: 3606, col: 16, offset: 123346},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3606, col: 22, offset: 123352},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3605, col: 12, offset: 123328},
																					expr: &anyMatcher{
																						line: 3605, col: 13, offset: 123329,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 894, col: 9, offset: 27651},
																run: (*parser).callonFile451,
																expr: &seqExpr{
																	pos: position{line: 894, col: 9, offset: 27651},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 894, col: 9, offset: 27651},
																			expr: &litMatcher{
																				pos:        position{line: 894, col: 9, offset: 27651},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 894, col: 14, offset: 27656},
																			expr: &charClassMatcher{
																				pos:        position{line: 3607, col: 12, offset: 123375},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3606, col: 12, offset: 123342},
																			expr: &charClassMatcher{
																				pos:        position{line: 3618, col: 36, offset: 123689},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							expr: &litMatcher{
																								pos:        position{line: 3606, col: 16, offset: 123346},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3606, col: 22, offset: 123352},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3605, col: 12, offset: 123328},
																					expr: &anyMatcher{
																						line: 3605, col: 13, offset: 123329,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 21, col: 23, offset: 509},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 22, col: 5, offset: 522},
							label: "scopeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 22, col: 12, offset: 529},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 12, offset: 529},
									name: "Scope",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 22, col: 19, offset: 536},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3605, col: 12, offset: 123328},
							expr: &anyMatcher{
								line: 3605, col: 13, offset: 123329,
							},
						},
					},
				},
			},
		},
		{
			name: "importsAndComments",
			pos:  position{line: 68, col: 1, offset: 1902},
			expr: &actionExpr{
				pos: position{line: 68, col: 23, offset: 1924},
				run: (*parser).callonimportsAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 68, col: 23, offset: 1924},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 68, col: 29, offset: 1930},
						expr: &seqExpr{
							pos: position{line: 68, col: 30, offset: 1931},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 68, col: 30, offset: 1931},
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 30, offset: 1931},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 68, col: 45, offset: 1946},
									expr: &oneOrMoreExpr{
										pos: position{line: 3620, col: 36, offset: 123776},
										expr: &seqExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													expr: &litMatcher{
														pos:        position{line: 3619, col: 36, offset: 123730},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3619, col: 42, offset: 123736},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3097, col: 12, offset: 107257},
									run: (*parser).callonimportsAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3097, col: 12, offset: 107257},
										label: "importsI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3097, col: 21, offset: 107266},
											expr: &seqExpr{
												pos: position{line: 3097, col: 22, offset: 107267},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3097, col: 22, offset: 107267},
														expr: &oneOrMoreExpr{
															pos: position{line: 3620, col: 36, offset: 123776},
															expr: &seqExpr{
																pos: position{line: 3620, col: 37, offset: 123777},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3620, col: 37, offset: 123777},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		expr: &litMatcher{
																			pos:        position{line: 3619, col: 36, offset: 123730},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3619, col: 42, offset: 123736},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3111, col: 11, offset: 107566},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3111, col: 11, offset: 107566},
																run: (*parser).callonimportsAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3111, col: 11, offset: 107566},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3111, col: 11, offset: 107566},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3111, col: 21, offset: 107576},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3132, col: 16, offset: 108230},
																				run: (*parser).callonimportsAndComments32,
																				expr: &seqExpr{
																					pos: position{line: 3132, col: 16, offset: 108230},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4088, col: 11, offset: 144044},
																							run: (*parser).callonimportsAndComments34,
																						},
																						&labeledExpr{
																							pos:   position{line: 3132, col: 23, offset: 108237},
																							label: "importsI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 3132, col: 32, offset: 108246},
																								expr: &seqExpr{
																									pos: position{line: 3132, col: 33, offset: 108247},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3132, col: 33, offset: 108247},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3620, col: 36, offset: 123776},
																												expr: &seqExpr{
																													pos: position{line: 3620, col: 37, offset: 123777},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3620, col: 37, offset: 123777},
																															expr: &charClassMatcher{
																																pos:        position{line: 3618, col: 36, offset: 123689},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3619, col: 36, offset: 123730},
																															expr: &litMatcher{
																																pos:        position{line: 3619, col: 36, offset: 123730},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3619, col: 42, offset: 123736},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3707, col: 17, offset: 127583},
																											run: (*parser).callonimportsAndComments46,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3707, col: 17, offset: 127583},
																												expr: &charClassMatcher{
																													pos:        position{line: 3618, col: 36, offset: 123689},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3707, col: 41, offset: 127607},
																											run: (*parser).callonimportsAndComments49,
																										},
																										&choiceExpr{
																											pos: position{line: 3759, col: 5, offset: 129517},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3759, col: 5, offset: 129517},
																													run: (*parser).callonimportsAndComments51,
																												},
																												&seqExpr{
																													pos: position{line: 3761, col: 9, offset: 129600},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3761, col: 9, offset: 129600},
																															run: (*parser).callonimportsAndComments53,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3763, col: 7, offset: 129704},
																															run: (*parser).callonimportsAndComments54,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3770, col: 9, offset: 130040},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3770, col: 9, offset: 130040},
																															run: (*parser).callonimportsAndComments56,
																														},
																														&choiceExpr{
																															pos: position{line: 3823, col: 9, offset: 132375},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 3823, col: 9, offset: 132375},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 3823, col: 9, offset: 132375},
																																			run: (*parser).callonimportsAndComments59,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 3827, col: 11, offset: 132625},
																																			run: (*parser).callonimportsAndComments60,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 3893, col: 11, offset: 135831},
																																			run: (*parser).callonimportsAndComments61,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 3901, col: 13, offset: 136184},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 3901, col: 13, offset: 136184},
																																			run: (*parser).callonimportsAndComments63,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 3905, col: 11, offset: 136439},
																																			run: (*parser).callonimportsAndComments64,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3136, col: 15, offset: 108375},
																											run: (*parser).callonimportsAndComments65,
																											expr: &seqExpr{
																												pos: position{line: 3136, col: 15, offset: 108375},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3136, col: 15, offset: 108375},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3136, col: 22, offset: 108382},
																															expr: &seqExpr{
																																pos: position{line: 3136, col: 23, offset: 108383},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3149, col: 16, offset: 108663},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3149, col: 16, offset: 108663},
																																				run: (*parser).callonimportsAndComments71,
																																				expr: &litMatcher{
																																					pos:        position{line: 3149, col: 16, offset: 108663},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 2212, col: 12, offset: 75917},
																																				run: (*parser).callonimportsAndComments73,
																																				expr: &labeledExpr{
																																					pos:   position{line: 2212, col: 12, offset: 75917},
																																					label: "ident",
																																					expr: &seqExpr{
																																						pos: position{line: 2260, col: 17, offset: 77263},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2243, col: 20, offset: 77018},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2260, col: 26, offset: 77272},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2243, col: 20, offset: 77018},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 2214, col: 5, offset: 76011},
																																				run: (*parser).callonimportsAndComments79,
																																				expr: &seqExpr{
																																					pos: position{line: 2214, col: 5, offset: 76011},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 2214, col: 5, offset: 76011},
																																							label: "identI",
																																							expr: &seqExpr{
																																								pos: position{line: 2214, col: 13, offset: 76019},
																																								exprs: []interface{}{
																																									&zeroOrOneExpr{
																																										pos: position{line: 2214, col: 13, offset: 76019},
																																										expr: &litMatcher{
																																											pos:        position{line: 2214, col: 13, offset: 76019},
																																											val:        "$",
																																											ignoreCase: false,
																																											want:       "\"$\"",
																																										},
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 2214, col: 18, offset: 76024},
																																										expr: &choiceExpr{
																																											pos: position{line: 2214, col: 19, offset: 76025},
																																											alternatives: []interface{}{
																																												&seqExpr{
																																													pos: position{line: 2214, col: 19, offset: 76025},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 2214, col: 19, offset: 76025},
																																															val:        "[\\pNd]",
																																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&charClassMatcher{
																																															pos:        position{line: 2214, col: 28, offset: 76034},
																																															val:        "[_-\\pL]",
																																															chars:      []rune{'_', '-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																												&charClassMatcher{
																																													pos:        position{line: 2214, col: 38, offset: 76044},
																																													val:        "[_-\\pL]",
																																													chars:      []rune{'_', '-'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 2214, col: 49, offset: 76055},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3609, col: 8, offset: 123391},
																																								run: (*parser).callonimportsAndComments92,
																																								expr: &choiceExpr{
																																									pos: position{line: 3609, col: 9, offset: 123392},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3609, col: 9, offset: 123392},
																																											expr: &anyMatcher{
																																												line: 3609, col: 10, offset: 123393,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3609, col: 14, offset: 123397},
																																											expr: &anyMatcher{
																																												line: 3609, col: 15, offset: 123398,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3151, col: 15, offset: 108742},
																																				run: (*parser).callonimportsAndComments98,
																																				expr: &seqExpr{
																																					pos: position{line: 3151, col: 15, offset: 108742},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3151, col: 15, offset: 108742},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3151, col: 15, offset: 108742},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3151, col: 24, offset: 108751},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3609, col: 8, offset: 123391},
																																								run: (*parser).callonimportsAndComments103,
																																								expr: &choiceExpr{
																																									pos: position{line: 3609, col: 9, offset: 123392},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3609, col: 9, offset: 123392},
																																											expr: &anyMatcher{
																																												line: 3609, col: 10, offset: 123393,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3609, col: 14, offset: 123397},
																																											expr: &anyMatcher{
																																												line: 3609, col: 15, offset: 123398,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3136, col: 35, offset: 108395},
																																		expr: &litMatcher{
																																			pos:        position{line: 3136, col: 35, offset: 108395},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3136, col: 42, offset: 108402},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3073, col: 12, offset: 106407},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 766, col: 14, offset: 23471},
																																	run: (*parser).callonimportsAndComments113,
																																	expr: &seqExpr{
																																		pos: position{line: 766, col: 14, offset: 23471},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 766, col: 14, offset: 23471},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 766, col: 18, offset: 23475},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 766, col: 23, offset: 23480},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2597, col: 27, offset: 90336},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 766, col: 47, offset: 23504},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 768, col: 5, offset: 23596},
																																	run: (*parser).callonimportsAndComments120,
																																	expr: &seqExpr{
																																		pos: position{line: 768, col: 5, offset: 23596},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 768, col: 5, offset: 23596},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 768, col: 9, offset: 23600},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 768, col: 14, offset: 23605},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2597, col: 27, offset: 90336},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 768, col: 38, offset: 23629},
																																				expr: &seqExpr{
																																					pos: position{line: 3606, col: 12, offset: 123342},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3606, col: 12, offset: 123342},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3618, col: 36, offset: 123689},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3606, col: 16, offset: 123346},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3606, col: 16, offset: 123346},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3606, col: 16, offset: 123346},
																																											expr: &litMatcher{
																																												pos:        position{line: 3606, col: 16, offset: 123346},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3606, col: 22, offset: 123352},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3605, col: 12, offset: 123328},
																																									expr: &anyMatcher{
																																										line: 3605, col: 13, offset: 123329,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 787, col: 22, offset: 24033},
																																	run: (*parser).callonimportsAndComments137,
																																	expr: &seqExpr{
																																		pos: position{line: 787, col: 22, offset: 24033},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 787, col: 22, offset: 24033},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 787, col: 26, offset: 24037},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 787, col: 31, offset: 24042},
																																					expr: &choiceExpr{
																																						pos: position{line: 787, col: 32, offset: 24043},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2336, col: 24, offset: 79999},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2336, col: 24, offset: 79999},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2337, col: 24, offset: 80066},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2337, col: 24, offset: 80066},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2338, col: 5, offset: 80103},
																																								run: (*parser).callonimportsAndComments152,
																																								expr: &seqExpr{
																																									pos: position{line: 2338, col: 5, offset: 80103},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2338, col: 5, offset: 80103},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 14, offset: 80112},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 26, offset: 80124},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2355, col: 19, offset: 80741},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2355, col: 19, offset: 80741},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2356, col: 5, offset: 80800},
																																								run: (*parser).callonimportsAndComments165,
																																								expr: &seqExpr{
																																									pos: position{line: 2356, col: 5, offset: 80800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2356, col: 5, offset: 80800},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 14, offset: 80809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 26, offset: 80821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 38, offset: 80833},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 50, offset: 80845},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2385, col: 16, offset: 81981},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2385, col: 16, offset: 81981},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2386, col: 5, offset: 82084},
																																								run: (*parser).callonimportsAndComments186,
																																								expr: &seqExpr{
																																									pos: position{line: 2386, col: 5, offset: 82084},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2386, col: 5, offset: 82084},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 14, offset: 82093},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 26, offset: 82105},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 38, offset: 82117},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 50, offset: 82129},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 62, offset: 82141},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 74, offset: 82153},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 86, offset: 82165},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 98, offset: 82177},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2613, col: 36, offset: 91114},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2613, col: 36, offset: 91114},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2613, col: 41, offset: 91119},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2611, col: 38, offset: 91006},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2500, col: 37, offset: 86764},
																																								run: (*parser).callonimportsAndComments209,
																																								expr: &seqExpr{
																																									pos: position{line: 2500, col: 37, offset: 86764},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2500, col: 37, offset: 86764},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2524, col: 5, offset: 87781},
																																								run: (*parser).callonimportsAndComments220,
																																								expr: &seqExpr{
																																									pos: position{line: 2524, col: 5, offset: 87781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2524, col: 5, offset: 87781},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2545, col: 5, offset: 88623},
																																								run: (*parser).callonimportsAndComments227,
																																								expr: &seqExpr{
																																									pos: position{line: 2545, col: 5, offset: 88623},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2545, col: 5, offset: 88623},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2563, col: 5, offset: 89309},
																																								run: (*parser).callonimportsAndComments232,
																																								expr: &seqExpr{
																																									pos: position{line: 2563, col: 5, offset: 89309},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2563, col: 5, offset: 89309},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2563, col: 10, offset: 89314},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3607, col: 12, offset: 123375},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 787, col: 115, offset: 24126},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 789, col: 5, offset: 24218},
																																	run: (*parser).callonimportsAndComments238,
																																	expr: &seqExpr{
																																		pos: position{line: 789, col: 5, offset: 24218},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 789, col: 5, offset: 24218},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 789, col: 9, offset: 24222},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 789, col: 14, offset: 24227},
																																					expr: &choiceExpr{
																																						pos: position{line: 789, col: 15, offset: 24228},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2336, col: 24, offset: 79999},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2336, col: 24, offset: 79999},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2337, col: 24, offset: 80066},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2337, col: 24, offset: 80066},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2338, col: 5, offset: 80103},
																																								run: (*parser).callonimportsAndComments253,
																																								expr: &seqExpr{
																																									pos: position{line: 2338, col: 5, offset: 80103},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2338, col: 5, offset: 80103},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 14, offset: 80112},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 26, offset: 80124},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2355, col: 19, offset: 80741},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2355, col: 19, offset: 80741},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2356, col: 5, offset: 80800},
																																								run: (*parser).callonimportsAndComments266,
																																								expr: &seqExpr{
																																									pos: position{line: 2356, col: 5, offset: 80800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2356, col: 5, offset: 80800},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 14, offset: 80809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 26, offset: 80821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 38, offset: 80833},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 50, offset: 80845},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2385, col: 16, offset: 81981},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2385, col: 16, offset: 81981},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2386, col: 5, offset: 82084},
																																								run: (*parser).callonimportsAndComments287,
																																								expr: &seqExpr{
																																									pos: position{line: 2386, col: 5, offset: 82084},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2386, col: 5, offset: 82084},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 14, offset: 82093},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 26, offset: 82105},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 38, offset: 82117},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 50, offset: 82129},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 62, offset: 82141},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 74, offset: 82153},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 86, offset: 82165},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 98, offset: 82177},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2613, col: 36, offset: 91114},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2613, col: 36, offset: 91114},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2613, col: 41, offset: 91119},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2611, col: 38, offset: 91006},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2500, col: 37, offset: 86764},
																																								run: (*parser).callonimportsAndComments310,
																																								expr: &seqExpr{
																																									pos: position{line: 2500, col: 37, offset: 86764},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2500, col: 37, offset: 86764},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2524, col: 5, offset: 87781},
																																								run: (*parser).callonimportsAndComments321,
																																								expr: &seqExpr{
																																									pos: position{line: 2524, col: 5, offset: 87781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2524, col: 5, offset: 87781},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2545, col: 5, offset: 88623},
																																								run: (*parser).callonimportsAndComments328,
																																								expr: &seqExpr{
																																									pos: position{line: 2545, col: 5, offset: 88623},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2545, col: 5, offset: 88623},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2563, col: 5, offset: 89309},
																																								run: (*parser).callonimportsAndComments333,
																																								expr: &seqExpr{
																																									pos: position{line: 2563, col: 5, offset: 89309},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2563, col: 5, offset: 89309},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2563, col: 10, offset: 89314},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3607, col: 12, offset: 123375},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 789, col: 98, offset: 24311},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3609, col: 8, offset: 123391},
																																					run: (*parser).callonimportsAndComments339,
																																					expr: &choiceExpr{
																																						pos: position{line: 3609, col: 9, offset: 123392},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3609, col: 9, offset: 123392},
																																								expr: &anyMatcher{
																																									line: 3609, col: 10, offset: 123393,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3609, col: 14, offset: 123397},
																																								expr: &anyMatcher{
																																									line: 3609, col: 15, offset: 123398,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 789, col: 110, offset: 24323},
																																				expr: &seqExpr{
																																					pos: position{line: 3606, col: 12, offset: 123342},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3606, col: 12, offset: 123342},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3618, col: 36, offset: 123689},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3606, col: 16, offset: 123346},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3606, col: 16, offset: 123346},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3606, col: 16, offset: 123346},
																																											expr: &litMatcher{
																																												pos:        position{line: 3606, col: 16, offset: 123346},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3606, col: 22, offset: 123352},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3605, col: 12, offset: 123328},
																																									expr: &anyMatcher{
																																										line: 3605, col: 13, offset: 123329,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 808, col: 22, offset: 24729},
																																	run: (*parser).callonimportsAndComments356,
																																	expr: &seqExpr{
																																		pos: position{line: 808, col: 22, offset: 24729},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 808, col: 22, offset: 24729},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 808, col: 27, offset: 24734},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 808, col: 32, offset: 24739},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 808, col: 32, offset: 24739},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 808, col: 42, offset: 24749},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 808, col: 47, offset: 24754},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3609, col: 8, offset: 123391},
																																					run: (*parser).callonimportsAndComments364,
																																					expr: &choiceExpr{
																																						pos: position{line: 3609, col: 9, offset: 123392},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3609, col: 9, offset: 123392},
																																								expr: &anyMatcher{
																																									line: 3609, col: 10, offset: 123393,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3609, col: 14, offset: 123397},
																																								expr: &anyMatcher{
																																									line: 3609, col: 15, offset: 123398,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3073, col: 21, offset: 106416},
																																	run: (*parser).callonimportsAndComments370,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3073, col: 21, offset: 106416},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3073, col: 27, offset: 106422},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3607, col: 12, offset: 123375},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3606, col: 12, offset: 123342},
																														expr: &charClassMatcher{
																															pos:        position{line: 3618, col: 36, offset: 123689},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3606, col: 16, offset: 123346},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3606, col: 16, offset: 123346},
																																		expr: &litMatcher{
																																			pos:        position{line: 3606, col: 16, offset: 123346},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3606, col: 22, offset: 123352},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3605, col: 12, offset: 123328},
																																expr: &anyMatcher{
																																	line: 3605, col: 13, offset: 123329,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4093, col: 11, offset: 144149},
																							run: (*parser).callonimportsAndComments383,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3116, col: 5, offset: 107707},
																run: (*parser).callonimportsAndComments384,
																expr: &seqExpr{
																	pos: position{line: 3116, col: 5, offset: 107707},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3116, col: 5, offset: 107707},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3116, col: 14, offset: 107716},
																			expr: &litMatcher{
																				pos:        position{line: 3116, col: 14, offset: 107716},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3116, col: 19, offset: 107721},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3136, col: 15, offset: 108375},
																				run: (*parser).callonimportsAndComments390,
																				expr: &seqExpr{
																					pos: position{line: 3136, col: 15, offset: 108375},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3136, col: 15, offset: 108375},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3136, col: 22, offset: 108382},
																								expr: &seqExpr{
																									pos: position{line: 3136, col: 23, offset: 108383},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3149, col: 16, offset: 108663},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3149, col: 16, offset: 108663},
																													run: (*parser).callonimportsAndComments396,
																													expr: &litMatcher{
																														pos:        position{line: 3149, col: 16, offset: 108663},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2212, col: 12, offset: 75917},
																													run: (*parser).callonimportsAndComments398,
																													expr: &labeledExpr{
																														pos:   position{line: 2212, col: 12, offset: 75917},
																														label: "ident",
																														expr: &seqExpr{
																															pos: position{line: 2260, col: 17, offset: 77263},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2243, col: 20, offset: 77018},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2260, col: 26, offset: 77272},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2243, col: 20, offset: 77018},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2214, col: 5, offset: 76011},
																													run: (*parser).callonimportsAndComments404,
																													expr: &seqExpr{
																														pos: position{line: 2214, col: 5, offset: 76011},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 2214, col: 5, offset: 76011},
																																label: "identI",
																																expr: &seqExpr{
																																	pos: position{line: 2214, col: 13, offset: 76019},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 2214, col: 13, offset: 76019},
																																			expr: &litMatcher{
																																				pos:        position{line: 2214, col: 13, offset: 76019},
																																				val:        "$",
																																				ignoreCase: false,
																																				want:       "\"$\"",
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 2214, col: 18, offset: 76024},
																																			expr: &choiceExpr{
																																				pos: position{line: 2214, col: 19, offset: 76025},
																																				alternatives: []interface{}{
																																					&seqExpr{
																																						pos: position{line: 2214, col: 19, offset: 76025},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2214, col: 19, offset: 76025},
																																								val:        "[\\pNd]",
																																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2214, col: 28, offset: 76034},
																																								val:        "[_-\\pL]",
																																								chars:      []rune{'_', '-'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 2214, col: 38, offset: 76044},
																																						val:        "[_-\\pL]",
																																						chars:      []rune{'_', '-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 2214, col: 49, offset: 76055},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3609, col: 8, offset: 123391},
																																	run: (*parser).callonimportsAndComments417,
																																	expr: &choiceExpr{
																																		pos: position{line: 3609, col: 9, offset: 123392},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3609, col: 9, offset: 123392},
																																				expr: &anyMatcher{
																																					line: 3609, col: 10, offset: 123393,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3609, col: 14, offset: 123397},
																																				expr: &anyMatcher{
																																					line: 3609, col: 15, offset: 123398,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3151, col: 15, offset: 108742},
																													run: (*parser).callonimportsAndComments423,
																													expr: &seqExpr{
																														pos: position{line: 3151, col: 15, offset: 108742},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3151, col: 15, offset: 108742},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3151, col: 15, offset: 108742},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3151, col: 24, offset: 108751},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3609, col: 8, offset: 123391},
																																	run: (*parser).callonimportsAndComments428,
																																	expr: &choiceExpr{
																																		pos: position{line: 3609, col: 9, offset: 123392},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3609, col: 9, offset: 123392},
																																				expr: &anyMatcher{
																																					line: 3609, col: 10, offset: 123393,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3609, col: 14, offset: 123397},
																																				expr: &anyMatcher{
																																					line: 3609, col: 15, offset: 123398,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3136, col: 35, offset: 108395},
																											expr: &litMatcher{
																												pos:        position{line: 3136, col: 35, offset: 108395},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3136, col: 42, offset: 108402},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3073, col: 12, offset: 106407},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 766, col: 14, offset: 23471},
																										run: (*parser).callonimportsAndComments438,
																										expr: &seqExpr{
																											pos: position{line: 766, col: 14, offset: 23471},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 766, col: 14, offset: 23471},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 766, col: 18, offset: 23475},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 766, col: 23, offset: 23480},
																														expr: &charClassMatcher{
																															pos:        position{line: 2597, col: 27, offset: 90336},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 766, col: 47, offset: 23504},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 768, col: 5, offset: 23596},
																										run: (*parser).callonimportsAndComments445,
																										expr: &seqExpr{
																											pos: position{line: 768, col: 5, offset: 23596},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 768, col: 5, offset: 23596},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 768, col: 9, offset: 23600},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 768, col: 14, offset: 23605},
																														expr: &charClassMatcher{
																															pos:        position{line: 2597, col: 27, offset: 90336},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 768, col: 38, offset: 23629},
																													expr: &seqExpr{
																														pos: position{line: 3606, col: 12, offset: 123342},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3606, col: 12, offset: 123342},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3618, col: 36, offset: 123689},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3606, col: 16, offset: 123346},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3606, col: 16, offset: 123346},
																																				expr: &litMatcher{
																																					pos:        position{line: 3606, col: 16, offset: 123346},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3606, col: 22, offset: 123352},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3605, col: 12, offset: 123328},
																																		expr: &anyMatcher{
																																			line: 3605, col: 13, offset: 123329,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 787, col: 22, offset: 24033},
																										run: (*parser).callonimportsAndComments462,
																										expr: &seqExpr{
																											pos: position{line: 787, col: 22, offset: 24033},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 787, col: 22, offset: 24033},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 787, col: 26, offset: 24037},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 787, col: 31, offset: 24042},
																														expr: &choiceExpr{
																															pos: position{line: 787, col: 32, offset: 24043},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2336, col: 24, offset: 79999},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2336, col: 24, offset: 79999},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2337, col: 24, offset: 80066},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2337, col: 24, offset: 80066},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2338, col: 5, offset: 80103},
																																	run: (*parser).callonimportsAndComments477,
																																	expr: &seqExpr{
																																		pos: position{line: 2338, col: 5, offset: 80103},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2338, col: 5, offset: 80103},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 14, offset: 80112},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 26, offset: 80124},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2355, col: 19, offset: 80741},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2355, col: 19, offset: 80741},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2356, col: 5, offset: 80800},
																																	run: (*parser).callonimportsAndComments490,
																																	expr: &seqExpr{
																																		pos: position{line: 2356, col: 5, offset: 80800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2356, col: 5, offset: 80800},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 14, offset: 80809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 26, offset: 80821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 38, offset: 80833},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 50, offset: 80845},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2385, col: 16, offset: 81981},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2385, col: 16, offset: 81981},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2386, col: 5, offset: 82084},
																																	run: (*parser).callonimportsAndComments511,
																																	expr: &seqExpr{
																																		pos: position{line: 2386, col: 5, offset: 82084},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2386, col: 5, offset: 82084},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 14, offset: 82093},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 26, offset: 82105},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 38, offset: 82117},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 50, offset: 82129},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 62, offset: 82141},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 74, offset: 82153},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 86, offset: 82165},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 98, offset: 82177},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2613, col: 36, offset: 91114},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2613, col: 36, offset: 91114},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2613, col: 41, offset: 91119},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2611, col: 38, offset: 91006},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2500, col: 37, offset: 86764},
																																	run: (*parser).callonimportsAndComments534,
																																	expr: &seqExpr{
																																		pos: position{line: 2500, col: 37, offset: 86764},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2500, col: 37, offset: 86764},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2524, col: 5, offset: 87781},
																																	run: (*parser).callonimportsAndComments545,
																																	expr: &seqExpr{
																																		pos: position{line: 2524, col: 5, offset: 87781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2524, col: 5, offset: 87781},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2545, col: 5, offset: 88623},
																																	run: (*parser).callonimportsAndComments552,
																																	expr: &seqExpr{
																																		pos: position{line: 2545, col: 5, offset: 88623},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2545, col: 5, offset: 88623},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2563, col: 5, offset: 89309},
																																	run: (*parser).callonimportsAndComments557,
																																	expr: &seqExpr{
																																		pos: position{line: 2563, col: 5, offset: 89309},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2563, col: 5, offset: 89309},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2563, col: 10, offset: 89314},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3607, col: 12, offset: 123375},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 787, col: 115, offset: 24126},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 789, col: 5, offset: 24218},
																										run: (*parser).callonimportsAndComments563,
																										expr: &seqExpr{
																											pos: position{line: 789, col: 5, offset: 24218},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 789, col: 5, offset: 24218},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 789, col: 9, offset: 24222},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 789, col: 14, offset: 24227},
																														expr: &choiceExpr{
																															pos: position{line: 789, col: 15, offset: 24228},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2336, col: 24, offset: 79999},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2336, col: 24, offset: 79999},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2337, col: 24, offset: 80066},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2337, col: 24, offset: 80066},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2338, col: 5, offset: 80103},
																																	run: (*parser).callonimportsAndComments578,
																																	expr: &seqExpr{
																																		pos: position{line: 2338, col: 5, offset: 80103},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2338, col: 5, offset: 80103},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 14, offset: 80112},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 26, offset: 80124},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2355, col: 19, offset: 80741},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2355, col: 19, offset: 80741},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2356, col: 5, offset: 80800},
																																	run: (*parser).callonimportsAndComments591,
																																	expr: &seqExpr{
																																		pos: position{line: 2356, col: 5, offset: 80800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2356, col: 5, offset: 80800},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 14, offset: 80809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 26, offset: 80821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 38, offset: 80833},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 50, offset: 80845},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2385, col: 16, offset: 81981},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2385, col: 16, offset: 81981},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2386, col: 5, offset: 82084},
																																	run: (*parser).callonimportsAndComments612,
																																	expr: &seqExpr{
																																		pos: position{line: 2386, col: 5, offset: 82084},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2386, col: 5, offset: 82084},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 14, offset: 82093},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 26, offset: 82105},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 38, offset: 82117},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 50, offset: 82129},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 62, offset: 82141},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 74, offset: 82153},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 86, offset: 82165},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 98, offset: 82177},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2613, col: 36, offset: 91114},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2613, col: 36, offset: 91114},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2613, col: 41, offset: 91119},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2611, col: 38, offset: 91006},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2500, col: 37, offset: 86764},
																																	run: (*parser).callonimportsAndComments635,
																																	expr: &seqExpr{
																																		pos: position{line: 2500, col: 37, offset: 86764},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2500, col: 37, offset: 86764},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2524, col: 5, offset: 87781},
																																	run: (*parser).callonimportsAndComments646,
																																	expr: &seqExpr{
																																		pos: position{line: 2524, col: 5, offset: 87781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2524, col: 5, offset: 87781},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2545, col: 5, offset: 88623},
																																	run: (*parser).callonimportsAndComments653,
																																	expr: &seqExpr{
																																		pos: position{line: 2545, col: 5, offset: 88623},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2545, col: 5, offset: 88623},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2563, col: 5, offset: 89309},
																																	run: (*parser).callonimportsAndComments658,
																																	expr: &seqExpr{
																																		pos: position{line: 2563, col: 5, offset: 89309},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2563, col: 5, offset: 89309},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2563, col: 10, offset: 89314},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3607, col: 12, offset: 123375},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 789, col: 98, offset: 24311},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3609, col: 8, offset: 123391},
																														run: (*parser).callonimportsAndComments664,
																														expr: &choiceExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3609, col: 9, offset: 123392},
																																	expr: &anyMatcher{
																																		line: 3609, col: 10, offset: 123393,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3609, col: 14, offset: 123397},
																																	expr: &anyMatcher{
																																		line: 3609, col: 15, offset: 123398,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 789, col: 110, offset: 24323},
																													expr: &seqExpr{
																														pos: position{line: 3606, col: 12, offset: 123342},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3606, col: 12, offset: 123342},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3618, col: 36, offset: 123689},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3606, col: 16, offset: 123346},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3606, col: 16, offset: 123346},
																																				expr: &litMatcher{
																																					pos:        position{line: 3606, col: 16, offset: 123346},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3606, col: 22, offset: 123352},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3605, col: 12, offset: 123328},
																																		expr: &anyMatcher{
																																			line: 3605, col: 13, offset: 123329,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 808, col: 22, offset: 24729},
																										run: (*parser).callonimportsAndComments681,
																										expr: &seqExpr{
																											pos: position{line: 808, col: 22, offset: 24729},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 808, col: 22, offset: 24729},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 808, col: 27, offset: 24734},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 808, col: 32, offset: 24739},
																														expr: &charClassMatcher{
																															pos:        position{line: 808, col: 32, offset: 24739},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 808, col: 42, offset: 24749},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 808, col: 47, offset: 24754},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3609, col: 8, offset: 123391},
																														run: (*parser).callonimportsAndComments689,
																														expr: &choiceExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3609, col: 9, offset: 123392},
																																	expr: &anyMatcher{
																																		line: 3609, col: 10, offset: 123393,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3609, col: 14, offset: 123397},
																																	expr: &anyMatcher{
																																		line: 3609, col: 15, offset: 123398,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3073, col: 21, offset: 106416},
																										run: (*parser).callonimportsAndComments695,
																										expr: &labeledExpr{
																											pos:   position{line: 3073, col: 21, offset: 106416},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3073, col: 27, offset: 106422},
																												expr: &charClassMatcher{
																													pos:        position{line: 3607, col: 12, offset: 123375},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3606, col: 12, offset: 123342},
																							expr: &charClassMatcher{
																								pos:        position{line: 3618, col: 36, offset: 123689},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3606, col: 16, offset: 123346},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3606, col: 16, offset: 123346},
																											expr: &litMatcher{
																												pos:        position{line: 3606, col: 16, offset: 123346},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3606, col: 22, offset: 123352},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3605, col: 12, offset: 123328},
																									expr: &anyMatcher{
																										line: 3605, col: 13, offset: 123329,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3121, col: 5, offset: 107866},
																run: (*parser).callonimportsAndComments708,
																expr: &seqExpr{
																	pos: position{line: 3121, col: 5, offset: 107866},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3121, col: 5, offset: 107866},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3121, col: 14, offset: 107875},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonimportsAndComments712,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3606, col: 12, offset: 123342},
																			expr: &charClassMatcher{
																				pos:        position{line: 3618, col: 36, offset: 123689},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							expr: &litMatcher{
																								pos:        position{line: 3606, col: 16, offset: 123346},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3606, col: 22, offset: 123352},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3605, col: 12, offset: 123328},
																					expr: &anyMatcher{
																						line: 3605, col: 13, offset: 123329,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "usesAndComments",
			pos:  position{line: 82, col: 1, offset: 2315},
			expr: &actionExpr{
				pos: position{line: 82, col: 20, offset: 2334},
				run: (*parser).callonusesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 82, col: 20, offset: 2334},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 82, col: 26, offset: 2340},
						expr: &seqExpr{
							pos: position{line: 82, col: 27, offset: 2341},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 82, col: 27, offset: 2341},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 27, offset: 2341},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 82, col: 42, offset: 2356},
									expr: &oneOrMoreExpr{
										pos: position{line: 3620, col: 36, offset: 123776},
										expr: &seqExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													expr: &litMatcher{
														pos:        position{line: 3619, col: 36, offset: 123730},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3619, col: 42, offset: 123736},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3169, col: 9, offset: 109337},
									run: (*parser).callonusesAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3169, col: 9, offset: 109337},
										label: "usesI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3169, col: 15, offset: 109343},
											expr: &seqExpr{
												pos: position{line: 3169, col: 16, offset: 109344},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3169, col: 16, offset: 109344},
														expr: &oneOrMoreExpr{
															pos: position{line: 3620, col: 36, offset: 123776},
															expr: &seqExpr{
																pos: position{line: 3620, col: 37, offset: 123777},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3620, col: 37, offset: 123777},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		expr: &litMatcher{
																			pos:        position{line: 3619, col: 36, offset: 123730},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3619, col: 42, offset: 123736},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3183, col: 8, offset: 109625},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3183, col: 8, offset: 109625},
																run: (*parser).callonusesAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3183, col: 8, offset: 109625},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3183, col: 8, offset: 109625},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3183, col: 15, offset: 109632},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3204, col: 13, offset: 110238},
																				run: (*parser).callonusesAndComments32,
																				expr: &seqExpr{
																					pos: position{line: 3204, col: 13, offset: 110238},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4088, col: 11, offset: 144044},
																							run: (*parser).callonusesAndComments34,
																						},
																						&labeledExpr{
																							pos:   position{line: 3204, col: 20, offset: 110245},
																							label: "usesI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 3204, col: 26, offset: 110251},
																								expr: &seqExpr{
																									pos: position{line: 3204, col: 27, offset: 110252},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3204, col: 27, offset: 110252},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3620, col: 36, offset: 123776},
																												expr: &seqExpr{
																													pos: position{line: 3620, col: 37, offset: 123777},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3620, col: 37, offset: 123777},
																															expr: &charClassMatcher{
																																pos:        position{line: 3618, col: 36, offset: 123689},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3619, col: 36, offset: 123730},
																															expr: &litMatcher{
																																pos:        position{line: 3619, col: 36, offset: 123730},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3619, col: 42, offset: 123736},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3707, col: 17, offset: 127583},
																											run: (*parser).callonusesAndComments46,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3707, col: 17, offset: 127583},
																												expr: &charClassMatcher{
																													pos:        position{line: 3618, col: 36, offset: 123689},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3707, col: 41, offset: 127607},
																											run: (*parser).callonusesAndComments49,
																										},
																										&choiceExpr{
																											pos: position{line: 3759, col: 5, offset: 129517},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3759, col: 5, offset: 129517},
																													run: (*parser).callonusesAndComments51,
																												},
																												&seqExpr{
																													pos: position{line: 3761, col: 9, offset: 129600},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3761, col: 9, offset: 129600},
																															run: (*parser).callonusesAndComments53,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3763, col: 7, offset: 129704},
																															run: (*parser).callonusesAndComments54,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3770, col: 9, offset: 130040},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3770, col: 9, offset: 130040},
																															run: (*parser).callonusesAndComments56,
																														},
																														&choiceExpr{
																															pos: position{line: 3823, col: 9, offset: 132375},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 3823, col: 9, offset: 132375},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 3823, col: 9, offset: 132375},
																																			run: (*parser).callonusesAndComments59,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 3827, col: 11, offset: 132625},
																																			run: (*parser).callonusesAndComments60,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 3893, col: 11, offset: 135831},
																																			run: (*parser).callonusesAndComments61,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 3901, col: 13, offset: 136184},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 3901, col: 13, offset: 136184},
																																			run: (*parser).callonusesAndComments63,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 3905, col: 11, offset: 136439},
																																			run: (*parser).callonusesAndComments64,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3208, col: 12, offset: 110368},
																											run: (*parser).callonusesAndComments65,
																											expr: &seqExpr{
																												pos: position{line: 3208, col: 12, offset: 110368},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3208, col: 12, offset: 110368},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3208, col: 19, offset: 110375},
																															expr: &seqExpr{
																																pos: position{line: 3208, col: 20, offset: 110376},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3221, col: 13, offset: 110645},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3221, col: 13, offset: 110645},
																																				run: (*parser).callonusesAndComments71,
																																				expr: &litMatcher{
																																					pos:        position{line: 3221, col: 13, offset: 110645},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 697, col: 10, offset: 21284},
																																				run: (*parser).callonusesAndComments73,
																																				expr: &labeledExpr{
																																					pos:   position{line: 697, col: 10, offset: 21284},
																																					label: "identI",
																																					expr: &seqExpr{
																																						pos: position{line: 2260, col: 17, offset: 77263},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2243, col: 20, offset: 77018},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2260, col: 26, offset: 77272},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2243, col: 20, offset: 77018},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 699, col: 5, offset: 21378},
																																				run: (*parser).callonusesAndComments79,
																																				expr: &seqExpr{
																																					pos: position{line: 699, col: 5, offset: 21378},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 699, col: 5, offset: 21378},
																																							label: "identI",
																																							expr: &seqExpr{
																																								pos: position{line: 699, col: 13, offset: 21386},
																																								exprs: []interface{}{
																																									&zeroOrOneExpr{
																																										pos: position{line: 699, col: 13, offset: 21386},
																																										expr: &litMatcher{
																																											pos:        position{line: 699, col: 13, offset: 21386},
																																											val:        "$",
																																											ignoreCase: false,
																																											want:       "\"$\"",
																																										},
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 699, col: 18, offset: 21391},
																																										expr: &choiceExpr{
																																											pos: position{line: 699, col: 19, offset: 21392},
																																											alternatives: []interface{}{
																																												&seqExpr{
																																													pos: position{line: 699, col: 19, offset: 21392},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 699, col: 19, offset: 21392},
																																															val:        "[\\pNd]",
																																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&charClassMatcher{
																																															pos:        position{line: 699, col: 28, offset: 21401},
																																															val:        "[_-\\pL]",
																																															chars:      []rune{'_', '-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																												&charClassMatcher{
																																													pos:        position{line: 699, col: 38, offset: 21411},
																																													val:        "[_-\\pL]",
																																													chars:      []rune{'_', '-'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 699, col: 49, offset: 21422},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3609, col: 8, offset: 123391},
																																								run: (*parser).callonusesAndComments92,
																																								expr: &choiceExpr{
																																									pos: position{line: 3609, col: 9, offset: 123392},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3609, col: 9, offset: 123392},
																																											expr: &anyMatcher{
																																												line: 3609, col: 10, offset: 123393,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3609, col: 14, offset: 123397},
																																											expr: &anyMatcher{
																																												line: 3609, col: 15, offset: 123398,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3223, col: 13, offset: 110720},
																																				run: (*parser).callonusesAndComments98,
																																				expr: &seqExpr{
																																					pos: position{line: 3223, col: 13, offset: 110720},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3223, col: 13, offset: 110720},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3223, col: 13, offset: 110720},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3223, col: 22, offset: 110729},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3609, col: 8, offset: 123391},
																																								run: (*parser).callonusesAndComments103,
																																								expr: &choiceExpr{
																																									pos: position{line: 3609, col: 9, offset: 123392},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3609, col: 9, offset: 123392},
																																											expr: &anyMatcher{
																																												line: 3609, col: 10, offset: 123393,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3609, col: 14, offset: 123397},
																																											expr: &anyMatcher{
																																												line: 3609, col: 15, offset: 123398,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3208, col: 29, offset: 110385},
																																		expr: &litMatcher{
																																			pos:        position{line: 3208, col: 29, offset: 110385},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3208, col: 36, offset: 110392},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3073, col: 12, offset: 106407},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 766, col: 14, offset: 23471},
																																	run: (*parser).callonusesAndComments113,
																																	expr: &seqExpr{
																																		pos: position{line: 766, col: 14, offset: 23471},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 766, col: 14, offset: 23471},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 766, col: 18, offset: 23475},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 766, col: 23, offset: 23480},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2597, col: 27, offset: 90336},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 766, col: 47, offset: 23504},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 768, col: 5, offset: 23596},
																																	run: (*parser).callonusesAndComments120,
																																	expr: &seqExpr{
																																		pos: position{line: 768, col: 5, offset: 23596},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 768, col: 5, offset: 23596},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 768, col: 9, offset: 23600},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 768, col: 14, offset: 23605},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2597, col: 27, offset: 90336},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 768, col: 38, offset: 23629},
																																				expr: &seqExpr{
																																					pos: position{line: 3606, col: 12, offset: 123342},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3606, col: 12, offset: 123342},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3618, col: 36, offset: 123689},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3606, col: 16, offset: 123346},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3606, col: 16, offset: 123346},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3606, col: 16, offset: 123346},
																																											expr: &litMatcher{
																																												pos:        position{line: 3606, col: 16, offset: 123346},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3606, col: 22, offset: 123352},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3605, col: 12, offset: 123328},
																																									expr: &anyMatcher{
																																										line: 3605, col: 13, offset: 123329,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 787, col: 22, offset: 24033},
																																	run: (*parser).callonusesAndComments137,
																																	expr: &seqExpr{
																																		pos: position{line: 787, col: 22, offset: 24033},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 787, col: 22, offset: 24033},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 787, col: 26, offset: 24037},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 787, col: 31, offset: 24042},
																																					expr: &choiceExpr{
																																						pos: position{line: 787, col: 32, offset: 24043},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2336, col: 24, offset: 79999},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2336, col: 24, offset: 79999},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2337, col: 24, offset: 80066},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2337, col: 24, offset: 80066},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2338, col: 5, offset: 80103},
																																								run: (*parser).callonusesAndComments152,
																																								expr: &seqExpr{
																																									pos: position{line: 2338, col: 5, offset: 80103},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2338, col: 5, offset: 80103},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 14, offset: 80112},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 26, offset: 80124},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2355, col: 19, offset: 80741},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2355, col: 19, offset: 80741},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2356, col: 5, offset: 80800},
																																								run: (*parser).callonusesAndComments165,
																																								expr: &seqExpr{
																																									pos: position{line: 2356, col: 5, offset: 80800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2356, col: 5, offset: 80800},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 14, offset: 80809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 26, offset: 80821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 38, offset: 80833},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 50, offset: 80845},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2385, col: 16, offset: 81981},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2385, col: 16, offset: 81981},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2386, col: 5, offset: 82084},
																																								run: (*parser).callonusesAndComments186,
																																								expr: &seqExpr{
																																									pos: position{line: 2386, col: 5, offset: 82084},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2386, col: 5, offset: 82084},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 14, offset: 82093},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 26, offset: 82105},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 38, offset: 82117},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 50, offset: 82129},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 62, offset: 82141},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 74, offset: 82153},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 86, offset: 82165},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 98, offset: 82177},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2613, col: 36, offset: 91114},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2613, col: 36, offset: 91114},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2613, col: 41, offset: 91119},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2611, col: 38, offset: 91006},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2500, col: 37, offset: 86764},
																																								run: (*parser).callonusesAndComments209,
																																								expr: &seqExpr{
																																									pos: position{line: 2500, col: 37, offset: 86764},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2500, col: 37, offset: 86764},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2524, col: 5, offset: 87781},
																																								run: (*parser).callonusesAndComments220,
																																								expr: &seqExpr{
																																									pos: position{line: 2524, col: 5, offset: 87781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2524, col: 5, offset: 87781},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2545, col: 5, offset: 88623},
																																								run: (*parser).callonusesAndComments227,
																																								expr: &seqExpr{
																																									pos: position{line: 2545, col: 5, offset: 88623},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2545, col: 5, offset: 88623},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2563, col: 5, offset: 89309},
																																								run: (*parser).callonusesAndComments232,
																																								expr: &seqExpr{
																																									pos: position{line: 2563, col: 5, offset: 89309},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2563, col: 5, offset: 89309},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2563, col: 10, offset: 89314},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3607, col: 12, offset: 123375},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 787, col: 115, offset: 24126},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 789, col: 5, offset: 24218},
																																	run: (*parser).callonusesAndComments238,
																																	expr: &seqExpr{
																																		pos: position{line: 789, col: 5, offset: 24218},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 789, col: 5, offset: 24218},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 789, col: 9, offset: 24222},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 789, col: 14, offset: 24227},
																																					expr: &choiceExpr{
																																						pos: position{line: 789, col: 15, offset: 24228},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2336, col: 24, offset: 79999},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2336, col: 24, offset: 79999},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2253, col: 19, offset: 77188},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2337, col: 24, offset: 80066},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2337, col: 24, offset: 80066},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2338, col: 5, offset: 80103},
																																								run: (*parser).callonusesAndComments253,
																																								expr: &seqExpr{
																																									pos: position{line: 2338, col: 5, offset: 80103},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2338, col: 5, offset: 80103},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 14, offset: 80112},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2338, col: 26, offset: 80124},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2355, col: 19, offset: 80741},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2355, col: 19, offset: 80741},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2356, col: 5, offset: 80800},
																																								run: (*parser).callonusesAndComments266,
																																								expr: &seqExpr{
																																									pos: position{line: 2356, col: 5, offset: 80800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2356, col: 5, offset: 80800},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 14, offset: 80809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 26, offset: 80821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 38, offset: 80833},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2356, col: 50, offset: 80845},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2385, col: 16, offset: 81981},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2385, col: 16, offset: 81981},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2254, col: 19, offset: 77212},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2386, col: 5, offset: 82084},
																																								run: (*parser).callonusesAndComments287,
																																								expr: &seqExpr{
																																									pos: position{line: 2386, col: 5, offset: 82084},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2386, col: 5, offset: 82084},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 14, offset: 82093},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 26, offset: 82105},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 38, offset: 82117},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 50, offset: 82129},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 62, offset: 82141},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 74, offset: 82153},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 86, offset: 82165},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2386, col: 98, offset: 82177},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2254, col: 19, offset: 77212},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2613, col: 36, offset: 91114},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2613, col: 36, offset: 91114},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2613, col: 41, offset: 91119},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2611, col: 38, offset: 91006},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2500, col: 37, offset: 86764},
																																								run: (*parser).callonusesAndComments310,
																																								expr: &seqExpr{
																																									pos: position{line: 2500, col: 37, offset: 86764},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2500, col: 37, offset: 86764},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2524, col: 5, offset: 87781},
																																								run: (*parser).callonusesAndComments321,
																																								expr: &seqExpr{
																																									pos: position{line: 2524, col: 5, offset: 87781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2524, col: 5, offset: 87781},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2545, col: 5, offset: 88623},
																																								run: (*parser).callonusesAndComments328,
																																								expr: &seqExpr{
																																									pos: position{line: 2545, col: 5, offset: 88623},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2545, col: 5, offset: 88623},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2254, col: 19, offset: 77212},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2563, col: 5, offset: 89309},
																																								run: (*parser).callonusesAndComments333,
																																								expr: &seqExpr{
																																									pos: position{line: 2563, col: 5, offset: 89309},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2563, col: 5, offset: 89309},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2563, col: 10, offset: 89314},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3607, col: 12, offset: 123375},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 789, col: 98, offset: 24311},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3609, col: 8, offset: 123391},
																																					run: (*parser).callonusesAndComments339,
																																					expr: &choiceExpr{
																																						pos: position{line: 3609, col: 9, offset: 123392},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3609, col: 9, offset: 123392},
																																								expr: &anyMatcher{
																																									line: 3609, col: 10, offset: 123393,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3609, col: 14, offset: 123397},
																																								expr: &anyMatcher{
																																									line: 3609, col: 15, offset: 123398,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 789, col: 110, offset: 24323},
																																				expr: &seqExpr{
																																					pos: position{line: 3606, col: 12, offset: 123342},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3606, col: 12, offset: 123342},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3618, col: 36, offset: 123689},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3606, col: 16, offset: 123346},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3606, col: 16, offset: 123346},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3606, col: 16, offset: 123346},
																																											expr: &litMatcher{
																																												pos:        position{line: 3606, col: 16, offset: 123346},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3606, col: 22, offset: 123352},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3605, col: 12, offset: 123328},
																																									expr: &anyMatcher{
																																										line: 3605, col: 13, offset: 123329,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 808, col: 22, offset: 24729},
																																	run: (*parser).callonusesAndComments356,
																																	expr: &seqExpr{
																																		pos: position{line: 808, col: 22, offset: 24729},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 808, col: 22, offset: 24729},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 808, col: 27, offset: 24734},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 808, col: 32, offset: 24739},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 808, col: 32, offset: 24739},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 808, col: 42, offset: 24749},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 808, col: 47, offset: 24754},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3609, col: 8, offset: 123391},
																																					run: (*parser).callonusesAndComments364,
																																					expr: &choiceExpr{
																																						pos: position{line: 3609, col: 9, offset: 123392},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3609, col: 9, offset: 123392},
																																								expr: &anyMatcher{
																																									line: 3609, col: 10, offset: 123393,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3609, col: 14, offset: 123397},
																																								expr: &anyMatcher{
																																									line: 3609, col: 15, offset: 123398,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3073, col: 21, offset: 106416},
																																	run: (*parser).callonusesAndComments370,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3073, col: 21, offset: 106416},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3073, col: 27, offset: 106422},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3607, col: 12, offset: 123375},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3606, col: 12, offset: 123342},
																														expr: &charClassMatcher{
																															pos:        position{line: 3618, col: 36, offset: 123689},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3606, col: 16, offset: 123346},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3606, col: 16, offset: 123346},
																																		expr: &litMatcher{
																																			pos:        position{line: 3606, col: 16, offset: 123346},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3606, col: 22, offset: 123352},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3605, col: 12, offset: 123328},
																																expr: &anyMatcher{
																																	line: 3605, col: 13, offset: 123329,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4093, col: 11, offset: 144149},
																							run: (*parser).callonusesAndComments383,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3188, col: 5, offset: 109751},
																run: (*parser).callonusesAndComments384,
																expr: &seqExpr{
																	pos: position{line: 3188, col: 5, offset: 109751},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3188, col: 5, offset: 109751},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3188, col: 11, offset: 109757},
																			expr: &litMatcher{
																				pos:        position{line: 3188, col: 11, offset: 109757},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3188, col: 16, offset: 109762},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3208, col: 12, offset: 110368},
																				run: (*parser).callonusesAndComments390,
																				expr: &seqExpr{
																					pos: position{line: 3208, col: 12, offset: 110368},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3208, col: 12, offset: 110368},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3208, col: 19, offset: 110375},
																								expr: &seqExpr{
																									pos: position{line: 3208, col: 20, offset: 110376},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3221, col: 13, offset: 110645},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3221, col: 13, offset: 110645},
																													run: (*parser).callonusesAndComments396,
																													expr: &litMatcher{
																														pos:        position{line: 3221, col: 13, offset: 110645},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 697, col: 10, offset: 21284},
																													run: (*parser).callonusesAndComments398,
																													expr: &labeledExpr{
																														pos:   position{line: 697, col: 10, offset: 21284},
																														label: "identI",
																														expr: &seqExpr{
																															pos: position{line: 2260, col: 17, offset: 77263},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2243, col: 20, offset: 77018},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2260, col: 26, offset: 77272},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2243, col: 20, offset: 77018},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 699, col: 5, offset: 21378},
																													run: (*parser).callonusesAndComments404,
																													expr: &seqExpr{
																														pos: position{line: 699, col: 5, offset: 21378},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 699, col: 5, offset: 21378},
																																label: "identI",
																																expr: &seqExpr{
																																	pos: position{line: 699, col: 13, offset: 21386},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 699, col: 13, offset: 21386},
																																			expr: &litMatcher{
																																				pos:        position{line: 699, col: 13, offset: 21386},
																																				val:        "$",
																																				ignoreCase: false,
																																				want:       "\"$\"",
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 699, col: 18, offset: 21391},
																																			expr: &choiceExpr{
																																				pos: position{line: 699, col: 19, offset: 21392},
																																				alternatives: []interface{}{
																																					&seqExpr{
																																						pos: position{line: 699, col: 19, offset: 21392},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 699, col: 19, offset: 21392},
																																								val:        "[\\pNd]",
																																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 699, col: 28, offset: 21401},
																																								val:        "[_-\\pL]",
																																								chars:      []rune{'_', '-'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 699, col: 38, offset: 21411},
																																						val:        "[_-\\pL]",
																																						chars:      []rune{'_', '-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 699, col: 49, offset: 21422},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3609, col: 8, offset: 123391},
																																	run: (*parser).callonusesAndComments417,
																																	expr: &choiceExpr{
																																		pos: position{line: 3609, col: 9, offset: 123392},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3609, col: 9, offset: 123392},
																																				expr: &anyMatcher{
																																					line: 3609, col: 10, offset: 123393,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3609, col: 14, offset: 123397},
																																				expr: &anyMatcher{
																																					line: 3609, col: 15, offset: 123398,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3223, col: 13, offset: 110720},
																													run: (*parser).callonusesAndComments423,
																													expr: &seqExpr{
																														pos: position{line: 3223, col: 13, offset: 110720},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3223, col: 13, offset: 110720},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3223, col: 13, offset: 110720},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3223, col: 22, offset: 110729},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3609, col: 8, offset: 123391},
																																	run: (*parser).callonusesAndComments428,
																																	expr: &choiceExpr{
																																		pos: position{line: 3609, col: 9, offset: 123392},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3609, col: 9, offset: 123392},
																																				expr: &anyMatcher{
																																					line: 3609, col: 10, offset: 123393,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3609, col: 14, offset: 123397},
																																				expr: &anyMatcher{
																																					line: 3609, col: 15, offset: 123398,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3208, col: 29, offset: 110385},
																											expr: &litMatcher{
																												pos:        position{line: 3208, col: 29, offset: 110385},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3208, col: 36, offset: 110392},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3073, col: 12, offset: 106407},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 766, col: 14, offset: 23471},
																										run: (*parser).callonusesAndComments438,
																										expr: &seqExpr{
																											pos: position{line: 766, col: 14, offset: 23471},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 766, col: 14, offset: 23471},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 766, col: 18, offset: 23475},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 766, col: 23, offset: 23480},
																														expr: &charClassMatcher{
																															pos:        position{line: 2597, col: 27, offset: 90336},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 766, col: 47, offset: 23504},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 768, col: 5, offset: 23596},
																										run: (*parser).callonusesAndComments445,
																										expr: &seqExpr{
																											pos: position{line: 768, col: 5, offset: 23596},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 768, col: 5, offset: 23596},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 768, col: 9, offset: 23600},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 768, col: 14, offset: 23605},
																														expr: &charClassMatcher{
																															pos:        position{line: 2597, col: 27, offset: 90336},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 768, col: 38, offset: 23629},
																													expr: &seqExpr{
																														pos: position{line: 3606, col: 12, offset: 123342},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3606, col: 12, offset: 123342},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3618, col: 36, offset: 123689},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3606, col: 16, offset: 123346},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3606, col: 16, offset: 123346},
																																				expr: &litMatcher{
																																					pos:        position{line: 3606, col: 16, offset: 123346},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3606, col: 22, offset: 123352},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3605, col: 12, offset: 123328},
																																		expr: &anyMatcher{
																																			line: 3605, col: 13, offset: 123329,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 787, col: 22, offset: 24033},
																										run: (*parser).callonusesAndComments462,
																										expr: &seqExpr{
																											pos: position{line: 787, col: 22, offset: 24033},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 787, col: 22, offset: 24033},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 787, col: 26, offset: 24037},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 787, col: 31, offset: 24042},
																														expr: &choiceExpr{
																															pos: position{line: 787, col: 32, offset: 24043},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2336, col: 24, offset: 79999},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2336, col: 24, offset: 79999},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2337, col: 24, offset: 80066},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2337, col: 24, offset: 80066},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2338, col: 5, offset: 80103},
																																	run: (*parser).callonusesAndComments477,
																																	expr: &seqExpr{
																																		pos: position{line: 2338, col: 5, offset: 80103},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2338, col: 5, offset: 80103},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 14, offset: 80112},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 26, offset: 80124},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2355, col: 19, offset: 80741},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2355, col: 19, offset: 80741},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2356, col: 5, offset: 80800},
																																	run: (*parser).callonusesAndComments490,
																																	expr: &seqExpr{
																																		pos: position{line: 2356, col: 5, offset: 80800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2356, col: 5, offset: 80800},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 14, offset: 80809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 26, offset: 80821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 38, offset: 80833},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 50, offset: 80845},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2385, col: 16, offset: 81981},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2385, col: 16, offset: 81981},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2386, col: 5, offset: 82084},
																																	run: (*parser).callonusesAndComments511,
																																	expr: &seqExpr{
																																		pos: position{line: 2386, col: 5, offset: 82084},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2386, col: 5, offset: 82084},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 14, offset: 82093},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 26, offset: 82105},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 38, offset: 82117},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 50, offset: 82129},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 62, offset: 82141},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 74, offset: 82153},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 86, offset: 82165},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 98, offset: 82177},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2613, col: 36, offset: 91114},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2613, col: 36, offset: 91114},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2613, col: 41, offset: 91119},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2611, col: 38, offset: 91006},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2500, col: 37, offset: 86764},
																																	run: (*parser).callonusesAndComments534,
																																	expr: &seqExpr{
																																		pos: position{line: 2500, col: 37, offset: 86764},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2500, col: 37, offset: 86764},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2524, col: 5, offset: 87781},
																																	run: (*parser).callonusesAndComments545,
																																	expr: &seqExpr{
																																		pos: position{line: 2524, col: 5, offset: 87781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2524, col: 5, offset: 87781},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2545, col: 5, offset: 88623},
																																	run: (*parser).callonusesAndComments552,
																																	expr: &seqExpr{
																																		pos: position{line: 2545, col: 5, offset: 88623},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2545, col: 5, offset: 88623},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2563, col: 5, offset: 89309},
																																	run: (*parser).callonusesAndComments557,
																																	expr: &seqExpr{
																																		pos: position{line: 2563, col: 5, offset: 89309},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2563, col: 5, offset: 89309},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2563, col: 10, offset: 89314},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3607, col: 12, offset: 123375},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 787, col: 115, offset: 24126},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 789, col: 5, offset: 24218},
																										run: (*parser).callonusesAndComments563,
																										expr: &seqExpr{
																											pos: position{line: 789, col: 5, offset: 24218},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 789, col: 5, offset: 24218},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 789, col: 9, offset: 24222},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 789, col: 14, offset: 24227},
																														expr: &choiceExpr{
																															pos: position{line: 789, col: 15, offset: 24228},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2336, col: 24, offset: 79999},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2336, col: 24, offset: 79999},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2253, col: 19, offset: 77188},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2337, col: 24, offset: 80066},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2337, col: 24, offset: 80066},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2338, col: 5, offset: 80103},
																																	run: (*parser).callonusesAndComments578,
																																	expr: &seqExpr{
																																		pos: position{line: 2338, col: 5, offset: 80103},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2338, col: 5, offset: 80103},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 14, offset: 80112},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2338, col: 26, offset: 80124},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2355, col: 19, offset: 80741},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2355, col: 19, offset: 80741},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2356, col: 5, offset: 80800},
																																	run: (*parser).callonusesAndComments591,
																																	expr: &seqExpr{
																																		pos: position{line: 2356, col: 5, offset: 80800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2356, col: 5, offset: 80800},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 14, offset: 80809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 26, offset: 80821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 38, offset: 80833},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2356, col: 50, offset: 80845},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2385, col: 16, offset: 81981},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2385, col: 16, offset: 81981},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2254, col: 19, offset: 77212},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2386, col: 5, offset: 82084},
																																	run: (*parser).callonusesAndComments612,
																																	expr: &seqExpr{
																																		pos: position{line: 2386, col: 5, offset: 82084},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2386, col: 5, offset: 82084},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 14, offset: 82093},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 26, offset: 82105},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 38, offset: 82117},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 50, offset: 82129},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 62, offset: 82141},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 74, offset: 82153},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 86, offset: 82165},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2386, col: 98, offset: 82177},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2254, col: 19, offset: 77212},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2613, col: 36, offset: 91114},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2613, col: 36, offset: 91114},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2613, col: 41, offset: 91119},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2611, col: 38, offset: 91006},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2500, col: 37, offset: 86764},
																																	run: (*parser).callonusesAndComments635,
																																	expr: &seqExpr{
																																		pos: position{line: 2500, col: 37, offset: 86764},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2500, col: 37, offset: 86764},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2524, col: 5, offset: 87781},
																																	run: (*parser).callonusesAndComments646,
																																	expr: &seqExpr{
																																		pos: position{line: 2524, col: 5, offset: 87781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2524, col: 5, offset: 87781},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2545, col: 5, offset: 88623},
																																	run: (*parser).callonusesAndComments653,
																																	expr: &seqExpr{
																																		pos: position{line: 2545, col: 5, offset: 88623},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2545, col: 5, offset: 88623},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2254, col: 19, offset: 77212},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2563, col: 5, offset: 89309},
																																	run: (*parser).callonusesAndComments658,
																																	expr: &seqExpr{
																																		pos: position{line: 2563, col: 5, offset: 89309},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2563, col: 5, offset: 89309},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2563, col: 10, offset: 89314},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3607, col: 12, offset: 123375},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 789, col: 98, offset: 24311},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3609, col: 8, offset: 123391},
																														run: (*parser).callonusesAndComments664,
																														expr: &choiceExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3609, col: 9, offset: 123392},
																																	expr: &anyMatcher{
																																		line: 3609, col: 10, offset: 123393,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3609, col: 14, offset: 123397},
																																	expr: &anyMatcher{
																																		line: 3609, col: 15, offset: 123398,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 789, col: 110, offset: 24323},
																													expr: &seqExpr{
																														pos: position{line: 3606, col: 12, offset: 123342},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3606, col: 12, offset: 123342},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3618, col: 36, offset: 123689},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3606, col: 16, offset: 123346},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3606, col: 16, offset: 123346},
																																				expr: &litMatcher{
																																					pos:        position{line: 3606, col: 16, offset: 123346},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3606, col: 22, offset: 123352},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3605, col: 12, offset: 123328},
																																		expr: &anyMatcher{
																																			line: 3605, col: 13, offset: 123329,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 808, col: 22, offset: 24729},
																										run: (*parser).callonusesAndComments681,
																										expr: &seqExpr{
																											pos: position{line: 808, col: 22, offset: 24729},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 808, col: 22, offset: 24729},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 808, col: 27, offset: 24734},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 808, col: 32, offset: 24739},
																														expr: &charClassMatcher{
																															pos:        position{line: 808, col: 32, offset: 24739},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 808, col: 42, offset: 24749},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 808, col: 47, offset: 24754},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3609, col: 8, offset: 123391},
																														run: (*parser).callonusesAndComments689,
																														expr: &choiceExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3609, col: 9, offset: 123392},
																																	expr: &anyMatcher{
																																		line: 3609, col: 10, offset: 123393,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3609, col: 14, offset: 123397},
																																	expr: &anyMatcher{
																																		line: 3609, col: 15, offset: 123398,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3073, col: 21, offset: 106416},
																										run: (*parser).callonusesAndComments695,
																										expr: &labeledExpr{
																											pos:   position{line: 3073, col: 21, offset: 106416},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3073, col: 27, offset: 106422},
																												expr: &charClassMatcher{
																													pos:        position{line: 3607, col: 12, offset: 123375},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3606, col: 12, offset: 123342},
																							expr: &charClassMatcher{
																								pos:        position{line: 3618, col: 36, offset: 123689},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3606, col: 16, offset: 123346},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3606, col: 16, offset: 123346},
																											expr: &litMatcher{
																												pos:        position{line: 3606, col: 16, offset: 123346},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3606, col: 22, offset: 123352},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3605, col: 12, offset: 123328},
																									expr: &anyMatcher{
																										line: 3605, col: 13, offset: 123329,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3193, col: 5, offset: 109892},
																run: (*parser).callonusesAndComments708,
																expr: &seqExpr{
																	pos: position{line: 3193, col: 5, offset: 109892},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3193, col: 5, offset: 109892},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3193, col: 11, offset: 109898},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonusesAndComments712,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3606, col: 12, offset: 123342},
																			expr: &charClassMatcher{
																				pos:        position{line: 3618, col: 36, offset: 123689},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							expr: &litMatcher{
																								pos:        position{line: 3606, col: 16, offset: 123346},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3606, col: 22, offset: 123352},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3605, col: 12, offset: 123328},
																					expr: &anyMatcher{
																						line: 3605, col: 13, offset: 123329,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "codesAndComments",
			pos:  position{line: 96, col: 1, offset: 2704},
			expr: &actionExpr{
				pos: position{line: 96, col: 21, offset: 2724},
				run: (*parser).calloncodesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 96, col: 21, offset: 2724},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 96, col: 27, offset: 2730},
						expr: &seqExpr{
							pos: position{line: 96, col: 28, offset: 2731},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 96, col: 28, offset: 2731},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 28, offset: 2731},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 96, col: 43, offset: 2746},
									expr: &oneOrMoreExpr{
										pos: position{line: 3620, col: 36, offset: 123776},
										expr: &seqExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													expr: &litMatcher{
														pos:        position{line: 3619, col: 36, offset: 123730},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3619, col: 42, offset: 123736},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 52, offset: 2755},
									name: "Codes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "globalCodeAndFunc",
			pos:  position{line: 110, col: 1, offset: 3101},
			expr: &actionExpr{
				pos: position{line: 110, col: 22, offset: 3122},
				run: (*parser).callonglobalCodeAndFunc1,
				expr: &seqExpr{
					pos: position{line: 110, col: 22, offset: 3122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 110, col: 22, offset: 3122},
							label: "codesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 40, offset: 3140},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 40, offset: 3140},
									name: "codesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 110, col: 58, offset: 3158},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 67, offset: 3167},
							label: "commentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 77, offset: 3177},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 77, offset: 3177},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 110, col: 92, offset: 3192},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 101, offset: 3201},
							label: "funcI",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 107, offset: 3207},
								name: "Func",
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 148, col: 1, offset: 4585},
			expr: &actionExpr{
				pos: position{line: 148, col: 10, offset: 4594},
				run: (*parser).callonScope1,
				expr: &labeledExpr{
					pos:   position{line: 148, col: 10, offset: 4594},
					label: "itemsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 148, col: 17, offset: 4601},
						expr: &seqExpr{
							pos: position{line: 148, col: 18, offset: 4602},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 148, col: 18, offset: 4602},
									expr: &oneOrMoreExpr{
										pos: position{line: 3620, col: 36, offset: 123776},
										expr: &seqExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													expr: &litMatcher{
														pos:        position{line: 3619, col: 36, offset: 123730},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3619, col: 42, offset: 123736},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3707, col: 17, offset: 127583},
									run: (*parser).callonScope13,
									expr: &zeroOrMoreExpr{
										pos: position{line: 3707, col: 17, offset: 127583},
										expr: &charClassMatcher{
											pos:        position{line: 3618, col: 36, offset: 123689},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 3707, col: 41, offset: 127607},
									run: (*parser).callonScope16,
								},
								&choiceExpr{
									pos: position{line: 3759, col: 5, offset: 129517},
									alternatives: []interface{}{
										&andCodeExpr{
											pos: position{line: 3759, col: 5, offset: 129517},
											run: (*parser).callonScope18,
										},
										&seqExpr{
											pos: position{line: 3761, col: 9, offset: 129600},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3761, col: 9, offset: 129600},
													run: (*parser).callonScope20,
												},
												&stateCodeExpr{
													pos: position{line: 3763, col: 7, offset: 129704},
													run: (*parser).callonScope21,
												},
											},
										},
										&seqExpr{
											pos: position{line: 3770, col: 9, offset: 130040},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3770, col: 9, offset: 130040},
													run: (*parser).callonScope23,
												},
												&choiceExpr{
													pos: position{line: 3823, col: 9, offset: 132375},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3823, col: 9, offset: 132375},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 3823, col: 9, offset: 132375},
																	run: (*parser).callonScope26,
																},
																&andCodeExpr{
																	pos: position{line: 3827, col: 11, offset: 132625},
																	run: (*parser).callonScope27,
																},
																&stateCodeExpr{
																	pos: position{line: 3893, col: 11, offset: 135831},
																	run: (*parser).callonScope28,
																},
															},
														},
														&seqExpr{
															pos: position{line: 3901, col: 13, offset: 136184},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 3901, col: 13, offset: 136184},
																	run: (*parser).callonScope30,
																},
																&andCodeExpr{
																	pos: position{line: 3905, col: 11, offset: 136439},
																	run: (*parser).callonScope31,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 39, offset: 4623},
									name: "scopeItem",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "scopeItem",
			pos:  position{line: 162, col: 1, offset: 4929},
			expr: &choiceExpr{
				pos: position{line: 163, col: 5, offset: 4948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 163, col: 5, offset: 4948},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 163, col: 13, offset: 4956},
						name: "Prepend",
					},
					&ruleRefExpr{
						pos:  position{line: 163, col: 23, offset: 4966},
						name: "Append",
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 5, offset: 4995},
						name: "Code",
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 5, offset: 5041},
						name: "If",
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 10, offset: 5046},
						name: "IfBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 20, offset: 5056},
						name: "Switch",
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 29, offset: 5065},
						name: "For",
					},
					&ruleRefExpr{
						pos:  position{line: 166, col: 5, offset: 5101},
						name: "CorgiComment",
					},
					&ruleRefExpr{
						pos:  position{line: 167, col: 5, offset: 5148},
						name: "HTMLComment",
					},
					&ruleRefExpr{
						pos:  position{line: 167, col: 19, offset: 5162},
						name: "And",
					},
					&actionExpr{
						pos: position{line: 2145, col: 14, offset: 73744},
						run: (*parser).callonscopeItem13,
						expr: &seqExpr{
							pos: position{line: 2145, col: 14, offset: 73744},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2145, col: 14, offset: 73744},
									val:        ":raw",
									ignoreCase: false,
									want:       "\":raw\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2145, col: 25, offset: 73755},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2145, col: 31, offset: 73761},
										expr: &actionExpr{
											pos: position{line: 2197, col: 15, offset: 75456},
											run: (*parser).callonscopeItem27,
											expr: &seqExpr{
												pos: position{line: 2197, col: 15, offset: 75456},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4088, col: 11, offset: 144044},
														run: (*parser).callonscopeItem29,
													},
													&labeledExpr{
														pos:   position{line: 2197, col: 22, offset: 75463},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2197, col: 29, offset: 75470},
															expr: &seqExpr{
																pos: position{line: 2197, col: 30, offset: 75471},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2197, col: 30, offset: 75471},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3620, col: 36, offset: 123776},
																			expr: &seqExpr{
																				pos: position{line: 3620, col: 37, offset: 123777},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3620, col: 37, offset: 123777},
																						expr: &charClassMatcher{
																							pos:        position{line: 3618, col: 36, offset: 123689},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3619, col: 36, offset: 123730},
																						expr: &litMatcher{
																							pos:        position{line: 3619, col: 36, offset: 123730},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3619, col: 42, offset: 123736},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2201, col: 15, offset: 75585},
																		run: (*parser).callonscopeItem41,
																		expr: &seqExpr{
																			pos: position{line: 2201, col: 15, offset: 75585},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3707, col: 17, offset: 127583},
																					run: (*parser).callonscopeItem43,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3707, col: 17, offset: 127583},
																						expr: &charClassMatcher{
																							pos:        position{line: 3618, col: 36, offset: 123689},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3707, col: 41, offset: 127607},
																					run: (*parser).callonscopeItem46,
																				},
																				&choiceExpr{
																					pos: position{line: 3759, col: 5, offset: 129517},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3759, col: 5, offset: 129517},
																							run: (*parser).callonscopeItem48,
																						},
																						&seqExpr{
																							pos: position{line: 3761, col: 9, offset: 129600},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3761, col: 9, offset: 129600},
																									run: (*parser).callonscopeItem50,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3763, col: 7, offset: 129704},
																									run: (*parser).callonscopeItem51,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3770, col: 9, offset: 130040},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3770, col: 9, offset: 130040},
																									run: (*parser).callonscopeItem53,
																								},
																								&choiceExpr{
																									pos: position{line: 3823, col: 9, offset: 132375},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3823, col: 9, offset: 132375},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3823, col: 9, offset: 132375},
																													run: (*parser).callonscopeItem56,
																												},
																												&andCodeExpr{
																													pos: position{line: 3827, col: 11, offset: 132625},
																													run: (*parser).callonscopeItem57,
																												},
																												&stateCodeExpr{
																													pos: position{line: 3893, col: 11, offset: 135831},
																													run: (*parser).callonscopeItem58,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 3901, col: 13, offset: 136184},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3901, col: 13, offset: 136184},
																													run: (*parser).callonscopeItem60,
																												},
																												&andCodeExpr{
																													pos: position{line: 3905, col: 11, offset: 136439},
																													run: (*parser).callonscopeItem61,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2201, col: 27, offset: 75597},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3609, col: 8, offset: 123391},
																						run: (*parser).callonscopeItem63,
																						expr: &choiceExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									expr: &anyMatcher{
																										line: 3609, col: 10, offset: 123393,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3609, col: 14, offset: 123397},
																									expr: &anyMatcher{
																										line: 3609, col: 15, offset: 123398,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2201, col: 36, offset: 75606},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2201, col: 42, offset: 75612},
																						expr: &charClassMatcher{
																							pos:        position{line: 3607, col: 12, offset: 123375},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3606, col: 12, offset: 123342},
																					expr: &charClassMatcher{
																						pos:        position{line: 3618, col: 36, offset: 123689},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3606, col: 16, offset: 123346},
																									expr: &litMatcher{
																										pos:        position{line: 3606, col: 16, offset: 123346},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3606, col: 22, offset: 123352},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3605, col: 12, offset: 123328},
																							expr: &anyMatcher{
																								line: 3605, col: 13, offset: 123329,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4093, col: 11, offset: 144149},
														run: (*parser).callonscopeItem81,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2156, col: 18, offset: 74102},
						run: (*parser).callonscopeItem82,
						expr: &seqExpr{
							pos: position{line: 2156, col: 18, offset: 74102},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2156, col: 18, offset: 74102},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 2156, col: 22, offset: 74106},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 2156, col: 28, offset: 74112},
										expr: &charClassMatcher{
											pos:        position{line: 2156, col: 28, offset: 74112},
											val:        "[^ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2156, col: 40, offset: 74124},
									label: "argsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2156, col: 46, offset: 74130},
										expr: &seqExpr{
											pos: position{line: 2156, col: 47, offset: 74131},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2156, col: 47, offset: 74131},
													expr: &litMatcher{
														pos:        position{line: 2156, col: 47, offset: 74131},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&choiceExpr{
													pos: position{line: 2165, col: 21, offset: 74423},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2167, col: 27, offset: 74486},
															run: (*parser).callonscopeItem94,
															expr: &labeledExpr{
																pos:   position{line: 2167, col: 27, offset: 74486},
																label: "stringI",
																expr: &choiceExpr{
																	pos: position{line: 760, col: 11, offset: 23384},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 766, col: 14, offset: 23471},
																			run: (*parser).callonscopeItem97,
																			expr: &seqExpr{
																				pos: position{line: 766, col: 14, offset: 23471},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 766, col: 14, offset: 23471},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 766, col: 18, offset: 23475},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 766, col: 23, offset: 23480},
																							expr: &charClassMatcher{
																								pos:        position{line: 2597, col: 27, offset: 90336},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 766, col: 47, offset: 23504},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 768, col: 5, offset: 23596},
																			run: (*parser).callonscopeItem104,
																			expr: &seqExpr{
																				pos: position{line: 768, col: 5, offset: 23596},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 768, col: 5, offset: 23596},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 768, col: 9, offset: 23600},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 768, col: 14, offset: 23605},
																							expr: &charClassMatcher{
																								pos:        position{line: 2597, col: 27, offset: 90336},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 768, col: 38, offset: 23629},
																						expr: &seqExpr{
																							pos: position{line: 3606, col: 12, offset: 123342},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3606, col: 12, offset: 123342},
																									expr: &charClassMatcher{
																										pos:        position{line: 3618, col: 36, offset: 123689},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3606, col: 16, offset: 123346},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3606, col: 16, offset: 123346},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3606, col: 16, offset: 123346},
																													expr: &litMatcher{
																														pos:        position{line: 3606, col: 16, offset: 123346},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3606, col: 22, offset: 123352},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3605, col: 12, offset: 123328},
																											expr: &anyMatcher{
																												line: 3605, col: 13, offset: 123329,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 787, col: 22, offset: 24033},
																			run: (*parser).callonscopeItem121,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 22, offset: 24033},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 787, col: 22, offset: 24033},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 787, col: 26, offset: 24037},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 787, col: 31, offset: 24042},
																							expr: &choiceExpr{
																								pos: position{line: 787, col: 32, offset: 24043},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2336, col: 24, offset: 79999},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2336, col: 24, offset: 79999},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2253, col: 19, offset: 77188},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2253, col: 19, offset: 77188},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2253, col: 19, offset: 77188},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2337, col: 24, offset: 80066},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2337, col: 24, offset: 80066},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2338, col: 5, offset: 80103},
																										run: (*parser).callonscopeItem136,
																										expr: &seqExpr{
																											pos: position{line: 2338, col: 5, offset: 80103},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2338, col: 5, offset: 80103},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2338, col: 14, offset: 80112},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2338, col: 26, offset: 80124},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2355, col: 19, offset: 80741},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2355, col: 19, offset: 80741},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2356, col: 5, offset: 80800},
																										run: (*parser).callonscopeItem149,
																										expr: &seqExpr{
																											pos: position{line: 2356, col: 5, offset: 80800},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2356, col: 5, offset: 80800},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 14, offset: 80809},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 26, offset: 80821},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 38, offset: 80833},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 50, offset: 80845},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2385, col: 16, offset: 81981},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2385, col: 16, offset: 81981},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2386, col: 5, offset: 82084},
																										run: (*parser).callonscopeItem170,
																										expr: &seqExpr{
																											pos: position{line: 2386, col: 5, offset: 82084},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2386, col: 5, offset: 82084},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 14, offset: 82093},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 26, offset: 82105},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 38, offset: 82117},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 50, offset: 82129},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 62, offset: 82141},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 74, offset: 82153},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 86, offset: 82165},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 98, offset: 82177},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2613, col: 36, offset: 91114},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2613, col: 36, offset: 91114},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2613, col: 41, offset: 91119},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2611, col: 38, offset: 91006},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2500, col: 37, offset: 86764},
																										run: (*parser).callonscopeItem193,
																										expr: &seqExpr{
																											pos: position{line: 2500, col: 37, offset: 86764},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2500, col: 37, offset: 86764},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2524, col: 5, offset: 87781},
																										run: (*parser).callonscopeItem204,
																										expr: &seqExpr{
																											pos: position{line: 2524, col: 5, offset: 87781},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2524, col: 5, offset: 87781},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2545, col: 5, offset: 88623},
																										run: (*parser).callonscopeItem211,
																										expr: &seqExpr{
																											pos: position{line: 2545, col: 5, offset: 88623},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2545, col: 5, offset: 88623},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2563, col: 5, offset: 89309},
																										run: (*parser).callonscopeItem216,
																										expr: &seqExpr{
																											pos: position{line: 2563, col: 5, offset: 89309},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2563, col: 5, offset: 89309},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2563, col: 10, offset: 89314},
																													expr: &charClassMatcher{
																														pos:        position{line: 3607, col: 12, offset: 123375},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 787, col: 115, offset: 24126},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 789, col: 5, offset: 24218},
																			run: (*parser).callonscopeItem222,
																			expr: &seqExpr{
																				pos: position{line: 789, col: 5, offset: 24218},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 789, col: 5, offset: 24218},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 789, col: 9, offset: 24222},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 789, col: 14, offset: 24227},
																							expr: &choiceExpr{
																								pos: position{line: 789, col: 15, offset: 24228},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2336, col: 24, offset: 79999},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2336, col: 24, offset: 79999},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2253, col: 19, offset: 77188},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2253, col: 19, offset: 77188},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2253, col: 19, offset: 77188},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2337, col: 24, offset: 80066},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2337, col: 24, offset: 80066},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2338, col: 5, offset: 80103},
																										run: (*parser).callonscopeItem237,
																										expr: &seqExpr{
																											pos: position{line: 2338, col: 5, offset: 80103},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2338, col: 5, offset: 80103},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2338, col: 14, offset: 80112},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2338, col: 26, offset: 80124},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2355, col: 19, offset: 80741},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2355, col: 19, offset: 80741},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2356, col: 5, offset: 80800},
																										run: (*parser).callonscopeItem250,
																										expr: &seqExpr{
																											pos: position{line: 2356, col: 5, offset: 80800},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2356, col: 5, offset: 80800},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 14, offset: 80809},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 26, offset: 80821},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 38, offset: 80833},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2356, col: 50, offset: 80845},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2385, col: 16, offset: 81981},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2385, col: 16, offset: 81981},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2386, col: 5, offset: 82084},
																										run: (*parser).callonscopeItem271,
																										expr: &seqExpr{
																											pos: position{line: 2386, col: 5, offset: 82084},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2386, col: 5, offset: 82084},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 14, offset: 82093},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 26, offset: 82105},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 38, offset: 82117},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 50, offset: 82129},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 62, offset: 82141},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 74, offset: 82153},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 86, offset: 82165},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2386, col: 98, offset: 82177},
																													expr: &charClassMatcher{
																														pos:        position{line: 2254, col: 19, offset: 77212},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2613, col: 36, offset: 91114},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2613, col: 36, offset: 91114},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2613, col: 41, offset: 91119},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2611, col: 38, offset: 91006},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2500, col: 37, offset: 86764},
																										run: (*parser).callonscopeItem294,
																										expr: &seqExpr{
																											pos: position{line: 2500, col: 37, offset: 86764},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2500, col: 37, offset: 86764},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2524, col: 5, offset: 87781},
																										run: (*parser).callonscopeItem305,
																										expr: &seqExpr{
																											pos: position{line: 2524, col: 5, offset: 87781},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2524, col: 5, offset: 87781},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2545, col: 5, offset: 88623},
																										run: (*parser).callonscopeItem312,
																										expr: &seqExpr{
																											pos: position{line: 2545, col: 5, offset: 88623},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2545, col: 5, offset: 88623},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2563, col: 5, offset: 89309},
																										run: (*parser).callonscopeItem317,
																										expr: &seqExpr{
																											pos: position{line: 2563, col: 5, offset: 89309},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2563, col: 5, offset: 89309},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2563, col: 10, offset: 89314},
																													expr: &charClassMatcher{
																														pos:        position{line: 3607, col: 12, offset: 123375},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 789, col: 98, offset: 24311},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3609, col: 8, offset: 123391},
																							run: (*parser).callonscopeItem323,
																							expr: &choiceExpr{
																								pos: position{line: 3609, col: 9, offset: 123392},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3609, col: 9, offset: 123392},
																										expr: &anyMatcher{
																											line: 3609, col: 10, offset: 123393,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3609, col: 14, offset: 123397},
																										expr: &anyMatcher{
																											line: 3609, col: 15, offset: 123398,
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 789, col: 110, offset: 24323},
																						expr: &seqExpr{
																							pos: position{line: 3606, col: 12, offset: 123342},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3606, col: 12, offset: 123342},
																									expr: &charClassMatcher{
																										pos:        position{line: 3618, col: 36, offset: 123689},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3606, col: 16, offset: 123346},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3606, col: 16, offset: 123346},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3606, col: 16, offset: 123346},
																													expr: &litMatcher{
																														pos:        position{line: 3606, col: 16, offset: 123346},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3606, col: 22, offset: 123352},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3605, col: 12, offset: 123328},
																											expr: &anyMatcher{
																												line: 3605, col: 13, offset: 123329,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 808, col: 22, offset: 24729},
																			run: (*parser).callonscopeItem340,
																			expr: &seqExpr{
																				pos: position{line: 808, col: 22, offset: 24729},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 808, col: 22, offset: 24729},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 808, col: 27, offset: 24734},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 808, col: 32, offset: 24739},
																							expr: &charClassMatcher{
																								pos:        position{line: 808, col: 32, offset: 24739},
																								val:        "[^\\\\r\\n]",
																								chars:      []rune{'\'', '\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 808, col: 42, offset: 24749},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 808, col: 47, offset: 24754},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3609, col: 8, offset: 123391},
																							run: (*parser).callonscopeItem348,
																							expr: &choiceExpr{
																								pos: position{line: 3609, col: 9, offset: 123392},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3609, col: 9, offset: 123392},
																										expr: &anyMatcher{
																											line: 3609, col: 10, offset: 123393,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3609, col: 14, offset: 123397},
																										expr: &anyMatcher{
																											line: 3609, col: 15, offset: 123398,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2171, col: 15, offset: 74587},
															run: (*parser).callonscopeItem354,
															expr: &labeledExpr{
																pos:   position{line: 2171, col: 15, offset: 74587},
																label: "argI",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2171, col: 20, offset: 74592},
																	expr: &charClassMatcher{
																		pos:        position{line: 2171, col: 20, offset: 74592},
																		val:        "[^ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2156, col: 75, offset: 74159},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2156, col: 81, offset: 74165},
										expr: &actionExpr{
											pos: position{line: 2197, col: 15, offset: 75456},
											run: (*parser).callonscopeItem369,
											expr: &seqExpr{
												pos: position{line: 2197, col: 15, offset: 75456},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4088, col: 11, offset: 144044},
														run: (*parser).callonscopeItem371,
													},
													&labeledExpr{
														pos:   position{line: 2197, col: 22, offset: 75463},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2197, col: 29, offset: 75470},
															expr: &seqExpr{
																pos: position{line: 2197, col: 30, offset: 75471},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2197, col: 30, offset: 75471},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3620, col: 36, offset: 123776},
																			expr: &seqExpr{
																				pos: position{line: 3620, col: 37, offset: 123777},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3620, col: 37, offset: 123777},
																						expr: &charClassMatcher{
																							pos:        position{line: 3618, col: 36, offset: 123689},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3619, col: 36, offset: 123730},
																						expr: &litMatcher{
																							pos:        position{line: 3619, col: 36, offset: 123730},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3619, col: 42, offset: 123736},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2201, col: 15, offset: 75585},
																		run: (*parser).callonscopeItem383,
																		expr: &seqExpr{
																			pos: position{line: 2201, col: 15, offset: 75585},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3707, col: 17, offset: 127583},
																					run: (*parser).callonscopeItem385,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3707, col: 17, offset: 127583},
																						expr: &charClassMatcher{
																							pos:        position{line: 3618, col: 36, offset: 123689},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3707, col: 41, offset: 127607},
																					run: (*parser).callonscopeItem388,
																				},
																				&choiceExpr{
																					pos: position{line: 3759, col: 5, offset: 129517},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3759, col: 5, offset: 129517},
																							run: (*parser).callonscopeItem390,
																						},
																						&seqExpr{
																							pos: position{line: 3761, col: 9, offset: 129600},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3761, col: 9, offset: 129600},
																									run: (*parser).callonscopeItem392,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3763, col: 7, offset: 129704},
																									run: (*parser).callonscopeItem393,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3770, col: 9, offset: 130040},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3770, col: 9, offset: 130040},
																									run: (*parser).callonscopeItem395,
																								},
																								&choiceExpr{
																									pos: position{line: 3823, col: 9, offset: 132375},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3823, col: 9, offset: 132375},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3823, col: 9, offset: 132375},
																													run: (*parser).callonscopeItem398,
																												},
																												&andCodeExpr{
																													pos: position{line: 3827, col: 11, offset: 132625},
																													run: (*parser).callonscopeItem399,
																												},
																												&stateCodeExpr{
																													pos: position{line: 3893, col: 11, offset: 135831},
																													run: (*parser).callonscopeItem400,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 3901, col: 13, offset: 136184},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3901, col: 13, offset: 136184},
																													run: (*parser).callonscopeItem402,
																												},
																												&andCodeExpr{
																													pos: position{line: 3905, col: 11, offset: 136439},
																													run: (*parser).callonscopeItem403,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2201, col: 27, offset: 75597},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3609, col: 8, offset: 123391},
																						run: (*parser).callonscopeItem405,
																						expr: &choiceExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									expr: &anyMatcher{
																										line: 3609, col: 10, offset: 123393,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3609, col: 14, offset: 123397},
																									expr: &anyMatcher{
																										line: 3609, col: 15, offset: 123398,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2201, col: 36, offset: 75606},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2201, col: 42, offset: 75612},
																						expr: &charClassMatcher{
																							pos:        position{line: 3607, col: 12, offset: 123375},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3606, col: 12, offset: 123342},
																					expr: &charClassMatcher{
																						pos:        position{line: 3618, col: 36, offset: 123689},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3606, col: 16, offset: 123346},
																									expr: &litMatcher{
																										pos:        position{line: 3606, col: 16, offset: 123346},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3606, col: 22, offset: 123352},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3605, col: 12, offset: 123328},
																							expr: &anyMatcher{
																								line: 3605, col: 13, offset: 123329,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4093, col: 11, offset: 144149},
														run: (*parser).callonscopeItem423,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2179, col: 14, offset: 74887},
						run: (*parser).callonscopeItem424,
						expr: &seqExpr{
							pos: position{line: 2179, col: 14, offset: 74887},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2179, col: 14, offset: 74887},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2179, col: 22, offset: 74895},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2179, col: 28, offset: 74901},
										expr: &actionExpr{
											pos: position{line: 2197, col: 15, offset: 75456},
											run: (*parser).callonscopeItem438,
											expr: &seqExpr{
												pos: position{line: 2197, col: 15, offset: 75456},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4088, col: 11, offset: 144044},
														run: (*parser).callonscopeItem440,
													},
													&labeledExpr{
														pos:   position{line: 2197, col: 22, offset: 75463},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2197, col: 29, offset: 75470},
															expr: &seqExpr{
																pos: position{line: 2197, col: 30, offset: 75471},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2197, col: 30, offset: 75471},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3620, col: 36, offset: 123776},
																			expr: &seqExpr{
																				pos: position{line: 3620, col: 37, offset: 123777},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3620, col: 37, offset: 123777},
																						expr: &charClassMatcher{
																							pos:        position{line: 3618, col: 36, offset: 123689},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3619, col: 36, offset: 123730},
																						expr: &litMatcher{
																							pos:        position{line: 3619, col: 36, offset: 123730},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3619, col: 42, offset: 123736},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2201, col: 15, offset: 75585},
																		run: (*parser).callonscopeItem452,
																		expr: &seqExpr{
																			pos: position{line: 2201, col: 15, offset: 75585},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3707, col: 17, offset: 127583},
																					run: (*parser).callonscopeItem454,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3707, col: 17, offset: 127583},
																						expr: &charClassMatcher{
																							pos:        position{line: 3618, col: 36, offset: 123689},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3707, col: 41, offset: 127607},
																					run: (*parser).callonscopeItem457,
																				},
																				&choiceExpr{
																					pos: position{line: 3759, col: 5, offset: 129517},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3759, col: 5, offset: 129517},
																							run: (*parser).callonscopeItem459,
																						},
																						&seqExpr{
																							pos: position{line: 3761, col: 9, offset: 129600},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3761, col: 9, offset: 129600},
																									run: (*parser).callonscopeItem461,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3763, col: 7, offset: 129704},
																									run: (*parser).callonscopeItem462,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3770, col: 9, offset: 130040},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3770, col: 9, offset: 130040},
																									run: (*parser).callonscopeItem464,
																								},
																								&choiceExpr{
																									pos: position{line: 3823, col: 9, offset: 132375},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3823, col: 9, offset: 132375},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3823, col: 9, offset: 132375},
																													run: (*parser).callonscopeItem467,
																												},
																												&andCodeExpr{
																													pos: position{line: 3827, col: 11, offset: 132625},
																													run: (*parser).callonscopeItem468,
																												},
																												&stateCodeExpr{
																													pos: position{line: 3893, col: 11, offset: 135831},
																													run: (*parser).callonscopeItem469,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 3901, col: 13, offset: 136184},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3901, col: 13, offset: 136184},
																													run: (*parser).callonscopeItem471,
																												},
																												&andCodeExpr{
																													pos: position{line: 3905, col: 11, offset: 136439},
																													run: (*parser).callonscopeItem472,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2201, col: 27, offset: 75597},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3609, col: 8, offset: 123391},
																						run: (*parser).callonscopeItem474,
																						expr: &choiceExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									expr: &anyMatcher{
																										line: 3609, col: 10, offset: 123393,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3609, col: 14, offset: 123397},
																									expr: &anyMatcher{
																										line: 3609, col: 15, offset: 123398,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2201, col: 36, offset: 75606},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2201, col: 42, offset: 75612},
																						expr: &charClassMatcher{
																							pos:        position{line: 3607, col: 12, offset: 123375},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3606, col: 12, offset: 123342},
																					expr: &charClassMatcher{
																						pos:        position{line: 3618, col: 36, offset: 123689},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3606, col: 16, offset: 123346},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3606, col: 16, offset: 123346},
																									expr: &litMatcher{
																										pos:        position{line: 3606, col: 16, offset: 123346},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3606, col: 22, offset: 123352},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3605, col: 12, offset: 123328},
																							expr: &anyMatcher{
																								line: 3605, col: 13, offset: 123329,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4093, col: 11, offset: 144149},
														run: (*parser).callonscopeItem492,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2738, col: 12, offset: 95314},
						run: (*parser).callonscopeItem493,
						expr: &seqExpr{
							pos: position{line: 2738, col: 12, offset: 95314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2738, col: 12, offset: 95314},
									val:        "include",
									ignoreCase: false,
									want:       "\"include\"",
								},
								&labeledExpr{
									pos:   position{line: 2738, col: 22, offset: 95324},
									label: "pathI",
									expr: &choiceExpr{
										pos: position{line: 3059, col: 18, offset: 105981},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3059, col: 18, offset: 105981},
												run: (*parser).callonscopeItem498,
												expr: &seqExpr{
													pos: position{line: 3059, col: 18, offset: 105981},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 3059, col: 18, offset: 105981},
															expr: &litMatcher{
																pos:        position{line: 3059, col: 18, offset: 105981},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3059, col: 23, offset: 105986},
															label: "sI",
															expr: &choiceExpr{
																pos: position{line: 760, col: 11, offset: 23384},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 766, col: 14, offset: 23471},
																		run: (*parser).callonscopeItem504,
																		expr: &seqExpr{
																			pos: position{line: 766, col: 14, offset: 23471},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 766, col: 14, offset: 23471},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 766, col: 18, offset: 23475},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 766, col: 23, offset: 23480},
																						expr: &charClassMatcher{
																							pos:        position{line: 2597, col: 27, offset: 90336},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 766, col: 47, offset: 23504},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 768, col: 5, offset: 23596},
																		run: (*parser).callonscopeItem511,
																		expr: &seqExpr{
																			pos: position{line: 768, col: 5, offset: 23596},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 768, col: 5, offset: 23596},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 768, col: 9, offset: 23600},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 768, col: 14, offset: 23605},
																						expr: &charClassMatcher{
																							pos:        position{line: 2597, col: 27, offset: 90336},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 768, col: 38, offset: 23629},
																					expr: &seqExpr{
																						pos: position{line: 3606, col: 12, offset: 123342},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3606, col: 12, offset: 123342},
																								expr: &charClassMatcher{
																									pos:        position{line: 3618, col: 36, offset: 123689},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3606, col: 16, offset: 123346},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 16, offset: 123346},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												expr: &litMatcher{
																													pos:        position{line: 3606, col: 16, offset: 123346},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3606, col: 22, offset: 123352},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3605, col: 12, offset: 123328},
																										expr: &anyMatcher{
																											line: 3605, col: 13, offset: 123329,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 787, col: 22, offset: 24033},
																		run: (*parser).callonscopeItem528,
																		expr: &seqExpr{
																			pos: position{line: 787, col: 22, offset: 24033},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 787, col: 22, offset: 24033},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 787, col: 26, offset: 24037},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 787, col: 31, offset: 24042},
																						expr: &choiceExpr{
																							pos: position{line: 787, col: 32, offset: 24043},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2336, col: 24, offset: 79999},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2336, col: 24, offset: 79999},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2253, col: 19, offset: 77188},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2253, col: 19, offset: 77188},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2253, col: 19, offset: 77188},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2337, col: 24, offset: 80066},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2337, col: 24, offset: 80066},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2338, col: 5, offset: 80103},
																									run: (*parser).callonscopeItem543,
																									expr: &seqExpr{
																										pos: position{line: 2338, col: 5, offset: 80103},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2338, col: 5, offset: 80103},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2338, col: 14, offset: 80112},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2338, col: 26, offset: 80124},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2355, col: 19, offset: 80741},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2355, col: 19, offset: 80741},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2356, col: 5, offset: 80800},
																									run: (*parser).callonscopeItem556,
																									expr: &seqExpr{
																										pos: position{line: 2356, col: 5, offset: 80800},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2356, col: 5, offset: 80800},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 14, offset: 80809},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 26, offset: 80821},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 38, offset: 80833},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 50, offset: 80845},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2385, col: 16, offset: 81981},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2385, col: 16, offset: 81981},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2386, col: 5, offset: 82084},
																									run: (*parser).callonscopeItem577,
																									expr: &seqExpr{
																										pos: position{line: 2386, col: 5, offset: 82084},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2386, col: 5, offset: 82084},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 14, offset: 82093},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 26, offset: 82105},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 38, offset: 82117},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 50, offset: 82129},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 62, offset: 82141},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 74, offset: 82153},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 86, offset: 82165},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 98, offset: 82177},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2613, col: 36, offset: 91114},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2613, col: 36, offset: 91114},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2613, col: 41, offset: 91119},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2611, col: 38, offset: 91006},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2500, col: 37, offset: 86764},
																									run: (*parser).callonscopeItem600,
																									expr: &seqExpr{
																										pos: position{line: 2500, col: 37, offset: 86764},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2500, col: 37, offset: 86764},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2524, col: 5, offset: 87781},
																									run: (*parser).callonscopeItem611,
																									expr: &seqExpr{
																										pos: position{line: 2524, col: 5, offset: 87781},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2524, col: 5, offset: 87781},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2545, col: 5, offset: 88623},
																									run: (*parser).callonscopeItem618,
																									expr: &seqExpr{
																										pos: position{line: 2545, col: 5, offset: 88623},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2545, col: 5, offset: 88623},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2563, col: 5, offset: 89309},
																									run: (*parser).callonscopeItem623,
																									expr: &seqExpr{
																										pos: position{line: 2563, col: 5, offset: 89309},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2563, col: 5, offset: 89309},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2563, col: 10, offset: 89314},
																												expr: &charClassMatcher{
																													pos:        position{line: 3607, col: 12, offset: 123375},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 787, col: 115, offset: 24126},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 789, col: 5, offset: 24218},
																		run: (*parser).callonscopeItem629,
																		expr: &seqExpr{
																			pos: position{line: 789, col: 5, offset: 24218},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 789, col: 5, offset: 24218},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 789, col: 9, offset: 24222},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 789, col: 14, offset: 24227},
																						expr: &choiceExpr{
																							pos: position{line: 789, col: 15, offset: 24228},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2336, col: 24, offset: 79999},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2336, col: 24, offset: 79999},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2253, col: 19, offset: 77188},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2253, col: 19, offset: 77188},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2253, col: 19, offset: 77188},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2337, col: 24, offset: 80066},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2337, col: 24, offset: 80066},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2338, col: 5, offset: 80103},
																									run: (*parser).callonscopeItem644,
																									expr: &seqExpr{
																										pos: position{line: 2338, col: 5, offset: 80103},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2338, col: 5, offset: 80103},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2338, col: 14, offset: 80112},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2338, col: 26, offset: 80124},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2355, col: 19, offset: 80741},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2355, col: 19, offset: 80741},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2356, col: 5, offset: 80800},
																									run: (*parser).callonscopeItem657,
																									expr: &seqExpr{
																										pos: position{line: 2356, col: 5, offset: 80800},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2356, col: 5, offset: 80800},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 14, offset: 80809},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 26, offset: 80821},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 38, offset: 80833},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2356, col: 50, offset: 80845},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2385, col: 16, offset: 81981},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2385, col: 16, offset: 81981},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2386, col: 5, offset: 82084},
																									run: (*parser).callonscopeItem678,
																									expr: &seqExpr{
																										pos: position{line: 2386, col: 5, offset: 82084},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2386, col: 5, offset: 82084},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 14, offset: 82093},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 26, offset: 82105},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 38, offset: 82117},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 50, offset: 82129},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 62, offset: 82141},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 74, offset: 82153},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 86, offset: 82165},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2386, col: 98, offset: 82177},
																												expr: &charClassMatcher{
																													pos:        position{line: 2254, col: 19, offset: 77212},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2613, col: 36, offset: 91114},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2613, col: 36, offset: 91114},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2613, col: 41, offset: 91119},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2611, col: 38, offset: 91006},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2500, col: 37, offset: 86764},
																									run: (*parser).callonscopeItem701,
																									expr: &seqExpr{
																										pos: position{line: 2500, col: 37, offset: 86764},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2500, col: 37, offset: 86764},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2524, col: 5, offset: 87781},
																									run: (*parser).callonscopeItem712,
																									expr: &seqExpr{
																										pos: position{line: 2524, col: 5, offset: 87781},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2524, col: 5, offset: 87781},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2545, col: 5, offset: 88623},
																									run: (*parser).callonscopeItem719,
																									expr: &seqExpr{
																										pos: position{line: 2545, col: 5, offset: 88623},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2545, col: 5, offset: 88623},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2254, col: 19, offset: 77212},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2563, col: 5, offset: 89309},
																									run: (*parser).callonscopeItem724,
																									expr: &seqExpr{
																										pos: position{line: 2563, col: 5, offset: 89309},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2563, col: 5, offset: 89309},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2563, col: 10, offset: 89314},
																												expr: &charClassMatcher{
																													pos:        position{line: 3607, col: 12, offset: 123375},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 789, col: 98, offset: 24311},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3609, col: 8, offset: 123391},
																						run: (*parser).callonscopeItem730,
																						expr: &choiceExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									expr: &anyMatcher{
																										line: 3609, col: 10, offset: 123393,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3609, col: 14, offset: 123397},
																									expr: &anyMatcher{
																										line: 3609, col: 15, offset: 123398,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 789, col: 110, offset: 24323},
																					expr: &seqExpr{
																						pos: position{line: 3606, col: 12, offset: 123342},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3606, col: 12, offset: 123342},
																								expr: &charClassMatcher{
																									pos:        position{line: 3618, col: 36, offset: 123689},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3606, col: 16, offset: 123346},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 16, offset: 123346},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												expr: &litMatcher{
																													pos:        position{line: 3606, col: 16, offset: 123346},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3606, col: 22, offset: 123352},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3605, col: 12, offset: 123328},
																										expr: &anyMatcher{
																											line: 3605, col: 13, offset: 123329,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 808, col: 22, offset: 24729},
																		run: (*parser).callonscopeItem747,
																		expr: &seqExpr{
																			pos: position{line: 808, col: 22, offset: 24729},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 808, col: 22, offset: 24729},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 808, col: 27, offset: 24734},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 808, col: 32, offset: 24739},
																						expr: &charClassMatcher{
																							pos:        position{line: 808, col: 32, offset: 24739},
																							val:        "[^\\\\r\\n]",
																							chars:      []rune{'\'', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 808, col: 42, offset: 24749},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 808, col: 47, offset: 24754},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3609, col: 8, offset: 123391},
																						run: (*parser).callonscopeItem755,
																						expr: &choiceExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									expr: &anyMatcher{
																										line: 3609, col: 10, offset: 123393,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3609, col: 14, offset: 123397},
																									expr: &anyMatcher{
																										line: 3609, col: 15, offset: 123398,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3061, col: 5, offset: 106021},
												run: (*parser).callonscopeItem761,
												expr: &seqExpr{
													pos: position{line: 3061, col: 5, offset: 106021},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3061, col: 5, offset: 106021},
															expr: &litMatcher{
																pos:        position{line: 3061, col: 5, offset: 106021},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3061, col: 10, offset: 106026},
															label: "pathI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3061, col: 16, offset: 106032},
																expr: &charClassMatcher{
																	pos:        position{line: 3607, col: 12, offset: 123375},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 5, offset: 5324},
						name: "Mixin",
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 13, offset: 5332},
						name: "Return",
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 22, offset: 5341},
						name: "MixinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 5, offset: 5373},
						name: "Assign",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 14, offset: 5382},
						name: "ArrowBlock",
					},
					&actionExpr{
						pos: position{line: 178, col: 17, offset: 5521},
						run: (*parser).callonscopeItem773,
						expr: &labeledExpr{
							pos:   position{line: 178, col: 17, offset: 5521},
							label: "doctypeI",
							expr: &choiceExpr{
								pos: position{line: 870, col: 12, offset: 26811},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 870, col: 12, offset: 26811},
										run: (*parser).callonscopeItem776,
										expr: &seqExpr{
											pos: position{line: 870, col: 12, offset: 26811},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 870, col: 12, offset: 26811},
													val:        "doctype",
													ignoreCase: false,
													want:       "\"doctype\"",
												},
												&choiceExpr{
													pos: position{line: 883, col: 18, offset: 27234},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 883, col: 18, offset: 27234},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 883, col: 18, offset: 27234},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3606, col: 12, offset: 123342},
																	expr: &charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					expr: &litMatcher{
																						pos:        position{line: 3606, col: 16, offset: 123346},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3606, col: 22, offset: 123352},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3605, col: 12, offset: 123328},
																			expr: &anyMatcher{
																				line: 3605, col: 13, offset: 123329,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 884, col: 5, offset: 27252},
															run: (*parser).callonscopeItem791,
															expr: &seqExpr{
																pos: position{line: 884, col: 5, offset: 27252},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 884, col: 5, offset: 27252},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 884, col: 9, offset: 27256},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3609, col: 8, offset: 123391},
																			run: (*parser).callonscopeItem795,
																			expr: &choiceExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3609, col: 9, offset: 123392},
																						expr: &anyMatcher{
																							line: 3609, col: 10, offset: 123393,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3609, col: 14, offset: 123397},
																						expr: &anyMatcher{
																							line: 3609, col: 15, offset: 123398,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 884, col: 23, offset: 27270},
																		expr: &charClassMatcher{
																			pos:        position{line: 3607, col: 12, offset: 123375},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 894, col: 9, offset: 27651},
															run: (*parser).callonscopeItem812,
															expr: &seqExpr{
																pos: position{line: 894, col: 9, offset: 27651},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 894, col: 9, offset: 27651},
																		expr: &litMatcher{
																			pos:        position{line: 894, col: 9, offset: 27651},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 894, col: 14, offset: 27656},
																		expr: &charClassMatcher{
																			pos:        position{line: 3607, col: 12, offset: 123375},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 872, col: 5, offset: 26888},
										run: (*parser).callonscopeItem827,
										expr: &seqExpr{
											pos: position{line: 872, col: 5, offset: 26888},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 872, col: 5, offset: 26888},
													val:        "!doctype",
													ignoreCase: false,
													want:       "\"!doctype\"",
												},
												&choiceExpr{
													pos: position{line: 883, col: 18, offset: 27234},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 883, col: 18, offset: 27234},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 883, col: 18, offset: 27234},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3606, col: 12, offset: 123342},
																	expr: &charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					expr: &litMatcher{
																						pos:        position{line: 3606, col: 16, offset: 123346},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3606, col: 22, offset: 123352},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3605, col: 12, offset: 123328},
																			expr: &anyMatcher{
																				line: 3605, col: 13, offset: 123329,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 884, col: 5, offset: 27252},
															run: (*parser).callonscopeItem842,
															expr: &seqExpr{
																pos: position{line: 884, col: 5, offset: 27252},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 884, col: 5, offset: 27252},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 884, col: 9, offset: 27256},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3609, col: 8, offset: 123391},
																			run: (*parser).callonscopeItem846,
																			expr: &choiceExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3609, col: 9, offset: 123392},
																						expr: &anyMatcher{
																							line: 3609, col: 10, offset: 123393,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3609, col: 14, offset: 123397},
																						expr: &anyMatcher{
																							line: 3609, col: 15, offset: 123398,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 884, col: 23, offset: 27270},
																		expr: &charClassMatcher{
																			pos:        position{line: 3607, col: 12, offset: 123375},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 894, col: 9, offset: 27651},
															run: (*parser).callonscopeItem863,
															expr: &seqExpr{
																pos: position{line: 894, col: 9, offset: 27651},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 894, col: 9, offset: 27651},
																		expr: &litMatcher{
																			pos:        position{line: 894, col: 9, offset: 27651},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 894, col: 14, offset: 27656},
																		expr: &charClassMatcher{
																			pos:        position{line: 3607, col: 12, offset: 123375},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 174, col: 5, offset: 5439},
						name: "DivShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 174, col: 20, offset: 5454},
						name: "Element",
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 5494},
						name: "BadItem",
					},
				},
			},
		},
		{
			name: "Body",
			pos:  position{line: 200, col: 1, offset: 6349},
			expr: &actionExpr{
				pos: position{line: 200, col: 9, offset: 6357},
				run: (*parser).callonBody1,
				expr: &seqExpr{
					pos: position{line: 200, col: 9, offset: 6357},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4088, col: 11, offset: 144044},
							run: (*parser).callonBody3,
						},
						&labeledExpr{
							pos:   position{line: 200, col: 16, offset: 6364},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 200, col: 23, offset: 6371},
								name: "Scope",
							},
						},
						&stateCodeExpr{
							pos: position{line: 4093, col: 11, offset: 144149},
							run: (*parser).callonBody6,
						},
					},
				},
			},
		},
		{
			name: "Beaitb",
			pos:  position{line: 204, col: 1, offset: 6412},
			expr: &choiceExpr{
				pos: position{line: 204, col: 11, offset: 6422},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 11, offset: 6422},
						run: (*parser).callonBeaitb2,
						expr: &labeledExpr{
							pos:   position{line: 204, col: 11, offset: 6422},
							label: "scopeItemI",
							expr: &choiceExpr{
								pos: position{line: 204, col: 23, offset: 6434},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 204, col: 23, offset: 6434},
										name: "BlockExpansion",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 40, offset: 6451},
										name: "Assign",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 49, offset: 6460},
										name: "InlineText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 206, col: 5, offset: 6538},
						run: (*parser).callonBeaitb8,
						expr: &seqExpr{
							pos: position{line: 206, col: 5, offset: 6538},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 206, col: 9, offset: 6542},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 15, offset: 6548},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 6581},
						run: (*parser).callonBeaitb21,
						expr: &seqExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 210, col: 5, offset: 6623},
						run: (*parser).callonBeaitb32,
						expr: &seqExpr{
							pos: position{line: 210, col: 5, offset: 6623},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 210, col: 5, offset: 6623},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 210, col: 11, offset: 6629},
										expr: &charClassMatcher{
											pos:        position{line: 3607, col: 12, offset: 123375},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 210, col: 24, offset: 6642},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 210, col: 30, offset: 6648},
										expr: &ruleRefExpr{
											pos:  position{line: 210, col: 30, offset: 6648},
											name: "Body",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Beait",
			pos:  position{line: 225, col: 1, offset: 7093},
			expr: &choiceExpr{
				pos: position{line: 225, col: 10, offset: 7102},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 225, col: 10, offset: 7102},
						run: (*parser).callonBeait2,
						expr: &labeledExpr{
							pos:   position{line: 225, col: 10, offset: 7102},
							label: "scopeItemI",
							expr: &choiceExpr{
								pos: position{line: 225, col: 22, offset: 7114},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 225, col: 22, offset: 7114},
										name: "BlockExpansion",
									},
									&ruleRefExpr{
										pos:  position{line: 225, col: 39, offset: 7131},
										name: "Assign",
									},
									&ruleRefExpr{
										pos:  position{line: 225, col: 48, offset: 7140},
										name: "InlineText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 7214},
						run: (*parser).callonBeait8,
						expr: &seqExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 7256},
						run: (*parser).callonBeait19,
						expr: &seqExpr{
							pos: position{line: 229, col: 5, offset: 7256},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 229, col: 5, offset: 7256},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 229, col: 11, offset: 7262},
										expr: &charClassMatcher{
											pos:        position{line: 3607, col: 12, offset: 123375},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BadItem",
			pos:  position{line: 242, col: 1, offset: 7658},
			expr: &actionExpr{
				pos: position{line: 242, col: 12, offset: 7669},
				run: (*parser).callonBadItem1,
				expr: &seqExpr{
					pos: position{line: 242, col: 12, offset: 7669},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 242, col: 12, offset: 7669},
							label: "lineI",
							expr: &oneOrMoreExpr{
								pos: position{line: 242, col: 18, offset: 7675},
								expr: &charClassMatcher{
									pos:        position{line: 3607, col: 12, offset: 123375},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							expr: &charClassMatcher{
								pos:        position{line: 3618, col: 36, offset: 123689},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3606, col: 16, offset: 123346},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											expr: &litMatcher{
												pos:        position{line: 3606, col: 16, offset: 123346},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3606, col: 22, offset: 123352},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3605, col: 12, offset: 123328},
									expr: &anyMatcher{
										line: 3605, col: 13, offset: 123329,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 31, offset: 7688},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 242, col: 37, offset: 7694},
								expr: &ruleRefExpr{
									pos:  position{line: 242, col: 37, offset: 7694},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 278, col: 1, offset: 9136},
			expr: &actionExpr{
				pos: position{line: 278, col: 10, offset: 9145},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 278, col: 10, offset: 9145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 278, col: 10, offset: 9145},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 299, col: 19, offset: 9737},
								run: (*parser).callonBlock4,
								expr: &seqExpr{
									pos: position{line: 299, col: 19, offset: 9737},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 299, col: 19, offset: 9737},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 299, col: 27, offset: 9745},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 324, col: 14, offset: 10318},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 324, col: 14, offset: 10318},
														run: (*parser).callonBlock9,
														expr: &seqExpr{
															pos: position{line: 324, col: 14, offset: 10318},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 324, col: 14, offset: 10318},
																	expr: &litMatcher{
																		pos:        position{line: 324, col: 14, offset: 10318},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 324, col: 19, offset: 10323},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21839},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21839},
																				run: (*parser).callonBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21839},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21284},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21284},
																								run: (*parser).callonBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21284},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2260, col: 17, offset: 77263},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2243, col: 20, offset: 77018},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2260, col: 26, offset: 77272},
																												expr: &charClassMatcher{
																													pos:        position{line: 2243, col: 20, offset: 77018},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21378},
																								run: (*parser).callonBlock24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21378},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21378},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21386},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21386},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21386},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21391},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21392},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21392},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21392},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21401},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21411},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21422},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3609, col: 8, offset: 123391},
																												run: (*parser).callonBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3609, col: 9, offset: 123392},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															expr: &anyMatcher{
																																line: 3609, col: 10, offset: 123393,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3609, col: 14, offset: 123397},
																															expr: &anyMatcher{
																																line: 3609, col: 15, offset: 123398,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21881},
																				run: (*parser).callonBlock43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21881},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21881},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21890},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21892},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 12, offset: 123342},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3606, col: 12, offset: 123342},
																												expr: &charClassMatcher{
																													pos:        position{line: 3618, col: 36, offset: 123689},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3606, col: 16, offset: 123346},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																expr: &litMatcher{
																																	pos:        position{line: 3606, col: 16, offset: 123346},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3606, col: 22, offset: 123352},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3605, col: 12, offset: 123328},
																														expr: &anyMatcher{
																															line: 3605, col: 13, offset: 123329,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21898},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonBlock65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 29, offset: 22254},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 326, col: 5, offset: 10369},
														run: (*parser).callonBlock77,
														expr: &andExpr{
															pos: position{line: 326, col: 5, offset: 10369},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 32, offset: 9167},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 38, offset: 9173},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineBlock",
			pos:  position{line: 283, col: 1, offset: 9275},
			expr: &actionExpr{
				pos: position{line: 283, col: 16, offset: 9290},
				run: (*parser).callonInlineBlock1,
				expr: &seqExpr{
					pos: position{line: 283, col: 16, offset: 9290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 16, offset: 9290},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 299, col: 19, offset: 9737},
								run: (*parser).callonInlineBlock4,
								expr: &seqExpr{
									pos: position{line: 299, col: 19, offset: 9737},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 299, col: 19, offset: 9737},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 299, col: 27, offset: 9745},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 324, col: 14, offset: 10318},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 324, col: 14, offset: 10318},
														run: (*parser).callonInlineBlock9,
														expr: &seqExpr{
															pos: position{line: 324, col: 14, offset: 10318},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 324, col: 14, offset: 10318},
																	expr: &litMatcher{
																		pos:        position{line: 324, col: 14, offset: 10318},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 324, col: 19, offset: 10323},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21839},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21839},
																				run: (*parser).callonInlineBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21839},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21284},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21284},
																								run: (*parser).callonInlineBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21284},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2260, col: 17, offset: 77263},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2243, col: 20, offset: 77018},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2260, col: 26, offset: 77272},
																												expr: &charClassMatcher{
																													pos:        position{line: 2243, col: 20, offset: 77018},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21378},
																								run: (*parser).callonInlineBlock24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21378},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21378},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21386},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21386},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21386},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21391},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21392},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21392},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21392},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21401},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21411},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21422},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3609, col: 8, offset: 123391},
																												run: (*parser).callonInlineBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3609, col: 9, offset: 123392},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															expr: &anyMatcher{
																																line: 3609, col: 10, offset: 123393,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3609, col: 14, offset: 123397},
																															expr: &anyMatcher{
																																line: 3609, col: 15, offset: 123398,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21881},
																				run: (*parser).callonInlineBlock43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21881},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21881},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonInlineBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21890},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21892},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 12, offset: 123342},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3606, col: 12, offset: 123342},
																												expr: &charClassMatcher{
																													pos:        position{line: 3618, col: 36, offset: 123689},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3606, col: 16, offset: 123346},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																expr: &litMatcher{
																																	pos:        position{line: 3606, col: 16, offset: 123346},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3606, col: 22, offset: 123352},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3605, col: 12, offset: 123328},
																														expr: &anyMatcher{
																															line: 3605, col: 13, offset: 123329,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21898},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonInlineBlock65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 29, offset: 22254},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonInlineBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 326, col: 5, offset: 10369},
														run: (*parser).callonInlineBlock77,
														expr: &andExpr{
															pos: position{line: 326, col: 5, offset: 10369},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 38, offset: 9312},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 45, offset: 9319},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "Prepend",
			pos:  position{line: 288, col: 1, offset: 9434},
			expr: &actionExpr{
				pos: position{line: 288, col: 12, offset: 9445},
				run: (*parser).callonPrepend1,
				expr: &seqExpr{
					pos: position{line: 288, col: 12, offset: 9445},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 12, offset: 9445},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 307, col: 21, offset: 9931},
								run: (*parser).callonPrepend4,
								expr: &seqExpr{
									pos: position{line: 307, col: 21, offset: 9931},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 307, col: 21, offset: 9931},
											val:        "prepend",
											ignoreCase: false,
											want:       "\"prepend\"",
										},
										&labeledExpr{
											pos:   position{line: 307, col: 31, offset: 9941},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 324, col: 14, offset: 10318},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 324, col: 14, offset: 10318},
														run: (*parser).callonPrepend9,
														expr: &seqExpr{
															pos: position{line: 324, col: 14, offset: 10318},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 324, col: 14, offset: 10318},
																	expr: &litMatcher{
																		pos:        position{line: 324, col: 14, offset: 10318},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 324, col: 19, offset: 10323},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21839},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21839},
																				run: (*parser).callonPrepend15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21839},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21284},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21284},
																								run: (*parser).callonPrepend18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21284},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2260, col: 17, offset: 77263},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2243, col: 20, offset: 77018},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2260, col: 26, offset: 77272},
																												expr: &charClassMatcher{
																													pos:        position{line: 2243, col: 20, offset: 77018},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21378},
																								run: (*parser).callonPrepend24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21378},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21378},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21386},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21386},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21386},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21391},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21392},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21392},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21392},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21401},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21411},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21422},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3609, col: 8, offset: 123391},
																												run: (*parser).callonPrepend37,
																												expr: &choiceExpr{
																													pos: position{line: 3609, col: 9, offset: 123392},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															expr: &anyMatcher{
																																line: 3609, col: 10, offset: 123393,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3609, col: 14, offset: 123397},
																															expr: &anyMatcher{
																																line: 3609, col: 15, offset: 123398,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21881},
																				run: (*parser).callonPrepend43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21881},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21881},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonPrepend46,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21890},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21892},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 12, offset: 123342},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3606, col: 12, offset: 123342},
																												expr: &charClassMatcher{
																													pos:        position{line: 3618, col: 36, offset: 123689},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3606, col: 16, offset: 123346},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																expr: &litMatcher{
																																	pos:        position{line: 3606, col: 16, offset: 123346},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3606, col: 22, offset: 123352},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3605, col: 12, offset: 123328},
																														expr: &anyMatcher{
																															line: 3605, col: 13, offset: 123329,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21898},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonPrepend65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 29, offset: 22254},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonPrepend71,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 326, col: 5, offset: 10369},
														run: (*parser).callonPrepend77,
														expr: &andExpr{
															pos: position{line: 326, col: 5, offset: 10369},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 36, offset: 9469},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 42, offset: 9475},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "Append",
			pos:  position{line: 293, col: 1, offset: 9577},
			expr: &actionExpr{
				pos: position{line: 293, col: 11, offset: 9587},
				run: (*parser).callonAppend1,
				expr: &seqExpr{
					pos: position{line: 293, col: 11, offset: 9587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 11, offset: 9587},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 315, col: 20, offset: 10128},
								run: (*parser).callonAppend4,
								expr: &seqExpr{
									pos: position{line: 315, col: 20, offset: 10128},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 315, col: 20, offset: 10128},
											val:        "append",
											ignoreCase: false,
											want:       "\"append\"",
										},
										&labeledExpr{
											pos:   position{line: 315, col: 29, offset: 10137},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 324, col: 14, offset: 10318},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 324, col: 14, offset: 10318},
														run: (*parser).callonAppend9,
														expr: &seqExpr{
															pos: position{line: 324, col: 14, offset: 10318},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 324, col: 14, offset: 10318},
																	expr: &litMatcher{
																		pos:        position{line: 324, col: 14, offset: 10318},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 324, col: 19, offset: 10323},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 711, col: 14, offset: 21839},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 711, col: 14, offset: 21839},
																				run: (*parser).callonAppend15,
																				expr: &labeledExpr{
																					pos:   position{line: 711, col: 14, offset: 21839},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 697, col: 10, offset: 21284},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 697, col: 10, offset: 21284},
																								run: (*parser).callonAppend18,
																								expr: &labeledExpr{
																									pos:   position{line: 697, col: 10, offset: 21284},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2260, col: 17, offset: 77263},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2243, col: 20, offset: 77018},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2260, col: 26, offset: 77272},
																												expr: &charClassMatcher{
																													pos:        position{line: 2243, col: 20, offset: 77018},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 699, col: 5, offset: 21378},
																								run: (*parser).callonAppend24,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 5, offset: 21378},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 699, col: 5, offset: 21378},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 699, col: 13, offset: 21386},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 699, col: 13, offset: 21386},
																														expr: &litMatcher{
																															pos:        position{line: 699, col: 13, offset: 21386},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 699, col: 18, offset: 21391},
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 19, offset: 21392},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 699, col: 19, offset: 21392},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 19, offset: 21392},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 699, col: 28, offset: 21401},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 699, col: 38, offset: 21411},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 49, offset: 21422},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3609, col: 8, offset: 123391},
																												run: (*parser).callonAppend37,
																												expr: &choiceExpr{
																													pos: position{line: 3609, col: 9, offset: 123392},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3609, col: 9, offset: 123392},
																															expr: &anyMatcher{
																																line: 3609, col: 10, offset: 123393,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3609, col: 14, offset: 123397},
																															expr: &anyMatcher{
																																line: 3609, col: 15, offset: 123398,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 713, col: 5, offset: 21881},
																				run: (*parser).callonAppend43,
																				expr: &seqExpr{
																					pos: position{line: 713, col: 5, offset: 21881},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 713, col: 5, offset: 21881},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonAppend46,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 713, col: 14, offset: 21890},
																							expr: &choiceExpr{
																								pos: position{line: 713, col: 16, offset: 21892},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 12, offset: 123342},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3606, col: 12, offset: 123342},
																												expr: &charClassMatcher{
																													pos:        position{line: 3618, col: 36, offset: 123689},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3606, col: 16, offset: 123346},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3606, col: 16, offset: 123346},
																																expr: &litMatcher{
																																	pos:        position{line: 3606, col: 16, offset: 123346},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3606, col: 22, offset: 123352},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3605, col: 12, offset: 123328},
																														expr: &anyMatcher{
																															line: 3605, col: 13, offset: 123329,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 713, col: 22, offset: 21898},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 724, col: 5, offset: 22230},
																				run: (*parser).callonAppend65,
																				expr: &seqExpr{
																					pos: position{line: 724, col: 5, offset: 22230},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 724, col: 5, offset: 22230},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 724, col: 12, offset: 22237},
																								expr: &charClassMatcher{
																									pos:        position{line: 724, col: 12, offset: 22237},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 724, col: 29, offset: 22254},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonAppend71,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 326, col: 5, offset: 10369},
														run: (*parser).callonAppend77,
														expr: &andExpr{
															pos: position{line: 326, col: 5, offset: 10369},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 34, offset: 9610},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 40, offset: 9616},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockExpansion",
			pos:  position{line: 341, col: 1, offset: 10816},
			expr: &actionExpr{
				pos: position{line: 341, col: 19, offset: 10834},
				run: (*parser).callonBlockExpansion1,
				expr: &seqExpr{
					pos: position{line: 341, col: 19, offset: 10834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 19, offset: 10834},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 23, offset: 10838},
							label: "sI",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 26, offset: 10841},
								name: "blockExpansionItem",
							},
						},
					},
				},
			},
		},
		{
			name: "blockExpansionItem",
			pos:  position{line: 348, col: 1, offset: 10969},
			expr: &choiceExpr{
				pos: position{line: 348, col: 23, offset: 10991},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 348, col: 23, offset: 10991},
						name: "InlineArrowBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 42, offset: 11010},
						name: "spacedBlockExpansionItem",
					},
					&actionExpr{
						pos: position{line: 382, col: 22, offset: 12012},
						run: (*parser).callonblockExpansionItem4,
						expr: &seqExpr{
							pos: position{line: 382, col: 22, offset: 12012},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 382, col: 22, offset: 12012},
									label: "lineI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 382, col: 28, offset: 12018},
										expr: &charClassMatcher{
											pos:        position{line: 3607, col: 12, offset: 123375},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "spacedBlockExpansionItem",
			pos:  position{line: 350, col: 1, offset: 11056},
			expr: &choiceExpr{
				pos: position{line: 350, col: 29, offset: 11084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 350, col: 29, offset: 11084},
						run: (*parser).callonspacedBlockExpansionItem2,
						expr: &seqExpr{
							pos: position{line: 350, col: 29, offset: 11084},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 350, col: 29, offset: 11084},
									expr: &litMatcher{
										pos:        position{line: 350, col: 29, offset: 11084},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 350, col: 34, offset: 11089},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 350, col: 37, offset: 11092},
										name: "_spacedBlockExpansionItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 11143},
						run: (*parser).callonspacedBlockExpansionItem8,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 11143},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 352, col: 5, offset: 11143},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonspacedBlockExpansionItem11,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 352, col: 14, offset: 11152},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 17, offset: 11155},
										name: "_spacedBlockExpansionItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "_spacedBlockExpansionItem",
			pos:  position{line: 380, col: 1, offset: 11882},
			expr: &choiceExpr{
				pos: position{line: 380, col: 30, offset: 11911},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 380, col: 30, offset: 11911},
						name: "InlineBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 44, offset: 11925},
						name: "InlineElement",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 60, offset: 11941},
						name: "InlineDivShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 81, offset: 11962},
						name: "InlineMixinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 99, offset: 11980},
						name: "InlineAnd",
					},
				},
			},
		},
		{
			name: "Codes",
			pos:  position{line: 412, col: 1, offset: 12910},
			expr: &actionExpr{
				pos: position{line: 412, col: 10, offset: 12919},
				run: (*parser).callonCodes1,
				expr: &labeledExpr{
					pos:   position{line: 412, col: 10, offset: 12919},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 412, col: 17, offset: 12926},
						expr: &seqExpr{
							pos: position{line: 412, col: 18, offset: 12927},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 412, col: 18, offset: 12927},
									expr: &oneOrMoreExpr{
										pos: position{line: 3620, col: 36, offset: 123776},
										expr: &seqExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													expr: &litMatcher{
														pos:        position{line: 3619, col: 36, offset: 123730},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3619, col: 42, offset: 123736},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 27, offset: 12936},
									name: "Code",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 416, col: 1, offset: 13007},
			expr: &choiceExpr{
				pos: position{line: 416, col: 9, offset: 13015},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 416, col: 9, offset: 13015},
						run: (*parser).callonCode2,
						expr: &seqExpr{
							pos: position{line: 416, col: 9, offset: 13015},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 416, col: 9, offset: 13015},
									val:        "- ",
									ignoreCase: false,
									want:       "\"- \"",
								},
								&labeledExpr{
									pos:   position{line: 416, col: 14, offset: 13020},
									label: "firstLineI",
									expr: &actionExpr{
										pos: position{line: 442, col: 13, offset: 13850},
										run: (*parser).callonCode6,
										expr: &seqExpr{
											pos: position{line: 442, col: 13, offset: 13850},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 442, col: 13, offset: 13850},
													label: "code",
													expr: &oneOrMoreExpr{
														pos: position{line: 442, col: 18, offset: 13855},
														expr: &charClassMatcher{
															pos:        position{line: 3607, col: 12, offset: 123375},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 3606, col: 12, offset: 123342},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3606, col: 16, offset: 123346},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	expr: &litMatcher{
																		pos:        position{line: 3606, col: 16, offset: 123346},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3606, col: 22, offset: 123352},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3605, col: 12, offset: 123328},
															expr: &anyMatcher{
																line: 3605, col: 13, offset: 123329,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 416, col: 34, offset: 13040},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 416, col: 51, offset: 13057},
										expr: &seqExpr{
											pos: position{line: 416, col: 52, offset: 13058},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 416, col: 52, offset: 13058},
													expr: &oneOrMoreExpr{
														pos: position{line: 3620, col: 36, offset: 123776},
														expr: &seqExpr{
															pos: position{line: 3620, col: 37, offset: 123777},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3620, col: 37, offset: 123777},
																	expr: &charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 416, col: 61, offset: 13067},
													name: "INDENTATION2",
												},
												&actionExpr{
													pos: position{line: 442, col: 13, offset: 13850},
													run: (*parser).callonCode32,
													expr: &seqExpr{
														pos: position{line: 442, col: 13, offset: 13850},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 442, col: 13, offset: 13850},
																label: "code",
																expr: &oneOrMoreExpr{
																	pos: position{line: 442, col: 18, offset: 13855},
																	expr: &charClassMatcher{
																		pos:        position{line: 3607, col: 12, offset: 123375},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																expr: &charClassMatcher{
																	pos:        position{line: 3618, col: 36, offset: 123689},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				expr: &litMatcher{
																					pos:        position{line: 3606, col: 16, offset: 123346},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3606, col: 22, offset: 123352},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3605, col: 12, offset: 123328},
																		expr: &anyMatcher{
																			line: 3605, col: 13, offset: 123329,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 429, col: 5, offset: 13444},
						run: (*parser).callonCode46,
						expr: &seqExpr{
							pos: position{line: 429, col: 5, offset: 13444},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 429, col: 5, offset: 13444},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&labeledExpr{
									pos:   position{line: 429, col: 9, offset: 13448},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonCode50,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "condition",
			pos:  position{line: 446, col: 1, offset: 13941},
			expr: &choiceExpr{
				pos: position{line: 446, col: 14, offset: 13954},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 446, col: 14, offset: 13954},
						run: (*parser).calloncondition2,
						expr: &seqExpr{
							pos: position{line: 446, col: 14, offset: 13954},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 446, col: 14, offset: 13954},
									expr: &litMatcher{
										pos:        position{line: 446, col: 14, offset: 13954},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 446, col: 19, offset: 13959},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 446, col: 25, offset: 13965},
										name: "IfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 448, col: 5, offset: 14006},
						run: (*parser).calloncondition8,
						expr: &seqExpr{
							pos: position{line: 448, col: 5, offset: 14006},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 448, col: 5, offset: 14006},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).calloncondition11,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 448, col: 14, offset: 14015},
									expr: &seqExpr{
										pos: position{line: 3606, col: 12, offset: 123342},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												expr: &charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3606, col: 16, offset: 123346},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																expr: &litMatcher{
																	pos:        position{line: 3606, col: 16, offset: 123346},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3606, col: 22, offset: 123352},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3605, col: 12, offset: 123328},
														expr: &anyMatcher{
															line: 3605, col: 13, offset: 123329,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 457, col: 5, offset: 14298},
						run: (*parser).calloncondition28,
						expr: &labeledExpr{
							pos:   position{line: 457, col: 5, offset: 14298},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).calloncondition30,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "then",
			pos:  position{line: 467, col: 1, offset: 14556},
			expr: &choiceExpr{
				pos: position{line: 467, col: 9, offset: 14564},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 467, col: 9, offset: 14564},
						run: (*parser).callonthen2,
						expr: &seqExpr{
							pos: position{line: 467, col: 9, offset: 14564},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 467, col: 13, offset: 14568},
									label: "scopeI",
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 20, offset: 14575},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 14609},
						run: (*parser).callonthen15,
						expr: &labeledExpr{
							pos:   position{line: 469, col: 5, offset: 14609},
							label: "beI",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 9, offset: 14613},
								name: "BlockExpansion",
							},
						},
					},
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 14688},
						run: (*parser).callonthen18,
						expr: &seqExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 479, col: 5, offset: 14940},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 480, col: 6, offset: 14947},
								run: (*parser).callonthen30,
								expr: &oneOrMoreExpr{
									pos: position{line: 480, col: 6, offset: 14947},
									expr: &charClassMatcher{
										pos:        position{line: 480, col: 6, offset: 14947},
										val:        "[^:\\r\\n]",
										chars:      []rune{':', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 480, col: 40, offset: 14981},
								run: (*parser).callonthen33,
							},
							&ruleRefExpr{
								pos:  position{line: 489, col: 3, offset: 15256},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "If",
			pos:  position{line: 498, col: 1, offset: 15457},
			expr: &actionExpr{
				pos: position{line: 498, col: 7, offset: 15463},
				run: (*parser).callonIf1,
				expr: &seqExpr{
					pos: position{line: 498, col: 7, offset: 15463},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 498, col: 7, offset: 15463},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&notExpr{
							pos: position{line: 498, col: 12, offset: 15468},
							expr: &litMatcher{
								pos:        position{line: 498, col: 13, offset: 15469},
								val:        " block",
								ignoreCase: false,
								want:       "\" block\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 22, offset: 15478},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 28, offset: 15484},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 38, offset: 15494},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 44, offset: 15500},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 49, offset: 15505},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 498, col: 58, offset: 15514},
								expr: &ruleRefExpr{
									pos:  position{line: 498, col: 58, offset: 15514},
									name: "ElseIf",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 66, offset: 15522},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 498, col: 72, offset: 15528},
								expr: &ruleRefExpr{
									pos:  position{line: 498, col: 72, offset: 15528},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIf",
			pos:  position{line: 508, col: 1, offset: 15768},
			expr: &actionExpr{
				pos: position{line: 508, col: 11, offset: 15778},
				run: (*parser).callonElseIf1,
				expr: &seqExpr{
					pos: position{line: 508, col: 11, offset: 15778},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 508, col: 11, offset: 15778},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3707, col: 17, offset: 127583},
							run: (*parser).callonElseIf11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3707, col: 17, offset: 127583},
								expr: &charClassMatcher{
									pos:        position{line: 3618, col: 36, offset: 123689},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3707, col: 41, offset: 127607},
							run: (*parser).callonElseIf14,
						},
						&choiceExpr{
							pos: position{line: 3759, col: 5, offset: 129517},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3759, col: 5, offset: 129517},
									run: (*parser).callonElseIf16,
								},
								&seqExpr{
									pos: position{line: 3761, col: 9, offset: 129600},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3761, col: 9, offset: 129600},
											run: (*parser).callonElseIf18,
										},
										&stateCodeExpr{
											pos: position{line: 3763, col: 7, offset: 129704},
											run: (*parser).callonElseIf19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3770, col: 9, offset: 130040},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3770, col: 9, offset: 130040},
											run: (*parser).callonElseIf21,
										},
										&choiceExpr{
											pos: position{line: 3823, col: 9, offset: 132375},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3823, col: 9, offset: 132375},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3823, col: 9, offset: 132375},
															run: (*parser).callonElseIf24,
														},
														&andCodeExpr{
															pos: position{line: 3827, col: 11, offset: 132625},
															run: (*parser).callonElseIf25,
														},
														&stateCodeExpr{
															pos: position{line: 3893, col: 11, offset: 135831},
															run: (*parser).callonElseIf26,
														},
													},
												},
												&seqExpr{
													pos: position{line: 3901, col: 13, offset: 136184},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3901, col: 13, offset: 136184},
															run: (*parser).callonElseIf28,
														},
														&andCodeExpr{
															pos: position{line: 3905, col: 11, offset: 136439},
															run: (*parser).callonElseIf29,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 32, offset: 15799},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).callonElseIf31,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 508, col: 41, offset: 15808},
							val:        "else if",
							ignoreCase: false,
							want:       "\"else if\"",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 51, offset: 15818},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 57, offset: 15824},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 67, offset: 15834},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 73, offset: 15840},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Else",
			pos:  position{line: 516, col: 1, offset: 16003},
			expr: &actionExpr{
				pos: position{line: 516, col: 9, offset: 16011},
				run: (*parser).callonElse1,
				expr: &seqExpr{
					pos: position{line: 516, col: 9, offset: 16011},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 516, col: 9, offset: 16011},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3707, col: 17, offset: 127583},
							run: (*parser).callonElse11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3707, col: 17, offset: 127583},
								expr: &charClassMatcher{
									pos:        position{line: 3618, col: 36, offset: 123689},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3707, col: 41, offset: 127607},
							run: (*parser).callonElse14,
						},
						&choiceExpr{
							pos: position{line: 3759, col: 5, offset: 129517},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3759, col: 5, offset: 129517},
									run: (*parser).callonElse16,
								},
								&seqExpr{
									pos: position{line: 3761, col: 9, offset: 129600},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3761, col: 9, offset: 129600},
											run: (*parser).callonElse18,
										},
										&stateCodeExpr{
											pos: position{line: 3763, col: 7, offset: 129704},
											run: (*parser).callonElse19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3770, col: 9, offset: 130040},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3770, col: 9, offset: 130040},
											run: (*parser).callonElse21,
										},
										&choiceExpr{
											pos: position{line: 3823, col: 9, offset: 132375},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3823, col: 9, offset: 132375},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3823, col: 9, offset: 132375},
															run: (*parser).callonElse24,
														},
														&andCodeExpr{
															pos: position{line: 3827, col: 11, offset: 132625},
															run: (*parser).callonElse25,
														},
														&stateCodeExpr{
															pos: position{line: 3893, col: 11, offset: 135831},
															run: (*parser).callonElse26,
														},
													},
												},
												&seqExpr{
													pos: position{line: 3901, col: 13, offset: 136184},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3901, col: 13, offset: 136184},
															run: (*parser).callonElse28,
														},
														&andCodeExpr{
															pos: position{line: 3905, col: 11, offset: 136439},
															run: (*parser).callonElse29,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 516, col: 30, offset: 16032},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&labeledExpr{
							pos:   position{line: 516, col: 37, offset: 16039},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 43, offset: 16045},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "IfBlock",
			pos:  position{line: 527, col: 1, offset: 16167},
			expr: &actionExpr{
				pos: position{line: 527, col: 12, offset: 16178},
				run: (*parser).callonIfBlock1,
				expr: &seqExpr{
					pos: position{line: 527, col: 12, offset: 16178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 527, col: 12, offset: 16178},
							val:        "if block",
							ignoreCase: false,
							want:       "\"if block\"",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 23, offset: 16189},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 324, col: 14, offset: 10318},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 324, col: 14, offset: 10318},
										run: (*parser).callonIfBlock6,
										expr: &seqExpr{
											pos: position{line: 324, col: 14, offset: 10318},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 324, col: 14, offset: 10318},
													expr: &litMatcher{
														pos:        position{line: 324, col: 14, offset: 10318},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 324, col: 19, offset: 10323},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 711, col: 14, offset: 21839},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 711, col: 14, offset: 21839},
																run: (*parser).callonIfBlock12,
																expr: &labeledExpr{
																	pos:   position{line: 711, col: 14, offset: 21839},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 697, col: 10, offset: 21284},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 697, col: 10, offset: 21284},
																				run: (*parser).callonIfBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 697, col: 10, offset: 21284},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2260, col: 17, offset: 77263},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2243, col: 20, offset: 77018},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2260, col: 26, offset: 77272},
																								expr: &charClassMatcher{
																									pos:        position{line: 2243, col: 20, offset: 77018},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 699, col: 5, offset: 21378},
																				run: (*parser).callonIfBlock21,
																				expr: &seqExpr{
																					pos: position{line: 699, col: 5, offset: 21378},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 699, col: 5, offset: 21378},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 699, col: 13, offset: 21386},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 699, col: 13, offset: 21386},
																										expr: &litMatcher{
																											pos:        position{line: 699, col: 13, offset: 21386},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 699, col: 18, offset: 21391},
																										expr: &choiceExpr{
																											pos: position{line: 699, col: 19, offset: 21392},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 699, col: 19, offset: 21392},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 699, col: 19, offset: 21392},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 699, col: 28, offset: 21401},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 699, col: 38, offset: 21411},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 699, col: 49, offset: 21422},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonIfBlock34,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 713, col: 5, offset: 21881},
																run: (*parser).callonIfBlock40,
																expr: &seqExpr{
																	pos: position{line: 713, col: 5, offset: 21881},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 713, col: 5, offset: 21881},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonIfBlock43,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 713, col: 14, offset: 21890},
																			expr: &choiceExpr{
																				pos: position{line: 713, col: 16, offset: 21892},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3606, col: 12, offset: 123342},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3606, col: 12, offset: 123342},
																								expr: &charClassMatcher{
																									pos:        position{line: 3618, col: 36, offset: 123689},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3606, col: 16, offset: 123346},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 16, offset: 123346},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												expr: &litMatcher{
																													pos:        position{line: 3606, col: 16, offset: 123346},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3606, col: 22, offset: 123352},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3605, col: 12, offset: 123328},
																										expr: &anyMatcher{
																											line: 3605, col: 13, offset: 123329,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 713, col: 22, offset: 21898},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 724, col: 5, offset: 22230},
																run: (*parser).callonIfBlock62,
																expr: &seqExpr{
																	pos: position{line: 724, col: 5, offset: 22230},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 724, col: 5, offset: 22230},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 724, col: 12, offset: 22237},
																				expr: &charClassMatcher{
																					pos:        position{line: 724, col: 12, offset: 22237},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 724, col: 29, offset: 22254},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonIfBlock68,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 326, col: 5, offset: 10369},
										run: (*parser).callonIfBlock74,
										expr: &andExpr{
											pos: position{line: 326, col: 5, offset: 10369},
											expr: &seqExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3606, col: 12, offset: 123342},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		expr: &litMatcher{
																			pos:        position{line: 3606, col: 16, offset: 123346},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3606, col: 22, offset: 123352},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3605, col: 12, offset: 123328},
																expr: &anyMatcher{
																	line: 3605, col: 13, offset: 123329,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 527, col: 39, offset: 16205},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 45, offset: 16211},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 527, col: 50, offset: 16216},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 527, col: 59, offset: 16225},
								expr: &ruleRefExpr{
									pos:  position{line: 527, col: 59, offset: 16225},
									name: "ElseIfBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 527, col: 72, offset: 16238},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 527, col: 78, offset: 16244},
								expr: &ruleRefExpr{
									pos:  position{line: 527, col: 78, offset: 16244},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIfBlock",
			pos:  position{line: 537, col: 1, offset: 16484},
			expr: &actionExpr{
				pos: position{line: 537, col: 16, offset: 16499},
				run: (*parser).callonElseIfBlock1,
				expr: &seqExpr{
					pos: position{line: 537, col: 16, offset: 16499},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 537, col: 16, offset: 16499},
							expr: &oneOrMoreExpr{
								pos: position{line: 3620, col: 36, offset: 123776},
								expr: &seqExpr{
									pos: position{line: 3620, col: 37, offset: 123777},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3707, col: 17, offset: 127583},
							run: (*parser).callonElseIfBlock11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3707, col: 17, offset: 127583},
								expr: &charClassMatcher{
									pos:        position{line: 3618, col: 36, offset: 123689},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3707, col: 41, offset: 127607},
							run: (*parser).callonElseIfBlock14,
						},
						&choiceExpr{
							pos: position{line: 3759, col: 5, offset: 129517},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3759, col: 5, offset: 129517},
									run: (*parser).callonElseIfBlock16,
								},
								&seqExpr{
									pos: position{line: 3761, col: 9, offset: 129600},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3761, col: 9, offset: 129600},
											run: (*parser).callonElseIfBlock18,
										},
										&stateCodeExpr{
											pos: position{line: 3763, col: 7, offset: 129704},
											run: (*parser).callonElseIfBlock19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3770, col: 9, offset: 130040},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3770, col: 9, offset: 130040},
											run: (*parser).callonElseIfBlock21,
										},
										&choiceExpr{
											pos: position{line: 3823, col: 9, offset: 132375},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3823, col: 9, offset: 132375},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3823, col: 9, offset: 132375},
															run: (*parser).callonElseIfBlock24,
														},
														&andCodeExpr{
															pos: position{line: 3827, col: 11, offset: 132625},
															run: (*parser).callonElseIfBlock25,
														},
														&stateCodeExpr{
															pos: position{line: 3893, col: 11, offset: 135831},
															run: (*parser).callonElseIfBlock26,
														},
													},
												},
												&seqExpr{
													pos: position{line: 3901, col: 13, offset: 136184},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3901, col: 13, offset: 136184},
															run: (*parser).callonElseIfBlock28,
														},
														&andCodeExpr{
															pos: position{line: 3905, col: 11, offset: 136439},
															run: (*parser).callonElseIfBlock29,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 37, offset: 16520},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).callonElseIfBlock31,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 537, col: 46, offset: 16529},
							val:        "else if block",
							ignoreCase: false,
							want:       "\"else if block\"",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 62, offset: 16545},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 324, col: 14, offset: 10318},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 324, col: 14, offset: 10318},
										run: (*parser).callonElseIfBlock40,
										expr: &seqExpr{
											pos: position{line: 324, col: 14, offset: 10318},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 324, col: 14, offset: 10318},
													expr: &litMatcher{
														pos:        position{line: 324, col: 14, offset: 10318},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 324, col: 19, offset: 10323},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 711, col: 14, offset: 21839},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 711, col: 14, offset: 21839},
																run: (*parser).callonElseIfBlock46,
																expr: &labeledExpr{
																	pos:   position{line: 711, col: 14, offset: 21839},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 697, col: 10, offset: 21284},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 697, col: 10, offset: 21284},
																				run: (*parser).callonElseIfBlock49,
																				expr: &labeledExpr{
																					pos:   position{line: 697, col: 10, offset: 21284},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2260, col: 17, offset: 77263},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2243, col: 20, offset: 77018},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2260, col: 26, offset: 77272},
																								expr: &charClassMatcher{
																									pos:        position{line: 2243, col: 20, offset: 77018},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 699, col: 5, offset: 21378},
																				run: (*parser).callonElseIfBlock55,
																				expr: &seqExpr{
																					pos: position{line: 699, col: 5, offset: 21378},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 699, col: 5, offset: 21378},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 699, col: 13, offset: 21386},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 699, col: 13, offset: 21386},
																										expr: &litMatcher{
																											pos:        position{line: 699, col: 13, offset: 21386},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 699, col: 18, offset: 21391},
																										expr: &choiceExpr{
																											pos: position{line: 699, col: 19, offset: 21392},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 699, col: 19, offset: 21392},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 699, col: 19, offset: 21392},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 699, col: 28, offset: 21401},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 699, col: 38, offset: 21411},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 699, col: 49, offset: 21422},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3609, col: 8, offset: 123391},
																								run: (*parser).callonElseIfBlock68,
																								expr: &choiceExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3609, col: 9, offset: 123392},
																											expr: &anyMatcher{
																												line: 3609, col: 10, offset: 123393,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3609, col: 14, offset: 123397},
																											expr: &anyMatcher{
																												line: 3609, col: 15, offset: 123398,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 713, col: 5, offset: 21881},
																run: (*parser).callonElseIfBlock74,
																expr: &seqExpr{
																	pos: position{line: 713, col: 5, offset: 21881},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 713, col: 5, offset: 21881},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonElseIfBlock77,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 713, col: 14, offset: 21890},
																			expr: &choiceExpr{
																				pos: position{line: 713, col: 16, offset: 21892},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3606, col: 12, offset: 123342},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3606, col: 12, offset: 123342},
																								expr: &charClassMatcher{
																									pos:        position{line: 3618, col: 36, offset: 123689},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3606, col: 16, offset: 123346},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3606, col: 16, offset: 123346},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3606, col: 16, offset: 123346},
																												expr: &litMatcher{
																													pos:        position{line: 3606, col: 16, offset: 123346},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3606, col: 22, offset: 123352},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3605, col: 12, offset: 123328},
																										expr: &anyMatcher{
																											line: 3605, col: 13, offset: 123329,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 713, col: 22, offset: 21898},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 724, col: 5, offset: 22230},
																run: (*parser).callonElseIfBlock96,
																expr: &seqExpr{
																	pos: position{line: 724, col: 5, offset: 22230},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 724, col: 5, offset: 22230},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 724, col: 12, offset: 22237},
																				expr: &charClassMatcher{
																					pos:        position{line: 724, col: 12, offset: 22237},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 724, col: 29, offset: 22254},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonElseIfBlock102,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 326, col: 5, offset: 10369},
										run: (*parser).callonElseIfBlock108,
										expr: &andExpr{
											pos: position{line: 326, col: 5, offset: 10369},
											expr: &seqExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3606, col: 12, offset: 123342},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		expr: &litMatcher{
																			pos:        position{line: 3606, col: 16, offset: 123346},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3606, col: 22, offset: 123352},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3605, col: 12, offset: 123328},
																expr: &anyMatcher{
																	line: 3605, col: 13, offset: 123329,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 78, offset: 16561},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 84, offset: 16567},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 556, col: 1, offset: 17056},
			expr: &actionExpr{
				pos: position{line: 556, col: 11, offset: 17066},
				run: (*parser).callonSwitch1,
				expr: &seqExpr{
					pos: position{line: 556, col: 11, offset: 17066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 556, col: 11, offset: 17066},
							val:        "switch",
							ignoreCase: false,
							want:       "\"switch\"",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 20, offset: 17075},
							label: "comparatorI",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 32, offset: 17087},
								name: "switchComparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 49, offset: 17104},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 55, offset: 17110},
								name: "switchBody",
							},
						},
					},
				},
			},
		},
		{
			name: "switchComparator",
			pos:  position{line: 581, col: 1, offset: 17727},
			expr: &choiceExpr{
				pos: position{line: 581, col: 21, offset: 17747},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 581, col: 21, offset: 17747},
						run: (*parser).callonswitchComparator2,
						expr: &seqExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 583, col: 5, offset: 17797},
						run: (*parser).callonswitchComparator13,
						expr: &seqExpr{
							pos: position{line: 583, col: 5, offset: 17797},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 583, col: 5, offset: 17797},
									expr: &litMatcher{
										pos:        position{line: 583, col: 5, offset: 17797},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 583, col: 10, offset: 17802},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 583, col: 16, offset: 17808},
										name: "IfExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 17889},
						run: (*parser).callonswitchComparator28,
						expr: &seqExpr{
							pos: position{line: 586, col: 5, offset: 17889},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 586, col: 5, offset: 17889},
									expr: &litMatcher{
										pos:        position{line: 586, col: 5, offset: 17889},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 586, col: 10, offset: 17894},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 586, col: 16, offset: 17900},
										name: "IfExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 586, col: 29, offset: 17913},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonswitchComparator35,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 586, col: 43, offset: 17927},
									expr: &charClassMatcher{
										pos:        position{line: 3607, col: 12, offset: 123375},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchBody",
			pos:  position{line: 597, col: 1, offset: 18250},
			expr: &actionExpr{
				pos: position{line: 597, col: 15, offset: 18264},
				run: (*parser).callonswitchBody1,
				expr: &seqExpr{
					pos: position{line: 597, col: 15, offset: 18264},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4088, col: 11, offset: 144044},
							run: (*parser).callonswitchBody3,
						},
						&labeledExpr{
							pos:   position{line: 597, col: 22, offset: 18271},
							label: "itms",
							expr: &zeroOrMoreExpr{
								pos: position{line: 597, col: 27, offset: 18276},
								expr: &seqExpr{
									pos: position{line: 597, col: 28, offset: 18277},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 597, col: 28, offset: 18277},
											expr: &oneOrMoreExpr{
												pos: position{line: 3620, col: 36, offset: 123776},
												expr: &seqExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3620, col: 37, offset: 123777},
															expr: &charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															expr: &litMatcher{
																pos:        position{line: 3619, col: 36, offset: 123730},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3619, col: 42, offset: 123736},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 3707, col: 17, offset: 127583},
											run: (*parser).callonswitchBody15,
											expr: &zeroOrMoreExpr{
												pos: position{line: 3707, col: 17, offset: 127583},
												expr: &charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 3707, col: 41, offset: 127607},
											run: (*parser).callonswitchBody18,
										},
										&choiceExpr{
											pos: position{line: 3759, col: 5, offset: 129517},
											alternatives: []interface{}{
												&andCodeExpr{
													pos: position{line: 3759, col: 5, offset: 129517},
													run: (*parser).callonswitchBody20,
												},
												&seqExpr{
													pos: position{line: 3761, col: 9, offset: 129600},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3761, col: 9, offset: 129600},
															run: (*parser).callonswitchBody22,
														},
														&stateCodeExpr{
															pos: position{line: 3763, col: 7, offset: 129704},
															run: (*parser).callonswitchBody23,
														},
													},
												},
												&seqExpr{
													pos: position{line: 3770, col: 9, offset: 130040},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3770, col: 9, offset: 130040},
															run: (*parser).callonswitchBody25,
														},
														&choiceExpr{
															pos: position{line: 3823, col: 9, offset: 132375},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3823, col: 9, offset: 132375},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 3823, col: 9, offset: 132375},
																			run: (*parser).callonswitchBody28,
																		},
																		&andCodeExpr{
																			pos: position{line: 3827, col: 11, offset: 132625},
																			run: (*parser).callonswitchBody29,
																		},
																		&stateCodeExpr{
																			pos: position{line: 3893, col: 11, offset: 135831},
																			run: (*parser).callonswitchBody30,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 3901, col: 13, offset: 136184},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 3901, col: 13, offset: 136184},
																			run: (*parser).callonswitchBody32,
																		},
																		&andCodeExpr{
																			pos: position{line: 3905, col: 11, offset: 136439},
																			run: (*parser).callonswitchBody33,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 597, col: 49, offset: 18298},
											name: "switchBodyItem",
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4093, col: 11, offset: 144149},
							run: (*parser).callonswitchBody35,
						},
					},
				},
			},
		},
		{
			name: "switchBodyItem",
			pos:  position{line: 635, col: 1, offset: 19563},
			expr: &choiceExpr{
				pos: position{line: 635, col: 19, offset: 19581},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 635, col: 19, offset: 19581},
						run: (*parser).callonswitchBodyItem2,
						expr: &labeledExpr{
							pos:   position{line: 635, col: 19, offset: 19581},
							label: "caseI",
							expr: &choiceExpr{
								pos: position{line: 635, col: 26, offset: 19588},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 635, col: 26, offset: 19588},
										name: "Case",
									},
									&ruleRefExpr{
										pos:  position{line: 635, col: 33, offset: 19595},
										name: "Default",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 637, col: 5, offset: 19645},
						run: (*parser).callonswitchBodyItem7,
						expr: &labeledExpr{
							pos:   position{line: 637, col: 5, offset: 19645},
							label: "caseI",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 11, offset: 19651},
								name: "BadCase",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 641, col: 1, offset: 19700},
			expr: &actionExpr{
				pos: position{line: 641, col: 9, offset: 19708},
				run: (*parser).callonCase1,
				expr: &seqExpr{
					pos: position{line: 641, col: 9, offset: 19708},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 641, col: 9, offset: 19708},
							val:        "case",
							ignoreCase: false,
							want:       "\"case\"",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 16, offset: 19715},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 22, offset: 19721},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 641, col: 32, offset: 19731},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 38, offset: 19737},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 649, col: 1, offset: 19894},
			expr: &actionExpr{
				pos: position{line: 649, col: 12, offset: 19905},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 649, col: 12, offset: 19905},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 649, col: 12, offset: 19905},
							val:        "default",
							ignoreCase: false,
							want:       "\"default\"",
						},
						&labeledExpr{
							pos:   position{line: 649, col: 22, offset: 19915},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 28, offset: 19921},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "BadCase",
			pos:  position{line: 656, col: 1, offset: 20024},
			expr: &actionExpr{
				pos: position{line: 656, col: 12, offset: 20035},
				run: (*parser).callonBadCase1,
				expr: &seqExpr{
					pos: position{line: 656, col: 12, offset: 20035},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 656, col: 12, offset: 20035},
							expr: &charClassMatcher{
								pos:        position{line: 3607, col: 12, offset: 123375},
								val:        "[^\\r\\n]",
								chars:      []rune{'\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							expr: &charClassMatcher{
								pos:        position{line: 3618, col: 36, offset: 123689},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3606, col: 16, offset: 123346},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											expr: &litMatcher{
												pos:        position{line: 3606, col: 16, offset: 123346},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3606, col: 22, offset: 123352},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3605, col: 12, offset: 123328},
									expr: &anyMatcher{
										line: 3605, col: 13, offset: 123329,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 25, offset: 20048},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 656, col: 31, offset: 20054},
								expr: &ruleRefExpr{
									pos:  position{line: 656, col: 31, offset: 20054},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "For",
			pos:  position{line: 679, col: 1, offset: 20741},
			expr: &actionExpr{
				pos: position{line: 679, col: 8, offset: 20748},
				run: (*parser).callonFor1,
				expr: &seqExpr{
					pos: position{line: 679, col: 8, offset: 20748},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 679, col: 8, offset: 20748},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 14, offset: 20754},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 20, offset: 20760},
								name: "forExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 34, offset: 20774},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 40, offset: 20780},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "forExpression",
			pos:  position{line: 687, col: 1, offset: 20928},
			expr: &choiceExpr{
				pos: position{line: 687, col: 18, offset: 20945},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 687, col: 18, offset: 20945},
						run: (*parser).callonforExpression2,
						expr: &seqExpr{
							pos: position{line: 687, col: 18, offset: 20945},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 687, col: 18, offset: 20945},
									expr: &litMatcher{
										pos:        position{line: 687, col: 18, offset: 20945},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 687, col: 23, offset: 20950},
									label: "exprI",
									expr: &choiceExpr{
										pos: position{line: 687, col: 30, offset: 20957},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 687, col: 30, offset: 20957},
												name: "RangeExpression",
											},
											&ruleRefExpr{
												pos:  position{line: 687, col: 48, offset: 20975},
												name: "IfExpression",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 21040},
						run: (*parser).callonforExpression10,
						expr: &andExpr{
							pos: position{line: 689, col: 5, offset: 21040},
							expr: &choiceExpr{
								pos: position{line: 689, col: 7, offset: 21042},
								alternatives: []interface{}{
									&anyMatcher{
										line: 689, col: 7, offset: 21042,
									},
									&notExpr{
										pos: position{line: 689, col: 11, offset: 21046},
										expr: &anyMatcher{
											line: 689, col: 12, offset: 21047,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComments",
			pos:  position{line: 841, col: 1, offset: 25845},
			expr: &actionExpr{
				pos: position{line: 841, col: 18, offset: 25862},
				run: (*parser).callonCorgiComments1,
				expr: &labeledExpr{
					pos:   position{line: 841, col: 18, offset: 25862},
					label: "commentsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 841, col: 28, offset: 25872},
						expr: &seqExpr{
							pos: position{line: 841, col: 29, offset: 25873},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 841, col: 29, offset: 25873},
									expr: &oneOrMoreExpr{
										pos: position{line: 3620, col: 36, offset: 123776},
										expr: &seqExpr{
											pos: position{line: 3620, col: 37, offset: 123777},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													expr: &litMatcher{
														pos:        position{line: 3619, col: 36, offset: 123730},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3619, col: 42, offset: 123736},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 38, offset: 25882},
									name: "CorgiComment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComment",
			pos:  position{line: 845, col: 1, offset: 25973},
			expr: &actionExpr{
				pos: position{line: 845, col: 17, offset: 25989},
				run: (*parser).callonCorgiComment1,
				expr: &seqExpr{
					pos: position{line: 845, col: 17, offset: 25989},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 845, col: 17, offset: 25989},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&notExpr{
							pos: position{line: 845, col: 22, offset: 25994},
							expr: &litMatcher{
								pos:        position{line: 845, col: 23, offset: 25995},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 27, offset: 25999},
							label: "linesI",
							expr: &choiceExpr{
								pos: position{line: 846, col: 5, offset: 26012},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 846, col: 5, offset: 26012},
										run: (*parser).callonCorgiComment8,
										expr: &seqExpr{
											pos: position{line: 846, col: 5, offset: 26012},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 846, col: 5, offset: 26012},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 3606, col: 12, offset: 123342},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3606, col: 16, offset: 123346},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	expr: &litMatcher{
																		pos:        position{line: 3606, col: 16, offset: 123346},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3606, col: 22, offset: 123352},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3605, col: 12, offset: 123328},
															expr: &anyMatcher{
																line: 3605, col: 13, offset: 123329,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 846, col: 12, offset: 26019},
													label: "linesI",
													expr: &ruleRefExpr{
														pos:  position{line: 846, col: 19, offset: 26026},
														name: "corgiCommentBlock",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 848, col: 9, offset: 26081},
										run: (*parser).callonCorgiComment23,
										expr: &labeledExpr{
											pos:   position{line: 848, col: 9, offset: 26081},
											label: "lineI",
											expr: &actionExpr{
												pos: position{line: 862, col: 21, offset: 26508},
												run: (*parser).callonCorgiComment25,
												expr: &seqExpr{
													pos: position{line: 862, col: 21, offset: 26508},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 862, col: 21, offset: 26508},
															label: "commentI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 862, col: 30, offset: 26517},
																expr: &charClassMatcher{
																	pos:        position{line: 3607, col: 12, offset: 123375},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3606, col: 12, offset: 123342},
															expr: &charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3606, col: 16, offset: 123346},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			expr: &litMatcher{
																				pos:        position{line: 3606, col: 16, offset: 123346},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3606, col: 22, offset: 123352},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3605, col: 12, offset: 123328},
																	expr: &anyMatcher{
																		line: 3605, col: 13, offset: 123329,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "corgiCommentBlock",
			pos:  position{line: 858, col: 1, offset: 26310},
			expr: &actionExpr{
				pos: position{line: 858, col: 22, offset: 26331},
				run: (*parser).calloncorgiCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 858, col: 22, offset: 26331},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4088, col: 11, offset: 144044},
							run: (*parser).calloncorgiCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 858, col: 29, offset: 26338},
							label: "linesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 858, col: 36, offset: 26345},
								expr: &seqExpr{
									pos: position{line: 858, col: 37, offset: 26346},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 858, col: 37, offset: 26346},
											expr: &oneOrMoreExpr{
												pos: position{line: 3620, col: 36, offset: 123776},
												expr: &seqExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3620, col: 37, offset: 123777},
															expr: &charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															expr: &litMatcher{
																pos:        position{line: 3619, col: 36, offset: 123730},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3619, col: 42, offset: 123736},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 858, col: 46, offset: 26355},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 862, col: 21, offset: 26508},
											run: (*parser).calloncorgiCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 862, col: 21, offset: 26508},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 862, col: 21, offset: 26508},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 862, col: 30, offset: 26517},
															expr: &charClassMatcher{
																pos:        position{line: 3607, col: 12, offset: 123375},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3606, col: 12, offset: 123342},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		expr: &litMatcher{
																			pos:        position{line: 3606, col: 16, offset: 123346},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3606, col: 22, offset: 123352},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3605, col: 12, offset: 123328},
																expr: &anyMatcher{
																	line: 3605, col: 13, offset: 123329,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4093, col: 11, offset: 144149},
							run: (*parser).calloncorgiCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "HTMLComment",
			pos:  position{line: 911, col: 1, offset: 28190},
			expr: &actionExpr{
				pos: position{line: 911, col: 16, offset: 28205},
				run: (*parser).callonHTMLComment1,
				expr: &seqExpr{
					pos: position{line: 911, col: 16, offset: 28205},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 911, col: 16, offset: 28205},
							val:        "//-",
							ignoreCase: false,
							want:       "\"//-\"",
						},
						&labeledExpr{
							pos:   position{line: 911, col: 22, offset: 28211},
							label: "linesI",
							expr: &choiceExpr{
								pos: position{line: 912, col: 5, offset: 28224},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 912, col: 5, offset: 28224},
										run: (*parser).callonHTMLComment6,
										expr: &seqExpr{
											pos: position{line: 912, col: 5, offset: 28224},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3606, col: 12, offset: 123342},
													expr: &charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3606, col: 16, offset: 123346},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	expr: &litMatcher{
																		pos:        position{line: 3606, col: 16, offset: 123346},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3606, col: 22, offset: 123352},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3605, col: 12, offset: 123328},
															expr: &anyMatcher{
																line: 3605, col: 13, offset: 123329,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 912, col: 9, offset: 28228},
													label: "linesI",
													expr: &ruleRefExpr{
														pos:  position{line: 912, col: 16, offset: 28235},
														name: "htmlCommentBlock",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 914, col: 9, offset: 28289},
										run: (*parser).callonHTMLComment19,
										expr: &labeledExpr{
											pos:   position{line: 914, col: 9, offset: 28289},
											label: "lineI",
											expr: &actionExpr{
												pos: position{line: 928, col: 20, offset: 28707},
												run: (*parser).callonHTMLComment21,
												expr: &seqExpr{
													pos: position{line: 928, col: 20, offset: 28707},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 928, col: 20, offset: 28707},
															label: "commentI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 928, col: 29, offset: 28716},
																expr: &charClassMatcher{
																	pos:        position{line: 3607, col: 12, offset: 123375},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3606, col: 12, offset: 123342},
															expr: &charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3606, col: 16, offset: 123346},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			expr: &litMatcher{
																				pos:        position{line: 3606, col: 16, offset: 123346},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3606, col: 22, offset: 123352},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3605, col: 12, offset: 123328},
																	expr: &anyMatcher{
																		line: 3605, col: 13, offset: 123329,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "htmlCommentBlock",
			pos:  position{line: 924, col: 1, offset: 28513},
			expr: &actionExpr{
				pos: position{line: 924, col: 21, offset: 28533},
				run: (*parser).callonhtmlCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 924, col: 21, offset: 28533},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4088, col: 11, offset: 144044},
							run: (*parser).callonhtmlCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 924, col: 28, offset: 28540},
							label: "linesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 924, col: 35, offset: 28547},
								expr: &seqExpr{
									pos: position{line: 924, col: 36, offset: 28548},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 924, col: 36, offset: 28548},
											expr: &oneOrMoreExpr{
												pos: position{line: 3620, col: 36, offset: 123776},
												expr: &seqExpr{
													pos: position{line: 3620, col: 37, offset: 123777},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3620, col: 37, offset: 123777},
															expr: &charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															expr: &litMatcher{
																pos:        position{line: 3619, col: 36, offset: 123730},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3619, col: 42, offset: 123736},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 924, col: 45, offset: 28557},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 928, col: 20, offset: 28707},
											run: (*parser).callonhtmlCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 928, col: 20, offset: 28707},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 928, col: 20, offset: 28707},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 928, col: 29, offset: 28716},
															expr: &charClassMatcher{
																pos:        position{line: 3607, col: 12, offset: 123375},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3606, col: 12, offset: 123342},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		expr: &litMatcher{
																			pos:        position{line: 3606, col: 16, offset: 123346},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3606, col: 22, offset: 123352},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3605, col: 12, offset: 123328},
																expr: &anyMatcher{
																	line: 3605, col: 13, offset: 123329,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4093, col: 11, offset: 144149},
							run: (*parser).callonhtmlCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 936, col: 1, offset: 28998},
			expr: &actionExpr{
				pos: position{line: 936, col: 12, offset: 29009},
				run: (*parser).callonElement1,
				expr: &seqExpr{
					pos: position{line: 936, col: 12, offset: 29009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 936, col: 12, offset: 29009},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2729, col: 16, offset: 94945},
								expr: &charClassMatcher{
									pos:        position{line: 2715, col: 27, offset: 94284},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 30, offset: 29027},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 936, col: 37, offset: 29034},
								expr: &ruleRefExpr{
									pos:  position{line: 936, col: 37, offset: 29034},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 58, offset: 29055},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 936, col: 64, offset: 29061},
								expr: &litMatcher{
									pos:        position{line: 936, col: 64, offset: 29061},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 69, offset: 29066},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 936, col: 75, offset: 29072},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 946, col: 1, offset: 29303},
			expr: &actionExpr{
				pos: position{line: 946, col: 18, offset: 29320},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 946, col: 18, offset: 29320},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 946, col: 18, offset: 29320},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2729, col: 16, offset: 94945},
								expr: &charClassMatcher{
									pos:        position{line: 2715, col: 27, offset: 94284},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 946, col: 36, offset: 29338},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 946, col: 43, offset: 29345},
								expr: &ruleRefExpr{
									pos:  position{line: 946, col: 43, offset: 29345},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 946, col: 74, offset: 29376},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 946, col: 80, offset: 29382},
								expr: &litMatcher{
									pos:        position{line: 946, col: 80, offset: 29382},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 946, col: 85, offset: 29387},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 91, offset: 29393},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "DivShorthand",
			pos:  position{line: 960, col: 1, offset: 29810},
			expr: &actionExpr{
				pos: position{line: 960, col: 17, offset: 29826},
				run: (*parser).callonDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 960, col: 17, offset: 29826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 960, col: 17, offset: 29826},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 960, col: 29, offset: 29838},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1093, col: 19, offset: 34947},
										run: (*parser).callonDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1093, col: 19, offset: 34947},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1093, col: 19, offset: 34947},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1093, col: 23, offset: 34951},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1093, col: 29, offset: 34957},
														expr: &charClassMatcher{
															pos:        position{line: 1093, col: 29, offset: 34957},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1098, col: 5, offset: 35076},
										run: (*parser).callonDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1098, col: 5, offset: 35076},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1098, col: 5, offset: 35076},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1098, col: 9, offset: 35080},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1074, col: 16, offset: 34506},
										run: (*parser).callonDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1074, col: 16, offset: 34506},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1074, col: 16, offset: 34506},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1074, col: 20, offset: 34510},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1074, col: 24, offset: 34514},
														expr: &charClassMatcher{
															pos:        position{line: 1074, col: 24, offset: 34514},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1079, col: 5, offset: 34626},
										run: (*parser).callonDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1079, col: 5, offset: 34626},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1079, col: 5, offset: 34626},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1079, col: 9, offset: 34630},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 59, offset: 29868},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 960, col: 70, offset: 29879},
								expr: &ruleRefExpr{
									pos:  position{line: 960, col: 70, offset: 29879},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 91, offset: 29900},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 97, offset: 29906},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDivShorthand",
			pos:  position{line: 968, col: 1, offset: 30167},
			expr: &actionExpr{
				pos: position{line: 968, col: 23, offset: 30189},
				run: (*parser).callonInlineDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 968, col: 23, offset: 30189},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 968, col: 23, offset: 30189},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 968, col: 35, offset: 30201},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1093, col: 19, offset: 34947},
										run: (*parser).callonInlineDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1093, col: 19, offset: 34947},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1093, col: 19, offset: 34947},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1093, col: 23, offset: 34951},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1093, col: 29, offset: 34957},
														expr: &charClassMatcher{
															pos:        position{line: 1093, col: 29, offset: 34957},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1098, col: 5, offset: 35076},
										run: (*parser).callonInlineDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1098, col: 5, offset: 35076},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1098, col: 5, offset: 35076},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1098, col: 9, offset: 35080},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonInlineDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1074, col: 16, offset: 34506},
										run: (*parser).callonInlineDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1074, col: 16, offset: 34506},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1074, col: 16, offset: 34506},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1074, col: 20, offset: 34510},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1074, col: 24, offset: 34514},
														expr: &charClassMatcher{
															pos:        position{line: 1074, col: 24, offset: 34514},
															val:        "[^ \\t\\r\\n.()]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1079, col: 5, offset: 34626},
										run: (*parser).callonInlineDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1079, col: 5, offset: 34626},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1079, col: 5, offset: 34626},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1079, col: 9, offset: 34630},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonInlineDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 65, offset: 30231},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 968, col: 76, offset: 30242},
								expr: &ruleRefExpr{
									pos:  position{line: 968, col: 76, offset: 30242},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 107, offset: 30273},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 113, offset: 30279},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 980, col: 1, offset: 30717},
			expr: &choiceExpr{
				pos: position{line: 980, col: 8, offset: 30724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 980, col: 8, offset: 30724},
						run: (*parser).callonAnd2,
						expr: &seqExpr{
							pos: position{line: 980, col: 8, offset: 30724},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 980, col: 8, offset: 30724},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 980, col: 12, offset: 30728},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 980, col: 19, offset: 30735},
										expr: &ruleRefExpr{
											pos:  position{line: 980, col: 19, offset: 30735},
											name: "AttributeCollection",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 30890},
						run: (*parser).callonAnd17,
						expr: &seqExpr{
							pos: position{line: 985, col: 5, offset: 30890},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 985, col: 5, offset: 30890},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 985, col: 9, offset: 30894},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonAnd21,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 31490},
						run: (*parser).callonAnd36,
						expr: &seqExpr{
							pos: position{line: 1000, col: 5, offset: 31490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1000, col: 5, offset: 31490},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 9, offset: 31494},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1000, col: 16, offset: 31501},
										expr: &ruleRefExpr{
											pos:  position{line: 1000, col: 16, offset: 31501},
											name: "AttributeCollection",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 37, offset: 31522},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonAnd43,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1000, col: 46, offset: 31531},
									expr: &charClassMatcher{
										pos:        position{line: 3607, col: 12, offset: 123375},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAnd",
			pos:  position{line: 1022, col: 1, offset: 32401},
			expr: &choiceExpr{
				pos: position{line: 1022, col: 14, offset: 32414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1022, col: 14, offset: 32414},
						run: (*parser).callonInlineAnd2,
						expr: &seqExpr{
							pos: position{line: 1022, col: 14, offset: 32414},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1022, col: 14, offset: 32414},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 18, offset: 32418},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1022, col: 25, offset: 32425},
										expr: &ruleRefExpr{
											pos:  position{line: 1022, col: 25, offset: 32425},
											name: "SingleLineAttributeCollection",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1027, col: 5, offset: 32590},
						run: (*parser).callonInlineAnd17,
						expr: &seqExpr{
							pos: position{line: 1027, col: 5, offset: 32590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1027, col: 5, offset: 32590},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 9, offset: 32594},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonInlineAnd21,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 5, offset: 33190},
						run: (*parser).callonInlineAnd36,
						expr: &seqExpr{
							pos: position{line: 1042, col: 5, offset: 33190},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1042, col: 5, offset: 33190},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 9, offset: 33194},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1042, col: 16, offset: 33201},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 16, offset: 33201},
											name: "SingleLineAttributeCollection",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 47, offset: 33232},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonInlineAnd43,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1042, col: 56, offset: 33241},
									expr: &charClassMatcher{
										pos:        position{line: 3607, col: 12, offset: 123375},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeCollection",
			pos:  position{line: 1068, col: 1, offset: 34305},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 34, offset: 34338},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 16, offset: 34506},
						run: (*parser).callonAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 16, offset: 34506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 16, offset: 34506},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 20, offset: 34510},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1074, col: 24, offset: 34514},
										expr: &charClassMatcher{
											pos:        position{line: 1074, col: 24, offset: 34514},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 34626},
						run: (*parser).callonAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 34626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 34626},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 9, offset: 34630},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1093, col: 19, offset: 34947},
						run: (*parser).callonAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1093, col: 19, offset: 34947},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 19, offset: 34947},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 23, offset: 34951},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1093, col: 29, offset: 34957},
										expr: &charClassMatcher{
											pos:        position{line: 1093, col: 29, offset: 34957},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 35076},
						run: (*parser).callonAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 35076},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1098, col: 5, offset: 35076},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 9, offset: 35080},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 65, offset: 34369},
						name: "AttributeList",
					},
				},
			},
		},
		{
			name: "SingleLineAttributeCollection",
			pos:  position{line: 1069, col: 1, offset: 34383},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 34, offset: 34416},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 16, offset: 34506},
						run: (*parser).callonSingleLineAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 16, offset: 34506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 16, offset: 34506},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 20, offset: 34510},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1074, col: 24, offset: 34514},
										expr: &charClassMatcher{
											pos:        position{line: 1074, col: 24, offset: 34514},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 34626},
						run: (*parser).callonSingleLineAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 34626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 34626},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 9, offset: 34630},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonSingleLineAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1093, col: 19, offset: 34947},
						run: (*parser).callonSingleLineAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1093, col: 19, offset: 34947},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 19, offset: 34947},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 23, offset: 34951},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1093, col: 29, offset: 34957},
										expr: &charClassMatcher{
											pos:        position{line: 1093, col: 29, offset: 34957},
											val:        "[^ \\t\\r\\n.()]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 35076},
						run: (*parser).callonSingleLineAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 35076},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1098, col: 5, offset: 35076},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 9, offset: 35080},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonSingleLineAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 65, offset: 34447},
						name: "SingleLineAttributeList",
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 1112, col: 1, offset: 35399},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 18, offset: 35416},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1112, col: 18, offset: 35416},
						run: (*parser).callonAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 18, offset: 35416},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 18, offset: 35416},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1112, col: 22, offset: 35420},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 26, offset: 35424},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1112, col: 38, offset: 35436},
										expr: &ruleRefExpr{
											pos:  position{line: 1112, col: 38, offset: 35436},
											name: "attributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1112, col: 50, offset: 35448},
									expr: &litMatcher{
										pos:        position{line: 1112, col: 50, offset: 35448},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1112, col: 55, offset: 35453},
									expr: &seqExpr{
										pos: position{line: 1112, col: 56, offset: 35454},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1112, col: 56, offset: 35454},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1112, col: 60, offset: 35458},
												expr: &choiceExpr{
													pos: position{line: 3622, col: 20, offset: 123807},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 66, offset: 35464},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonAttributeList28,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 35670},
						run: (*parser).callonAttributeList30,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 35670},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 35670},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1118, col: 9, offset: 35674},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 13, offset: 35678},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1118, col: 25, offset: 35690},
										expr: &ruleRefExpr{
											pos:  position{line: 1118, col: 25, offset: 35690},
											name: "attributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1118, col: 37, offset: 35702},
									expr: &seqExpr{
										pos: position{line: 1118, col: 38, offset: 35703},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1118, col: 38, offset: 35703},
												expr: &litMatcher{
													pos:        position{line: 1118, col: 38, offset: 35703},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1118, col: 43, offset: 35708},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 49, offset: 35714},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonAttributeList49,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attributes",
			pos:  position{line: 1137, col: 1, offset: 36267},
			expr: &actionExpr{
				pos: position{line: 1137, col: 15, offset: 36281},
				run: (*parser).callonattributes1,
				expr: &seqExpr{
					pos: position{line: 1137, col: 15, offset: 36281},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1137, col: 15, offset: 36281},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1137, col: 22, offset: 36288},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1137, col: 32, offset: 36298},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1137, col: 38, offset: 36304},
								expr: &seqExpr{
									pos: position{line: 1137, col: 39, offset: 36305},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1137, col: 39, offset: 36305},
											expr: &litMatcher{
												pos:        position{line: 1137, col: 39, offset: 36305},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1137, col: 44, offset: 36310},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1137, col: 48, offset: 36314},
											expr: &choiceExpr{
												pos: position{line: 3622, col: 20, offset: 123807},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																expr: &litMatcher{
																	pos:        position{line: 3619, col: 36, offset: 123730},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3619, col: 42, offset: 123736},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1137, col: 52, offset: 36318},
											name: "Attribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineAttributeList",
			pos:  position{line: 1148, col: 1, offset: 36588},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 28, offset: 36615},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1148, col: 28, offset: 36615},
						run: (*parser).callonSingleLineAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1148, col: 28, offset: 36615},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1148, col: 28, offset: 36615},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1148, col: 32, offset: 36619},
									expr: &litMatcher{
										pos:        position{line: 1148, col: 32, offset: 36619},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 37, offset: 36624},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1148, col: 49, offset: 36636},
										expr: &ruleRefExpr{
											pos:  position{line: 1148, col: 49, offset: 36636},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1148, col: 71, offset: 36658},
									expr: &litMatcher{
										pos:        position{line: 1148, col: 71, offset: 36658},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1148, col: 76, offset: 36663},
									expr: &seqExpr{
										pos: position{line: 1148, col: 77, offset: 36664},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1148, col: 77, offset: 36664},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1148, col: 81, offset: 36668},
												expr: &litMatcher{
													pos:        position{line: 1148, col: 81, offset: 36668},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 88, offset: 36675},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonSingleLineAttributeList18,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1154, col: 5, offset: 36881},
						run: (*parser).callonSingleLineAttributeList20,
						expr: &seqExpr{
							pos: position{line: 1154, col: 5, offset: 36881},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1154, col: 5, offset: 36881},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1154, col: 9, offset: 36885},
									expr: &litMatcher{
										pos:        position{line: 1154, col: 9, offset: 36885},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 14, offset: 36890},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1154, col: 26, offset: 36902},
										expr: &ruleRefExpr{
											pos:  position{line: 1154, col: 26, offset: 36902},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1154, col: 48, offset: 36924},
									expr: &seqExpr{
										pos: position{line: 1154, col: 49, offset: 36925},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1154, col: 49, offset: 36925},
												expr: &litMatcher{
													pos:        position{line: 1154, col: 49, offset: 36925},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1154, col: 54, offset: 36930},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 60, offset: 36936},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonSingleLineAttributeList34,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineAttributes",
			pos:  position{line: 1173, col: 1, offset: 37489},
			expr: &actionExpr{
				pos: position{line: 1173, col: 25, offset: 37513},
				run: (*parser).callonsingleLineAttributes1,
				expr: &seqExpr{
					pos: position{line: 1173, col: 25, offset: 37513},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1173, col: 25, offset: 37513},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1173, col: 32, offset: 37520},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1173, col: 42, offset: 37530},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1173, col: 48, offset: 37536},
								expr: &seqExpr{
									pos: position{line: 1173, col: 49, offset: 37537},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1173, col: 49, offset: 37537},
											expr: &litMatcher{
												pos:        position{line: 1173, col: 49, offset: 37537},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1173, col: 54, offset: 37542},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1173, col: 58, offset: 37546},
											expr: &litMatcher{
												pos:        position{line: 1173, col: 58, offset: 37546},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1173, col: 63, offset: 37551},
											name: "SingleLineAttribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 1188, col: 1, offset: 38015},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 24, offset: 38038},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1188, col: 24, offset: 38038},
						name: "MixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1252, col: 19, offset: 40142},
						run: (*parser).callonAttribute3,
						expr: &seqExpr{
							pos: position{line: 1252, col: 19, offset: 40142},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 19, offset: 40142},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1252, col: 24, offset: 40147},
									expr: &choiceExpr{
										pos: position{line: 1252, col: 26, offset: 40149},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1252, col: 31, offset: 40154},
												val:        "[,)]",
												chars:      []rune{',', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 62, offset: 38076},
						name: "SimpleAttribute",
					},
				},
			},
		},
		{
			name: "SingleLineAttribute",
			pos:  position{line: 1189, col: 1, offset: 38092},
			expr: &choiceExpr{
				pos: position{line: 1189, col: 24, offset: 38115},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1189, col: 24, offset: 38115},
						name: "SingleLineMixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1252, col: 19, offset: 40142},
						run: (*parser).callonSingleLineAttribute3,
						expr: &seqExpr{
							pos: position{line: 1252, col: 19, offset: 40142},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 19, offset: 40142},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1252, col: 24, offset: 40147},
									expr: &choiceExpr{
										pos: position{line: 1252, col: 26, offset: 40149},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1252, col: 31, offset: 40154},
												val:        "[,)]",
												chars:      []rune{',', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 72, offset: 38163},
						name: "SingleLineSimpleAttribute",
					},
				},
			},
		},
		{
			name: "SimpleAttribute",
			pos:  position{line: 1196, col: 1, offset: 38263},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 30, offset: 38292},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 30, offset: 38292},
						name: "simpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1241, col: 27, offset: 39962},
						run: (*parser).callonSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1241, col: 27, offset: 39962},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1241, col: 27, offset: 39962},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 18, offset: 38207},
										expr: &seqExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1191, col: 19, offset: 38208},
													expr: &charClassMatcher{
														pos:        position{line: 1191, col: 20, offset: 38209},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2736, col: 26, offset: 95225},
													expr: &charClassMatcher{
														pos:        position{line: 2712, col: 27, offset: 94133},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2736, col: 101, offset: 95300,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1241, col: 47, offset: 39982},
									expr: &seqExpr{
										pos: position{line: 1241, col: 49, offset: 39984},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1241, col: 49, offset: 39984},
												expr: &litMatcher{
													pos:        position{line: 1241, col: 49, offset: 39984},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1241, col: 54, offset: 39989},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineSimpleAttribute",
			pos:  position{line: 1197, col: 1, offset: 38338},
			expr: &choiceExpr{
				pos: position{line: 1197, col: 30, offset: 38367},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1197, col: 30, offset: 38367},
						name: "singleLineSimpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1241, col: 27, offset: 39962},
						run: (*parser).callonSingleLineSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1241, col: 27, offset: 39962},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1241, col: 27, offset: 39962},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 18, offset: 38207},
										expr: &seqExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1191, col: 19, offset: 38208},
													expr: &charClassMatcher{
														pos:        position{line: 1191, col: 20, offset: 38209},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2736, col: 26, offset: 95225},
													expr: &charClassMatcher{
														pos:        position{line: 2712, col: 27, offset: 94133},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2736, col: 101, offset: 95300,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1241, col: 47, offset: 39982},
									expr: &seqExpr{
										pos: position{line: 1241, col: 49, offset: 39984},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1241, col: 49, offset: 39984},
												expr: &litMatcher{
													pos:        position{line: 1241, col: 49, offset: 39984},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1241, col: 54, offset: 39989},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleValueAttribute",
			pos:  position{line: 1199, col: 1, offset: 38424},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 25, offset: 38448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1199, col: 25, offset: 38448},
						run: (*parser).callonsimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1199, col: 25, offset: 38448},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1199, col: 25, offset: 38448},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 18, offset: 38207},
										expr: &seqExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1191, col: 19, offset: 38208},
													expr: &charClassMatcher{
														pos:        position{line: 1191, col: 20, offset: 38209},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2736, col: 26, offset: 95225},
													expr: &charClassMatcher{
														pos:        position{line: 2712, col: 27, offset: 94133},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2736, col: 101, offset: 95300,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1199, col: 45, offset: 38468},
									expr: &litMatcher{
										pos:        position{line: 1199, col: 45, offset: 38468},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 50, offset: 38473},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 65, offset: 38488},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1199, col: 69, offset: 38492},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 73, offset: 38496},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsimpleValueAttribute30,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 82, offset: 38505},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 88, offset: 38511},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1206, col: 5, offset: 38728},
						run: (*parser).callonsimpleValueAttribute38,
						expr: &seqExpr{
							pos: position{line: 1206, col: 5, offset: 38728},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1206, col: 5, offset: 38728},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 18, offset: 38207},
										expr: &seqExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1191, col: 19, offset: 38208},
													expr: &charClassMatcher{
														pos:        position{line: 1191, col: 20, offset: 38209},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2736, col: 26, offset: 95225},
													expr: &charClassMatcher{
														pos:        position{line: 2712, col: 27, offset: 94133},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2736, col: 101, offset: 95300,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1206, col: 25, offset: 38748},
									expr: &litMatcher{
										pos:        position{line: 1206, col: 25, offset: 38748},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 30, offset: 38753},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsimpleValueAttribute51,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1206, col: 45, offset: 38768},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 49, offset: 38772},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsimpleValueAttribute59,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineSimpleValueAttribute",
			pos:  position{line: 1220, col: 1, offset: 39169},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 35, offset: 39203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1220, col: 35, offset: 39203},
						run: (*parser).callonsingleLineSimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1220, col: 35, offset: 39203},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1220, col: 35, offset: 39203},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 18, offset: 38207},
										expr: &seqExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1191, col: 19, offset: 38208},
													expr: &charClassMatcher{
														pos:        position{line: 1191, col: 20, offset: 38209},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2736, col: 26, offset: 95225},
													expr: &charClassMatcher{
														pos:        position{line: 2712, col: 27, offset: 94133},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2736, col: 101, offset: 95300,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1220, col: 55, offset: 39223},
									expr: &litMatcher{
										pos:        position{line: 1220, col: 55, offset: 39223},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 60, offset: 39228},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsingleLineSimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1220, col: 75, offset: 39243},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1220, col: 79, offset: 39247},
									expr: &litMatcher{
										pos:        position{line: 1220, col: 79, offset: 39247},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 84, offset: 39252},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 90, offset: 39258},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 39479},
						run: (*parser).callonsingleLineSimpleValueAttribute26,
						expr: &seqExpr{
							pos: position{line: 1227, col: 5, offset: 39479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1227, col: 5, offset: 39479},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 18, offset: 38207},
										expr: &seqExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1191, col: 19, offset: 38208},
													expr: &charClassMatcher{
														pos:        position{line: 1191, col: 20, offset: 38209},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2736, col: 26, offset: 95225},
													expr: &charClassMatcher{
														pos:        position{line: 2712, col: 27, offset: 94133},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2736, col: 101, offset: 95300,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1227, col: 25, offset: 39499},
									expr: &litMatcher{
										pos:        position{line: 1227, col: 25, offset: 39499},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 30, offset: 39504},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsingleLineSimpleValueAttribute39,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 45, offset: 39519},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 49, offset: 39523},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsingleLineSimpleValueAttribute47,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCallAttribute",
			pos:  position{line: 1260, col: 1, offset: 40253},
			expr: &actionExpr{
				pos: position{line: 1260, col: 23, offset: 40275},
				run: (*parser).callonMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 23, offset: 40275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1260, col: 23, offset: 40275},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1191, col: 18, offset: 38207},
								expr: &seqExpr{
									pos: position{line: 1191, col: 19, offset: 38208},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											expr: &charClassMatcher{
												pos:        position{line: 1191, col: 20, offset: 38209},
												val:        "[()]",
												chars:      []rune{'(', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2736, col: 26, offset: 95225},
											expr: &charClassMatcher{
												pos:        position{line: 2712, col: 27, offset: 94133},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2736, col: 101, offset: 95300,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1260, col: 43, offset: 40295},
							expr: &litMatcher{
								pos:        position{line: 1260, col: 43, offset: 40295},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 48, offset: 40300},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).callonMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1260, col: 63, offset: 40315},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1260, col: 67, offset: 40319},
							expr: &choiceExpr{
								pos: position{line: 3622, col: 20, offset: 123807},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3619, col: 36, offset: 123730},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												expr: &litMatcher{
													pos:        position{line: 3619, col: 36, offset: 123730},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3619, col: 42, offset: 123736},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 71, offset: 40323},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1260, col: 77, offset: 40329},
								name: "mixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineMixinCallAttribute",
			pos:  position{line: 1270, col: 1, offset: 40611},
			expr: &actionExpr{
				pos: position{line: 1270, col: 33, offset: 40643},
				run: (*parser).callonSingleLineMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 33, offset: 40643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1270, col: 33, offset: 40643},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1191, col: 18, offset: 38207},
								expr: &seqExpr{
									pos: position{line: 1191, col: 19, offset: 38208},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1191, col: 19, offset: 38208},
											expr: &charClassMatcher{
												pos:        position{line: 1191, col: 20, offset: 38209},
												val:        "[()]",
												chars:      []rune{'(', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2736, col: 26, offset: 95225},
											expr: &charClassMatcher{
												pos:        position{line: 2712, col: 27, offset: 94133},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2736, col: 101, offset: 95300,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1270, col: 53, offset: 40663},
							expr: &litMatcher{
								pos:        position{line: 1270, col: 53, offset: 40663},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 58, offset: 40668},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).callonSingleLineMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1270, col: 73, offset: 40683},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1270, col: 77, offset: 40687},
							expr: &litMatcher{
								pos:        position{line: 1270, col: 77, offset: 40687},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 82, offset: 40692},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 88, offset: 40698},
								name: "singleLineMixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeCall",
			pos:  position{line: 1281, col: 1, offset: 40991},
			expr: &actionExpr{
				pos: position{line: 1281, col: 27, offset: 41017},
				run: (*parser).callonmixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 27, offset: 41017},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1281, col: 27, offset: 41017},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 31, offset: 41021},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1281, col: 42, offset: 41032},
								expr: &seqExpr{
									pos: position{line: 1281, col: 43, offset: 41033},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21284},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21284},
													run: (*parser).callonmixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21284},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2260, col: 17, offset: 77263},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2260, col: 26, offset: 77272},
																	expr: &charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21378},
													run: (*parser).callonmixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21378},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21386},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21386},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21386},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21391},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21392},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21392},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21392},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21401},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21411},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21422},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonmixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1281, col: 49, offset: 41039},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 55, offset: 41045},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21839},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21839},
										run: (*parser).callonmixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21839},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21284},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														run: (*parser).callonmixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21284},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2260, col: 17, offset: 77263},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2260, col: 26, offset: 77272},
																		expr: &charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														run: (*parser).callonmixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21378},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21378},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21386},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21386},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21391},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21392},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21392},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21401},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21411},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21422},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonmixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21881},
										run: (*parser).callonmixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21881},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21881},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonmixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21890},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21892},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21898},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonmixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 29, offset: 22254},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonmixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 71, offset: 41061},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1281, col: 77, offset: 41067},
								expr: &ruleRefExpr{
									pos:  position{line: 1281, col: 77, offset: 41067},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 91, offset: 41081},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1281, col: 98, offset: 41088},
								expr: &ruleRefExpr{
									pos:  position{line: 1281, col: 98, offset: 41088},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinCallAttributeCall",
			pos:  position{line: 1294, col: 1, offset: 41495},
			expr: &actionExpr{
				pos: position{line: 1294, col: 37, offset: 41531},
				run: (*parser).callonsingleLineMixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 37, offset: 41531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1294, col: 37, offset: 41531},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 41, offset: 41535},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1294, col: 52, offset: 41546},
								expr: &seqExpr{
									pos: position{line: 1294, col: 53, offset: 41547},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21284},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21284},
													run: (*parser).callonsingleLineMixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21284},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2260, col: 17, offset: 77263},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2260, col: 26, offset: 77272},
																	expr: &charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21378},
													run: (*parser).callonsingleLineMixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21378},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21386},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21386},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21386},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21391},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21392},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21392},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21392},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21401},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21411},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21422},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonsingleLineMixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1294, col: 59, offset: 41553},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 65, offset: 41559},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21839},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21839},
										run: (*parser).callonsingleLineMixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21839},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21284},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														run: (*parser).callonsingleLineMixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21284},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2260, col: 17, offset: 77263},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2260, col: 26, offset: 77272},
																		expr: &charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														run: (*parser).callonsingleLineMixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21378},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21378},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21386},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21386},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21391},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21392},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21392},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21401},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21411},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21422},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonsingleLineMixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21881},
										run: (*parser).callonsingleLineMixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21881},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21881},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonsingleLineMixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21890},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21892},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21898},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonsingleLineMixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 29, offset: 22254},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonsingleLineMixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 81, offset: 41575},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1294, col: 87, offset: 41581},
								expr: &ruleRefExpr{
									pos:  position{line: 1294, col: 87, offset: 41581},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 111, offset: 41605},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1294, col: 118, offset: 41612},
								expr: &ruleRefExpr{
									pos:  position{line: 1294, col: 118, offset: 41612},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeValue",
			pos:  position{line: 1308, col: 1, offset: 42020},
			expr: &choiceExpr{
				pos: position{line: 1308, col: 28, offset: 42047},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3565, col: 27, offset: 121849},
						run: (*parser).callonmixinCallAttributeValue2,
						expr: &seqExpr{
							pos: position{line: 3565, col: 27, offset: 121849},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3565, col: 27, offset: 121849},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3634, col: 14, offset: 124183},
										run: (*parser).callonmixinCallAttributeValue5,
										expr: &litMatcher{
											pos:        position{line: 3634, col: 14, offset: 124183},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3565, col: 50, offset: 121872},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3565, col: 56, offset: 121878},
										expr: &charClassMatcher{
											pos:        position{line: 3565, col: 56, offset: 121878},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3565, col: 67, offset: 121889},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3635, col: 14, offset: 124223},
										run: (*parser).callonmixinCallAttributeValue11,
										expr: &litMatcher{
											pos:        position{line: 3635, col: 14, offset: 124223},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3571, col: 5, offset: 122100},
						run: (*parser).callonmixinCallAttributeValue13,
						expr: &seqExpr{
							pos: position{line: 3571, col: 5, offset: 122100},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3571, col: 5, offset: 122100},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3634, col: 14, offset: 124183},
										run: (*parser).callonmixinCallAttributeValue16,
										expr: &litMatcher{
											pos:        position{line: 3634, col: 14, offset: 124183},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3571, col: 28, offset: 122123},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3571, col: 34, offset: 122129},
										expr: &charClassMatcher{
											pos:        position{line: 3571, col: 34, offset: 122129},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 53, offset: 42072},
						name: "expressionInterpolationValue",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 1321, col: 1, offset: 42357},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 15, offset: 42371},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1321, col: 15, offset: 42371},
						run: (*parser).callonExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1321, col: 15, offset: 42371},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 22, offset: 42378},
								name: "ChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 5, offset: 42499},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "SingleLineExpression",
			pos:  position{line: 1325, col: 1, offset: 42513},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 25, offset: 42537},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1325, col: 25, offset: 42537},
						run: (*parser).callonSingleLineExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1325, col: 25, offset: 42537},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 32, offset: 42544},
								name: "SingleLineChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 5, offset: 42675},
						name: "SingleLineGoExpression",
					},
				},
			},
		},
		{
			name: "GoExpression",
			pos:  position{line: 1337, col: 1, offset: 43083},
			expr: &actionExpr{
				pos: position{line: 1337, col: 17, offset: 43099},
				run: (*parser).callonGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1337, col: 17, offset: 43099},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1337, col: 24, offset: 43106},
						expr: &choiceExpr{
							pos: position{line: 1338, col: 6, offset: 43113},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1338, col: 6, offset: 43113},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 20, offset: 43127},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 39, offset: 43146},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1401, col: 15, offset: 45187},
									run: (*parser).callonGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1401, col: 15, offset: 45187},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1401, col: 15, offset: 45187},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2307, col: 14, offset: 78590},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2307, col: 14, offset: 78590},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2307, col: 20, offset: 78596},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2355, col: 19, offset: 80741},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2355, col: 19, offset: 80741},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2356, col: 5, offset: 80800},
																		run: (*parser).callonGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2356, col: 5, offset: 80800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2356, col: 5, offset: 80800},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 14, offset: 80809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 26, offset: 80821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 38, offset: 80833},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 50, offset: 80845},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2385, col: 16, offset: 81981},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2385, col: 16, offset: 81981},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2386, col: 5, offset: 82084},
																		run: (*parser).callonGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2386, col: 5, offset: 82084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2386, col: 5, offset: 82084},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 14, offset: 82093},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 26, offset: 82105},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 38, offset: 82117},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 50, offset: 82129},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 62, offset: 82141},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 74, offset: 82153},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 86, offset: 82165},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 98, offset: 82177},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2420, col: 24, offset: 83562},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2420, col: 24, offset: 83562},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2420, col: 29, offset: 83567},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2334, col: 75, offset: 79853},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2336, col: 24, offset: 79999},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2336, col: 24, offset: 79999},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2337, col: 24, offset: 80066},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2337, col: 24, offset: 80066},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2338, col: 5, offset: 80103},
																		run: (*parser).callonGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2338, col: 5, offset: 80103},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2338, col: 5, offset: 80103},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 14, offset: 80112},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 26, offset: 80124},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2421, col: 24, offset: 83645},
																		run: (*parser).callonGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2421, col: 24, offset: 83645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2421, col: 24, offset: 83645},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2445, col: 5, offset: 84661},
																		run: (*parser).callonGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2445, col: 5, offset: 84661},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2445, col: 5, offset: 84661},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2466, col: 5, offset: 85502},
																		run: (*parser).callonGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2466, col: 5, offset: 85502},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2466, col: 5, offset: 85502},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2484, col: 5, offset: 86187},
																		run: (*parser).callonGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2484, col: 5, offset: 86187},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2484, col: 5, offset: 86187},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2484, col: 10, offset: 86192},
																					expr: &charClassMatcher{
																						pos:        position{line: 3607, col: 12, offset: 123375},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2307, col: 76, offset: 78652},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2308, col: 5, offset: 78663},
														run: (*parser).callonGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2308, col: 5, offset: 78663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2308, col: 5, offset: 78663},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 10, offset: 78668},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2308, col: 16, offset: 78674},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 17, offset: 78675},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2355, col: 19, offset: 80741},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2355, col: 19, offset: 80741},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					run: (*parser).callonGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2356, col: 5, offset: 80800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2356, col: 5, offset: 80800},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 14, offset: 80809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 26, offset: 80821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 38, offset: 80833},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 50, offset: 80845},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2385, col: 16, offset: 81981},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2385, col: 16, offset: 81981},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					run: (*parser).callonGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2386, col: 5, offset: 82084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2386, col: 5, offset: 82084},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 14, offset: 82093},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 26, offset: 82105},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 38, offset: 82117},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 50, offset: 82129},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 62, offset: 82141},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 74, offset: 82153},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 86, offset: 82165},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 98, offset: 82177},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2420, col: 24, offset: 83562},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2420, col: 24, offset: 83562},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2420, col: 29, offset: 83567},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2334, col: 75, offset: 79853},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2336, col: 24, offset: 79999},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2336, col: 24, offset: 79999},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2337, col: 24, offset: 80066},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2337, col: 24, offset: 80066},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					run: (*parser).callonGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2338, col: 5, offset: 80103},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2338, col: 5, offset: 80103},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 14, offset: 80112},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 26, offset: 80124},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					run: (*parser).callonGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2421, col: 24, offset: 83645},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2421, col: 24, offset: 83645},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					run: (*parser).callonGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2445, col: 5, offset: 84661},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2445, col: 5, offset: 84661},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					run: (*parser).callonGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2466, col: 5, offset: 85502},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2466, col: 5, offset: 85502},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					run: (*parser).callonGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2484, col: 5, offset: 86187},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2484, col: 5, offset: 86187},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2484, col: 10, offset: 86192},
																								expr: &charClassMatcher{
																									pos:        position{line: 3607, col: 12, offset: 123375},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2308, col: 74, offset: 78732},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 79, offset: 78737},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1339, col: 6, offset: 43184},
									run: (*parser).callonGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1339, col: 6, offset: 43184},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1339, col: 6, offset: 43184},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1339, col: 15, offset: 43193},
												expr: &choiceExpr{
													pos: position{line: 1329, col: 25, offset: 42723},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1329, col: 25, offset: 42723},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1329, col: 40, offset: 42738},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1329, col: 40, offset: 42738},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1329, col: 44, offset: 42742},
																	expr: &litMatcher{
																		pos:        position{line: 1329, col: 45, offset: 42743},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3607, col: 12, offset: 123375},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1339, col: 45, offset: 43223},
												expr: &seqExpr{
													pos: position{line: 1339, col: 46, offset: 43224},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1339, col: 46, offset: 43224},
															expr: &choiceExpr{
																pos: position{line: 1329, col: 25, offset: 42723},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1329, col: 25, offset: 42723},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1329, col: 40, offset: 42738},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1329, col: 40, offset: 42738},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1329, col: 44, offset: 42742},
																				expr: &litMatcher{
																					pos:        position{line: 1329, col: 45, offset: 42743},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1339, col: 68, offset: 43246},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1339, col: 73, offset: 43251},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParenExpr",
			pos:  position{line: 1346, col: 1, offset: 43416},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 16, offset: 43431},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1346, col: 16, offset: 43431},
						run: (*parser).callongoParenExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1346, col: 16, offset: 43431},
							label: "exprI",
							expr: &choiceExpr{
								pos: position{line: 1346, col: 23, offset: 43438},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 1346, col: 23, offset: 43438},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1346, col: 23, offset: 43438},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1346, col: 27, offset: 43442},
												expr: &ruleRefExpr{
													pos:  position{line: 1346, col: 27, offset: 43442},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3609, col: 8, offset: 123391},
												run: (*parser).callongoParenExpr9,
												expr: &choiceExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															expr: &anyMatcher{
																line: 3609, col: 10, offset: 123393,
															},
														},
														&notExpr{
															pos: position{line: 3609, col: 14, offset: 123397},
															expr: &anyMatcher{
																line: 3609, col: 15, offset: 123398,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1346, col: 48, offset: 43463},
												val:        ")",
												ignoreCase: false,
												want:       "\")\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1346, col: 54, offset: 43469},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1346, col: 54, offset: 43469},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1346, col: 58, offset: 43473},
												expr: &ruleRefExpr{
													pos:  position{line: 1346, col: 58, offset: 43473},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3609, col: 8, offset: 123391},
												run: (*parser).callongoParenExpr20,
												expr: &choiceExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															expr: &anyMatcher{
																line: 3609, col: 10, offset: 123393,
															},
														},
														&notExpr{
															pos: position{line: 3609, col: 14, offset: 123397},
															expr: &anyMatcher{
																line: 3609, col: 15, offset: 123398,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1346, col: 79, offset: 43494},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1346, col: 85, offset: 43500},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1346, col: 85, offset: 43500},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1346, col: 89, offset: 43504},
												expr: &ruleRefExpr{
													pos:  position{line: 1346, col: 89, offset: 43504},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3609, col: 8, offset: 123391},
												run: (*parser).callongoParenExpr31,
												expr: &choiceExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															expr: &anyMatcher{
																line: 3609, col: 10, offset: 123393,
															},
														},
														&notExpr{
															pos: position{line: 3609, col: 14, offset: 123397},
															expr: &anyMatcher{
																line: 3609, col: 15, offset: 123398,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1346, col: 110, offset: 43525},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1369, col: 5, offset: 44208},
						run: (*parser).callongoParenExpr38,
						expr: &seqExpr{
							pos: position{line: 1369, col: 5, offset: 44208},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1369, col: 5, offset: 44208},
									label: "parenI",
									expr: &charClassMatcher{
										pos:        position{line: 1369, col: 12, offset: 44215},
										val:        "[([{]",
										chars:      []rune{'(', '[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1369, col: 18, offset: 44221},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callongoParenExpr43,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1369, col: 32, offset: 44235},
									label: "exprI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1369, col: 38, offset: 44241},
										expr: &ruleRefExpr{
											pos:  position{line: 1369, col: 38, offset: 44241},
											name: "goSubExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goSubExpression",
			pos:  position{line: 1405, col: 1, offset: 45305},
			expr: &actionExpr{
				pos: position{line: 1405, col: 20, offset: 45324},
				run: (*parser).callongoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1405, col: 20, offset: 45324},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1405, col: 27, offset: 45331},
						expr: &choiceExpr{
							pos: position{line: 1406, col: 5, offset: 45337},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1406, col: 5, offset: 45337},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1406, col: 19, offset: 45351},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1406, col: 38, offset: 45370},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1401, col: 15, offset: 45187},
									run: (*parser).callongoSubExpression8,
									expr: &seqExpr{
										pos: position{line: 1401, col: 15, offset: 45187},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1401, col: 15, offset: 45187},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callongoSubExpression11,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2307, col: 14, offset: 78590},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2307, col: 14, offset: 78590},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2307, col: 20, offset: 78596},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2355, col: 19, offset: 80741},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2355, col: 19, offset: 80741},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2356, col: 5, offset: 80800},
																		run: (*parser).callongoSubExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2356, col: 5, offset: 80800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2356, col: 5, offset: 80800},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 14, offset: 80809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 26, offset: 80821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 38, offset: 80833},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 50, offset: 80845},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2385, col: 16, offset: 81981},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2385, col: 16, offset: 81981},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2386, col: 5, offset: 82084},
																		run: (*parser).callongoSubExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2386, col: 5, offset: 82084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2386, col: 5, offset: 82084},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 14, offset: 82093},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 26, offset: 82105},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 38, offset: 82117},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 50, offset: 82129},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 62, offset: 82141},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 74, offset: 82153},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 86, offset: 82165},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 98, offset: 82177},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2420, col: 24, offset: 83562},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2420, col: 24, offset: 83562},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2420, col: 29, offset: 83567},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2334, col: 75, offset: 79853},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2336, col: 24, offset: 79999},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2336, col: 24, offset: 79999},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2337, col: 24, offset: 80066},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2337, col: 24, offset: 80066},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2338, col: 5, offset: 80103},
																		run: (*parser).callongoSubExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2338, col: 5, offset: 80103},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2338, col: 5, offset: 80103},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 14, offset: 80112},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 26, offset: 80124},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2421, col: 24, offset: 83645},
																		run: (*parser).callongoSubExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2421, col: 24, offset: 83645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2421, col: 24, offset: 83645},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2445, col: 5, offset: 84661},
																		run: (*parser).callongoSubExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2445, col: 5, offset: 84661},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2445, col: 5, offset: 84661},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2466, col: 5, offset: 85502},
																		run: (*parser).callongoSubExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2466, col: 5, offset: 85502},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2466, col: 5, offset: 85502},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2484, col: 5, offset: 86187},
																		run: (*parser).callongoSubExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2484, col: 5, offset: 86187},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2484, col: 5, offset: 86187},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2484, col: 10, offset: 86192},
																					expr: &charClassMatcher{
																						pos:        position{line: 3607, col: 12, offset: 123375},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2307, col: 76, offset: 78652},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2308, col: 5, offset: 78663},
														run: (*parser).callongoSubExpression116,
														expr: &seqExpr{
															pos: position{line: 2308, col: 5, offset: 78663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2308, col: 5, offset: 78663},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 10, offset: 78668},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2308, col: 16, offset: 78674},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 17, offset: 78675},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2355, col: 19, offset: 80741},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2355, col: 19, offset: 80741},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					run: (*parser).callongoSubExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2356, col: 5, offset: 80800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2356, col: 5, offset: 80800},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 14, offset: 80809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 26, offset: 80821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 38, offset: 80833},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 50, offset: 80845},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2385, col: 16, offset: 81981},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2385, col: 16, offset: 81981},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					run: (*parser).callongoSubExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2386, col: 5, offset: 82084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2386, col: 5, offset: 82084},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 14, offset: 82093},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 26, offset: 82105},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 38, offset: 82117},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 50, offset: 82129},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 62, offset: 82141},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 74, offset: 82153},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 86, offset: 82165},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 98, offset: 82177},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2420, col: 24, offset: 83562},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2420, col: 24, offset: 83562},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2420, col: 29, offset: 83567},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2334, col: 75, offset: 79853},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2336, col: 24, offset: 79999},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2336, col: 24, offset: 79999},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2337, col: 24, offset: 80066},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2337, col: 24, offset: 80066},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					run: (*parser).callongoSubExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2338, col: 5, offset: 80103},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2338, col: 5, offset: 80103},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 14, offset: 80112},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 26, offset: 80124},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					run: (*parser).callongoSubExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2421, col: 24, offset: 83645},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2421, col: 24, offset: 83645},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					run: (*parser).callongoSubExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2445, col: 5, offset: 84661},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2445, col: 5, offset: 84661},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					run: (*parser).callongoSubExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2466, col: 5, offset: 85502},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2466, col: 5, offset: 85502},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					run: (*parser).callongoSubExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2484, col: 5, offset: 86187},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2484, col: 5, offset: 86187},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2484, col: 10, offset: 86192},
																								expr: &charClassMatcher{
																									pos:        position{line: 3607, col: 12, offset: 123375},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2308, col: 74, offset: 78732},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 79, offset: 78737},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callongoSubExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1407, col: 5, offset: 45407},
									run: (*parser).callongoSubExpression224,
									expr: &seqExpr{
										pos: position{line: 1407, col: 5, offset: 45407},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1407, col: 5, offset: 45407},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callongoSubExpression227,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1407, col: 14, offset: 45416},
												val:        "[^)}]]",
												chars:      []rune{')', '}', ']'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1407, col: 22, offset: 45424},
												expr: &charClassMatcher{
													pos:        position{line: 1407, col: 22, offset: 45424},
													val:        "[^\\\"`?([{}])]",
													chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "multiLineGoExpression",
			pos:  position{line: 1414, col: 1, offset: 45592},
			expr: &actionExpr{
				pos: position{line: 1414, col: 26, offset: 45617},
				run: (*parser).callonmultiLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1414, col: 26, offset: 45617},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1414, col: 33, offset: 45624},
						expr: &choiceExpr{
							pos: position{line: 1415, col: 5, offset: 45630},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1415, col: 5, offset: 45630},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1415, col: 19, offset: 45644},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1415, col: 38, offset: 45663},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1401, col: 15, offset: 45187},
									run: (*parser).callonmultiLineGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1401, col: 15, offset: 45187},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1401, col: 15, offset: 45187},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonmultiLineGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2307, col: 14, offset: 78590},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2307, col: 14, offset: 78590},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2307, col: 20, offset: 78596},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2355, col: 19, offset: 80741},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2355, col: 19, offset: 80741},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2356, col: 5, offset: 80800},
																		run: (*parser).callonmultiLineGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2356, col: 5, offset: 80800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2356, col: 5, offset: 80800},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 14, offset: 80809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 26, offset: 80821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 38, offset: 80833},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 50, offset: 80845},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2385, col: 16, offset: 81981},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2385, col: 16, offset: 81981},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2386, col: 5, offset: 82084},
																		run: (*parser).callonmultiLineGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2386, col: 5, offset: 82084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2386, col: 5, offset: 82084},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 14, offset: 82093},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 26, offset: 82105},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 38, offset: 82117},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 50, offset: 82129},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 62, offset: 82141},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 74, offset: 82153},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 86, offset: 82165},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 98, offset: 82177},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2420, col: 24, offset: 83562},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2420, col: 24, offset: 83562},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2420, col: 29, offset: 83567},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2334, col: 75, offset: 79853},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2336, col: 24, offset: 79999},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2336, col: 24, offset: 79999},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2337, col: 24, offset: 80066},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2337, col: 24, offset: 80066},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2338, col: 5, offset: 80103},
																		run: (*parser).callonmultiLineGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2338, col: 5, offset: 80103},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2338, col: 5, offset: 80103},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 14, offset: 80112},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 26, offset: 80124},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2421, col: 24, offset: 83645},
																		run: (*parser).callonmultiLineGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2421, col: 24, offset: 83645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2421, col: 24, offset: 83645},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2445, col: 5, offset: 84661},
																		run: (*parser).callonmultiLineGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2445, col: 5, offset: 84661},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2445, col: 5, offset: 84661},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2466, col: 5, offset: 85502},
																		run: (*parser).callonmultiLineGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2466, col: 5, offset: 85502},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2466, col: 5, offset: 85502},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2484, col: 5, offset: 86187},
																		run: (*parser).callonmultiLineGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2484, col: 5, offset: 86187},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2484, col: 5, offset: 86187},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2484, col: 10, offset: 86192},
																					expr: &charClassMatcher{
																						pos:        position{line: 3607, col: 12, offset: 123375},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2307, col: 76, offset: 78652},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2308, col: 5, offset: 78663},
														run: (*parser).callonmultiLineGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2308, col: 5, offset: 78663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2308, col: 5, offset: 78663},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 10, offset: 78668},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2308, col: 16, offset: 78674},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 17, offset: 78675},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2355, col: 19, offset: 80741},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2355, col: 19, offset: 80741},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					run: (*parser).callonmultiLineGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2356, col: 5, offset: 80800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2356, col: 5, offset: 80800},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 14, offset: 80809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 26, offset: 80821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 38, offset: 80833},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 50, offset: 80845},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2385, col: 16, offset: 81981},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2385, col: 16, offset: 81981},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					run: (*parser).callonmultiLineGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2386, col: 5, offset: 82084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2386, col: 5, offset: 82084},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 14, offset: 82093},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 26, offset: 82105},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 38, offset: 82117},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 50, offset: 82129},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 62, offset: 82141},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 74, offset: 82153},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 86, offset: 82165},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 98, offset: 82177},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2420, col: 24, offset: 83562},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2420, col: 24, offset: 83562},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2420, col: 29, offset: 83567},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2334, col: 75, offset: 79853},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2336, col: 24, offset: 79999},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2336, col: 24, offset: 79999},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2337, col: 24, offset: 80066},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2337, col: 24, offset: 80066},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					run: (*parser).callonmultiLineGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2338, col: 5, offset: 80103},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2338, col: 5, offset: 80103},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 14, offset: 80112},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 26, offset: 80124},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					run: (*parser).callonmultiLineGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2421, col: 24, offset: 83645},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2421, col: 24, offset: 83645},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					run: (*parser).callonmultiLineGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2445, col: 5, offset: 84661},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2445, col: 5, offset: 84661},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					run: (*parser).callonmultiLineGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2466, col: 5, offset: 85502},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2466, col: 5, offset: 85502},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					run: (*parser).callonmultiLineGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2484, col: 5, offset: 86187},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2484, col: 5, offset: 86187},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2484, col: 10, offset: 86192},
																								expr: &charClassMatcher{
																									pos:        position{line: 3607, col: 12, offset: 123375},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2308, col: 74, offset: 78732},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 79, offset: 78737},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonmultiLineGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1416, col: 5, offset: 45700},
									run: (*parser).callonmultiLineGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1416, col: 5, offset: 45700},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1416, col: 5, offset: 45700},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonmultiLineGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1416, col: 14, offset: 45709},
												expr: &choiceExpr{
													pos: position{line: 1329, col: 25, offset: 42723},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1329, col: 25, offset: 42723},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1329, col: 40, offset: 42738},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1329, col: 40, offset: 42738},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1329, col: 44, offset: 42742},
																	expr: &litMatcher{
																		pos:        position{line: 1329, col: 45, offset: 42743},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 1416, col: 36, offset: 45731,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1416, col: 38, offset: 45733},
												expr: &seqExpr{
													pos: position{line: 1416, col: 39, offset: 45734},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1416, col: 39, offset: 45734},
															expr: &choiceExpr{
																pos: position{line: 1329, col: 25, offset: 42723},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1329, col: 25, offset: 42723},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1329, col: 40, offset: 42738},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1329, col: 40, offset: 42738},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1329, col: 44, offset: 42742},
																				expr: &litMatcher{
																					pos:        position{line: 1329, col: 45, offset: 42743},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1416, col: 61, offset: 45756},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineGoExpression",
			pos:  position{line: 1423, col: 1, offset: 45921},
			expr: &actionExpr{
				pos: position{line: 1423, col: 27, offset: 45947},
				run: (*parser).callonSingleLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1423, col: 27, offset: 45947},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1423, col: 34, offset: 45954},
						expr: &choiceExpr{
							pos: position{line: 1424, col: 5, offset: 45960},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1424, col: 5, offset: 45960},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 29, offset: 45984},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 48, offset: 46003},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1401, col: 15, offset: 45187},
									run: (*parser).callonSingleLineGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1401, col: 15, offset: 45187},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1401, col: 15, offset: 45187},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonSingleLineGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2307, col: 14, offset: 78590},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2307, col: 14, offset: 78590},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2307, col: 20, offset: 78596},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2355, col: 19, offset: 80741},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2355, col: 19, offset: 80741},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2356, col: 5, offset: 80800},
																		run: (*parser).callonSingleLineGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2356, col: 5, offset: 80800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2356, col: 5, offset: 80800},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 14, offset: 80809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 26, offset: 80821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 38, offset: 80833},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 50, offset: 80845},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2385, col: 16, offset: 81981},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2385, col: 16, offset: 81981},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2386, col: 5, offset: 82084},
																		run: (*parser).callonSingleLineGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2386, col: 5, offset: 82084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2386, col: 5, offset: 82084},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 14, offset: 82093},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 26, offset: 82105},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 38, offset: 82117},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 50, offset: 82129},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 62, offset: 82141},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 74, offset: 82153},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 86, offset: 82165},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 98, offset: 82177},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2420, col: 24, offset: 83562},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2420, col: 24, offset: 83562},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2420, col: 29, offset: 83567},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2334, col: 75, offset: 79853},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2336, col: 24, offset: 79999},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2336, col: 24, offset: 79999},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2337, col: 24, offset: 80066},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2337, col: 24, offset: 80066},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2338, col: 5, offset: 80103},
																		run: (*parser).callonSingleLineGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2338, col: 5, offset: 80103},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2338, col: 5, offset: 80103},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 14, offset: 80112},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 26, offset: 80124},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2421, col: 24, offset: 83645},
																		run: (*parser).callonSingleLineGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2421, col: 24, offset: 83645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2421, col: 24, offset: 83645},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2445, col: 5, offset: 84661},
																		run: (*parser).callonSingleLineGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2445, col: 5, offset: 84661},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2445, col: 5, offset: 84661},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2466, col: 5, offset: 85502},
																		run: (*parser).callonSingleLineGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2466, col: 5, offset: 85502},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2466, col: 5, offset: 85502},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2484, col: 5, offset: 86187},
																		run: (*parser).callonSingleLineGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2484, col: 5, offset: 86187},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2484, col: 5, offset: 86187},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2484, col: 10, offset: 86192},
																					expr: &charClassMatcher{
																						pos:        position{line: 3607, col: 12, offset: 123375},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2307, col: 76, offset: 78652},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2308, col: 5, offset: 78663},
														run: (*parser).callonSingleLineGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2308, col: 5, offset: 78663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2308, col: 5, offset: 78663},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 10, offset: 78668},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2308, col: 16, offset: 78674},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 17, offset: 78675},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2355, col: 19, offset: 80741},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2355, col: 19, offset: 80741},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					run: (*parser).callonSingleLineGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2356, col: 5, offset: 80800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2356, col: 5, offset: 80800},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 14, offset: 80809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 26, offset: 80821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 38, offset: 80833},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 50, offset: 80845},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2385, col: 16, offset: 81981},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2385, col: 16, offset: 81981},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					run: (*parser).callonSingleLineGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2386, col: 5, offset: 82084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2386, col: 5, offset: 82084},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 14, offset: 82093},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 26, offset: 82105},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 38, offset: 82117},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 50, offset: 82129},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 62, offset: 82141},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 74, offset: 82153},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 86, offset: 82165},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 98, offset: 82177},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2420, col: 24, offset: 83562},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2420, col: 24, offset: 83562},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2420, col: 29, offset: 83567},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2334, col: 75, offset: 79853},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2336, col: 24, offset: 79999},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2336, col: 24, offset: 79999},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2337, col: 24, offset: 80066},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2337, col: 24, offset: 80066},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					run: (*parser).callonSingleLineGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2338, col: 5, offset: 80103},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2338, col: 5, offset: 80103},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 14, offset: 80112},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 26, offset: 80124},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					run: (*parser).callonSingleLineGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2421, col: 24, offset: 83645},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2421, col: 24, offset: 83645},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					run: (*parser).callonSingleLineGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2445, col: 5, offset: 84661},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2445, col: 5, offset: 84661},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					run: (*parser).callonSingleLineGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2466, col: 5, offset: 85502},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2466, col: 5, offset: 85502},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					run: (*parser).callonSingleLineGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2484, col: 5, offset: 86187},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2484, col: 5, offset: 86187},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2484, col: 10, offset: 86192},
																								expr: &charClassMatcher{
																									pos:        position{line: 3607, col: 12, offset: 123375},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2308, col: 74, offset: 78732},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 79, offset: 78737},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonSingleLineGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1425, col: 5, offset: 46050},
									run: (*parser).callonSingleLineGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1425, col: 5, offset: 46050},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1425, col: 5, offset: 46050},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonSingleLineGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1425, col: 14, offset: 46059},
												expr: &choiceExpr{
													pos: position{line: 1329, col: 25, offset: 42723},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1329, col: 25, offset: 42723},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1329, col: 40, offset: 42738},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1329, col: 40, offset: 42738},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1329, col: 44, offset: 42742},
																	expr: &litMatcher{
																		pos:        position{line: 1329, col: 45, offset: 42743},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3607, col: 12, offset: 123375},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1425, col: 44, offset: 46089},
												expr: &seqExpr{
													pos: position{line: 1425, col: 45, offset: 46090},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1425, col: 45, offset: 46090},
															expr: &choiceExpr{
																pos: position{line: 1329, col: 25, offset: 42723},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1329, col: 25, offset: 42723},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1329, col: 40, offset: 42738},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1329, col: 40, offset: 42738},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1329, col: 44, offset: 42742},
																				expr: &litMatcher{
																					pos:        position{line: 1329, col: 45, offset: 42743},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1425, col: 67, offset: 46112},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1425, col: 72, offset: 46117},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineGoParenExpr",
			pos:  position{line: 1432, col: 1, offset: 46282},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 26, offset: 46307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1432, col: 26, offset: 46307},
						run: (*parser).callonsingleLineGoParenExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1432, col: 26, offset: 46307},
							label: "exprI",
							expr: &choiceExpr{
								pos: position{line: 1432, col: 33, offset: 46314},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 1432, col: 33, offset: 46314},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1432, col: 33, offset: 46314},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1432, col: 37, offset: 46318},
												expr: &ruleRefExpr{
													pos:  position{line: 1432, col: 37, offset: 46318},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3609, col: 8, offset: 123391},
												run: (*parser).callonsingleLineGoParenExpr9,
												expr: &choiceExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															expr: &anyMatcher{
																line: 3609, col: 10, offset: 123393,
															},
														},
														&notExpr{
															pos: position{line: 3609, col: 14, offset: 123397},
															expr: &anyMatcher{
																line: 3609, col: 15, offset: 123398,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1432, col: 68, offset: 46349},
												val:        ")",
												ignoreCase: false,
												want:       "\")\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1432, col: 74, offset: 46355},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1432, col: 74, offset: 46355},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1432, col: 78, offset: 46359},
												expr: &ruleRefExpr{
													pos:  position{line: 1432, col: 78, offset: 46359},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3609, col: 8, offset: 123391},
												run: (*parser).callonsingleLineGoParenExpr20,
												expr: &choiceExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															expr: &anyMatcher{
																line: 3609, col: 10, offset: 123393,
															},
														},
														&notExpr{
															pos: position{line: 3609, col: 14, offset: 123397},
															expr: &anyMatcher{
																line: 3609, col: 15, offset: 123398,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1432, col: 109, offset: 46390},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1432, col: 115, offset: 46396},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1432, col: 115, offset: 46396},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1432, col: 119, offset: 46400},
												expr: &ruleRefExpr{
													pos:  position{line: 1432, col: 119, offset: 46400},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3609, col: 8, offset: 123391},
												run: (*parser).callonsingleLineGoParenExpr31,
												expr: &choiceExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															expr: &anyMatcher{
																line: 3609, col: 10, offset: 123393,
															},
														},
														&notExpr{
															pos: position{line: 3609, col: 14, offset: 123397},
															expr: &anyMatcher{
																line: 3609, col: 15, offset: 123398,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1432, col: 150, offset: 46431},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1455, col: 5, offset: 47080},
						run: (*parser).callonsingleLineGoParenExpr38,
						expr: &seqExpr{
							pos: position{line: 1455, col: 5, offset: 47080},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1455, col: 5, offset: 47080},
									label: "parenI",
									expr: &charClassMatcher{
										pos:        position{line: 1455, col: 12, offset: 47087},
										val:        "[([{]",
										chars:      []rune{'(', '[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1455, col: 18, offset: 47093},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsingleLineGoParenExpr43,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1455, col: 32, offset: 47107},
									label: "exprI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1455, col: 38, offset: 47113},
										expr: &ruleRefExpr{
											pos:  position{line: 1455, col: 38, offset: 47113},
											name: "singleLineGoSubExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineGoSubExpression",
			pos:  position{line: 1486, col: 1, offset: 48009},
			expr: &actionExpr{
				pos: position{line: 1486, col: 30, offset: 48038},
				run: (*parser).callonsingleLineGoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1486, col: 30, offset: 48038},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1486, col: 37, offset: 48045},
						expr: &choiceExpr{
							pos: position{line: 1487, col: 5, offset: 48051},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1487, col: 5, offset: 48051},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1487, col: 29, offset: 48075},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1487, col: 48, offset: 48094},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1401, col: 15, offset: 45187},
									run: (*parser).callonsingleLineGoSubExpression8,
									expr: &seqExpr{
										pos: position{line: 1401, col: 15, offset: 45187},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1401, col: 15, offset: 45187},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonsingleLineGoSubExpression11,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2307, col: 14, offset: 78590},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2307, col: 14, offset: 78590},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2307, col: 20, offset: 78596},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2355, col: 19, offset: 80741},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2355, col: 19, offset: 80741},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2356, col: 5, offset: 80800},
																		run: (*parser).callonsingleLineGoSubExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2356, col: 5, offset: 80800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2356, col: 5, offset: 80800},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 14, offset: 80809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 26, offset: 80821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 38, offset: 80833},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 50, offset: 80845},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2385, col: 16, offset: 81981},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2385, col: 16, offset: 81981},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2386, col: 5, offset: 82084},
																		run: (*parser).callonsingleLineGoSubExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2386, col: 5, offset: 82084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2386, col: 5, offset: 82084},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 14, offset: 82093},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 26, offset: 82105},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 38, offset: 82117},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 50, offset: 82129},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 62, offset: 82141},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 74, offset: 82153},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 86, offset: 82165},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 98, offset: 82177},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2420, col: 24, offset: 83562},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2420, col: 24, offset: 83562},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2420, col: 29, offset: 83567},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2334, col: 75, offset: 79853},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2336, col: 24, offset: 79999},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2336, col: 24, offset: 79999},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2337, col: 24, offset: 80066},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2337, col: 24, offset: 80066},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2338, col: 5, offset: 80103},
																		run: (*parser).callonsingleLineGoSubExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2338, col: 5, offset: 80103},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2338, col: 5, offset: 80103},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 14, offset: 80112},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 26, offset: 80124},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2421, col: 24, offset: 83645},
																		run: (*parser).callonsingleLineGoSubExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2421, col: 24, offset: 83645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2421, col: 24, offset: 83645},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2445, col: 5, offset: 84661},
																		run: (*parser).callonsingleLineGoSubExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2445, col: 5, offset: 84661},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2445, col: 5, offset: 84661},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2466, col: 5, offset: 85502},
																		run: (*parser).callonsingleLineGoSubExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2466, col: 5, offset: 85502},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2466, col: 5, offset: 85502},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2484, col: 5, offset: 86187},
																		run: (*parser).callonsingleLineGoSubExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2484, col: 5, offset: 86187},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2484, col: 5, offset: 86187},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2484, col: 10, offset: 86192},
																					expr: &charClassMatcher{
																						pos:        position{line: 3607, col: 12, offset: 123375},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2307, col: 76, offset: 78652},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2308, col: 5, offset: 78663},
														run: (*parser).callonsingleLineGoSubExpression116,
														expr: &seqExpr{
															pos: position{line: 2308, col: 5, offset: 78663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2308, col: 5, offset: 78663},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 10, offset: 78668},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2308, col: 16, offset: 78674},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 17, offset: 78675},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2355, col: 19, offset: 80741},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2355, col: 19, offset: 80741},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					run: (*parser).callonsingleLineGoSubExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2356, col: 5, offset: 80800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2356, col: 5, offset: 80800},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 14, offset: 80809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 26, offset: 80821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 38, offset: 80833},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 50, offset: 80845},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2385, col: 16, offset: 81981},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2385, col: 16, offset: 81981},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					run: (*parser).callonsingleLineGoSubExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2386, col: 5, offset: 82084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2386, col: 5, offset: 82084},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 14, offset: 82093},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 26, offset: 82105},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 38, offset: 82117},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 50, offset: 82129},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 62, offset: 82141},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 74, offset: 82153},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 86, offset: 82165},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 98, offset: 82177},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2420, col: 24, offset: 83562},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2420, col: 24, offset: 83562},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2420, col: 29, offset: 83567},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2334, col: 75, offset: 79853},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2336, col: 24, offset: 79999},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2336, col: 24, offset: 79999},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2337, col: 24, offset: 80066},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2337, col: 24, offset: 80066},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					run: (*parser).callonsingleLineGoSubExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2338, col: 5, offset: 80103},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2338, col: 5, offset: 80103},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 14, offset: 80112},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 26, offset: 80124},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					run: (*parser).callonsingleLineGoSubExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2421, col: 24, offset: 83645},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2421, col: 24, offset: 83645},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					run: (*parser).callonsingleLineGoSubExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2445, col: 5, offset: 84661},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2445, col: 5, offset: 84661},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					run: (*parser).callonsingleLineGoSubExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2466, col: 5, offset: 85502},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2466, col: 5, offset: 85502},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					run: (*parser).callonsingleLineGoSubExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2484, col: 5, offset: 86187},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2484, col: 5, offset: 86187},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2484, col: 10, offset: 86192},
																								expr: &charClassMatcher{
																									pos:        position{line: 3607, col: 12, offset: 123375},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2308, col: 74, offset: 78732},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 79, offset: 78737},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonsingleLineGoSubExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1488, col: 5, offset: 48141},
									run: (*parser).callonsingleLineGoSubExpression224,
									expr: &seqExpr{
										pos: position{line: 1488, col: 5, offset: 48141},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1488, col: 5, offset: 48141},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonsingleLineGoSubExpression227,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1488, col: 14, offset: 48150},
												expr: &seqExpr{
													pos: position{line: 3606, col: 12, offset: 123342},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3606, col: 12, offset: 123342},
															expr: &charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3606, col: 16, offset: 123346},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			expr: &litMatcher{
																				pos:        position{line: 3606, col: 16, offset: 123346},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3606, col: 22, offset: 123352},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3605, col: 12, offset: 123328},
																	expr: &anyMatcher{
																		line: 3605, col: 13, offset: 123329,
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1488, col: 19, offset: 48155},
												val:        "[^)}]]",
												chars:      []rune{')', '}', ']'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1488, col: 27, offset: 48163},
												expr: &seqExpr{
													pos: position{line: 1488, col: 28, offset: 48164},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1488, col: 28, offset: 48164},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1488, col: 33, offset: 48169},
															val:        "[^\\\"`?([{}])]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfExpression",
			pos:  position{line: 1501, col: 1, offset: 48571},
			expr: &choiceExpr{
				pos: position{line: 1501, col: 17, offset: 48587},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1501, col: 17, offset: 48587},
						run: (*parser).callonIfExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1501, col: 17, offset: 48587},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1501, col: 24, offset: 48594},
								name: "ChainExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1518, col: 5, offset: 49199},
						run: (*parser).callonIfExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1518, col: 5, offset: 49199},
							label: "exprsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1518, col: 12, offset: 49206},
								expr: &choiceExpr{
									pos: position{line: 1519, col: 5, offset: 49212},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1519, col: 5, offset: 49212},
											name: "goParenExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 1519, col: 19, offset: 49226},
											name: "StringExpression",
										},
										&ruleRefExpr{
											pos:  position{line: 1519, col: 38, offset: 49245},
											name: "TernaryExpression",
										},
										&actionExpr{
											pos: position{line: 1401, col: 15, offset: 45187},
											run: (*parser).callonIfExpression12,
											expr: &seqExpr{
												pos: position{line: 1401, col: 15, offset: 45187},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1401, col: 15, offset: 45187},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3609, col: 8, offset: 123391},
															run: (*parser).callonIfExpression15,
															expr: &choiceExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		expr: &anyMatcher{
																			line: 3609, col: 10, offset: 123393,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3609, col: 14, offset: 123397},
																		expr: &anyMatcher{
																			line: 3609, col: 15, offset: 123398,
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2307, col: 14, offset: 78590},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2307, col: 14, offset: 78590},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&choiceExpr{
																		pos: position{line: 2307, col: 20, offset: 78596},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2355, col: 19, offset: 80741},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2355, col: 19, offset: 80741},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2356, col: 5, offset: 80800},
																				run: (*parser).callonIfExpression31,
																				expr: &seqExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2356, col: 5, offset: 80800},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2356, col: 14, offset: 80809},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2356, col: 26, offset: 80821},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2356, col: 38, offset: 80833},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2356, col: 50, offset: 80845},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2385, col: 16, offset: 81981},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2385, col: 16, offset: 81981},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2386, col: 5, offset: 82084},
																				run: (*parser).callonIfExpression52,
																				expr: &seqExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2386, col: 5, offset: 82084},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 14, offset: 82093},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 26, offset: 82105},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 38, offset: 82117},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 50, offset: 82129},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 62, offset: 82141},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 74, offset: 82153},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 86, offset: 82165},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2386, col: 98, offset: 82177},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2420, col: 24, offset: 83562},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2420, col: 24, offset: 83562},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2420, col: 29, offset: 83567},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2334, col: 75, offset: 79853},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2336, col: 24, offset: 79999},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2336, col: 24, offset: 79999},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2253, col: 19, offset: 77188},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2253, col: 19, offset: 77188},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2253, col: 19, offset: 77188},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2337, col: 24, offset: 80066},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2337, col: 24, offset: 80066},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2338, col: 5, offset: 80103},
																				run: (*parser).callonIfExpression84,
																				expr: &seqExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2338, col: 5, offset: 80103},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2338, col: 14, offset: 80112},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2338, col: 26, offset: 80124},
																							expr: &charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2421, col: 24, offset: 83645},
																				run: (*parser).callonIfExpression91,
																				expr: &seqExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2421, col: 24, offset: 83645},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2445, col: 5, offset: 84661},
																				run: (*parser).callonIfExpression102,
																				expr: &seqExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2445, col: 5, offset: 84661},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2466, col: 5, offset: 85502},
																				run: (*parser).callonIfExpression109,
																				expr: &seqExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2466, col: 5, offset: 85502},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2484, col: 5, offset: 86187},
																				run: (*parser).callonIfExpression114,
																				expr: &seqExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 5, offset: 86187},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2484, col: 10, offset: 86192},
																							expr: &charClassMatcher{
																								pos:        position{line: 3607, col: 12, offset: 123375},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2307, col: 76, offset: 78652},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2308, col: 5, offset: 78663},
																run: (*parser).callonIfExpression120,
																expr: &seqExpr{
																	pos: position{line: 2308, col: 5, offset: 78663},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2308, col: 5, offset: 78663},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2308, col: 10, offset: 78668},
																			label: "valsI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2308, col: 16, offset: 78674},
																				expr: &choiceExpr{
																					pos: position{line: 2308, col: 17, offset: 78675},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2355, col: 19, offset: 80741},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2355, col: 19, offset: 80741},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2356, col: 5, offset: 80800},
																							run: (*parser).callonIfExpression132,
																							expr: &seqExpr{
																								pos: position{line: 2356, col: 5, offset: 80800},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2356, col: 5, offset: 80800},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2356, col: 14, offset: 80809},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2356, col: 26, offset: 80821},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2356, col: 38, offset: 80833},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2356, col: 50, offset: 80845},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2385, col: 16, offset: 81981},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2385, col: 16, offset: 81981},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2386, col: 5, offset: 82084},
																							run: (*parser).callonIfExpression153,
																							expr: &seqExpr{
																								pos: position{line: 2386, col: 5, offset: 82084},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2386, col: 5, offset: 82084},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 14, offset: 82093},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 26, offset: 82105},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 38, offset: 82117},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 50, offset: 82129},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 62, offset: 82141},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 74, offset: 82153},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 86, offset: 82165},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2386, col: 98, offset: 82177},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2420, col: 24, offset: 83562},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2420, col: 24, offset: 83562},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2420, col: 29, offset: 83567},
																									val:        "[abfnrtv\\\\\\]",
																									chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 2334, col: 75, offset: 79853},
																							val:        "[^\\\\\\\\n]",
																							chars:      []rune{'\'', '\\', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																						&seqExpr{
																							pos: position{line: 2336, col: 24, offset: 79999},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2336, col: 24, offset: 79999},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2253, col: 19, offset: 77188},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2253, col: 19, offset: 77188},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2253, col: 19, offset: 77188},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2337, col: 24, offset: 80066},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2337, col: 24, offset: 80066},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2338, col: 5, offset: 80103},
																							run: (*parser).callonIfExpression185,
																							expr: &seqExpr{
																								pos: position{line: 2338, col: 5, offset: 80103},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2338, col: 5, offset: 80103},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2338, col: 14, offset: 80112},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2338, col: 26, offset: 80124},
																										expr: &charClassMatcher{
																											pos:        position{line: 2254, col: 19, offset: 77212},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2421, col: 24, offset: 83645},
																							run: (*parser).callonIfExpression192,
																							expr: &seqExpr{
																								pos: position{line: 2421, col: 24, offset: 83645},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2421, col: 24, offset: 83645},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2445, col: 5, offset: 84661},
																							run: (*parser).callonIfExpression203,
																							expr: &seqExpr{
																								pos: position{line: 2445, col: 5, offset: 84661},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2445, col: 5, offset: 84661},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2466, col: 5, offset: 85502},
																							run: (*parser).callonIfExpression210,
																							expr: &seqExpr{
																								pos: position{line: 2466, col: 5, offset: 85502},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2466, col: 5, offset: 85502},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2254, col: 19, offset: 77212},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2484, col: 5, offset: 86187},
																							run: (*parser).callonIfExpression215,
																							expr: &seqExpr{
																								pos: position{line: 2484, col: 5, offset: 86187},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2484, col: 5, offset: 86187},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2484, col: 10, offset: 86192},
																										expr: &charClassMatcher{
																											pos:        position{line: 3607, col: 12, offset: 123375},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2308, col: 74, offset: 78732},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2308, col: 79, offset: 78737},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonIfExpression222,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1520, col: 5, offset: 49282},
											run: (*parser).callonIfExpression228,
											expr: &seqExpr{
												pos: position{line: 1520, col: 5, offset: 49282},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1520, col: 5, offset: 49282},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3609, col: 8, offset: 123391},
															run: (*parser).callonIfExpression231,
															expr: &choiceExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		expr: &anyMatcher{
																			line: 3609, col: 10, offset: 123393,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3609, col: 14, offset: 123397},
																		expr: &anyMatcher{
																			line: 3609, col: 15, offset: 123398,
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 1520, col: 14, offset: 49291},
														expr: &choiceExpr{
															pos: position{line: 1499, col: 27, offset: 48552},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1499, col: 27, offset: 48552},
																	val:        "[)}]]",
																	chars:      []rune{')', '}', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1499, col: 36, offset: 48561},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1499, col: 36, offset: 48561},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1499, col: 40, offset: 48565},
																			expr: &litMatcher{
																				pos:        position{line: 1499, col: 41, offset: 48566},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3607, col: 12, offset: 123375},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1520, col: 46, offset: 49323},
														expr: &seqExpr{
															pos: position{line: 1520, col: 47, offset: 49324},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1520, col: 47, offset: 49324},
																	expr: &choiceExpr{
																		pos: position{line: 1499, col: 27, offset: 48552},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 1499, col: 27, offset: 48552},
																				val:        "[)}]]",
																				chars:      []rune{')', '}', ']'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 1499, col: 36, offset: 48561},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1499, col: 36, offset: 48561},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																					&notExpr{
																						pos: position{line: 1499, col: 40, offset: 48565},
																						expr: &litMatcher{
																							pos:        position{line: 1499, col: 41, offset: 48566},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1520, col: 71, offset: 49348},
																	expr: &seqExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3606, col: 12, offset: 123342},
																				expr: &charClassMatcher{
																					pos:        position{line: 3618, col: 36, offset: 123689},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3606, col: 16, offset: 123346},
																								expr: &litMatcher{
																									pos:        position{line: 3606, col: 16, offset: 123346},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3606, col: 22, offset: 123352},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3605, col: 12, offset: 123328},
																						expr: &anyMatcher{
																							line: 3605, col: 13, offset: 123329,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1520, col: 76, offset: 49353},
																	val:        "[^\\\"`?([{]",
																	chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RangeExpression",
			pos:  position{line: 1531, col: 1, offset: 49709},
			expr: &actionExpr{
				pos: position{line: 1531, col: 20, offset: 49728},
				run: (*parser).callonRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 1531, col: 20, offset: 49728},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1531, col: 20, offset: 49728},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1531, col: 26, offset: 49734},
								expr: &actionExpr{
									pos: position{line: 1548, col: 24, offset: 50211},
									run: (*parser).callonRangeExpression5,
									expr: &seqExpr{
										pos: position{line: 1548, col: 24, offset: 50211},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1548, col: 24, offset: 50211},
												label: "var1I",
												expr: &choiceExpr{
													pos: position{line: 2212, col: 12, offset: 75917},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2212, col: 12, offset: 75917},
															run: (*parser).callonRangeExpression9,
															expr: &labeledExpr{
																pos:   position{line: 2212, col: 12, offset: 75917},
																label: "ident",
																expr: &seqExpr{
																	pos: position{line: 2260, col: 17, offset: 77263},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2260, col: 26, offset: 77272},
																			expr: &charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2214, col: 5, offset: 76011},
															run: (*parser).callonRangeExpression15,
															expr: &seqExpr{
																pos: position{line: 2214, col: 5, offset: 76011},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2214, col: 5, offset: 76011},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 2214, col: 13, offset: 76019},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2214, col: 13, offset: 76019},
																					expr: &litMatcher{
																						pos:        position{line: 2214, col: 13, offset: 76019},
																						val:        "$",
																						ignoreCase: false,
																						want:       "\"$\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2214, col: 18, offset: 76024},
																					expr: &choiceExpr{
																						pos: position{line: 2214, col: 19, offset: 76025},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2214, col: 19, offset: 76025},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 2214, col: 19, offset: 76025},
																										val:        "[\\pNd]",
																										classes:    []*unicode.RangeTable{rangeTable("Nd")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2214, col: 28, offset: 76034},
																										val:        "[_-\\pL]",
																										chars:      []rune{'_', '-'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 2214, col: 38, offset: 76044},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2214, col: 49, offset: 76055},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 3609, col: 8, offset: 123391},
																			run: (*parser).callonRangeExpression28,
																			expr: &choiceExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3609, col: 9, offset: 123392},
																						expr: &anyMatcher{
																							line: 3609, col: 10, offset: 123393,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3609, col: 14, offset: 123397},
																						expr: &anyMatcher{
																							line: 3609, col: 15, offset: 123398,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1548, col: 38, offset: 50225},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1548, col: 44, offset: 50231},
													expr: &seqExpr{
														pos: position{line: 1548, col: 45, offset: 50232},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1548, col: 45, offset: 50232},
																expr: &litMatcher{
																	pos:        position{line: 1548, col: 45, offset: 50232},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&litMatcher{
																pos:        position{line: 1548, col: 50, offset: 50237},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1548, col: 54, offset: 50241},
																expr: &litMatcher{
																	pos:        position{line: 1548, col: 54, offset: 50241},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&choiceExpr{
																pos: position{line: 2212, col: 12, offset: 75917},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2212, col: 12, offset: 75917},
																		run: (*parser).callonRangeExpression43,
																		expr: &labeledExpr{
																			pos:   position{line: 2212, col: 12, offset: 75917},
																			label: "ident",
																			expr: &seqExpr{
																				pos: position{line: 2260, col: 17, offset: 77263},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 2243, col: 20, offset: 77018},
																						val:        "[_\\pL]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 2260, col: 26, offset: 77272},
																						expr: &charClassMatcher{
																							pos:        position{line: 2243, col: 20, offset: 77018},
																							val:        "[_\\pL\\pNd]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2214, col: 5, offset: 76011},
																		run: (*parser).callonRangeExpression49,
																		expr: &seqExpr{
																			pos: position{line: 2214, col: 5, offset: 76011},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 2214, col: 5, offset: 76011},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2214, col: 13, offset: 76019},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 2214, col: 13, offset: 76019},
																								expr: &litMatcher{
																									pos:        position{line: 2214, col: 13, offset: 76019},
																									val:        "$",
																									ignoreCase: false,
																									want:       "\"$\"",
																								},
																							},
																							&oneOrMoreExpr{
																								pos: position{line: 2214, col: 18, offset: 76024},
																								expr: &choiceExpr{
																									pos: position{line: 2214, col: 19, offset: 76025},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 2214, col: 19, offset: 76025},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 2214, col: 19, offset: 76025},
																													val:        "[\\pNd]",
																													classes:    []*unicode.RangeTable{rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2214, col: 28, offset: 76034},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&charClassMatcher{
																											pos:        position{line: 2214, col: 38, offset: 76044},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2214, col: 49, offset: 76055},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3609, col: 8, offset: 123391},
																						run: (*parser).callonRangeExpression62,
																						expr: &choiceExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									expr: &anyMatcher{
																										line: 3609, col: 10, offset: 123393,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3609, col: 14, offset: 123397},
																									expr: &anyMatcher{
																										line: 3609, col: 15, offset: 123398,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1548, col: 69, offset: 50256},
												expr: &litMatcher{
													pos:        position{line: 1548, col: 69, offset: 50256},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1548, col: 74, offset: 50261},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonRangeExpression71,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1548, col: 85, offset: 50272},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1548, col: 95, offset: 50282},
													expr: &litMatcher{
														pos:        position{line: 1548, col: 95, offset: 50282},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1548, col: 100, offset: 50287},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1548, col: 104, offset: 50291},
												expr: &litMatcher{
													pos:        position{line: 1548, col: 104, offset: 50291},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 47, offset: 49755},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1531, col: 56, offset: 49764},
								expr: &seqExpr{
									pos: position{line: 1531, col: 57, offset: 49765},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1531, col: 57, offset: 49765},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1531, col: 67, offset: 49775},
											expr: &litMatcher{
												pos:        position{line: 1531, col: 67, offset: 49775},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1531, col: 74, offset: 49782},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1531, col: 82, offset: 49790},
							expr: &litMatcher{
								pos:        position{line: 1531, col: 82, offset: 49790},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 87, offset: 49795},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1531, col: 93, offset: 49801},
								name: "SingleLineExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpression",
			pos:  position{line: 1569, col: 1, offset: 50820},
			expr: &choiceExpr{
				pos: position{line: 1569, col: 21, offset: 50840},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1569, col: 21, offset: 50840},
						name: "InterpretedStringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1569, col: 51, offset: 50870},
						name: "RawStringExpression",
					},
				},
			},
		},
		{
			name: "InterpretedStringExpression",
			pos:  position{line: 1571, col: 1, offset: 50891},
			expr: &choiceExpr{
				pos: position{line: 1571, col: 32, offset: 50922},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1571, col: 32, offset: 50922},
						run: (*parser).callonInterpretedStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1571, col: 32, offset: 50922},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1571, col: 32, offset: 50922},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1571, col: 36, offset: 50926},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1571, col: 46, offset: 50936},
										expr: &ruleRefExpr{
											pos:  position{line: 1571, col: 46, offset: 50936},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1571, col: 79, offset: 50969},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1577, col: 5, offset: 51138},
						run: (*parser).callonInterpretedStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1577, col: 5, offset: 51138},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1577, col: 5, offset: 51138},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1577, col: 9, offset: 51142},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonInterpretedStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1577, col: 23, offset: 51156},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1577, col: 33, offset: 51166},
										expr: &ruleRefExpr{
											pos:  position{line: 1577, col: 33, offset: 51166},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawStringExpression",
			pos:  position{line: 1597, col: 1, offset: 51816},
			expr: &choiceExpr{
				pos: position{line: 1597, col: 24, offset: 51839},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1597, col: 24, offset: 51839},
						run: (*parser).callonRawStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1597, col: 24, offset: 51839},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1597, col: 24, offset: 51839},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1597, col: 28, offset: 51843},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1597, col: 38, offset: 51853},
										expr: &ruleRefExpr{
											pos:  position{line: 1597, col: 38, offset: 51853},
											name: "RawStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1597, col: 63, offset: 51878},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1603, col: 5, offset: 52047},
						run: (*parser).callonRawStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1603, col: 5, offset: 52047},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1603, col: 5, offset: 52047},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1603, col: 9, offset: 52051},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonRawStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1603, col: 23, offset: 52065},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1603, col: 33, offset: 52075},
										expr: &ruleRefExpr{
											pos:  position{line: 1603, col: 33, offset: 52075},
											name: "RawStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpretedStringExpressionItem",
			pos:  position{line: 1624, col: 1, offset: 52717},
			expr: &choiceExpr{
				pos: position{line: 1624, col: 36, offset: 52752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1627, col: 36, offset: 52943},
						run: (*parser).callonInterpretedStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1627, col: 36, offset: 52943},
							expr: &choiceExpr{
								pos: position{line: 1627, col: 37, offset: 52944},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1627, col: 37, offset: 52944},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1627, col: 44, offset: 52951},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1627, col: 44, offset: 52951},
												expr: &litMatcher{
													pos:        position{line: 1627, col: 45, offset: 52952},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&choiceExpr{
												pos: position{line: 2610, col: 36, offset: 90938},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2355, col: 19, offset: 80741},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2355, col: 19, offset: 80741},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2356, col: 5, offset: 80800},
														run: (*parser).callonInterpretedStringExpressionItem16,
														expr: &seqExpr{
															pos: position{line: 2356, col: 5, offset: 80800},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2356, col: 5, offset: 80800},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 14, offset: 80809},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 26, offset: 80821},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 38, offset: 80833},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 50, offset: 80845},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2385, col: 16, offset: 81981},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2385, col: 16, offset: 81981},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2386, col: 5, offset: 82084},
														run: (*parser).callonInterpretedStringExpressionItem37,
														expr: &seqExpr{
															pos: position{line: 2386, col: 5, offset: 82084},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2386, col: 5, offset: 82084},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 14, offset: 82093},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 26, offset: 82105},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 38, offset: 82117},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 50, offset: 82129},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 62, offset: 82141},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 74, offset: 82153},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 86, offset: 82165},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 98, offset: 82177},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2613, col: 36, offset: 91114},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2613, col: 36, offset: 91114},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2613, col: 41, offset: 91119},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2611, col: 38, offset: 91006},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2336, col: 24, offset: 79999},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2336, col: 24, offset: 79999},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&charClassMatcher{
												pos:        position{line: 2253, col: 19, offset: 77188},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2253, col: 19, offset: 77188},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2253, col: 19, offset: 77188},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2337, col: 24, offset: 80066},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2337, col: 24, offset: 80066},
												val:        "\\x",
												ignoreCase: false,
												want:       "\"\\\\x\"",
											},
											&charClassMatcher{
												pos:        position{line: 2254, col: 19, offset: 77212},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2254, col: 19, offset: 77212},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2338, col: 5, offset: 80103},
										run: (*parser).callonInterpretedStringExpressionItem69,
										expr: &seqExpr{
											pos: position{line: 2338, col: 5, offset: 80103},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2338, col: 5, offset: 80103},
													val:        "\\x",
													ignoreCase: false,
													want:       "\"\\\\x\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2338, col: 14, offset: 80112},
													expr: &charClassMatcher{
														pos:        position{line: 2254, col: 19, offset: 77212},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2338, col: 26, offset: 80124},
													expr: &charClassMatcher{
														pos:        position{line: 2254, col: 19, offset: 77212},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2500, col: 37, offset: 86764},
										run: (*parser).callonInterpretedStringExpressionItem76,
										expr: &seqExpr{
											pos: position{line: 2500, col: 37, offset: 86764},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2500, col: 37, offset: 86764},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2524, col: 5, offset: 87781},
										run: (*parser).callonInterpretedStringExpressionItem87,
										expr: &seqExpr{
											pos: position{line: 2524, col: 5, offset: 87781},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2524, col: 5, offset: 87781},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2545, col: 5, offset: 88623},
										run: (*parser).callonInterpretedStringExpressionItem94,
										expr: &seqExpr{
											pos: position{line: 2545, col: 5, offset: 88623},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2545, col: 5, offset: 88623},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2254, col: 19, offset: 77212},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2563, col: 5, offset: 89309},
										run: (*parser).callonInterpretedStringExpressionItem99,
										expr: &seqExpr{
											pos: position{line: 2563, col: 5, offset: 89309},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2563, col: 5, offset: 89309},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2563, col: 10, offset: 89314},
													expr: &charClassMatcher{
														pos:        position{line: 3607, col: 12, offset: 123375},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1624, col: 70, offset: 52786},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "RawStringExpressionItem",
			pos:  position{line: 1625, col: 1, offset: 52816},
			expr: &choiceExpr{
				pos: position{line: 1625, col: 36, offset: 52851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1633, col: 28, offset: 53175},
						run: (*parser).callonRawStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1633, col: 28, offset: 53175},
							expr: &choiceExpr{
								pos: position{line: 1633, col: 29, offset: 53176},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1633, col: 29, offset: 53176},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1633, col: 36, offset: 53183},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1633, col: 36, offset: 53183},
												expr: &litMatcher{
													pos:        position{line: 1633, col: 37, offset: 53184},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 2597, col: 27, offset: 90336},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1625, col: 62, offset: 52877},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "StringExpressionInterpolation",
			pos:  position{line: 1640, col: 1, offset: 53323},
			expr: &choiceExpr{
				pos: position{line: 1640, col: 34, offset: 53356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1640, col: 34, offset: 53356},
						run: (*parser).callonStringExpressionInterpolation2,
						expr: &seqExpr{
							pos: position{line: 1640, col: 34, offset: 53356},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1640, col: 34, offset: 53356},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 38, offset: 53360},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1640, col: 52, offset: 53374},
										expr: &choiceExpr{
											pos: position{line: 1705, col: 17, offset: 55960},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1705, col: 17, offset: 55960},
													run: (*parser).callonStringExpressionInterpolation8,
													expr: &seqExpr{
														pos: position{line: 1705, col: 17, offset: 55960},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1705, col: 17, offset: 55960},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1705, col: 21, offset: 55964},
																expr: &charClassMatcher{
																	pos:        position{line: 1721, col: 12, offset: 56641},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1705, col: 30, offset: 55973},
																expr: &seqExpr{
																	pos: position{line: 1705, col: 31, offset: 55974},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1705, col: 31, offset: 55974},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1705, col: 36, offset: 55979},
																			expr: &charClassMatcher{
																				pos:        position{line: 1705, col: 36, offset: 55979},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1705, col: 45, offset: 55988},
																expr: &seqExpr{
																	pos: position{line: 1705, col: 46, offset: 55989},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1705, col: 46, offset: 55989},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1705, col: 50, offset: 55993},
																			expr: &charClassMatcher{
																				pos:        position{line: 1705, col: 50, offset: 55993},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1722, col: 12, offset: 56660},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1722, col: 12, offset: 56660},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1722, col: 74, offset: 56722},
																		run: (*parser).callonStringExpressionInterpolation25,
																		expr: &andExpr{
																			pos: position{line: 1722, col: 74, offset: 56722},
																			expr: &charClassMatcher{
																				pos:        position{line: 1722, col: 76, offset: 56724},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1734, col: 5, offset: 57261},
																		run: (*parser).callonStringExpressionInterpolation28,
																		expr: &anyMatcher{
																			line: 1734, col: 5, offset: 57261,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1707, col: 5, offset: 56051},
													run: (*parser).callonStringExpressionInterpolation30,
													expr: &seqExpr{
														pos: position{line: 1707, col: 5, offset: 56051},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1707, col: 5, offset: 56051},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1707, col: 9, offset: 56055},
																expr: &charClassMatcher{
																	pos:        position{line: 1707, col: 9, offset: 56055},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1707, col: 17, offset: 56063},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonStringExpressionInterpolation36,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 66, offset: 53388},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3631, col: 12, offset: 124104},
										run: (*parser).callonStringExpressionInterpolation43,
										expr: &litMatcher{
											pos:        position{line: 3631, col: 12, offset: 124104},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 85, offset: 53407},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1640, col: 91, offset: 53413},
										name: "SingleLineExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 112, offset: 53434},
									label: "rBracePosI",
									expr: &actionExpr{
										pos: position{line: 3632, col: 12, offset: 124142},
										run: (*parser).callonStringExpressionInterpolation48,
										expr: &litMatcher{
											pos:        position{line: 3632, col: 12, offset: 124142},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1648, col: 5, offset: 53744},
						run: (*parser).callonStringExpressionInterpolation50,
						expr: &seqExpr{
							pos: position{line: 1648, col: 5, offset: 53744},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1648, col: 5, offset: 53744},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1648, col: 9, offset: 53748},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1648, col: 23, offset: 53762},
										expr: &choiceExpr{
											pos: position{line: 1705, col: 17, offset: 55960},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1705, col: 17, offset: 55960},
													run: (*parser).callonStringExpressionInterpolation56,
													expr: &seqExpr{
														pos: position{line: 1705, col: 17, offset: 55960},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1705, col: 17, offset: 55960},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1705, col: 21, offset: 55964},
																expr: &charClassMatcher{
																	pos:        position{line: 1721, col: 12, offset: 56641},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1705, col: 30, offset: 55973},
																expr: &seqExpr{
																	pos: position{line: 1705, col: 31, offset: 55974},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1705, col: 31, offset: 55974},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1705, col: 36, offset: 55979},
																			expr: &charClassMatcher{
																				pos:        position{line: 1705, col: 36, offset: 55979},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1705, col: 45, offset: 55988},
																expr: &seqExpr{
																	pos: position{line: 1705, col: 46, offset: 55989},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1705, col: 46, offset: 55989},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1705, col: 50, offset: 55993},
																			expr: &charClassMatcher{
																				pos:        position{line: 1705, col: 50, offset: 55993},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1722, col: 12, offset: 56660},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1722, col: 12, offset: 56660},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1722, col: 74, offset: 56722},
																		run: (*parser).callonStringExpressionInterpolation73,
																		expr: &andExpr{
																			pos: position{line: 1722, col: 74, offset: 56722},
																			expr: &charClassMatcher{
																				pos:        position{line: 1722, col: 76, offset: 56724},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1734, col: 5, offset: 57261},
																		run: (*parser).callonStringExpressionInterpolation76,
																		expr: &anyMatcher{
																			line: 1734, col: 5, offset: 57261,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1707, col: 5, offset: 56051},
													run: (*parser).callonStringExpressionInterpolation78,
													expr: &seqExpr{
														pos: position{line: 1707, col: 5, offset: 56051},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1707, col: 5, offset: 56051},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1707, col: 9, offset: 56055},
																expr: &charClassMatcher{
																	pos:        position{line: 1707, col: 9, offset: 56055},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1707, col: 17, offset: 56063},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonStringExpressionInterpolation84,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1648, col: 37, offset: 53776},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonStringExpressionInterpolation91,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1675, col: 5, offset: 54779},
						run: (*parser).callonStringExpressionInterpolation97,
						expr: &seqExpr{
							pos: position{line: 1675, col: 5, offset: 54779},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1675, col: 5, offset: 54779},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1675, col: 9, offset: 54783},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1675, col: 23, offset: 54797},
										expr: &choiceExpr{
											pos: position{line: 1705, col: 17, offset: 55960},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1705, col: 17, offset: 55960},
													run: (*parser).callonStringExpressionInterpolation103,
													expr: &seqExpr{
														pos: position{line: 1705, col: 17, offset: 55960},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1705, col: 17, offset: 55960},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1705, col: 21, offset: 55964},
																expr: &charClassMatcher{
																	pos:        position{line: 1721, col: 12, offset: 56641},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1705, col: 30, offset: 55973},
																expr: &seqExpr{
																	pos: position{line: 1705, col: 31, offset: 55974},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1705, col: 31, offset: 55974},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1705, col: 36, offset: 55979},
																			expr: &charClassMatcher{
																				pos:        position{line: 1705, col: 36, offset: 55979},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1705, col: 45, offset: 55988},
																expr: &seqExpr{
																	pos: position{line: 1705, col: 46, offset: 55989},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1705, col: 46, offset: 55989},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1705, col: 50, offset: 55993},
																			expr: &charClassMatcher{
																				pos:        position{line: 1705, col: 50, offset: 55993},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1722, col: 12, offset: 56660},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1722, col: 12, offset: 56660},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1722, col: 74, offset: 56722},
																		run: (*parser).callonStringExpressionInterpolation120,
																		expr: &andExpr{
																			pos: position{line: 1722, col: 74, offset: 56722},
																			expr: &charClassMatcher{
																				pos:        position{line: 1722, col: 76, offset: 56724},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1734, col: 5, offset: 57261},
																		run: (*parser).callonStringExpressionInterpolation123,
																		expr: &anyMatcher{
																			line: 1734, col: 5, offset: 57261,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1707, col: 5, offset: 56051},
													run: (*parser).callonStringExpressionInterpolation125,
													expr: &seqExpr{
														pos: position{line: 1707, col: 5, offset: 56051},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1707, col: 5, offset: 56051},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1707, col: 9, offset: 56055},
																expr: &charClassMatcher{
																	pos:        position{line: 1707, col: 9, offset: 56055},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1707, col: 17, offset: 56063},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonStringExpressionInterpolation131,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1675, col: 37, offset: 54811},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonStringExpressionInterpolation138,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1675, col: 51, offset: 54825},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3631, col: 12, offset: 124104},
										run: (*parser).callonStringExpressionInterpolation145,
										expr: &litMatcher{
											pos:        position{line: 3631, col: 12, offset: 124104},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1675, col: 70, offset: 54844},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonStringExpressionInterpolation148,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1675, col: 84, offset: 54858},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1675, col: 90, offset: 54864},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TernaryExpression",
			pos:  position{line: 1758, col: 1, offset: 58076},
			expr: &choiceExpr{
				pos: position{line: 1758, col: 22, offset: 58097},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1758, col: 22, offset: 58097},
						run: (*parser).callonTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1758, col: 22, offset: 58097},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1758, col: 22, offset: 58097},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1758, col: 27, offset: 58102},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 31, offset: 58106},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1758, col: 42, offset: 58117},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1758, col: 64, offset: 58139},
									expr: &litMatcher{
										pos:        position{line: 1758, col: 64, offset: 58139},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1758, col: 69, offset: 58144},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1758, col: 73, offset: 58148},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 77, offset: 58152},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1758, col: 85, offset: 58160},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1758, col: 107, offset: 58182},
									expr: &litMatcher{
										pos:        position{line: 1758, col: 107, offset: 58182},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1758, col: 112, offset: 58187},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1758, col: 116, offset: 58191},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 120, offset: 58195},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1758, col: 129, offset: 58204},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1758, col: 151, offset: 58226},
									expr: &litMatcher{
										pos:        position{line: 1758, col: 151, offset: 58226},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1758, col: 156, offset: 58231},
									expr: &seqExpr{
										pos: position{line: 1758, col: 157, offset: 58232},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1758, col: 157, offset: 58232},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1758, col: 161, offset: 58236},
												expr: &choiceExpr{
													pos: position{line: 3622, col: 20, offset: 123807},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 167, offset: 58242},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonTernaryExpression51,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1766, col: 5, offset: 58523},
						run: (*parser).callonTernaryExpression53,
						expr: &seqExpr{
							pos: position{line: 1766, col: 5, offset: 58523},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1766, col: 5, offset: 58523},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1766, col: 10, offset: 58528},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonTernaryExpression57,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1766, col: 24, offset: 58542},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1766, col: 28, offset: 58546},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonTernaryExpression71,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1780, col: 5, offset: 59137},
						run: (*parser).callonTernaryExpression73,
						expr: &seqExpr{
							pos: position{line: 1780, col: 5, offset: 59137},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1780, col: 5, offset: 59137},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1780, col: 10, offset: 59142},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1780, col: 14, offset: 59146},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1780, col: 25, offset: 59157},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1780, col: 47, offset: 59179},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1752, col: 13, offset: 57987},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1752, col: 13, offset: 57987},
												run: (*parser).callonTernaryExpression87,
												expr: &seqExpr{
													pos: position{line: 1752, col: 13, offset: 57987},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 13, offset: 57987},
															expr: &litMatcher{
																pos:        position{line: 1752, col: 13, offset: 57987},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1752, col: 18, offset: 57992},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1752, col: 22, offset: 57996},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonTernaryExpression93,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 31, offset: 58005},
															expr: &choiceExpr{
																pos: position{line: 3622, col: 20, offset: 123807},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3619, col: 36, offset: 123730},
																				expr: &litMatcher{
																					pos:        position{line: 3619, col: 36, offset: 123730},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3619, col: 42, offset: 123736},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1754, col: 5, offset: 58036},
												run: (*parser).callonTernaryExpression106,
												expr: &seqExpr{
													pos: position{line: 1754, col: 5, offset: 58036},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1754, col: 5, offset: 58036},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonTernaryExpression109,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1754, col: 14, offset: 58045},
															expr: &litMatcher{
																pos:        position{line: 1754, col: 14, offset: 58045},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1780, col: 66, offset: 59198},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonTernaryExpression118,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1795, col: 5, offset: 59824},
						run: (*parser).callonTernaryExpression120,
						expr: &seqExpr{
							pos: position{line: 1795, col: 5, offset: 59824},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1795, col: 5, offset: 59824},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1795, col: 10, offset: 59829},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1795, col: 14, offset: 59833},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1795, col: 25, offset: 59844},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1795, col: 47, offset: 59866},
									expr: &litMatcher{
										pos:        position{line: 1795, col: 47, offset: 59866},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1795, col: 52, offset: 59871},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1795, col: 56, offset: 59875},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1795, col: 60, offset: 59879},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1795, col: 68, offset: 59887},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1795, col: 90, offset: 59909},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1752, col: 13, offset: 57987},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1752, col: 13, offset: 57987},
												run: (*parser).callonTernaryExpression146,
												expr: &seqExpr{
													pos: position{line: 1752, col: 13, offset: 57987},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 13, offset: 57987},
															expr: &litMatcher{
																pos:        position{line: 1752, col: 13, offset: 57987},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1752, col: 18, offset: 57992},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1752, col: 22, offset: 57996},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonTernaryExpression152,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 31, offset: 58005},
															expr: &choiceExpr{
																pos: position{line: 3622, col: 20, offset: 123807},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3619, col: 36, offset: 123730},
																				expr: &litMatcher{
																					pos:        position{line: 3619, col: 36, offset: 123730},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3619, col: 42, offset: 123736},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1754, col: 5, offset: 58036},
												run: (*parser).callonTernaryExpression165,
												expr: &seqExpr{
													pos: position{line: 1754, col: 5, offset: 58036},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1754, col: 5, offset: 58036},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonTernaryExpression168,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1754, col: 14, offset: 58045},
															expr: &litMatcher{
																pos:        position{line: 1754, col: 14, offset: 58045},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1795, col: 109, offset: 59928},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonTernaryExpression177,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineTernaryExpression",
			pos:  position{line: 1813, col: 1, offset: 60575},
			expr: &choiceExpr{
				pos: position{line: 1813, col: 32, offset: 60606},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1813, col: 32, offset: 60606},
						run: (*parser).callonSingleLineTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1813, col: 32, offset: 60606},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1813, col: 32, offset: 60606},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1813, col: 37, offset: 60611},
									expr: &litMatcher{
										pos:        position{line: 1813, col: 37, offset: 60611},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1813, col: 42, offset: 60616},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1813, col: 53, offset: 60627},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1813, col: 76, offset: 60650},
									expr: &litMatcher{
										pos:        position{line: 1813, col: 76, offset: 60650},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1813, col: 81, offset: 60655},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1813, col: 85, offset: 60659},
									expr: &litMatcher{
										pos:        position{line: 1813, col: 85, offset: 60659},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1813, col: 90, offset: 60664},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1813, col: 98, offset: 60672},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1813, col: 121, offset: 60695},
									expr: &litMatcher{
										pos:        position{line: 1813, col: 121, offset: 60695},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1813, col: 126, offset: 60700},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1813, col: 130, offset: 60704},
									expr: &litMatcher{
										pos:        position{line: 1813, col: 130, offset: 60704},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1813, col: 135, offset: 60709},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1813, col: 144, offset: 60718},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1813, col: 167, offset: 60741},
									expr: &litMatcher{
										pos:        position{line: 1813, col: 167, offset: 60741},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1813, col: 172, offset: 60746},
									expr: &seqExpr{
										pos: position{line: 1813, col: 173, offset: 60747},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1813, col: 173, offset: 60747},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1813, col: 177, offset: 60751},
												expr: &litMatcher{
													pos:        position{line: 1813, col: 177, offset: 60751},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1813, col: 184, offset: 60758},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonSingleLineTernaryExpression31,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1821, col: 5, offset: 61039},
						run: (*parser).callonSingleLineTernaryExpression33,
						expr: &seqExpr{
							pos: position{line: 1821, col: 5, offset: 61039},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1821, col: 5, offset: 61039},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1821, col: 10, offset: 61044},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonSingleLineTernaryExpression37,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1821, col: 24, offset: 61058},
									expr: &litMatcher{
										pos:        position{line: 1821, col: 24, offset: 61058},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1821, col: 29, offset: 61063},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonSingleLineTernaryExpression46,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1835, col: 5, offset: 61654},
						run: (*parser).callonSingleLineTernaryExpression48,
						expr: &seqExpr{
							pos: position{line: 1835, col: 5, offset: 61654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1835, col: 5, offset: 61654},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1835, col: 10, offset: 61659},
									expr: &litMatcher{
										pos:        position{line: 1835, col: 10, offset: 61659},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1835, col: 15, offset: 61664},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1835, col: 26, offset: 61675},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1835, col: 49, offset: 61698},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1752, col: 13, offset: 57987},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1752, col: 13, offset: 57987},
												run: (*parser).callonSingleLineTernaryExpression57,
												expr: &seqExpr{
													pos: position{line: 1752, col: 13, offset: 57987},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 13, offset: 57987},
															expr: &litMatcher{
																pos:        position{line: 1752, col: 13, offset: 57987},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1752, col: 18, offset: 57992},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1752, col: 22, offset: 57996},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonSingleLineTernaryExpression63,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 31, offset: 58005},
															expr: &choiceExpr{
																pos: position{line: 3622, col: 20, offset: 123807},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3619, col: 36, offset: 123730},
																				expr: &litMatcher{
																					pos:        position{line: 3619, col: 36, offset: 123730},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3619, col: 42, offset: 123736},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1754, col: 5, offset: 58036},
												run: (*parser).callonSingleLineTernaryExpression76,
												expr: &seqExpr{
													pos: position{line: 1754, col: 5, offset: 58036},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1754, col: 5, offset: 58036},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonSingleLineTernaryExpression79,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1754, col: 14, offset: 58045},
															expr: &litMatcher{
																pos:        position{line: 1754, col: 14, offset: 58045},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1835, col: 68, offset: 61717},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonSingleLineTernaryExpression88,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1850, col: 5, offset: 62343},
						run: (*parser).callonSingleLineTernaryExpression90,
						expr: &seqExpr{
							pos: position{line: 1850, col: 5, offset: 62343},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1850, col: 5, offset: 62343},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1850, col: 10, offset: 62348},
									expr: &litMatcher{
										pos:        position{line: 1850, col: 10, offset: 62348},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1850, col: 15, offset: 62353},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1850, col: 26, offset: 62364},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1850, col: 49, offset: 62387},
									expr: &litMatcher{
										pos:        position{line: 1850, col: 49, offset: 62387},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1850, col: 54, offset: 62392},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1850, col: 58, offset: 62396},
									expr: &litMatcher{
										pos:        position{line: 1850, col: 58, offset: 62396},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1850, col: 63, offset: 62401},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1850, col: 71, offset: 62409},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1850, col: 94, offset: 62432},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1752, col: 13, offset: 57987},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1752, col: 13, offset: 57987},
												run: (*parser).callonSingleLineTernaryExpression106,
												expr: &seqExpr{
													pos: position{line: 1752, col: 13, offset: 57987},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 13, offset: 57987},
															expr: &litMatcher{
																pos:        position{line: 1752, col: 13, offset: 57987},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1752, col: 18, offset: 57992},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1752, col: 22, offset: 57996},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonSingleLineTernaryExpression112,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1752, col: 31, offset: 58005},
															expr: &choiceExpr{
																pos: position{line: 3622, col: 20, offset: 123807},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3619, col: 36, offset: 123730},
																				expr: &litMatcher{
																					pos:        position{line: 3619, col: 36, offset: 123730},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3619, col: 42, offset: 123736},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1754, col: 5, offset: 58036},
												run: (*parser).callonSingleLineTernaryExpression125,
												expr: &seqExpr{
													pos: position{line: 1754, col: 5, offset: 58036},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1754, col: 5, offset: 58036},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonSingleLineTernaryExpression128,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1754, col: 14, offset: 58045},
															expr: &litMatcher{
																pos:        position{line: 1754, col: 14, offset: 58045},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1850, col: 113, offset: 62451},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonSingleLineTernaryExpression137,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpression",
			pos:  position{line: 1872, col: 1, offset: 63289},
			expr: &choiceExpr{
				pos: position{line: 1872, col: 20, offset: 63308},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1872, col: 20, offset: 63308},
						run: (*parser).callonChainExpression2,
						expr: &seqExpr{
							pos: position{line: 1872, col: 20, offset: 63308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1872, col: 20, offset: 63308},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1872, col: 28, offset: 63316},
										expr: &litMatcher{
											pos:        position{line: 1872, col: 28, offset: 63316},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1872, col: 33, offset: 63321},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 1872, col: 39, offset: 63327},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 1872, col: 59, offset: 63347},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1872, col: 70, offset: 63358},
										expr: &litMatcher{
											pos:        position{line: 1872, col: 70, offset: 63358},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1872, col: 75, offset: 63363},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1872, col: 82, offset: 63370},
										expr: &ruleRefExpr{
											pos:  position{line: 1872, col: 82, offset: 63370},
											name: "ChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1873, col: 20, offset: 63410},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1873, col: 29, offset: 63419},
										expr: &seqExpr{
											pos: position{line: 1873, col: 30, offset: 63420},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1873, col: 30, offset: 63420},
													expr: &litMatcher{
														pos:        position{line: 1873, col: 30, offset: 63420},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1873, col: 35, offset: 63425},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonChainExpression21,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1873, col: 51, offset: 63441},
													val:        "~",
													ignoreCase: false,
													want:       "\"~\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1873, col: 55, offset: 63445},
													expr: &choiceExpr{
														pos: position{line: 3622, col: 20, offset: 123807},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		expr: &litMatcher{
																			pos:        position{line: 3619, col: 36, offset: 123730},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3619, col: 42, offset: 123736},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1873, col: 59, offset: 63449},
													name: "GoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1873, col: 74, offset: 63464},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonChainExpression37,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1873, col: 86, offset: 63476},
									expr: &choiceExpr{
										pos: position{line: 1873, col: 88, offset: 63478},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3606, col: 12, offset: 123342},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		expr: &litMatcher{
																			pos:        position{line: 3606, col: 16, offset: 123346},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3606, col: 22, offset: 123352},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3605, col: 12, offset: 123328},
																expr: &anyMatcher{
																	line: 3605, col: 13, offset: 123329,
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 1873, col: 94, offset: 63484},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 1873, col: 94, offset: 63484},
														expr: &litMatcher{
															pos:        position{line: 1873, col: 94, offset: 63484},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
													},
													&choiceExpr{
														pos: position{line: 1329, col: 25, offset: 42723},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1329, col: 25, offset: 42723},
																val:        "[)}],]",
																chars:      []rune{')', '}', ']', ','},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 1329, col: 40, offset: 42738},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1329, col: 40, offset: 42738},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																	&notExpr{
																		pos: position{line: 1329, col: 44, offset: 42742},
																		expr: &litMatcher{
																			pos:        position{line: 1329, col: 45, offset: 42743},
																			val:        "=",
																			ignoreCase: false,
																			want:       "\"=\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1873, col: 121, offset: 63511},
									run: (*parser).callonChainExpression64,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1891, col: 5, offset: 64144},
						run: (*parser).callonChainExpression65,
						expr: &seqExpr{
							pos: position{line: 1891, col: 5, offset: 64144},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1891, col: 5, offset: 64144},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonChainExpression68,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 19, offset: 64158},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1891, col: 27, offset: 64166},
										expr: &litMatcher{
											pos:        position{line: 1891, col: 27, offset: 64166},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 32, offset: 64171},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 1891, col: 38, offset: 64177},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 58, offset: 64197},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1891, col: 69, offset: 64208},
										expr: &litMatcher{
											pos:        position{line: 1891, col: 69, offset: 64208},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 74, offset: 64213},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1891, col: 81, offset: 64220},
										expr: &ruleRefExpr{
											pos:  position{line: 1891, col: 81, offset: 64220},
											name: "ChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 102, offset: 64241},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonChainExpression86,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1891, col: 114, offset: 64253},
									run: (*parser).callonChainExpression92,
								},
								&labeledExpr{
									pos:   position{line: 1893, col: 3, offset: 64360},
									label: "malStartPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonChainExpression94,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1893, col: 20, offset: 64377},
									name: "GoExpression",
								},
								&labeledExpr{
									pos:   position{line: 1893, col: 33, offset: 64390},
									label: "malEndPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonChainExpression102,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRoot",
			pos:  position{line: 1934, col: 1, offset: 65841},
			expr: &choiceExpr{
				pos: position{line: 1934, col: 24, offset: 65864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1934, col: 24, offset: 65864},
						run: (*parser).callonchainExpressionRoot2,
						expr: &seqExpr{
							pos: position{line: 1934, col: 24, offset: 65864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1934, col: 24, offset: 65864},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 1934, col: 28, offset: 65868},
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 28, offset: 65868},
										name: "chainExpressionRootParenContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1934, col: 61, offset: 65901},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1939, col: 5, offset: 66014},
						run: (*parser).callonchainExpressionRoot8,
						expr: &labeledExpr{
							pos:   position{line: 1939, col: 5, offset: 66014},
							label: "identI",
							expr: &choiceExpr{
								pos: position{line: 2212, col: 12, offset: 75917},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2212, col: 12, offset: 75917},
										run: (*parser).callonchainExpressionRoot11,
										expr: &labeledExpr{
											pos:   position{line: 2212, col: 12, offset: 75917},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2260, col: 17, offset: 77263},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2243, col: 20, offset: 77018},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2260, col: 26, offset: 77272},
														expr: &charClassMatcher{
															pos:        position{line: 2243, col: 20, offset: 77018},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2214, col: 5, offset: 76011},
										run: (*parser).callonchainExpressionRoot17,
										expr: &seqExpr{
											pos: position{line: 2214, col: 5, offset: 76011},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2214, col: 5, offset: 76011},
													label: "identI",
													expr: &seqExpr{
														pos: position{line: 2214, col: 13, offset: 76019},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 2214, col: 13, offset: 76019},
																expr: &litMatcher{
																	pos:        position{line: 2214, col: 13, offset: 76019},
																	val:        "$",
																	ignoreCase: false,
																	want:       "\"$\"",
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 2214, col: 18, offset: 76024},
																expr: &choiceExpr{
																	pos: position{line: 2214, col: 19, offset: 76025},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 2214, col: 19, offset: 76025},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2214, col: 19, offset: 76025},
																					val:        "[\\pNd]",
																					classes:    []*unicode.RangeTable{rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2214, col: 28, offset: 76034},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 2214, col: 38, offset: 76044},
																			val:        "[_-\\pL]",
																			chars:      []rune{'_', '-'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2214, col: 49, offset: 76055},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonchainExpressionRoot30,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRootParenContent",
			pos:  position{line: 1946, col: 1, offset: 66176},
			expr: &choiceExpr{
				pos: position{line: 1946, col: 36, offset: 66211},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1946, col: 36, offset: 66211},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1946, col: 36, offset: 66211},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1946, col: 40, offset: 66215},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1946, col: 72, offset: 66247},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1947, col: 36, offset: 66288},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1947, col: 36, offset: 66288},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1947, col: 40, offset: 66292},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1947, col: 72, offset: 66324},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1948, col: 36, offset: 66365},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1948, col: 36, offset: 66365},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1948, col: 40, offset: 66369},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1948, col: 72, offset: 66401},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1949, col: 36, offset: 66442},
						expr: &charClassMatcher{
							pos:        position{line: 1949, col: 36, offset: 66442},
							val:        "[^({[]})]",
							chars:      []rune{'(', '{', '[', ']', '}', ')'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpression",
			pos:  position{line: 1951, col: 1, offset: 66455},
			expr: &choiceExpr{
				pos: position{line: 1951, col: 30, offset: 66484},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1951, col: 30, offset: 66484},
						run: (*parser).callonSingleLineChainExpression2,
						expr: &seqExpr{
							pos: position{line: 1951, col: 30, offset: 66484},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1951, col: 30, offset: 66484},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1951, col: 38, offset: 66492},
										expr: &litMatcher{
											pos:        position{line: 1951, col: 38, offset: 66492},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1951, col: 43, offset: 66497},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 1951, col: 49, offset: 66503},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 1951, col: 69, offset: 66523},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1951, col: 80, offset: 66534},
										expr: &litMatcher{
											pos:        position{line: 1951, col: 80, offset: 66534},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1951, col: 85, offset: 66539},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1951, col: 92, offset: 66546},
										expr: &ruleRefExpr{
											pos:  position{line: 1951, col: 92, offset: 66546},
											name: "SingleLineChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1952, col: 30, offset: 66606},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1952, col: 39, offset: 66615},
										expr: &seqExpr{
											pos: position{line: 1952, col: 40, offset: 66616},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1952, col: 40, offset: 66616},
													expr: &litMatcher{
														pos:        position{line: 1952, col: 40, offset: 66616},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 1952, col: 45, offset: 66621},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonSingleLineChainExpression21,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1952, col: 61, offset: 66637},
													val:        "?!",
													ignoreCase: false,
													want:       "\"?!\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1952, col: 66, offset: 66642},
													expr: &litMatcher{
														pos:        position{line: 1952, col: 66, offset: 66642},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1952, col: 71, offset: 66647},
													name: "SingleLineGoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1952, col: 96, offset: 66672},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonSingleLineChainExpression32,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1952, col: 108, offset: 66684},
									expr: &choiceExpr{
										pos: position{line: 1952, col: 110, offset: 66686},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3606, col: 12, offset: 123342},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		expr: &litMatcher{
																			pos:        position{line: 3606, col: 16, offset: 123346},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3606, col: 22, offset: 123352},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3605, col: 12, offset: 123328},
																expr: &anyMatcher{
																	line: 3605, col: 13, offset: 123329,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1329, col: 25, offset: 42723},
												val:        "[)}],]",
												chars:      []rune{')', '}', ']', ','},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 1329, col: 40, offset: 42738},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1329, col: 40, offset: 42738},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&notExpr{
														pos: position{line: 1329, col: 44, offset: 42742},
														expr: &litMatcher{
															pos:        position{line: 1329, col: 45, offset: 42743},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1952, col: 138, offset: 66714},
									run: (*parser).callonSingleLineChainExpression55,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1970, col: 5, offset: 67306},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 1970, col: 5, offset: 67306},
								label: "startPosI",
								expr: &actionExpr{
									pos: position{line: 3609, col: 8, offset: 123391},
									run: (*parser).callonSingleLineChainExpression58,
									expr: &choiceExpr{
										pos: position{line: 3609, col: 9, offset: 123392},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3609, col: 9, offset: 123392},
												expr: &anyMatcher{
													line: 3609, col: 10, offset: 123393,
												},
											},
											&notExpr{
												pos: position{line: 3609, col: 14, offset: 123397},
												expr: &anyMatcher{
													line: 3609, col: 15, offset: 123398,
												},
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 1970, col: 19, offset: 67320},
								label: "derefsI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1970, col: 27, offset: 67328},
									expr: &litMatcher{
										pos:        position{line: 1970, col: 27, offset: 67328},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 1970, col: 32, offset: 67333},
								label: "rootI",
								expr: &ruleRefExpr{
									pos:  position{line: 1970, col: 38, offset: 67339},
									name: "chainExpressionRoot",
								},
							},
							&labeledExpr{
								pos:   position{line: 1970, col: 58, offset: 67359},
								label: "checkRootI",
								expr: &zeroOrOneExpr{
									pos: position{line: 1970, col: 69, offset: 67370},
									expr: &litMatcher{
										pos:        position{line: 1970, col: 69, offset: 67370},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 1970, col: 74, offset: 67375},
								label: "chainI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 1970, col: 81, offset: 67382},
									expr: &ruleRefExpr{
										pos:  position{line: 1970, col: 81, offset: 67382},
										name: "SingleLineChainExpressionItem",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 1970, col: 112, offset: 67413},
								label: "endPosI",
								expr: &actionExpr{
									pos: position{line: 3609, col: 8, offset: 123391},
									run: (*parser).callonSingleLineChainExpression76,
									expr: &choiceExpr{
										pos: position{line: 3609, col: 9, offset: 123392},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3609, col: 9, offset: 123392},
												expr: &anyMatcher{
													line: 3609, col: 10, offset: 123393,
												},
											},
											&notExpr{
												pos: position{line: 3609, col: 14, offset: 123397},
												expr: &anyMatcher{
													line: 3609, col: 15, offset: 123398,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1970, col: 124, offset: 67425},
								run: (*parser).callonSingleLineChainExpression82,
							},
							&labeledExpr{
								pos:   position{line: 1972, col: 3, offset: 67491},
								label: "malStartPosI",
								expr: &actionExpr{
									pos: position{line: 3609, col: 8, offset: 123391},
									run: (*parser).callonSingleLineChainExpression84,
									expr: &choiceExpr{
										pos: position{line: 3609, col: 9, offset: 123392},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3609, col: 9, offset: 123392},
												expr: &anyMatcher{
													line: 3609, col: 10, offset: 123393,
												},
											},
											&notExpr{
												pos: position{line: 3609, col: 14, offset: 123397},
												expr: &anyMatcher{
													line: 3609, col: 15, offset: 123398,
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1972, col: 20, offset: 67508},
								name: "SingleLineGoExpression",
							},
							&labeledExpr{
								pos:   position{line: 1972, col: 43, offset: 67531},
								label: "malEndPosI",
								expr: &actionExpr{
									pos: position{line: 3609, col: 8, offset: 123391},
									run: (*parser).callonSingleLineChainExpression92,
									expr: &choiceExpr{
										pos: position{line: 3609, col: 9, offset: 123392},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3609, col: 9, offset: 123392},
												expr: &anyMatcher{
													line: 3609, col: 10, offset: 123393,
												},
											},
											&notExpr{
												pos: position{line: 3609, col: 14, offset: 123397},
												expr: &anyMatcher{
													line: 3609, col: 15, offset: 123398,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 1972, col: 58, offset: 67546},
								run: (*parser).callonSingleLineChainExpression98,
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineChainExpressionRootParenContent",
			pos:  position{line: 2012, col: 1, offset: 68921},
			expr: &choiceExpr{
				pos: position{line: 2012, col: 46, offset: 68966},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2012, col: 46, offset: 68966},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2012, col: 46, offset: 68966},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2012, col: 50, offset: 68970},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2012, col: 92, offset: 69012},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2013, col: 46, offset: 69063},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2013, col: 46, offset: 69063},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2013, col: 50, offset: 69067},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2013, col: 92, offset: 69109},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2014, col: 46, offset: 69160},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2014, col: 46, offset: 69160},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2014, col: 50, offset: 69164},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2014, col: 92, offset: 69206},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2015, col: 46, offset: 69257},
						expr: &charClassMatcher{
							pos:        position{line: 2015, col: 46, offset: 69257},
							val:        "[^({[]})\\r\\n]",
							chars:      []rune{'(', '{', '[', ']', '}', ')', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "ChainExpressionItem",
			pos:  position{line: 2021, col: 1, offset: 69306},
			expr: &choiceExpr{
				pos: position{line: 2021, col: 34, offset: 69339},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2021, col: 34, offset: 69339},
						name: "IndexExpression",
					},
					&actionExpr{
						pos: position{line: 2065, col: 23, offset: 71201},
						run: (*parser).callonChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2065, col: 23, offset: 71201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2065, col: 23, offset: 71201},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2065, col: 27, offset: 71205},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2065, col: 31, offset: 71209},
									label: "identI",
									expr: &choiceExpr{
										pos: position{line: 2212, col: 12, offset: 75917},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2212, col: 12, offset: 75917},
												run: (*parser).callonChainExpressionItem15,
												expr: &labeledExpr{
													pos:   position{line: 2212, col: 12, offset: 75917},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2260, col: 17, offset: 77263},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2243, col: 20, offset: 77018},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2260, col: 26, offset: 77272},
																expr: &charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2214, col: 5, offset: 76011},
												run: (*parser).callonChainExpressionItem21,
												expr: &seqExpr{
													pos: position{line: 2214, col: 5, offset: 76011},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2214, col: 5, offset: 76011},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2214, col: 13, offset: 76019},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2214, col: 13, offset: 76019},
																		expr: &litMatcher{
																			pos:        position{line: 2214, col: 13, offset: 76019},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2214, col: 18, offset: 76024},
																		expr: &choiceExpr{
																			pos: position{line: 2214, col: 19, offset: 76025},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2214, col: 19, offset: 76025},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 19, offset: 76025},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 28, offset: 76034},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2214, col: 38, offset: 76044},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2214, col: 49, offset: 76055},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonChainExpressionItem34,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2065, col: 46, offset: 71224},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2065, col: 53, offset: 71231},
										expr: &litMatcher{
											pos:        position{line: 2065, col: 53, offset: 71231},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2021, col: 73, offset: 69378},
						name: "ParenExpression",
					},
					&actionExpr{
						pos: position{line: 2121, col: 28, offset: 72917},
						run: (*parser).callonChainExpressionItem44,
						expr: &seqExpr{
							pos: position{line: 2121, col: 28, offset: 72917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2121, col: 28, offset: 72917},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2121, col: 33, offset: 72922},
									expr: &litMatcher{
										pos:        position{line: 2121, col: 33, offset: 72922},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 38, offset: 72927},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2121, col: 44, offset: 72933},
										expr: &litMatcher{
											pos:        position{line: 2121, col: 44, offset: 72933},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2121, col: 49, offset: 72938},
									expr: &litMatcher{
										pos:        position{line: 2121, col: 49, offset: 72938},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 54, offset: 72943},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2121, col: 63, offset: 72952},
										expr: &seqExpr{
											pos: position{line: 2121, col: 64, offset: 72953},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2212, col: 12, offset: 75917},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2212, col: 12, offset: 75917},
															run: (*parser).callonChainExpressionItem58,
															expr: &labeledExpr{
																pos:   position{line: 2212, col: 12, offset: 75917},
																label: "ident",
																expr: &seqExpr{
																	pos: position{line: 2260, col: 17, offset: 77263},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2260, col: 26, offset: 77272},
																			expr: &charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2214, col: 5, offset: 76011},
															run: (*parser).callonChainExpressionItem64,
															expr: &seqExpr{
																pos: position{line: 2214, col: 5, offset: 76011},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2214, col: 5, offset: 76011},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 2214, col: 13, offset: 76019},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2214, col: 13, offset: 76019},
																					expr: &litMatcher{
																						pos:        position{line: 2214, col: 13, offset: 76019},
																						val:        "$",
																						ignoreCase: false,
																						want:       "\"$\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2214, col: 18, offset: 76024},
																					expr: &choiceExpr{
																						pos: position{line: 2214, col: 19, offset: 76025},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2214, col: 19, offset: 76025},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 2214, col: 19, offset: 76025},
																										val:        "[\\pNd]",
																										classes:    []*unicode.RangeTable{rangeTable("Nd")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2214, col: 28, offset: 76034},
																										val:        "[_-\\pL]",
																										chars:      []rune{'_', '-'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 2214, col: 38, offset: 76044},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2214, col: 49, offset: 76055},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 3609, col: 8, offset: 123391},
																			run: (*parser).callonChainExpressionItem77,
																			expr: &choiceExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3609, col: 9, offset: 123392},
																						expr: &anyMatcher{
																							line: 3609, col: 10, offset: 123393,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3609, col: 14, offset: 123397},
																						expr: &anyMatcher{
																							line: 3609, col: 15, offset: 123398,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2121, col: 72, offset: 72961},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2121, col: 76, offset: 72965},
													expr: &litMatcher{
														pos:        position{line: 2121, col: 76, offset: 72965},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 83, offset: 72972},
									label: "typeI",
									expr: &choiceExpr{
										pos: position{line: 2212, col: 12, offset: 75917},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2212, col: 12, offset: 75917},
												run: (*parser).callonChainExpressionItem88,
												expr: &labeledExpr{
													pos:   position{line: 2212, col: 12, offset: 75917},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2260, col: 17, offset: 77263},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2243, col: 20, offset: 77018},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2260, col: 26, offset: 77272},
																expr: &charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2214, col: 5, offset: 76011},
												run: (*parser).callonChainExpressionItem94,
												expr: &seqExpr{
													pos: position{line: 2214, col: 5, offset: 76011},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2214, col: 5, offset: 76011},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2214, col: 13, offset: 76019},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2214, col: 13, offset: 76019},
																		expr: &litMatcher{
																			pos:        position{line: 2214, col: 13, offset: 76019},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2214, col: 18, offset: 76024},
																		expr: &choiceExpr{
																			pos: position{line: 2214, col: 19, offset: 76025},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2214, col: 19, offset: 76025},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 19, offset: 76025},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 28, offset: 76034},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2214, col: 38, offset: 76044},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2214, col: 49, offset: 76055},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonChainExpressionItem107,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2121, col: 97, offset: 72986},
									expr: &litMatcher{
										pos:        position{line: 2121, col: 97, offset: 72986},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 102, offset: 72991},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonChainExpressionItem116,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 121, offset: 73010},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2121, col: 128, offset: 73017},
										expr: &litMatcher{
											pos:        position{line: 2121, col: 128, offset: 73017},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpressionItem",
			pos:  position{line: 2022, col: 1, offset: 69420},
			expr: &choiceExpr{
				pos: position{line: 2022, col: 34, offset: 69453},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2022, col: 34, offset: 69453},
						name: "SingleLineIndexExpression",
					},
					&actionExpr{
						pos: position{line: 2073, col: 33, offset: 71414},
						run: (*parser).callonSingleLineChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2073, col: 33, offset: 71414},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2073, col: 33, offset: 71414},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2073, col: 37, offset: 71418},
									expr: &litMatcher{
										pos:        position{line: 2073, col: 37, offset: 71418},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2073, col: 42, offset: 71423},
									label: "identI",
									expr: &choiceExpr{
										pos: position{line: 2212, col: 12, offset: 75917},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2212, col: 12, offset: 75917},
												run: (*parser).callonSingleLineChainExpressionItem10,
												expr: &labeledExpr{
													pos:   position{line: 2212, col: 12, offset: 75917},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2260, col: 17, offset: 77263},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2243, col: 20, offset: 77018},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2260, col: 26, offset: 77272},
																expr: &charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2214, col: 5, offset: 76011},
												run: (*parser).callonSingleLineChainExpressionItem16,
												expr: &seqExpr{
													pos: position{line: 2214, col: 5, offset: 76011},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2214, col: 5, offset: 76011},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2214, col: 13, offset: 76019},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2214, col: 13, offset: 76019},
																		expr: &litMatcher{
																			pos:        position{line: 2214, col: 13, offset: 76019},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2214, col: 18, offset: 76024},
																		expr: &choiceExpr{
																			pos: position{line: 2214, col: 19, offset: 76025},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2214, col: 19, offset: 76025},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 19, offset: 76025},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 28, offset: 76034},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2214, col: 38, offset: 76044},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2214, col: 49, offset: 76055},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonSingleLineChainExpressionItem29,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2073, col: 57, offset: 71438},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2073, col: 64, offset: 71445},
										expr: &litMatcher{
											pos:        position{line: 2073, col: 64, offset: 71445},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2023, col: 34, offset: 69545},
						name: "SingleLineParenExpression",
					},
					&actionExpr{
						pos: position{line: 2121, col: 28, offset: 72917},
						run: (*parser).callonSingleLineChainExpressionItem39,
						expr: &seqExpr{
							pos: position{line: 2121, col: 28, offset: 72917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2121, col: 28, offset: 72917},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2121, col: 33, offset: 72922},
									expr: &litMatcher{
										pos:        position{line: 2121, col: 33, offset: 72922},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 38, offset: 72927},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2121, col: 44, offset: 72933},
										expr: &litMatcher{
											pos:        position{line: 2121, col: 44, offset: 72933},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2121, col: 49, offset: 72938},
									expr: &litMatcher{
										pos:        position{line: 2121, col: 49, offset: 72938},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 54, offset: 72943},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2121, col: 63, offset: 72952},
										expr: &seqExpr{
											pos: position{line: 2121, col: 64, offset: 72953},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2212, col: 12, offset: 75917},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2212, col: 12, offset: 75917},
															run: (*parser).callonSingleLineChainExpressionItem53,
															expr: &labeledExpr{
																pos:   position{line: 2212, col: 12, offset: 75917},
																label: "ident",
																expr: &seqExpr{
																	pos: position{line: 2260, col: 17, offset: 77263},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2260, col: 26, offset: 77272},
																			expr: &charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2214, col: 5, offset: 76011},
															run: (*parser).callonSingleLineChainExpressionItem59,
															expr: &seqExpr{
																pos: position{line: 2214, col: 5, offset: 76011},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2214, col: 5, offset: 76011},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 2214, col: 13, offset: 76019},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2214, col: 13, offset: 76019},
																					expr: &litMatcher{
																						pos:        position{line: 2214, col: 13, offset: 76019},
																						val:        "$",
																						ignoreCase: false,
																						want:       "\"$\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2214, col: 18, offset: 76024},
																					expr: &choiceExpr{
																						pos: position{line: 2214, col: 19, offset: 76025},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2214, col: 19, offset: 76025},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 2214, col: 19, offset: 76025},
																										val:        "[\\pNd]",
																										classes:    []*unicode.RangeTable{rangeTable("Nd")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2214, col: 28, offset: 76034},
																										val:        "[_-\\pL]",
																										chars:      []rune{'_', '-'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 2214, col: 38, offset: 76044},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2214, col: 49, offset: 76055},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 3609, col: 8, offset: 123391},
																			run: (*parser).callonSingleLineChainExpressionItem72,
																			expr: &choiceExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3609, col: 9, offset: 123392},
																						expr: &anyMatcher{
																							line: 3609, col: 10, offset: 123393,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3609, col: 14, offset: 123397},
																						expr: &anyMatcher{
																							line: 3609, col: 15, offset: 123398,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2121, col: 72, offset: 72961},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2121, col: 76, offset: 72965},
													expr: &litMatcher{
														pos:        position{line: 2121, col: 76, offset: 72965},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 83, offset: 72972},
									label: "typeI",
									expr: &choiceExpr{
										pos: position{line: 2212, col: 12, offset: 75917},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2212, col: 12, offset: 75917},
												run: (*parser).callonSingleLineChainExpressionItem83,
												expr: &labeledExpr{
													pos:   position{line: 2212, col: 12, offset: 75917},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2260, col: 17, offset: 77263},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2243, col: 20, offset: 77018},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2260, col: 26, offset: 77272},
																expr: &charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2214, col: 5, offset: 76011},
												run: (*parser).callonSingleLineChainExpressionItem89,
												expr: &seqExpr{
													pos: position{line: 2214, col: 5, offset: 76011},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2214, col: 5, offset: 76011},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2214, col: 13, offset: 76019},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2214, col: 13, offset: 76019},
																		expr: &litMatcher{
																			pos:        position{line: 2214, col: 13, offset: 76019},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2214, col: 18, offset: 76024},
																		expr: &choiceExpr{
																			pos: position{line: 2214, col: 19, offset: 76025},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2214, col: 19, offset: 76025},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 19, offset: 76025},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 28, offset: 76034},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2214, col: 38, offset: 76044},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2214, col: 49, offset: 76055},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonSingleLineChainExpressionItem102,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2121, col: 97, offset: 72986},
									expr: &litMatcher{
										pos:        position{line: 2121, col: 97, offset: 72986},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 102, offset: 72991},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonSingleLineChainExpressionItem111,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2121, col: 121, offset: 73010},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2121, col: 128, offset: 73017},
										expr: &litMatcher{
											pos:        position{line: 2121, col: 128, offset: 73017},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexExpression",
			pos:  position{line: 2025, col: 1, offset: 69608},
			expr: &actionExpr{
				pos: position{line: 2025, col: 20, offset: 69627},
				run: (*parser).callonIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2025, col: 20, offset: 69627},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3634, col: 14, offset: 124183},
							run: (*parser).callonIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3634, col: 14, offset: 124183},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2025, col: 30, offset: 69637},
							expr: &choiceExpr{
								pos: position{line: 3622, col: 20, offset: 123807},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3619, col: 36, offset: 123730},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												expr: &litMatcher{
													pos:        position{line: 3619, col: 36, offset: 123730},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3619, col: 42, offset: 123736},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 34, offset: 69641},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2025, col: 40, offset: 69647},
								name: "indexExpressionIndex",
							},
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 61, offset: 69668},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2025, col: 73, offset: 69680},
								expr: &litMatcher{
									pos:        position{line: 2025, col: 73, offset: 69680},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2025, col: 78, offset: 69685},
							expr: &seqExpr{
								pos: position{line: 2025, col: 79, offset: 69686},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2025, col: 79, offset: 69686},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2025, col: 83, offset: 69690},
										expr: &choiceExpr{
											pos: position{line: 3622, col: 20, offset: 123807},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															expr: &litMatcher{
																pos:        position{line: 3619, col: 36, offset: 123730},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3619, col: 42, offset: 123736},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2025, col: 89, offset: 69696},
							expr: &litMatcher{
								pos:        position{line: 2025, col: 89, offset: 69696},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 94, offset: 69701},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3635, col: 14, offset: 124223},
								run: (*parser).callonIndexExpression30,
								expr: &litMatcher{
									pos:        position{line: 3635, col: 14, offset: 124223},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 115, offset: 69722},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2025, col: 127, offset: 69734},
								expr: &litMatcher{
									pos:        position{line: 2025, col: 127, offset: 69734},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "indexExpressionIndex",
			pos:  position{line: 2037, col: 1, offset: 70047},
			expr: &actionExpr{
				pos: position{line: 2037, col: 25, offset: 70071},
				run: (*parser).callonindexExpressionIndex1,
				expr: &labeledExpr{
					pos:   position{line: 2037, col: 25, offset: 70071},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 2037, col: 32, offset: 70078},
						expr: &choiceExpr{
							pos: position{line: 2038, col: 5, offset: 70084},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2038, col: 5, offset: 70084},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 19, offset: 70098},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 38, offset: 70117},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1401, col: 15, offset: 45187},
									run: (*parser).callonindexExpressionIndex8,
									expr: &seqExpr{
										pos: position{line: 1401, col: 15, offset: 45187},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1401, col: 15, offset: 45187},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonindexExpressionIndex11,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2307, col: 14, offset: 78590},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2307, col: 14, offset: 78590},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2307, col: 20, offset: 78596},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2355, col: 19, offset: 80741},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2355, col: 19, offset: 80741},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2356, col: 5, offset: 80800},
																		run: (*parser).callonindexExpressionIndex27,
																		expr: &seqExpr{
																			pos: position{line: 2356, col: 5, offset: 80800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2356, col: 5, offset: 80800},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 14, offset: 80809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 26, offset: 80821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 38, offset: 80833},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 50, offset: 80845},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2385, col: 16, offset: 81981},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2385, col: 16, offset: 81981},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2386, col: 5, offset: 82084},
																		run: (*parser).callonindexExpressionIndex48,
																		expr: &seqExpr{
																			pos: position{line: 2386, col: 5, offset: 82084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2386, col: 5, offset: 82084},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 14, offset: 82093},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 26, offset: 82105},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 38, offset: 82117},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 50, offset: 82129},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 62, offset: 82141},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 74, offset: 82153},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 86, offset: 82165},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 98, offset: 82177},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2420, col: 24, offset: 83562},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2420, col: 24, offset: 83562},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2420, col: 29, offset: 83567},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2334, col: 75, offset: 79853},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2336, col: 24, offset: 79999},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2336, col: 24, offset: 79999},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2337, col: 24, offset: 80066},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2337, col: 24, offset: 80066},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2338, col: 5, offset: 80103},
																		run: (*parser).callonindexExpressionIndex80,
																		expr: &seqExpr{
																			pos: position{line: 2338, col: 5, offset: 80103},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2338, col: 5, offset: 80103},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 14, offset: 80112},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 26, offset: 80124},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2421, col: 24, offset: 83645},
																		run: (*parser).callonindexExpressionIndex87,
																		expr: &seqExpr{
																			pos: position{line: 2421, col: 24, offset: 83645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2421, col: 24, offset: 83645},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2445, col: 5, offset: 84661},
																		run: (*parser).callonindexExpressionIndex98,
																		expr: &seqExpr{
																			pos: position{line: 2445, col: 5, offset: 84661},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2445, col: 5, offset: 84661},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2466, col: 5, offset: 85502},
																		run: (*parser).callonindexExpressionIndex105,
																		expr: &seqExpr{
																			pos: position{line: 2466, col: 5, offset: 85502},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2466, col: 5, offset: 85502},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2484, col: 5, offset: 86187},
																		run: (*parser).callonindexExpressionIndex110,
																		expr: &seqExpr{
																			pos: position{line: 2484, col: 5, offset: 86187},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2484, col: 5, offset: 86187},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2484, col: 10, offset: 86192},
																					expr: &charClassMatcher{
																						pos:        position{line: 3607, col: 12, offset: 123375},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2307, col: 76, offset: 78652},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2308, col: 5, offset: 78663},
														run: (*parser).callonindexExpressionIndex116,
														expr: &seqExpr{
															pos: position{line: 2308, col: 5, offset: 78663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2308, col: 5, offset: 78663},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 10, offset: 78668},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2308, col: 16, offset: 78674},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 17, offset: 78675},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2355, col: 19, offset: 80741},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2355, col: 19, offset: 80741},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					run: (*parser).callonindexExpressionIndex128,
																					expr: &seqExpr{
																						pos: position{line: 2356, col: 5, offset: 80800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2356, col: 5, offset: 80800},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 14, offset: 80809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 26, offset: 80821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 38, offset: 80833},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 50, offset: 80845},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2385, col: 16, offset: 81981},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2385, col: 16, offset: 81981},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					run: (*parser).callonindexExpressionIndex149,
																					expr: &seqExpr{
																						pos: position{line: 2386, col: 5, offset: 82084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2386, col: 5, offset: 82084},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 14, offset: 82093},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 26, offset: 82105},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 38, offset: 82117},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 50, offset: 82129},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 62, offset: 82141},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 74, offset: 82153},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 86, offset: 82165},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 98, offset: 82177},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2420, col: 24, offset: 83562},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2420, col: 24, offset: 83562},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2420, col: 29, offset: 83567},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2334, col: 75, offset: 79853},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2336, col: 24, offset: 79999},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2336, col: 24, offset: 79999},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2337, col: 24, offset: 80066},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2337, col: 24, offset: 80066},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					run: (*parser).callonindexExpressionIndex181,
																					expr: &seqExpr{
																						pos: position{line: 2338, col: 5, offset: 80103},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2338, col: 5, offset: 80103},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 14, offset: 80112},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 26, offset: 80124},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					run: (*parser).callonindexExpressionIndex188,
																					expr: &seqExpr{
																						pos: position{line: 2421, col: 24, offset: 83645},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2421, col: 24, offset: 83645},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					run: (*parser).callonindexExpressionIndex199,
																					expr: &seqExpr{
																						pos: position{line: 2445, col: 5, offset: 84661},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2445, col: 5, offset: 84661},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					run: (*parser).callonindexExpressionIndex206,
																					expr: &seqExpr{
																						pos: position{line: 2466, col: 5, offset: 85502},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2466, col: 5, offset: 85502},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					run: (*parser).callonindexExpressionIndex211,
																					expr: &seqExpr{
																						pos: position{line: 2484, col: 5, offset: 86187},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2484, col: 5, offset: 86187},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2484, col: 10, offset: 86192},
																								expr: &charClassMatcher{
																									pos:        position{line: 3607, col: 12, offset: 123375},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2308, col: 74, offset: 78732},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 79, offset: 78737},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonindexExpressionIndex218,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2039, col: 5, offset: 70154},
									run: (*parser).callonindexExpressionIndex224,
									expr: &seqExpr{
										pos: position{line: 2039, col: 5, offset: 70154},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2039, col: 5, offset: 70154},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonindexExpressionIndex227,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2039, col: 14, offset: 70163},
												expr: &choiceExpr{
													pos: position{line: 2035, col: 35, offset: 70016},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2035, col: 35, offset: 70016},
															val:        "[)}]?,]",
															chars:      []rune{')', '}', ']', '?', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2035, col: 56, offset: 70037},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2035, col: 56, offset: 70037},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 2035, col: 60, offset: 70041},
																	expr: &litMatcher{
																		pos:        position{line: 2035, col: 61, offset: 70042},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 2039, col: 46, offset: 70195,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2039, col: 48, offset: 70197},
												expr: &seqExpr{
													pos: position{line: 2039, col: 49, offset: 70198},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 2039, col: 49, offset: 70198},
															expr: &choiceExpr{
																pos: position{line: 2035, col: 35, offset: 70016},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2035, col: 35, offset: 70016},
																		val:        "[)}]?,]",
																		chars:      []rune{')', '}', ']', '?', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2035, col: 56, offset: 70037},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2035, col: 56, offset: 70037},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 2035, col: 60, offset: 70041},
																				expr: &litMatcher{
																					pos:        position{line: 2035, col: 61, offset: 70042},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2039, col: 81, offset: 70230},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineIndexExpression",
			pos:  position{line: 2046, col: 1, offset: 70395},
			expr: &actionExpr{
				pos: position{line: 2046, col: 30, offset: 70424},
				run: (*parser).callonSingleLineIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2046, col: 30, offset: 70424},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3634, col: 14, offset: 124183},
							run: (*parser).callonSingleLineIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3634, col: 14, offset: 124183},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2046, col: 40, offset: 70434},
							expr: &choiceExpr{
								pos: position{line: 3622, col: 20, offset: 123807},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3619, col: 36, offset: 123730},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												expr: &litMatcher{
													pos:        position{line: 3619, col: 36, offset: 123730},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3619, col: 42, offset: 123736},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2046, col: 44, offset: 70438},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2046, col: 50, offset: 70444},
								name: "singleLineIndexExpressionIndex",
							},
						},
						&labeledExpr{
							pos:   position{line: 2046, col: 81, offset: 70475},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2046, col: 93, offset: 70487},
								expr: &litMatcher{
									pos:        position{line: 2046, col: 93, offset: 70487},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2046, col: 98, offset: 70492},
							expr: &seqExpr{
								pos: position{line: 2046, col: 99, offset: 70493},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2046, col: 99, offset: 70493},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2046, col: 103, offset: 70497},
										expr: &litMatcher{
											pos:        position{line: 2046, col: 103, offset: 70497},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2046, col: 110, offset: 70504},
							expr: &litMatcher{
								pos:        position{line: 2046, col: 110, offset: 70504},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2046, col: 115, offset: 70509},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3635, col: 14, offset: 124223},
								run: (*parser).callonSingleLineIndexExpression25,
								expr: &litMatcher{
									pos:        position{line: 3635, col: 14, offset: 124223},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2046, col: 136, offset: 70530},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2046, col: 148, offset: 70542},
								expr: &litMatcher{
									pos:        position{line: 2046, col: 148, offset: 70542},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineIndexExpressionIndex",
			pos:  position{line: 2056, col: 1, offset: 70790},
			expr: &actionExpr{
				pos: position{line: 2056, col: 35, offset: 70824},
				run: (*parser).callonsingleLineIndexExpressionIndex1,
				expr: &labeledExpr{
					pos:   position{line: 2056, col: 35, offset: 70824},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 2056, col: 42, offset: 70831},
						expr: &choiceExpr{
							pos: position{line: 2057, col: 5, offset: 70837},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2057, col: 5, offset: 70837},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 2057, col: 29, offset: 70861},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 2057, col: 48, offset: 70880},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1401, col: 15, offset: 45187},
									run: (*parser).callonsingleLineIndexExpressionIndex8,
									expr: &seqExpr{
										pos: position{line: 1401, col: 15, offset: 45187},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1401, col: 15, offset: 45187},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonsingleLineIndexExpressionIndex11,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2307, col: 14, offset: 78590},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2307, col: 14, offset: 78590},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2307, col: 14, offset: 78590},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2307, col: 20, offset: 78596},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2355, col: 19, offset: 80741},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2355, col: 19, offset: 80741},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2356, col: 5, offset: 80800},
																		run: (*parser).callonsingleLineIndexExpressionIndex27,
																		expr: &seqExpr{
																			pos: position{line: 2356, col: 5, offset: 80800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2356, col: 5, offset: 80800},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 14, offset: 80809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 26, offset: 80821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 38, offset: 80833},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2356, col: 50, offset: 80845},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2385, col: 16, offset: 81981},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2385, col: 16, offset: 81981},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2386, col: 5, offset: 82084},
																		run: (*parser).callonsingleLineIndexExpressionIndex48,
																		expr: &seqExpr{
																			pos: position{line: 2386, col: 5, offset: 82084},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2386, col: 5, offset: 82084},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 14, offset: 82093},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 26, offset: 82105},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 38, offset: 82117},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 50, offset: 82129},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 62, offset: 82141},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 74, offset: 82153},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 86, offset: 82165},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2386, col: 98, offset: 82177},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2420, col: 24, offset: 83562},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2420, col: 24, offset: 83562},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2420, col: 29, offset: 83567},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2334, col: 75, offset: 79853},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2336, col: 24, offset: 79999},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2336, col: 24, offset: 79999},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2253, col: 19, offset: 77188},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2337, col: 24, offset: 80066},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2337, col: 24, offset: 80066},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2254, col: 19, offset: 77212},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2338, col: 5, offset: 80103},
																		run: (*parser).callonsingleLineIndexExpressionIndex80,
																		expr: &seqExpr{
																			pos: position{line: 2338, col: 5, offset: 80103},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2338, col: 5, offset: 80103},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 14, offset: 80112},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2338, col: 26, offset: 80124},
																					expr: &charClassMatcher{
																						pos:        position{line: 2254, col: 19, offset: 77212},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2421, col: 24, offset: 83645},
																		run: (*parser).callonsingleLineIndexExpressionIndex87,
																		expr: &seqExpr{
																			pos: position{line: 2421, col: 24, offset: 83645},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2421, col: 24, offset: 83645},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2445, col: 5, offset: 84661},
																		run: (*parser).callonsingleLineIndexExpressionIndex98,
																		expr: &seqExpr{
																			pos: position{line: 2445, col: 5, offset: 84661},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2445, col: 5, offset: 84661},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2466, col: 5, offset: 85502},
																		run: (*parser).callonsingleLineIndexExpressionIndex105,
																		expr: &seqExpr{
																			pos: position{line: 2466, col: 5, offset: 85502},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2466, col: 5, offset: 85502},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2254, col: 19, offset: 77212},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2484, col: 5, offset: 86187},
																		run: (*parser).callonsingleLineIndexExpressionIndex110,
																		expr: &seqExpr{
																			pos: position{line: 2484, col: 5, offset: 86187},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2484, col: 5, offset: 86187},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2484, col: 10, offset: 86192},
																					expr: &charClassMatcher{
																						pos:        position{line: 3607, col: 12, offset: 123375},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2307, col: 76, offset: 78652},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2308, col: 5, offset: 78663},
														run: (*parser).callonsingleLineIndexExpressionIndex116,
														expr: &seqExpr{
															pos: position{line: 2308, col: 5, offset: 78663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2308, col: 5, offset: 78663},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 10, offset: 78668},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2308, col: 16, offset: 78674},
																		expr: &choiceExpr{
																			pos: position{line: 2308, col: 17, offset: 78675},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2355, col: 19, offset: 80741},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2355, col: 19, offset: 80741},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2356, col: 5, offset: 80800},
																					run: (*parser).callonsingleLineIndexExpressionIndex128,
																					expr: &seqExpr{
																						pos: position{line: 2356, col: 5, offset: 80800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2356, col: 5, offset: 80800},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 14, offset: 80809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 26, offset: 80821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 38, offset: 80833},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2356, col: 50, offset: 80845},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2385, col: 16, offset: 81981},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2385, col: 16, offset: 81981},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2386, col: 5, offset: 82084},
																					run: (*parser).callonsingleLineIndexExpressionIndex149,
																					expr: &seqExpr{
																						pos: position{line: 2386, col: 5, offset: 82084},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2386, col: 5, offset: 82084},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 14, offset: 82093},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 26, offset: 82105},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 38, offset: 82117},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 50, offset: 82129},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 62, offset: 82141},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 74, offset: 82153},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 86, offset: 82165},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2386, col: 98, offset: 82177},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2420, col: 24, offset: 83562},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2420, col: 24, offset: 83562},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2420, col: 29, offset: 83567},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2334, col: 75, offset: 79853},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2336, col: 24, offset: 79999},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2336, col: 24, offset: 79999},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2253, col: 19, offset: 77188},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2337, col: 24, offset: 80066},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2337, col: 24, offset: 80066},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2254, col: 19, offset: 77212},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2338, col: 5, offset: 80103},
																					run: (*parser).callonsingleLineIndexExpressionIndex181,
																					expr: &seqExpr{
																						pos: position{line: 2338, col: 5, offset: 80103},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2338, col: 5, offset: 80103},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 14, offset: 80112},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2338, col: 26, offset: 80124},
																								expr: &charClassMatcher{
																									pos:        position{line: 2254, col: 19, offset: 77212},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2421, col: 24, offset: 83645},
																					run: (*parser).callonsingleLineIndexExpressionIndex188,
																					expr: &seqExpr{
																						pos: position{line: 2421, col: 24, offset: 83645},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2421, col: 24, offset: 83645},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2445, col: 5, offset: 84661},
																					run: (*parser).callonsingleLineIndexExpressionIndex199,
																					expr: &seqExpr{
																						pos: position{line: 2445, col: 5, offset: 84661},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2445, col: 5, offset: 84661},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2466, col: 5, offset: 85502},
																					run: (*parser).callonsingleLineIndexExpressionIndex206,
																					expr: &seqExpr{
																						pos: position{line: 2466, col: 5, offset: 85502},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2466, col: 5, offset: 85502},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2254, col: 19, offset: 77212},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2484, col: 5, offset: 86187},
																					run: (*parser).callonsingleLineIndexExpressionIndex211,
																					expr: &seqExpr{
																						pos: position{line: 2484, col: 5, offset: 86187},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2484, col: 5, offset: 86187},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2484, col: 10, offset: 86192},
																								expr: &charClassMatcher{
																									pos:        position{line: 3607, col: 12, offset: 123375},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2308, col: 74, offset: 78732},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2308, col: 79, offset: 78737},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonsingleLineIndexExpressionIndex218,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2058, col: 5, offset: 70927},
									run: (*parser).callonsingleLineIndexExpressionIndex224,
									expr: &seqExpr{
										pos: position{line: 2058, col: 5, offset: 70927},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2058, col: 5, offset: 70927},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3609, col: 8, offset: 123391},
													run: (*parser).callonsingleLineIndexExpressionIndex227,
													expr: &choiceExpr{
														pos: position{line: 3609, col: 9, offset: 123392},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3609, col: 9, offset: 123392},
																expr: &anyMatcher{
																	line: 3609, col: 10, offset: 123393,
																},
															},
															&notExpr{
																pos: position{line: 3609, col: 14, offset: 123397},
																expr: &anyMatcher{
																	line: 3609, col: 15, offset: 123398,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2058, col: 14, offset: 70936},
												expr: &choiceExpr{
													pos: position{line: 2035, col: 35, offset: 70016},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2035, col: 35, offset: 70016},
															val:        "[)}]?,]",
															chars:      []rune{')', '}', ']', '?', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2035, col: 56, offset: 70037},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2035, col: 56, offset: 70037},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 2035, col: 60, offset: 70041},
																	expr: &litMatcher{
																		pos:        position{line: 2035, col: 61, offset: 70042},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3607, col: 12, offset: 123375},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2058, col: 54, offset: 70976},
												expr: &seqExpr{
													pos: position{line: 2058, col: 55, offset: 70977},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 2058, col: 55, offset: 70977},
															expr: &choiceExpr{
																pos: position{line: 2035, col: 35, offset: 70016},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2035, col: 35, offset: 70016},
																		val:        "[)}]?,]",
																		chars:      []rune{')', '}', ']', '?', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2035, col: 56, offset: 70037},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2035, col: 56, offset: 70037},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 2035, col: 60, offset: 70041},
																				expr: &litMatcher{
																					pos:        position{line: 2035, col: 61, offset: 70042},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2058, col: 87, offset: 71009},
															expr: &seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2058, col: 92, offset: 71014},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpression",
			pos:  position{line: 2081, col: 1, offset: 71596},
			expr: &actionExpr{
				pos: position{line: 2081, col: 20, offset: 71615},
				run: (*parser).callonParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2081, col: 20, offset: 71615},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3628, col: 12, offset: 124027},
							run: (*parser).callonParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3628, col: 12, offset: 124027},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2081, col: 28, offset: 71623},
							expr: &litMatcher{
								pos:        position{line: 2081, col: 28, offset: 71623},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2081, col: 33, offset: 71628},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2081, col: 39, offset: 71634},
								expr: &ruleRefExpr{
									pos:  position{line: 2081, col: 39, offset: 71634},
									name: "parenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2081, col: 60, offset: 71655},
							expr: &litMatcher{
								pos:        position{line: 2081, col: 60, offset: 71655},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2081, col: 65, offset: 71660},
							expr: &seqExpr{
								pos: position{line: 2081, col: 66, offset: 71661},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2081, col: 66, offset: 71661},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2081, col: 70, offset: 71665},
										expr: &choiceExpr{
											pos: position{line: 3622, col: 20, offset: 123807},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															expr: &litMatcher{
																pos:        position{line: 3619, col: 36, offset: 123730},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3619, col: 42, offset: 123736},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2081, col: 76, offset: 71671},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3629, col: 12, offset: 124065},
								run: (*parser).callonParenExpression23,
								expr: &litMatcher{
									pos:        position{line: 3629, col: 12, offset: 124065},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2081, col: 95, offset: 71690},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2081, col: 102, offset: 71697},
								expr: &litMatcher{
									pos:        position{line: 2081, col: 102, offset: 71697},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parenExpressionArgs",
			pos:  position{line: 2089, col: 1, offset: 71888},
			expr: &actionExpr{
				pos: position{line: 2089, col: 24, offset: 71911},
				run: (*parser).callonparenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2089, col: 24, offset: 71911},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2089, col: 24, offset: 71911},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2089, col: 31, offset: 71918},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2089, col: 44, offset: 71931},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2089, col: 50, offset: 71937},
								expr: &seqExpr{
									pos: position{line: 2089, col: 51, offset: 71938},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2089, col: 51, offset: 71938},
											expr: &litMatcher{
												pos:        position{line: 2089, col: 51, offset: 71938},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2089, col: 56, offset: 71943},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2089, col: 60, offset: 71947},
											expr: &choiceExpr{
												pos: position{line: 3622, col: 20, offset: 123807},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																expr: &litMatcher{
																	pos:        position{line: 3619, col: 36, offset: 123730},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3619, col: 42, offset: 123736},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2089, col: 64, offset: 71951},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineParenExpression",
			pos:  position{line: 2101, col: 1, offset: 72218},
			expr: &actionExpr{
				pos: position{line: 2101, col: 30, offset: 72247},
				run: (*parser).callonSingleLineParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2101, col: 30, offset: 72247},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3628, col: 12, offset: 124027},
							run: (*parser).callonSingleLineParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3628, col: 12, offset: 124027},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2101, col: 38, offset: 72255},
							expr: &litMatcher{
								pos:        position{line: 2101, col: 38, offset: 72255},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2101, col: 43, offset: 72260},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2101, col: 49, offset: 72266},
								expr: &ruleRefExpr{
									pos:  position{line: 2101, col: 49, offset: 72266},
									name: "singleLinearenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2101, col: 79, offset: 72296},
							expr: &litMatcher{
								pos:        position{line: 2101, col: 79, offset: 72296},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2101, col: 84, offset: 72301},
							expr: &seqExpr{
								pos: position{line: 2101, col: 85, offset: 72302},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2101, col: 85, offset: 72302},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2101, col: 89, offset: 72306},
										expr: &litMatcher{
											pos:        position{line: 2101, col: 89, offset: 72306},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2101, col: 96, offset: 72313},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3629, col: 12, offset: 124065},
								run: (*parser).callonSingleLineParenExpression18,
								expr: &litMatcher{
									pos:        position{line: 3629, col: 12, offset: 124065},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2101, col: 115, offset: 72332},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2101, col: 122, offset: 72339},
								expr: &litMatcher{
									pos:        position{line: 2101, col: 122, offset: 72339},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLinearenExpressionArgs",
			pos:  position{line: 2109, col: 1, offset: 72530},
			expr: &actionExpr{
				pos: position{line: 2109, col: 33, offset: 72562},
				run: (*parser).callonsingleLinearenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2109, col: 33, offset: 72562},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2109, col: 33, offset: 72562},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2109, col: 40, offset: 72569},
								name: "SingleLineGoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2109, col: 63, offset: 72592},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2109, col: 69, offset: 72598},
								expr: &seqExpr{
									pos: position{line: 2109, col: 70, offset: 72599},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2109, col: 70, offset: 72599},
											expr: &litMatcher{
												pos:        position{line: 2109, col: 70, offset: 72599},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2109, col: 75, offset: 72604},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2109, col: 79, offset: 72608},
											expr: &litMatcher{
												pos:        position{line: 2109, col: 79, offset: 72608},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2109, col: 84, offset: 72613},
											name: "SingleLineGoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoType",
			pos:  position{line: 2229, col: 1, offset: 76611},
			expr: &actionExpr{
				pos: position{line: 2229, col: 11, offset: 76621},
				run: (*parser).callonGoType1,
				expr: &labeledExpr{
					pos:   position{line: 2229, col: 11, offset: 76621},
					label: "goTypeI",
					expr: &ruleRefExpr{
						pos:  position{line: 2229, col: 19, offset: 76629},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goType",
			pos:  position{line: 2619, col: 1, offset: 91191},
			expr: &choiceExpr{
				pos: position{line: 2619, col: 15, offset: 91205},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2619, col: 16, offset: 91206},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2620, col: 15, offset: 91288},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 2277, col: 21, offset: 77815},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2243, col: 20, offset: 77018},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2260, col: 26, offset: 77272},
												expr: &charClassMatcher{
													pos:        position{line: 2243, col: 20, offset: 77018},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2277, col: 35, offset: 77829},
												expr: &litMatcher{
													pos:        position{line: 2277, col: 35, offset: 77829},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 2277, col: 40, offset: 77834},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2277, col: 44, offset: 77838},
												expr: &litMatcher{
													pos:        position{line: 2277, col: 44, offset: 77838},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 2243, col: 20, offset: 77018},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2260, col: 26, offset: 77272},
												expr: &charClassMatcher{
													pos:        position{line: 2243, col: 20, offset: 77018},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2260, col: 17, offset: 77263},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2243, col: 20, offset: 77018},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2260, col: 26, offset: 77272},
												expr: &charClassMatcher{
													pos:        position{line: 2243, col: 20, offset: 77018},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 2619, col: 27, offset: 91217},
								expr: &litMatcher{
									pos:        position{line: 2619, col: 27, offset: 91217},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 2619, col: 32, offset: 91222},
								expr: &ruleRefExpr{
									pos:  position{line: 2619, col: 32, offset: 91222},
									name: "goTypeArgs",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2619, col: 47, offset: 91237},
						name: "goTypeLit",
					},
					&seqExpr{
						pos: position{line: 2619, col: 59, offset: 91249},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2619, col: 59, offset: 91249},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2619, col: 63, offset: 91253},
								expr: &litMatcher{
									pos:        position{line: 2619, col: 63, offset: 91253},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2619, col: 68, offset: 91258},
								name: "goType",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2619, col: 75, offset: 91265},
								expr: &litMatcher{
									pos:        position{line: 2619, col: 75, offset: 91265},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&litMatcher{
								pos:        position{line: 2619, col: 80, offset: 91270},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeArgs",
			pos:  position{line: 2621, col: 1, offset: 91320},
			expr: &seqExpr{
				pos: position{line: 2621, col: 15, offset: 91334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2621, col: 15, offset: 91334},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2621, col: 19, offset: 91338},
						expr: &litMatcher{
							pos:        position{line: 2621, col: 19, offset: 91338},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2621, col: 24, offset: 91343},
						name: "goTypeList",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2621, col: 35, offset: 91354},
						expr: &litMatcher{
							pos:        position{line: 2621, col: 35, offset: 91354},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2621, col: 40, offset: 91359},
						expr: &seqExpr{
							pos: position{line: 2621, col: 41, offset: 91360},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2621, col: 41, offset: 91360},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2621, col: 45, offset: 91364},
									expr: &litMatcher{
										pos:        position{line: 2621, col: 45, offset: 91364},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2621, col: 52, offset: 91371},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "goTypeList",
			pos:  position{line: 2622, col: 1, offset: 91375},
			expr: &seqExpr{
				pos: position{line: 2622, col: 15, offset: 91389},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2622, col: 15, offset: 91389},
						name: "goType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2622, col: 22, offset: 91396},
						expr: &litMatcher{
							pos:        position{line: 2622, col: 22, offset: 91396},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2622, col: 27, offset: 91401},
						expr: &seqExpr{
							pos: position{line: 2622, col: 28, offset: 91402},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2622, col: 28, offset: 91402},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2622, col: 32, offset: 91406},
									expr: &litMatcher{
										pos:        position{line: 2622, col: 32, offset: 91406},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2622, col: 37, offset: 91411},
									name: "goType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeLit",
			pos:  position{line: 2623, col: 1, offset: 91420},
			expr: &choiceExpr{
				pos: position{line: 2623, col: 16, offset: 91435},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2623, col: 16, offset: 91435},
						name: "goArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 2623, col: 30, offset: 91449},
						name: "goStructType",
					},
					&ruleRefExpr{
						pos:  position{line: 2623, col: 45, offset: 91464},
						name: "goPointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 2623, col: 61, offset: 91480},
						name: "goFunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 2623, col: 78, offset: 91497},
						name: "goInterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2623, col: 96, offset: 91515},
						name: "goSliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2623, col: 110, offset: 91529},
						name: "goMapType",
					},
					&ruleRefExpr{
						pos:  position{line: 2623, col: 122, offset: 91541},
						name: "goChannelType",
					},
				},
			},
		},
		{
			name: "goArrayType",
			pos:  position{line: 2629, col: 1, offset: 91579},
			expr: &seqExpr{
				pos: position{line: 2629, col: 18, offset: 91596},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2629, col: 18, offset: 91596},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2629, col: 22, offset: 91600},
						expr: &litMatcher{
							pos:        position{line: 2629, col: 22, offset: 91600},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2629, col: 27, offset: 91605},
						name: "goArrayLength",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2629, col: 41, offset: 91619},
						expr: &litMatcher{
							pos:        position{line: 2629, col: 41, offset: 91619},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2629, col: 46, offset: 91624},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2629, col: 50, offset: 91628},
						expr: &litMatcher{
							pos:        position{line: 2629, col: 50, offset: 91628},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2629, col: 55, offset: 91633},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goArrayLength",
			pos:  position{line: 2630, col: 1, offset: 91647},
			expr: &seqExpr{
				pos: position{line: 2630, col: 18, offset: 91664},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 2630, col: 18, offset: 91664},
						expr: &charClassMatcher{
							pos:        position{line: 2630, col: 18, offset: 91664},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2630, col: 25, offset: 91671},
						expr: &seqExpr{
							pos: position{line: 2630, col: 26, offset: 91672},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2630, col: 26, offset: 91672},
									expr: &litMatcher{
										pos:        position{line: 2630, col: 26, offset: 91672},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2630, col: 32, offset: 91678},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2630, col: 32, offset: 91678},
											val:        "<<",
											ignoreCase: false,
											want:       "\"<<\"",
										},
										&litMatcher{
											pos:        position{line: 2630, col: 39, offset: 91685},
											val:        ">>",
											ignoreCase: false,
											want:       "\">>\"",
										},
										&charClassMatcher{
											pos:        position{line: 2630, col: 46, offset: 91692},
											val:        "[+-*/]",
											chars:      []rune{'+', '-', '*', '/'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2630, col: 69, offset: 91715},
									expr: &litMatcher{
										pos:        position{line: 2630, col: 69, offset: 91715},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2630, col: 74, offset: 91720},
									name: "goArrayLength",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goElementType",
			pos:  position{line: 2631, col: 1, offset: 91817},
			expr: &ruleRefExpr{
				pos:  position{line: 2631, col: 18, offset: 91834},
				name: "goType",
			},
		},
		{
			name: "goSliceType",
			pos:  position{line: 2637, col: 1, offset: 91864},
			expr: &seqExpr{
				pos: position{line: 2637, col: 16, offset: 91879},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2637, col: 16, offset: 91879},
						val:        "[]",
						ignoreCase: false,
						want:       "\"[]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2637, col: 21, offset: 91884},
						expr: &litMatcher{
							pos:        position{line: 2637, col: 21, offset: 91884},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2637, col: 26, offset: 91889},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goStructType",
			pos:  position{line: 2643, col: 1, offset: 91927},
			expr: &seqExpr{
				pos: position{line: 2643, col: 20, offset: 91946},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2643, col: 20, offset: 91946},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2643, col: 29, offset: 91955},
						expr: &litMatcher{
							pos:        position{line: 2643, col: 29, offset: 91955},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2643, col: 34, offset: 91960},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2643, col: 38, offset: 91964},
						expr: &seqExpr{
							pos: position{line: 2643, col: 39, offset: 91965},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2643, col: 39, offset: 91965},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2643, col: 43, offset: 91969},
									expr: &ruleRefExpr{
										pos:  position{line: 2643, col: 43, offset: 91969},
										name: "goFieldDecl",
									},
								},
								&choiceExpr{
									pos: position{line: 2643, col: 57, offset: 91983},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2643, col: 57, offset: 91983},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&seqExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3619, col: 36, offset: 123730},
													expr: &litMatcher{
														pos:        position{line: 3619, col: 36, offset: 123730},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3619, col: 42, offset: 123736},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2643, col: 71, offset: 91997},
						expr: &choiceExpr{
							pos: position{line: 3622, col: 20, offset: 123807},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3618, col: 36, offset: 123689},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3619, col: 36, offset: 123730},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2643, col: 75, offset: 92001},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goFieldDecl",
			pos:  position{line: 2644, col: 1, offset: 92005},
			expr: &seqExpr{
				pos: position{line: 2644, col: 20, offset: 92024},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 2644, col: 21, offset: 92025},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2644, col: 21, offset: 92025},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2243, col: 20, offset: 77018},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2260, col: 26, offset: 77272},
										expr: &charClassMatcher{
											pos:        position{line: 2243, col: 20, offset: 77018},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2695, col: 34, offset: 93256},
										expr: &litMatcher{
											pos:        position{line: 2695, col: 34, offset: 93256},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2695, col: 39, offset: 93261},
										expr: &seqExpr{
											pos: position{line: 2695, col: 40, offset: 93262},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2695, col: 40, offset: 93262},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2695, col: 44, offset: 93266},
													expr: &choiceExpr{
														pos: position{line: 3622, col: 20, offset: 123807},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3619, col: 36, offset: 123730},
																		expr: &litMatcher{
																			pos:        position{line: 3619, col: 36, offset: 123730},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3619, col: 42, offset: 123736},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 2243, col: 20, offset: 77018},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2260, col: 26, offset: 77272},
													expr: &charClassMatcher{
														pos:        position{line: 2243, col: 20, offset: 77018},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2644, col: 38, offset: 92042},
										expr: &litMatcher{
											pos:        position{line: 2644, col: 38, offset: 92042},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2644, col: 43, offset: 92047},
										name: "goType",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2644, col: 52, offset: 92056},
								name: "goEmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2644, col: 69, offset: 92073},
						expr: &choiceExpr{
							pos: position{line: 2584, col: 16, offset: 89893},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2586, col: 19, offset: 89952},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2586, col: 19, offset: 89952},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2586, col: 23, offset: 89956},
											expr: &charClassMatcher{
												pos:        position{line: 2597, col: 27, offset: 90336},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 2586, col: 47, offset: 89980},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2587, col: 5, offset: 89990},
									run: (*parser).callongoFieldDecl33,
									expr: &seqExpr{
										pos: position{line: 2587, col: 5, offset: 89990},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2587, col: 5, offset: 89990},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2587, col: 9, offset: 89994},
												expr: &charClassMatcher{
													pos:        position{line: 2597, col: 27, offset: 90336},
													val:        "[^\\n`]",
													chars:      []rune{'\n', '`'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												expr: &charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3606, col: 16, offset: 123346},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																expr: &litMatcher{
																	pos:        position{line: 3606, col: 16, offset: 123346},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3606, col: 22, offset: 123352},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3605, col: 12, offset: 123328},
														expr: &anyMatcher{
															line: 3605, col: 13, offset: 123329,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 2599, col: 27, offset: 90420},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2599, col: 27, offset: 90420},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2599, col: 31, offset: 90424},
											expr: &choiceExpr{
												pos: position{line: 2599, col: 32, offset: 90425},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2355, col: 19, offset: 80741},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2355, col: 19, offset: 80741},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2356, col: 5, offset: 80800},
														run: (*parser).callongoFieldDecl57,
														expr: &seqExpr{
															pos: position{line: 2356, col: 5, offset: 80800},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2356, col: 5, offset: 80800},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 14, offset: 80809},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 26, offset: 80821},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 38, offset: 80833},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2356, col: 50, offset: 80845},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2385, col: 16, offset: 81981},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2385, col: 16, offset: 81981},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2386, col: 5, offset: 82084},
														run: (*parser).callongoFieldDecl78,
														expr: &seqExpr{
															pos: position{line: 2386, col: 5, offset: 82084},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2386, col: 5, offset: 82084},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 14, offset: 82093},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 26, offset: 82105},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 38, offset: 82117},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 50, offset: 82129},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 62, offset: 82141},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 74, offset: 82153},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 86, offset: 82165},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2386, col: 98, offset: 82177},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2613, col: 36, offset: 91114},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2613, col: 36, offset: 91114},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2613, col: 41, offset: 91119},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2611, col: 38, offset: 91006},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 2336, col: 24, offset: 79999},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2336, col: 24, offset: 79999},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2253, col: 19, offset: 77188},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2253, col: 19, offset: 77188},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2253, col: 19, offset: 77188},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 2337, col: 24, offset: 80066},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2337, col: 24, offset: 80066},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2254, col: 19, offset: 77212},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2338, col: 5, offset: 80103},
														run: (*parser).callongoFieldDecl110,
														expr: &seqExpr{
															pos: position{line: 2338, col: 5, offset: 80103},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2338, col: 5, offset: 80103},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2338, col: 14, offset: 80112},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2338, col: 26, offset: 80124},
																	expr: &charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2500, col: 37, offset: 86764},
														run: (*parser).callongoFieldDecl117,
														expr: &seqExpr{
															pos: position{line: 2500, col: 37, offset: 86764},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2500, col: 37, offset: 86764},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2524, col: 5, offset: 87781},
														run: (*parser).callongoFieldDecl128,
														expr: &seqExpr{
															pos: position{line: 2524, col: 5, offset: 87781},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2524, col: 5, offset: 87781},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2545, col: 5, offset: 88623},
														run: (*parser).callongoFieldDecl135,
														expr: &seqExpr{
															pos: position{line: 2545, col: 5, offset: 88623},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2545, col: 5, offset: 88623},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2563, col: 5, offset: 89309},
														run: (*parser).callongoFieldDecl140,
														expr: &seqExpr{
															pos: position{line: 2563, col: 5, offset: 89309},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2563, col: 5, offset: 89309},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2563, col: 10, offset: 89314},
																	expr: &charClassMatcher{
																		pos:        position{line: 3607, col: 12, offset: 123375},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2599, col: 115, offset: 90508},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2600, col: 5, offset: 90518},
									run: (*parser).callongoFieldDecl146,
									expr: &seqExpr{
										pos: position{line: 2600, col: 5, offset: 90518},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2600, col: 5, offset: 90518},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2600, col: 9, offset: 90522},
												expr: &choiceExpr{
													pos: position{line: 2600, col: 10, offset: 90523},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2355, col: 19, offset: 80741},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2355, col: 19, offset: 80741},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2356, col: 5, offset: 80800},
															run: (*parser).callongoFieldDecl157,
															expr: &seqExpr{
																pos: position{line: 2356, col: 5, offset: 80800},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2356, col: 5, offset: 80800},
																		val:        "\\u",
																		ignoreCase: false,
																		want:       "\"\\\\u\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2356, col: 14, offset: 80809},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2356, col: 26, offset: 80821},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2356, col: 38, offset: 80833},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2356, col: 50, offset: 80845},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2385, col: 16, offset: 81981},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2385, col: 16, offset: 81981},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2386, col: 5, offset: 82084},
															run: (*parser).callongoFieldDecl178,
															expr: &seqExpr{
																pos: position{line: 2386, col: 5, offset: 82084},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2386, col: 5, offset: 82084},
																		val:        "\\U",
																		ignoreCase: false,
																		want:       "\"\\\\U\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 14, offset: 82093},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 26, offset: 82105},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 38, offset: 82117},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 50, offset: 82129},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 62, offset: 82141},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 74, offset: 82153},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 86, offset: 82165},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2386, col: 98, offset: 82177},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2613, col: 36, offset: 91114},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2613, col: 36, offset: 91114},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2613, col: 41, offset: 91119},
																	val:        "[abfnrtv\\\\\"]",
																	chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2611, col: 38, offset: 91006},
															val:        "[^\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
														&seqExpr{
															pos: position{line: 2336, col: 24, offset: 79999},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2336, col: 24, offset: 79999},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2253, col: 19, offset: 77188},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2253, col: 19, offset: 77188},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2253, col: 19, offset: 77188},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&seqExpr{
															pos: position{line: 2337, col: 24, offset: 80066},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2337, col: 24, offset: 80066},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2254, col: 19, offset: 77212},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2338, col: 5, offset: 80103},
															run: (*parser).callongoFieldDecl210,
															expr: &seqExpr{
																pos: position{line: 2338, col: 5, offset: 80103},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2338, col: 5, offset: 80103},
																		val:        "\\x",
																		ignoreCase: false,
																		want:       "\"\\\\x\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2338, col: 14, offset: 80112},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2338, col: 26, offset: 80124},
																		expr: &charClassMatcher{
																			pos:        position{line: 2254, col: 19, offset: 77212},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2500, col: 37, offset: 86764},
															run: (*parser).callongoFieldDecl217,
															expr: &seqExpr{
																pos: position{line: 2500, col: 37, offset: 86764},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2500, col: 37, offset: 86764},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2524, col: 5, offset: 87781},
															run: (*parser).callongoFieldDecl228,
															expr: &seqExpr{
																pos: position{line: 2524, col: 5, offset: 87781},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2524, col: 5, offset: 87781},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2545, col: 5, offset: 88623},
															run: (*parser).callongoFieldDecl235,
															expr: &seqExpr{
																pos: position{line: 2545, col: 5, offset: 88623},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2545, col: 5, offset: 88623},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2254, col: 19, offset: 77212},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2563, col: 5, offset: 89309},
															run: (*parser).callongoFieldDecl240,
															expr: &seqExpr{
																pos: position{line: 2563, col: 5, offset: 89309},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2563, col: 5, offset: 89309},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2563, col: 10, offset: 89314},
																		expr: &charClassMatcher{
																			pos:        position{line: 3607, col: 12, offset: 123375},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3605, col: 12, offset: 123328},
												expr: &anyMatcher{
													line: 3605, col: 13, offset: 123329,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goEmbeddedField",
			pos:  position{line: 2645, col: 1, offset: 92080},
			expr: &seqExpr{
				pos: position{line: 2645, col: 20, offset: 92099},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2645, col: 20, offset: 92099},
						expr: &litMatcher{
							pos:        position{line: 2645, col: 20, offset: 92099},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2645, col: 25, offset: 92104},
						expr: &litMatcher{
							pos:        position{line: 2645, col: 25, offset: 92104},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&choiceExpr{
						pos: position{line: 2620, col: 15, offset: 91288},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2277, col: 21, offset: 77815},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2243, col: 20, offset: 77018},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2260, col: 26, offset: 77272},
										expr: &charClassMatcher{
											pos:        position{line: 2243, col: 20, offset: 77018},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2277, col: 35, offset: 77829},
										expr: &litMatcher{
											pos:        position{line: 2277, col: 35, offset: 77829},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&litMatcher{
										pos:        position{line: 2277, col: 40, offset: 77834},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2277, col: 44, offset: 77838},
										expr: &litMatcher{
											pos:        position{line: 2277, col: 44, offset: 77838},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&charClassMatcher{
										pos:        position{line: 2243, col: 20, offset: 77018},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2260, col: 26, offset: 77272},
										expr: &charClassMatcher{
											pos:        position{line: 2243, col: 20, offset: 77018},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 2260, col: 17, offset: 77263},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2243, col: 20, offset: 77018},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2260, col: 26, offset: 77272},
										expr: &charClassMatcher{
											pos:        position{line: 2243, col: 20, offset: 77018},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2645, col: 41, offset: 92120},
						expr: &litMatcher{
							pos:        position{line: 2645, col: 41, offset: 92120},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2645, col: 46, offset: 92125},
						expr: &ruleRefExpr{
							pos:  position{line: 2645, col: 46, offset: 92125},
							name: "goTypeArgs",
						},
					},
				},
			},
		},
		{
			name: "goPointerType",
			pos:  position{line: 2652, col: 1, offset: 92193},
			expr: &seqExpr{
				pos: position{line: 2652, col: 18, offset: 92210},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2652, col: 18, offset: 92210},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2652, col: 22, offset: 92214},
						expr: &litMatcher{
							pos:        position{line: 2652, col: 22, offset: 92214},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2652, col: 27, offset: 92219},
						name: "goBaseType",
					},
				},
			},
		},
		{
			name: "goBaseType",
			pos:  position{line: 2653, col: 1, offset: 92230},
			expr: &ruleRefExpr{
				pos:  position{line: 2653, col: 18, offset: 92247},
				name: "goType",
			},
		},
		{
			name: "goFunctionType",
			pos:  position{line: 2659, col: 1, offset: 92280},
			expr: &seqExpr{
				pos: position{line: 2659, col: 20, offset: 92299},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2659, col: 20, offset: 92299},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2659, col: 27, offset: 92306},
						expr: &litMatcher{
							pos:        position{line: 2659, col: 27, offset: 92306},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2659, col: 32, offset: 92311},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goSignature",
			pos:  position{line: 2660, col: 1, offset: 92323},
			expr: &seqExpr{
				pos: position{line: 2660, col: 20, offset: 92342},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2660, col: 20, offset: 92342},
						name: "goParameters",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2660, col: 33, offset: 92355},
						expr: &litMatcher{
							pos:        position{line: 2660, col: 33, offset: 92355},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2660, col: 38, offset: 92360},
						expr: &ruleRefExpr{
							pos:  position{line: 2660, col: 38, offset: 92360},
							name: "goResult",
						},
					},
				},
			},
		},
		{
			name: "goResult",
			pos:  position{line: 2661, col: 1, offset: 92370},
			expr: &choiceExpr{
				pos: position{line: 2661, col: 20, offset: 92389},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2661, col: 20, offset: 92389},
						name: "goParameters",
					},
					&ruleRefExpr{
						pos:  position{line: 2661, col: 35, offset: 92404},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goParameters",
			pos:  position{line: 2662, col: 1, offset: 92411},
			expr: &seqExpr{
				pos: position{line: 2662, col: 20, offset: 92430},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2662, col: 20, offset: 92430},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2662, col: 24, offset: 92434},
						expr: &choiceExpr{
							pos: position{line: 3622, col: 20, offset: 123807},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3618, col: 36, offset: 123689},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3619, col: 36, offset: 123730},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2662, col: 28, offset: 92438},
						expr: &seqExpr{
							pos: position{line: 2662, col: 29, offset: 92439},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2662, col: 29, offset: 92439},
									name: "goParameterList",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2662, col: 45, offset: 92455},
									expr: &litMatcher{
										pos:        position{line: 2662, col: 45, offset: 92455},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2662, col: 50, offset: 92460},
									expr: &seqExpr{
										pos: position{line: 2662, col: 51, offset: 92461},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2662, col: 51, offset: 92461},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2662, col: 55, offset: 92465},
												expr: &choiceExpr{
													pos: position{line: 3622, col: 20, offset: 123807},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2662, col: 63, offset: 92473},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "goParameterList",
			pos:  position{line: 2663, col: 1, offset: 92477},
			expr: &seqExpr{
				pos: position{line: 2663, col: 20, offset: 92496},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2663, col: 20, offset: 92496},
						name: "goParameterDecl",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2663, col: 36, offset: 92512},
						expr: &litMatcher{
							pos:        position{line: 2663, col: 36, offset: 92512},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2663, col: 41, offset: 92517},
						expr: &seqExpr{
							pos: position{line: 2663, col: 42, offset: 92518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2663, col: 42, offset: 92518},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2663, col: 46, offset: 92522},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2663, col: 50, offset: 92526},
									name: "goParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParameterDecl",
			pos:  position{line: 2664, col: 1, offset: 92544},
			expr: &seqExpr{
				pos: position{line: 2664, col: 20, offset: 92563},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2664, col: 20, offset: 92563},
						expr: &seqExpr{
							pos: position{line: 2695, col: 21, offset: 93243},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2243, col: 20, offset: 77018},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 2260, col: 26, offset: 77272},
									expr: &charClassMatcher{
										pos:        position{line: 2243, col: 20, offset: 77018},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2695, col: 34, offset: 93256},
									expr: &litMatcher{
										pos:        position{line: 2695, col: 34, offset: 93256},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2695, col: 39, offset: 93261},
									expr: &seqExpr{
										pos: position{line: 2695, col: 40, offset: 93262},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2695, col: 40, offset: 93262},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2695, col: 44, offset: 93266},
												expr: &choiceExpr{
													pos: position{line: 3622, col: 20, offset: 123807},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 2243, col: 20, offset: 77018},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2260, col: 26, offset: 77272},
												expr: &charClassMatcher{
													pos:        position{line: 2243, col: 20, offset: 77018},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2664, col: 38, offset: 92581},
						expr: &litMatcher{
							pos:        position{line: 2664, col: 38, offset: 92581},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2664, col: 43, offset: 92586},
						expr: &litMatcher{
							pos:        position{line: 2664, col: 43, offset: 92586},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2664, col: 50, offset: 92593},
						expr: &litMatcher{
							pos:        position{line: 2664, col: 50, offset: 92593},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2664, col: 55, offset: 92598},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goInterfaceType",
			pos:  position{line: 2670, col: 1, offset: 92632},
			expr: &seqExpr{
				pos: position{line: 2670, col: 21, offset: 92652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2670, col: 21, offset: 92652},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2670, col: 33, offset: 92664},
						expr: &litMatcher{
							pos:        position{line: 2670, col: 33, offset: 92664},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2670, col: 38, offset: 92669},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2670, col: 42, offset: 92673},
						expr: &seqExpr{
							pos: position{line: 2670, col: 43, offset: 92674},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2670, col: 43, offset: 92674},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2670, col: 47, offset: 92678},
									name: "goInterfaceElem",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2670, col: 63, offset: 92694},
									expr: &litMatcher{
										pos:        position{line: 2670, col: 63, offset: 92694},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2670, col: 69, offset: 92700},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2670, col: 69, offset: 92700},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 3620, col: 36, offset: 123776},
											expr: &seqExpr{
												pos: position{line: 3620, col: 37, offset: 123777},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3620, col: 37, offset: 123777},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2670, col: 86, offset: 92717},
						expr: &choiceExpr{
							pos: position{line: 3622, col: 20, offset: 123807},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3618, col: 36, offset: 123689},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3619, col: 36, offset: 123730},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3619, col: 36, offset: 123730},
											expr: &litMatcher{
												pos:        position{line: 3619, col: 36, offset: 123730},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3619, col: 42, offset: 123736},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2670, col: 90, offset: 92721},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goInterfaceElem",
			pos:  position{line: 2671, col: 1, offset: 92725},
			expr: &choiceExpr{
				pos: position{line: 2671, col: 21, offset: 92745},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2671, col: 21, offset: 92745},
						name: "goMethodElem",
					},
					&ruleRefExpr{
						pos:  position{line: 2671, col: 36, offset: 92760},
						name: "goTypeElem",
					},
				},
			},
		},
		{
			name: "goMethodElem",
			pos:  position{line: 2672, col: 1, offset: 92771},
			expr: &seqExpr{
				pos: position{line: 2672, col: 21, offset: 92791},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2243, col: 20, offset: 77018},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 2260, col: 26, offset: 77272},
						expr: &charClassMatcher{
							pos:        position{line: 2243, col: 20, offset: 77018},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2672, col: 34, offset: 92804},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goTypeElem",
			pos:  position{line: 2674, col: 1, offset: 92849},
			expr: &seqExpr{
				pos: position{line: 2674, col: 21, offset: 92869},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2674, col: 21, offset: 92869},
						name: "goTypeTerm",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2674, col: 32, offset: 92880},
						expr: &seqExpr{
							pos: position{line: 2674, col: 33, offset: 92881},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2674, col: 33, offset: 92881},
									expr: &litMatcher{
										pos:        position{line: 2674, col: 33, offset: 92881},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 2674, col: 38, offset: 92886},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2674, col: 42, offset: 92890},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2674, col: 46, offset: 92894},
									name: "goTypeTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeTerm",
			pos:  position{line: 2675, col: 1, offset: 92907},
			expr: &choiceExpr{
				pos: position{line: 2675, col: 21, offset: 92927},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2675, col: 21, offset: 92927},
						name: "goType",
					},
					&ruleRefExpr{
						pos:  position{line: 2675, col: 30, offset: 92936},
						name: "goUnderlyingType",
					},
				},
			},
		},
		{
			name: "goUnderlyingType",
			pos:  position{line: 2676, col: 1, offset: 92953},
			expr: &seqExpr{
				pos: position{line: 2676, col: 21, offset: 92973},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2676, col: 21, offset: 92973},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2676, col: 25, offset: 92977},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goMapType",
			pos:  position{line: 2682, col: 1, offset: 93005},
			expr: &seqExpr{
				pos: position{line: 2682, col: 14, offset: 93018},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2682, col: 14, offset: 93018},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2682, col: 20, offset: 93024},
						expr: &litMatcher{
							pos:        position{line: 2682, col: 20, offset: 93024},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2682, col: 25, offset: 93029},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2682, col: 29, offset: 93033},
						expr: &litMatcher{
							pos:        position{line: 2682, col: 29, offset: 93033},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2682, col: 34, offset: 93038},
						name: "goKeyType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2682, col: 44, offset: 93048},
						expr: &litMatcher{
							pos:        position{line: 2682, col: 44, offset: 93048},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2682, col: 49, offset: 93053},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2682, col: 53, offset: 93057},
						expr: &litMatcher{
							pos:        position{line: 2682, col: 53, offset: 93057},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2682, col: 58, offset: 93062},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goKeyType",
			pos:  position{line: 2683, col: 1, offset: 93076},
			expr: &ruleRefExpr{
				pos:  position{line: 2683, col: 14, offset: 93089},
				name: "goType",
			},
		},
		{
			name: "goChannelType",
			pos:  position{line: 2689, col: 1, offset: 93121},
			expr: &seqExpr{
				pos: position{line: 2689, col: 18, offset: 93138},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2689, col: 18, offset: 93138},
						expr: &seqExpr{
							pos: position{line: 2689, col: 19, offset: 93139},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2689, col: 19, offset: 93139},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2689, col: 24, offset: 93144},
									expr: &litMatcher{
										pos:        position{line: 2689, col: 24, offset: 93144},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2689, col: 31, offset: 93151},
						val:        "chan",
						ignoreCase: false,
						want:       "\"chan\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2689, col: 38, offset: 93158},
						expr: &litMatcher{
							pos:        position{line: 2689, col: 38, offset: 93158},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2689, col: 43, offset: 93163},
						expr: &seqExpr{
							pos: position{line: 2689, col: 44, offset: 93164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2689, col: 44, offset: 93164},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2689, col: 49, offset: 93169},
									expr: &litMatcher{
										pos:        position{line: 2689, col: 49, offset: 93169},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2689, col: 56, offset: 93176},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "Mixin",
			pos:  position{line: 2749, col: 1, offset: 95626},
			expr: &choiceExpr{
				pos: position{line: 2749, col: 10, offset: 95635},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2749, col: 10, offset: 95635},
						run: (*parser).callonMixin2,
						expr: &seqExpr{
							pos: position{line: 2749, col: 10, offset: 95635},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2749, col: 10, offset: 95635},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 2749, col: 18, offset: 95643},
									expr: &litMatcher{
										pos:        position{line: 2749, col: 18, offset: 95643},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2749, col: 23, offset: 95648},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 711, col: 14, offset: 21839},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 711, col: 14, offset: 21839},
												run: (*parser).callonMixin9,
												expr: &labeledExpr{
													pos:   position{line: 711, col: 14, offset: 21839},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21284},
																run: (*parser).callonMixin12,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21284},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2260, col: 17, offset: 77263},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2260, col: 26, offset: 77272},
																				expr: &charClassMatcher{
																					pos:        position{line: 2243, col: 20, offset: 77018},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21378},
																run: (*parser).callonMixin18,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21378},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21378},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21386},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21386},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21391},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21392},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21392},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21401},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21411},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21422},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonMixin31,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 713, col: 5, offset: 21881},
												run: (*parser).callonMixin37,
												expr: &seqExpr{
													pos: position{line: 713, col: 5, offset: 21881},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 713, col: 5, offset: 21881},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonMixin40,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 713, col: 14, offset: 21890},
															expr: &choiceExpr{
																pos: position{line: 713, col: 16, offset: 21892},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3606, col: 12, offset: 123342},
																				expr: &charClassMatcher{
																					pos:        position{line: 3618, col: 36, offset: 123689},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3606, col: 16, offset: 123346},
																								expr: &litMatcher{
																									pos:        position{line: 3606, col: 16, offset: 123346},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3606, col: 22, offset: 123352},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3605, col: 12, offset: 123328},
																						expr: &anyMatcher{
																							line: 3605, col: 13, offset: 123329,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 713, col: 22, offset: 21898},
																		val:        "[:!=()]",
																		chars:      []rune{':', '!', '=', '(', ')'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 724, col: 5, offset: 22230},
												run: (*parser).callonMixin59,
												expr: &seqExpr{
													pos: position{line: 724, col: 5, offset: 22230},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 724, col: 5, offset: 22230},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 724, col: 12, offset: 22237},
																expr: &charClassMatcher{
																	pos:        position{line: 724, col: 12, offset: 22237},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 724, col: 29, offset: 22254},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonMixin65,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2749, col: 39, offset: 95664},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2749, col: 47, offset: 95672},
										expr: &ruleRefExpr{
											pos:  position{line: 2749, col: 47, offset: 95672},
											name: "mixinParamList",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2749, col: 63, offset: 95688},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2749, col: 69, offset: 95694},
										name: "Beaitb",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2759, col: 5, offset: 95988},
						run: (*parser).callonMixin76,
						expr: &seqExpr{
							pos: position{line: 2759, col: 5, offset: 95988},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2759, col: 5, offset: 95988},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&labeledExpr{
									pos:   position{line: 2759, col: 13, offset: 95996},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonMixin80,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2759, col: 22, offset: 96005},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2759, col: 28, offset: 96011},
										name: "Beaitb",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamList",
			pos:  position{line: 2775, col: 1, offset: 96424},
			expr: &choiceExpr{
				pos: position{line: 2775, col: 19, offset: 96442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2775, col: 19, offset: 96442},
						run: (*parser).callonmixinParamList2,
						expr: &seqExpr{
							pos: position{line: 2775, col: 19, offset: 96442},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2775, col: 19, offset: 96442},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2775, col: 23, offset: 96446},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2775, col: 27, offset: 96450},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2775, col: 35, offset: 96458},
										expr: &ruleRefExpr{
											pos:  position{line: 2775, col: 35, offset: 96458},
											name: "mixinParams",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2775, col: 48, offset: 96471},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2775, col: 51, offset: 96474},
									expr: &seqExpr{
										pos: position{line: 2775, col: 52, offset: 96475},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2775, col: 52, offset: 96475},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2775, col: 56, offset: 96479},
												expr: &choiceExpr{
													pos: position{line: 3622, col: 20, offset: 123807},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2775, col: 62, offset: 96485},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonmixinParamList28,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2781, col: 5, offset: 96686},
						run: (*parser).callonmixinParamList30,
						expr: &seqExpr{
							pos: position{line: 2781, col: 5, offset: 96686},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2781, col: 5, offset: 96686},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2781, col: 9, offset: 96690},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2781, col: 13, offset: 96694},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2781, col: 21, offset: 96702},
										expr: &ruleRefExpr{
											pos:  position{line: 2781, col: 21, offset: 96702},
											name: "mixinParams",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2781, col: 34, offset: 96715},
									expr: &seqExpr{
										pos: position{line: 2781, col: 35, offset: 96716},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2781, col: 35, offset: 96716},
												expr: &charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2781, col: 38, offset: 96719},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2781, col: 44, offset: 96725},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonmixinParamList49,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParams",
			pos:  position{line: 2800, col: 1, offset: 97270},
			expr: &actionExpr{
				pos: position{line: 2800, col: 16, offset: 97285},
				run: (*parser).callonmixinParams1,
				expr: &seqExpr{
					pos: position{line: 2800, col: 16, offset: 97285},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2800, col: 16, offset: 97285},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2800, col: 23, offset: 97292},
								name: "mixinParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 2800, col: 34, offset: 97303},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2800, col: 40, offset: 97309},
								expr: &seqExpr{
									pos: position{line: 2800, col: 41, offset: 97310},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2800, col: 41, offset: 97310},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2800, col: 44, offset: 97313},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2800, col: 48, offset: 97317},
											expr: &choiceExpr{
												pos: position{line: 3622, col: 20, offset: 123807},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																expr: &litMatcher{
																	pos:        position{line: 3619, col: 36, offset: 123730},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3619, col: 42, offset: 123736},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2800, col: 52, offset: 97321},
											name: "mixinParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParam",
			pos:  position{line: 2811, col: 1, offset: 97599},
			expr: &actionExpr{
				pos: position{line: 2811, col: 15, offset: 97613},
				run: (*parser).callonmixinParam1,
				expr: &seqExpr{
					pos: position{line: 2811, col: 15, offset: 97613},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2811, col: 15, offset: 97613},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 739, col: 20, offset: 22700},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 739, col: 20, offset: 22700},
										run: (*parser).callonmixinParam5,
										expr: &labeledExpr{
											pos:   position{line: 739, col: 20, offset: 22700},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21284},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														run: (*parser).callonmixinParam8,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21284},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2260, col: 17, offset: 77263},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2260, col: 26, offset: 77272},
																		expr: &charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														run: (*parser).callonmixinParam14,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21378},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21378},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21386},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21386},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21391},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21392},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21392},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21401},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21411},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21422},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonmixinParam27,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 741, col: 5, offset: 22742},
										run: (*parser).callonmixinParam33,
										expr: &seqExpr{
											pos: position{line: 741, col: 5, offset: 22742},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 741, col: 5, offset: 22742},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 741, col: 12, offset: 22749},
														expr: &charClassMatcher{
															pos:        position{line: 741, col: 12, offset: 22749},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 741, col: 29, offset: 22766},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonmixinParam39,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2811, col: 37, offset: 97635},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).callonmixinParam46,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2811, col: 46, offset: 97644},
							label: "typeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2811, col: 52, offset: 97650},
								expr: &seqExpr{
									pos: position{line: 2811, col: 53, offset: 97651},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2811, col: 53, offset: 97651},
											expr: &litMatcher{
												pos:        position{line: 2811, col: 53, offset: 97651},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2811, col: 58, offset: 97656},
											name: "GoType",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2811, col: 67, offset: 97665},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2811, col: 76, offset: 97674},
								expr: &seqExpr{
									pos: position{line: 2811, col: 77, offset: 97675},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2811, col: 77, offset: 97675},
											expr: &litMatcher{
												pos:        position{line: 2811, col: 77, offset: 97675},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2811, col: 82, offset: 97680},
											name: "mixinParamDefault",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamDefault",
			pos:  position{line: 2849, col: 1, offset: 98900},
			expr: &choiceExpr{
				pos: position{line: 2849, col: 22, offset: 98921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2849, col: 22, offset: 98921},
						run: (*parser).callonmixinParamDefault2,
						expr: &seqExpr{
							pos: position{line: 2849, col: 22, offset: 98921},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2849, col: 22, offset: 98921},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2849, col: 26, offset: 98925},
									expr: &litMatcher{
										pos:        position{line: 2849, col: 26, offset: 98925},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2849, col: 31, offset: 98930},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 2849, col: 37, offset: 98936},
										name: "GoExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2854, col: 5, offset: 99077},
						run: (*parser).callonmixinParamDefault9,
						expr: &seqExpr{
							pos: position{line: 2854, col: 5, offset: 99077},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2854, col: 5, offset: 99077},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 2854, col: 9, offset: 99081},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonmixinParamDefault13,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Return",
			pos:  position{line: 2879, col: 1, offset: 99873},
			expr: &actionExpr{
				pos: position{line: 2879, col: 11, offset: 99883},
				run: (*parser).callonReturn1,
				expr: &seqExpr{
					pos: position{line: 2879, col: 11, offset: 99883},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2879, col: 11, offset: 99883},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&labeledExpr{
							pos:   position{line: 2879, col: 20, offset: 99892},
							label: "errExprI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2879, col: 29, offset: 99901},
								expr: &ruleRefExpr{
									pos:  position{line: 2879, col: 29, offset: 99901},
									name: "Expression",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2879, col: 41, offset: 99913},
							expr: &actionExpr{
								pos: position{line: 1310, col: 21, offset: 42122},
								run: (*parser).callonReturn8,
								expr: &oneOrMoreExpr{
									pos: position{line: 1310, col: 21, offset: 42122},
									expr: &charClassMatcher{
										pos:        position{line: 3607, col: 12, offset: 123375},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							expr: &charClassMatcher{
								pos:        position{line: 3618, col: 36, offset: 123689},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3606, col: 16, offset: 123346},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											expr: &litMatcher{
												pos:        position{line: 3606, col: 16, offset: 123346},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3606, col: 22, offset: 123352},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3605, col: 12, offset: 123328},
									expr: &anyMatcher{
										line: 3605, col: 13, offset: 123329,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCall",
			pos:  position{line: 2890, col: 1, offset: 100236},
			expr: &actionExpr{
				pos: position{line: 2890, col: 14, offset: 100249},
				run: (*parser).callonMixinCall1,
				expr: &seqExpr{
					pos: position{line: 2890, col: 14, offset: 100249},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2890, col: 14, offset: 100249},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 2890, col: 18, offset: 100253},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2890, col: 29, offset: 100264},
								expr: &seqExpr{
									pos: position{line: 2890, col: 30, offset: 100265},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21284},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21284},
													run: (*parser).callonMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21284},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2260, col: 17, offset: 77263},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2260, col: 26, offset: 77272},
																	expr: &charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21378},
													run: (*parser).callonMixinCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21378},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21386},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21386},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21386},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21391},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21392},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21392},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21392},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21401},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21411},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21422},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2890, col: 36, offset: 100271},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2890, col: 42, offset: 100277},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21839},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21839},
										run: (*parser).callonMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21839},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21284},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														run: (*parser).callonMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21284},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2260, col: 17, offset: 77263},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2260, col: 26, offset: 77272},
																		expr: &charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														run: (*parser).callonMixinCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21378},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21378},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21386},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21386},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21391},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21392},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21392},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21401},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21411},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21422},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21881},
										run: (*parser).callonMixinCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21881},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21881},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21890},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21892},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21898},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonMixinCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 29, offset: 22254},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2890, col: 58, offset: 100293},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2890, col: 64, offset: 100299},
								expr: &ruleRefExpr{
									pos:  position{line: 2890, col: 64, offset: 100299},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2890, col: 78, offset: 100313},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 2890, col: 84, offset: 100319},
								name: "mixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMixinCall",
			pos:  position{line: 2902, col: 1, offset: 100613},
			expr: &actionExpr{
				pos: position{line: 2902, col: 20, offset: 100632},
				run: (*parser).callonInlineMixinCall1,
				expr: &seqExpr{
					pos: position{line: 2902, col: 20, offset: 100632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2902, col: 20, offset: 100632},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 2902, col: 24, offset: 100636},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2902, col: 35, offset: 100647},
								expr: &seqExpr{
									pos: position{line: 2902, col: 36, offset: 100648},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21284},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21284},
													run: (*parser).callonInlineMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21284},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2260, col: 17, offset: 77263},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2260, col: 26, offset: 77272},
																	expr: &charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21378},
													run: (*parser).callonInlineMixinCall14,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21378},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21386},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21386},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21386},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21391},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21392},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21392},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21392},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21401},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21411},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21422},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonInlineMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2902, col: 42, offset: 100654},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2902, col: 48, offset: 100660},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21839},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21839},
										run: (*parser).callonInlineMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21839},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21284},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														run: (*parser).callonInlineMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21284},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2260, col: 17, offset: 77263},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2260, col: 26, offset: 77272},
																		expr: &charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														run: (*parser).callonInlineMixinCall45,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21378},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21378},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21386},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21386},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21391},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21392},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21392},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21401},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21411},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21422},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonInlineMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21881},
										run: (*parser).callonInlineMixinCall64,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21881},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21881},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonInlineMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21890},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21892},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21898},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonInlineMixinCall86,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 29, offset: 22254},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonInlineMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2902, col: 64, offset: 100676},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2902, col: 70, offset: 100682},
								expr: &ruleRefExpr{
									pos:  position{line: 2902, col: 70, offset: 100682},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2902, col: 94, offset: 100706},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 2902, col: 100, offset: 100712},
								name: "singleLineMixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgList",
			pos:  position{line: 2914, col: 1, offset: 101016},
			expr: &choiceExpr{
				pos: position{line: 2914, col: 17, offset: 101032},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2914, col: 17, offset: 101032},
						run: (*parser).callonmixinArgList2,
						expr: &seqExpr{
							pos: position{line: 2914, col: 17, offset: 101032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2914, col: 17, offset: 101032},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2914, col: 21, offset: 101036},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2914, col: 25, offset: 101040},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2914, col: 31, offset: 101046},
										expr: &ruleRefExpr{
											pos:  position{line: 2914, col: 31, offset: 101046},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2914, col: 42, offset: 101057},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2914, col: 45, offset: 101060},
									expr: &seqExpr{
										pos: position{line: 2914, col: 46, offset: 101061},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2914, col: 46, offset: 101061},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2914, col: 50, offset: 101065},
												expr: &choiceExpr{
													pos: position{line: 3622, col: 20, offset: 123807},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3619, col: 36, offset: 123730},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2914, col: 56, offset: 101071},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonmixinArgList28,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2920, col: 5, offset: 101270},
						run: (*parser).callonmixinArgList30,
						expr: &seqExpr{
							pos: position{line: 2920, col: 5, offset: 101270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2920, col: 5, offset: 101270},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2920, col: 9, offset: 101274},
									expr: &choiceExpr{
										pos: position{line: 3622, col: 20, offset: 123807},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3619, col: 36, offset: 123730},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														expr: &litMatcher{
															pos:        position{line: 3619, col: 36, offset: 123730},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3619, col: 42, offset: 123736},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2920, col: 13, offset: 101278},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2920, col: 19, offset: 101284},
										expr: &ruleRefExpr{
											pos:  position{line: 2920, col: 19, offset: 101284},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2920, col: 30, offset: 101295},
									expr: &seqExpr{
										pos: position{line: 2920, col: 31, offset: 101296},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2920, col: 31, offset: 101296},
												expr: &charClassMatcher{
													pos:        position{line: 3618, col: 36, offset: 123689},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2920, col: 34, offset: 101299},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2920, col: 40, offset: 101305},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonmixinArgList49,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgList",
			pos:  position{line: 2938, col: 1, offset: 101841},
			expr: &choiceExpr{
				pos: position{line: 2938, col: 27, offset: 101867},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2938, col: 27, offset: 101867},
						run: (*parser).callonsingleLineMixinArgList2,
						expr: &seqExpr{
							pos: position{line: 2938, col: 27, offset: 101867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2938, col: 27, offset: 101867},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2938, col: 31, offset: 101871},
									expr: &litMatcher{
										pos:        position{line: 2938, col: 31, offset: 101871},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2938, col: 36, offset: 101876},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2938, col: 42, offset: 101882},
										expr: &ruleRefExpr{
											pos:  position{line: 2938, col: 42, offset: 101882},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2938, col: 63, offset: 101903},
									expr: &litMatcher{
										pos:        position{line: 2938, col: 63, offset: 101903},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2938, col: 68, offset: 101908},
									expr: &seqExpr{
										pos: position{line: 2938, col: 69, offset: 101909},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2938, col: 69, offset: 101909},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2938, col: 73, offset: 101913},
												expr: &litMatcher{
													pos:        position{line: 2938, col: 73, offset: 101913},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2938, col: 80, offset: 101920},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3629, col: 12, offset: 124065},
										run: (*parser).callonsingleLineMixinArgList18,
										expr: &litMatcher{
											pos:        position{line: 3629, col: 12, offset: 124065},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2944, col: 5, offset: 102119},
						run: (*parser).callonsingleLineMixinArgList20,
						expr: &seqExpr{
							pos: position{line: 2944, col: 5, offset: 102119},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2944, col: 5, offset: 102119},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2944, col: 9, offset: 102123},
									expr: &litMatcher{
										pos:        position{line: 2944, col: 9, offset: 102123},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2944, col: 14, offset: 102128},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2944, col: 20, offset: 102134},
										expr: &ruleRefExpr{
											pos:  position{line: 2944, col: 20, offset: 102134},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2944, col: 41, offset: 102155},
									expr: &seqExpr{
										pos: position{line: 2944, col: 42, offset: 102156},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2944, col: 42, offset: 102156},
												expr: &litMatcher{
													pos:        position{line: 2944, col: 42, offset: 102156},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 2944, col: 47, offset: 102161},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2944, col: 53, offset: 102167},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsingleLineMixinArgList34,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgs",
			pos:  position{line: 2963, col: 1, offset: 102704},
			expr: &actionExpr{
				pos: position{line: 2963, col: 14, offset: 102717},
				run: (*parser).callonmixinArgs1,
				expr: &seqExpr{
					pos: position{line: 2963, col: 14, offset: 102717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2963, col: 14, offset: 102717},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2963, col: 21, offset: 102724},
								name: "mixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 2963, col: 30, offset: 102733},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2963, col: 36, offset: 102739},
								expr: &seqExpr{
									pos: position{line: 2963, col: 37, offset: 102740},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2963, col: 37, offset: 102740},
											expr: &charClassMatcher{
												pos:        position{line: 3618, col: 36, offset: 123689},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2963, col: 40, offset: 102743},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2963, col: 44, offset: 102747},
											expr: &choiceExpr{
												pos: position{line: 3622, col: 20, offset: 123807},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																expr: &litMatcher{
																	pos:        position{line: 3619, col: 36, offset: 123730},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3619, col: 42, offset: 123736},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2963, col: 48, offset: 102751},
											name: "mixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgs",
			pos:  position{line: 2973, col: 1, offset: 103012},
			expr: &actionExpr{
				pos: position{line: 2973, col: 24, offset: 103035},
				run: (*parser).callonsingleLineMixinArgs1,
				expr: &seqExpr{
					pos: position{line: 2973, col: 24, offset: 103035},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2973, col: 24, offset: 103035},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2973, col: 31, offset: 103042},
								name: "singleLineMixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 2973, col: 50, offset: 103061},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2973, col: 56, offset: 103067},
								expr: &seqExpr{
									pos: position{line: 2973, col: 57, offset: 103068},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2973, col: 57, offset: 103068},
											expr: &litMatcher{
												pos:        position{line: 2973, col: 57, offset: 103068},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2973, col: 62, offset: 103073},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2973, col: 66, offset: 103077},
											expr: &litMatcher{
												pos:        position{line: 2973, col: 66, offset: 103077},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2973, col: 71, offset: 103082},
											name: "singleLineMixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArg",
			pos:  position{line: 2984, col: 1, offset: 103354},
			expr: &choiceExpr{
				pos: position{line: 2984, col: 13, offset: 103366},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2984, col: 13, offset: 103366},
						run: (*parser).callonmixinArg2,
						expr: &seqExpr{
							pos: position{line: 2984, col: 13, offset: 103366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2984, col: 13, offset: 103366},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 739, col: 20, offset: 22700},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 739, col: 20, offset: 22700},
												run: (*parser).callonmixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 739, col: 20, offset: 22700},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21284},
																run: (*parser).callonmixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21284},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2260, col: 17, offset: 77263},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2260, col: 26, offset: 77272},
																				expr: &charClassMatcher{
																					pos:        position{line: 2243, col: 20, offset: 77018},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21378},
																run: (*parser).callonmixinArg15,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21378},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21378},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21386},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21386},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21391},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21392},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21392},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21401},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21411},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21422},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonmixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 741, col: 5, offset: 22742},
												run: (*parser).callonmixinArg34,
												expr: &seqExpr{
													pos: position{line: 741, col: 5, offset: 22742},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 741, col: 5, offset: 22742},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 741, col: 12, offset: 22749},
																expr: &charClassMatcher{
																	pos:        position{line: 741, col: 12, offset: 22749},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 741, col: 29, offset: 22766},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonmixinArg40,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2984, col: 35, offset: 103388},
									expr: &litMatcher{
										pos:        position{line: 2984, col: 35, offset: 103388},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 2984, col: 40, offset: 103393},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2984, col: 44, offset: 103397},
									expr: &litMatcher{
										pos:        position{line: 2984, col: 44, offset: 103397},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2984, col: 49, offset: 103402},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 2984, col: 54, offset: 103407},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2989, col: 5, offset: 103534},
						run: (*parser).callonmixinArg53,
						expr: &seqExpr{
							pos: position{line: 2989, col: 5, offset: 103534},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2989, col: 5, offset: 103534},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 739, col: 20, offset: 22700},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 739, col: 20, offset: 22700},
												run: (*parser).callonmixinArg57,
												expr: &labeledExpr{
													pos:   position{line: 739, col: 20, offset: 22700},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21284},
																run: (*parser).callonmixinArg60,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21284},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2260, col: 17, offset: 77263},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2260, col: 26, offset: 77272},
																				expr: &charClassMatcher{
																					pos:        position{line: 2243, col: 20, offset: 77018},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21378},
																run: (*parser).callonmixinArg66,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21378},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21378},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21386},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21386},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21391},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21392},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21392},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21401},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21411},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21422},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonmixinArg79,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 741, col: 5, offset: 22742},
												run: (*parser).callonmixinArg85,
												expr: &seqExpr{
													pos: position{line: 741, col: 5, offset: 22742},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 741, col: 5, offset: 22742},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 741, col: 12, offset: 22749},
																expr: &charClassMatcher{
																	pos:        position{line: 741, col: 12, offset: 22749},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 741, col: 29, offset: 22766},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonmixinArg91,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2989, col: 27, offset: 103556},
									expr: &seqExpr{
										pos: position{line: 2989, col: 28, offset: 103557},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2989, col: 28, offset: 103557},
												expr: &litMatcher{
													pos:        position{line: 2989, col: 28, offset: 103557},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 2989, col: 33, offset: 103562},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2989, col: 39, offset: 103568},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonmixinArg103,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArg",
			pos:  position{line: 3004, col: 1, offset: 104062},
			expr: &choiceExpr{
				pos: position{line: 3004, col: 23, offset: 104084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3004, col: 23, offset: 104084},
						run: (*parser).callonsingleLineMixinArg2,
						expr: &seqExpr{
							pos: position{line: 3004, col: 23, offset: 104084},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3004, col: 23, offset: 104084},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 739, col: 20, offset: 22700},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 739, col: 20, offset: 22700},
												run: (*parser).callonsingleLineMixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 739, col: 20, offset: 22700},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21284},
																run: (*parser).callonsingleLineMixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21284},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2260, col: 17, offset: 77263},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2260, col: 26, offset: 77272},
																				expr: &charClassMatcher{
																					pos:        position{line: 2243, col: 20, offset: 77018},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21378},
																run: (*parser).callonsingleLineMixinArg15,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21378},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21378},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21386},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21386},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21391},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21392},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21392},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21401},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21411},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21422},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonsingleLineMixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 741, col: 5, offset: 22742},
												run: (*parser).callonsingleLineMixinArg34,
												expr: &seqExpr{
													pos: position{line: 741, col: 5, offset: 22742},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 741, col: 5, offset: 22742},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 741, col: 12, offset: 22749},
																expr: &charClassMatcher{
																	pos:        position{line: 741, col: 12, offset: 22749},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 741, col: 29, offset: 22766},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonsingleLineMixinArg40,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3004, col: 45, offset: 104106},
									expr: &litMatcher{
										pos:        position{line: 3004, col: 45, offset: 104106},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 3004, col: 50, offset: 104111},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3004, col: 54, offset: 104115},
									expr: &litMatcher{
										pos:        position{line: 3004, col: 54, offset: 104115},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3004, col: 59, offset: 104120},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 3004, col: 64, offset: 104125},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3009, col: 5, offset: 104262},
						run: (*parser).callonsingleLineMixinArg53,
						expr: &seqExpr{
							pos: position{line: 3009, col: 5, offset: 104262},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3009, col: 5, offset: 104262},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 739, col: 20, offset: 22700},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 739, col: 20, offset: 22700},
												run: (*parser).callonsingleLineMixinArg57,
												expr: &labeledExpr{
													pos:   position{line: 739, col: 20, offset: 22700},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 697, col: 10, offset: 21284},
																run: (*parser).callonsingleLineMixinArg60,
																expr: &labeledExpr{
																	pos:   position{line: 697, col: 10, offset: 21284},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2260, col: 17, offset: 77263},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2260, col: 26, offset: 77272},
																				expr: &charClassMatcher{
																					pos:        position{line: 2243, col: 20, offset: 77018},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 699, col: 5, offset: 21378},
																run: (*parser).callonsingleLineMixinArg66,
																expr: &seqExpr{
																	pos: position{line: 699, col: 5, offset: 21378},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 699, col: 5, offset: 21378},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 699, col: 13, offset: 21386},
																						expr: &litMatcher{
																							pos:        position{line: 699, col: 13, offset: 21386},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 699, col: 18, offset: 21391},
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 699, col: 19, offset: 21392},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 699, col: 19, offset: 21392},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 699, col: 28, offset: 21401},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 38, offset: 21411},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 699, col: 49, offset: 21422},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonsingleLineMixinArg79,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 741, col: 5, offset: 22742},
												run: (*parser).callonsingleLineMixinArg85,
												expr: &seqExpr{
													pos: position{line: 741, col: 5, offset: 22742},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 741, col: 5, offset: 22742},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 741, col: 12, offset: 22749},
																expr: &charClassMatcher{
																	pos:        position{line: 741, col: 12, offset: 22749},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 741, col: 29, offset: 22766},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonsingleLineMixinArg91,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3009, col: 27, offset: 104284},
									expr: &seqExpr{
										pos: position{line: 3009, col: 28, offset: 104285},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3009, col: 28, offset: 104285},
												expr: &litMatcher{
													pos:        position{line: 3009, col: 28, offset: 104285},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3009, col: 33, offset: 104290},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3009, col: 39, offset: 104296},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonsingleLineMixinArg103,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallBody",
			pos:  position{line: 3025, col: 1, offset: 104791},
			expr: &choiceExpr{
				pos: position{line: 3025, col: 18, offset: 104808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3025, col: 18, offset: 104808},
						run: (*parser).callonmixinCallBody2,
						expr: &labeledExpr{
							pos:   position{line: 3025, col: 18, offset: 104808},
							label: "shI",
							expr: &ruleRefExpr{
								pos:  position{line: 3025, col: 22, offset: 104812},
								name: "MixinMainBlockShorthand",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3027, col: 5, offset: 104905},
						name: "Beaitb",
					},
				},
			},
		},
		{
			name: "singleLineMixinCallBody",
			pos:  position{line: 3028, col: 1, offset: 104912},
			expr: &ruleRefExpr{
				pos:  position{line: 3028, col: 28, offset: 104939},
				name: "Beait",
			},
		},
		{
			name: "MixinMainBlockShorthand",
			pos:  position{line: 3034, col: 1, offset: 105147},
			expr: &choiceExpr{
				pos: position{line: 3034, col: 28, offset: 105174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3034, col: 28, offset: 105174},
						run: (*parser).callonMixinMainBlockShorthand2,
						expr: &seqExpr{
							pos: position{line: 3034, col: 28, offset: 105174},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3034, col: 28, offset: 105174},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3034, col: 33, offset: 105179},
									expr: &actionExpr{
										pos: position{line: 1310, col: 21, offset: 42122},
										run: (*parser).callonMixinMainBlockShorthand6,
										expr: &oneOrMoreExpr{
											pos: position{line: 1310, col: 21, offset: 42122},
											expr: &charClassMatcher{
												pos:        position{line: 3607, col: 12, offset: 123375},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3034, col: 55, offset: 105201},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 3034, col: 61, offset: 105207},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3039, col: 5, offset: 105330},
						run: (*parser).callonMixinMainBlockShorthand20,
						expr: &seqExpr{
							pos: position{line: 3039, col: 5, offset: 105330},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3039, col: 5, offset: 105330},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3039, col: 10, offset: 105335},
									expr: &actionExpr{
										pos: position{line: 1310, col: 21, offset: 42122},
										run: (*parser).callonMixinMainBlockShorthand24,
										expr: &oneOrMoreExpr{
											pos: position{line: 1310, col: 21, offset: 42122},
											expr: &charClassMatcher{
												pos:        position{line: 3607, col: 12, offset: 123375},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3039, col: 28, offset: 105353},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonMixinMainBlockShorthand28,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Func",
			pos:  position{line: 3241, col: 1, offset: 111306},
			expr: &choiceExpr{
				pos: position{line: 3241, col: 9, offset: 111314},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3241, col: 9, offset: 111314},
						run: (*parser).callonFunc2,
						expr: &seqExpr{
							pos: position{line: 3241, col: 9, offset: 111314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3241, col: 9, offset: 111314},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 3241, col: 16, offset: 111321},
									expr: &litMatcher{
										pos:        position{line: 3241, col: 16, offset: 111321},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3241, col: 21, offset: 111326},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 2212, col: 12, offset: 75917},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2212, col: 12, offset: 75917},
												run: (*parser).callonFunc9,
												expr: &labeledExpr{
													pos:   position{line: 2212, col: 12, offset: 75917},
													label: "ident",
													expr: &seqExpr{
														pos: position{line: 2260, col: 17, offset: 77263},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2243, col: 20, offset: 77018},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 2260, col: 26, offset: 77272},
																expr: &charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2214, col: 5, offset: 76011},
												run: (*parser).callonFunc15,
												expr: &seqExpr{
													pos: position{line: 2214, col: 5, offset: 76011},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 2214, col: 5, offset: 76011},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2214, col: 13, offset: 76019},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2214, col: 13, offset: 76019},
																		expr: &litMatcher{
																			pos:        position{line: 2214, col: 13, offset: 76019},
																			val:        "$",
																			ignoreCase: false,
																			want:       "\"$\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2214, col: 18, offset: 76024},
																		expr: &choiceExpr{
																			pos: position{line: 2214, col: 19, offset: 76025},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2214, col: 19, offset: 76025},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 19, offset: 76025},
																							val:        "[\\pNd]",
																							classes:    []*unicode.RangeTable{rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2214, col: 28, offset: 76034},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2214, col: 38, offset: 76044},
																					val:        "[_-\\pL]",
																					chars:      []rune{'_', '-'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2214, col: 49, offset: 76055},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3609, col: 8, offset: 123391},
																run: (*parser).callonFunc28,
																expr: &choiceExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			expr: &anyMatcher{
																				line: 3609, col: 10, offset: 123393,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3609, col: 14, offset: 123397},
																			expr: &anyMatcher{
																				line: 3609, col: 15, offset: 123398,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3241, col: 35, offset: 111340},
									label: "paramsI",
									expr: &choiceExpr{
										pos: position{line: 3242, col: 5, offset: 111354},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3242, col: 5, offset: 111354},
												run: (*parser).callonFunc36,
												expr: &seqExpr{
													pos: position{line: 3242, col: 5, offset: 111354},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3242, col: 5, offset: 111354},
															label: "lParenPosI",
															expr: &actionExpr{
																pos: position{line: 3628, col: 12, offset: 124027},
																run: (*parser).callonFunc39,
																expr: &litMatcher{
																	pos:        position{line: 3628, col: 12, offset: 124027},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3242, col: 24, offset: 111373},
															label: "paramsI",
															expr: &choiceExpr{
																pos: position{line: 3243, col: 9, offset: 111391},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3243, col: 9, offset: 111391},
																		run: (*parser).callonFunc43,
																		expr: &seqExpr{
																			pos: position{line: 3243, col: 9, offset: 111391},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3243, col: 9, offset: 111391},
																					expr: &choiceExpr{
																						pos: position{line: 3622, col: 20, offset: 123807},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 3618, col: 36, offset: 123689},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&seqExpr{
																								pos: position{line: 3619, col: 36, offset: 123730},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3619, col: 36, offset: 123730},
																										expr: &litMatcher{
																											pos:        position{line: 3619, col: 36, offset: 123730},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 3619, col: 42, offset: 123736},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3243, col: 13, offset: 111395},
																					label: "paramsI",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 3243, col: 21, offset: 111403},
																						expr: &ruleRefExpr{
																							pos:  position{line: 3243, col: 21, offset: 111403},
																							name: "funcParamList",
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3243, col: 36, offset: 111418},
																					expr: &litMatcher{
																						pos:        position{line: 3243, col: 36, offset: 111418},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 3243, col: 41, offset: 111423},
																					expr: &seqExpr{
																						pos: position{line: 3243, col: 42, offset: 111424},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3243, col: 42, offset: 111424},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 3243, col: 46, offset: 111428},
																								expr: &choiceExpr{
																									pos: position{line: 3622, col: 20, offset: 123807},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 3618, col: 36, offset: 123689},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 3619, col: 36, offset: 123730},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3619, col: 36, offset: 123730},
																													expr: &litMatcher{
																														pos:        position{line: 3619, col: 36, offset: 123730},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3619, col: 42, offset: 123736},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3245, col: 13, offset: 111512},
																		run: (*parser).callonFunc67,
																		expr: &seqExpr{
																			pos: position{line: 3245, col: 13, offset: 111512},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3245, col: 13, offset: 111512},
																					expr: &charClassMatcher{
																						pos:        position{line: 3245, col: 13, offset: 111512},
																						val:        "[^)]",
																						chars:      []rune{')'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3245, col: 19, offset: 111518},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3609, col: 8, offset: 123391},
																						run: (*parser).callonFunc72,
																						expr: &choiceExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3609, col: 9, offset: 123392},
																									expr: &anyMatcher{
																										line: 3609, col: 10, offset: 123393,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3609, col: 14, offset: 123397},
																									expr: &anyMatcher{
																										line: 3609, col: 15, offset: 123398,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3255, col: 7, offset: 111911},
															label: "rParenPosI",
															expr: &actionExpr{
																pos: position{line: 3629, col: 12, offset: 124065},
																run: (*parser).callonFunc79,
																expr: &litMatcher{
																	pos:        position{line: 3629, col: 12, offset: 124065},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3261, col: 9, offset: 112131},
												run: (*parser).callonFunc81,
												expr: &zeroOrMoreExpr{
													pos: position{line: 3261, col: 9, offset: 112131},
													expr: &charClassMatcher{
														pos:        position{line: 3607, col: 12, offset: 123375},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3280, col: 5, offset: 112675},
						run: (*parser).callonFunc93,
						expr: &seqExpr{
							pos: position{line: 3280, col: 5, offset: 112675},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3280, col: 5, offset: 112675},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&labeledExpr{
									pos:   position{line: 3280, col: 12, offset: 112682},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonFunc97,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParamList",
			pos:  position{line: 3292, col: 1, offset: 113031},
			expr: &choiceExpr{
				pos: position{line: 3292, col: 18, offset: 113048},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3292, col: 18, offset: 113048},
						name: "funcOtherParamList",
					},
					&ruleRefExpr{
						pos:  position{line: 3292, col: 39, offset: 113069},
						name: "funcOnlyVariadicParamList",
					},
				},
			},
		},
		{
			name: "funcOnlyVariadicParamList",
			pos:  position{line: 3293, col: 1, offset: 113095},
			expr: &actionExpr{
				pos: position{line: 3293, col: 30, offset: 113124},
				run: (*parser).callonfuncOnlyVariadicParamList1,
				expr: &labeledExpr{
					pos:   position{line: 3293, col: 30, offset: 113124},
					label: "variadicI",
					expr: &ruleRefExpr{
						pos:  position{line: 3293, col: 40, offset: 113134},
						name: "funcVariadicParam",
					},
				},
			},
		},
		{
			name: "funcOtherParamList",
			pos:  position{line: 3296, col: 1, offset: 113217},
			expr: &actionExpr{
				pos: position{line: 3296, col: 23, offset: 113239},
				run: (*parser).callonfuncOtherParamList1,
				expr: &seqExpr{
					pos: position{line: 3296, col: 23, offset: 113239},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3296, col: 23, offset: 113239},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3296, col: 30, offset: 113246},
								name: "funcParam",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3296, col: 40, offset: 113256},
							expr: &litMatcher{
								pos:        position{line: 3296, col: 40, offset: 113256},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 3296, col: 45, offset: 113261},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3296, col: 51, offset: 113267},
								expr: &seqExpr{
									pos: position{line: 3296, col: 52, offset: 113268},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3296, col: 52, offset: 113268},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3296, col: 56, offset: 113272},
											expr: &choiceExpr{
												pos: position{line: 3622, col: 20, offset: 123807},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																expr: &litMatcher{
																	pos:        position{line: 3619, col: 36, offset: 123730},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3619, col: 42, offset: 123736},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3296, col: 60, offset: 113276},
											name: "funcParam",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3296, col: 72, offset: 113288},
							label: "variadicI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3296, col: 82, offset: 113298},
								expr: &seqExpr{
									pos: position{line: 3296, col: 83, offset: 113299},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3296, col: 83, offset: 113299},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3296, col: 87, offset: 113303},
											expr: &choiceExpr{
												pos: position{line: 3622, col: 20, offset: 123807},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3618, col: 36, offset: 123689},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3619, col: 36, offset: 123730},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3619, col: 36, offset: 123730},
																expr: &litMatcher{
																	pos:        position{line: 3619, col: 36, offset: 123730},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3619, col: 42, offset: 123736},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3296, col: 91, offset: 113307},
											name: "funcVariadicParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParam",
			pos:  position{line: 3317, col: 1, offset: 113758},
			expr: &choiceExpr{
				pos: position{line: 3317, col: 14, offset: 113771},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3317, col: 14, offset: 113771},
						run: (*parser).callonfuncParam2,
						expr: &seqExpr{
							pos: position{line: 3317, col: 14, offset: 113771},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3317, col: 14, offset: 113771},
									label: "namesI",
									expr: &actionExpr{
										pos: position{line: 3340, col: 18, offset: 114351},
										run: (*parser).callonfuncParam5,
										expr: &seqExpr{
											pos: position{line: 3340, col: 18, offset: 114351},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3340, col: 18, offset: 114351},
													label: "firstI",
													expr: &choiceExpr{
														pos: position{line: 2212, col: 12, offset: 75917},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2212, col: 12, offset: 75917},
																run: (*parser).callonfuncParam9,
																expr: &labeledExpr{
																	pos:   position{line: 2212, col: 12, offset: 75917},
																	label: "ident",
																	expr: &seqExpr{
																		pos: position{line: 2260, col: 17, offset: 77263},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2243, col: 20, offset: 77018},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2260, col: 26, offset: 77272},
																				expr: &charClassMatcher{
																					pos:        position{line: 2243, col: 20, offset: 77018},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2214, col: 5, offset: 76011},
																run: (*parser).callonfuncParam15,
																expr: &seqExpr{
																	pos: position{line: 2214, col: 5, offset: 76011},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2214, col: 5, offset: 76011},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 2214, col: 13, offset: 76019},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 2214, col: 13, offset: 76019},
																						expr: &litMatcher{
																							pos:        position{line: 2214, col: 13, offset: 76019},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2214, col: 18, offset: 76024},
																						expr: &choiceExpr{
																							pos: position{line: 2214, col: 19, offset: 76025},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2214, col: 19, offset: 76025},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2214, col: 19, offset: 76025},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2214, col: 28, offset: 76034},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2214, col: 38, offset: 76044},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 2214, col: 49, offset: 76055},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3609, col: 8, offset: 123391},
																				run: (*parser).callonfuncParam28,
																				expr: &choiceExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3609, col: 9, offset: 123392},
																							expr: &anyMatcher{
																								line: 3609, col: 10, offset: 123393,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3609, col: 14, offset: 123397},
																							expr: &anyMatcher{
																								line: 3609, col: 15, offset: 123398,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3340, col: 33, offset: 114366},
													label: "restI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 3340, col: 39, offset: 114372},
														expr: &seqExpr{
															pos: position{line: 3340, col: 40, offset: 114373},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3340, col: 40, offset: 114373},
																	expr: &litMatcher{
																		pos:        position{line: 3340, col: 40, offset: 114373},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3340, col: 45, offset: 114378},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3340, col: 49, offset: 114382},
																	expr: &choiceExpr{
																		pos: position{line: 3622, col: 20, offset: 123807},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 3618, col: 36, offset: 123689},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 3619, col: 36, offset: 123730},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3619, col: 36, offset: 123730},
																						expr: &litMatcher{
																							pos:        position{line: 3619, col: 36, offset: 123730},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3619, col: 42, offset: 123736},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2212, col: 12, offset: 75917},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2212, col: 12, offset: 75917},
																			run: (*parser).callonfuncParam48,
																			expr: &labeledExpr{
																				pos:   position{line: 2212, col: 12, offset: 75917},
																				label: "ident",
																				expr: &seqExpr{
																					pos: position{line: 2260, col: 17, offset: 77263},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2243, col: 20, offset: 77018},
																							val:        "[_\\pL]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2260, col: 26, offset: 77272},
																							expr: &charClassMatcher{
																								pos:        position{line: 2243, col: 20, offset: 77018},
																								val:        "[_\\pL\\pNd]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2214, col: 5, offset: 76011},
																			run: (*parser).callonfuncParam54,
																			expr: &seqExpr{
																				pos: position{line: 2214, col: 5, offset: 76011},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 2214, col: 5, offset: 76011},
																						label: "identI",
																						expr: &seqExpr{
																							pos: position{line: 2214, col: 13, offset: 76019},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 2214, col: 13, offset: 76019},
																									expr: &litMatcher{
																										pos:        position{line: 2214, col: 13, offset: 76019},
																										val:        "$",
																										ignoreCase: false,
																										want:       "\"$\"",
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 2214, col: 18, offset: 76024},
																									expr: &choiceExpr{
																										pos: position{line: 2214, col: 19, offset: 76025},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2214, col: 19, offset: 76025},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 2214, col: 19, offset: 76025},
																														val:        "[\\pNd]",
																														classes:    []*unicode.RangeTable{rangeTable("Nd")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2214, col: 28, offset: 76034},
																														val:        "[_-\\pL]",
																														chars:      []rune{'_', '-'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2214, col: 38, offset: 76044},
																												val:        "[_-\\pL]",
																												chars:      []rune{'_', '-'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2214, col: 49, offset: 76055},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3609, col: 8, offset: 123391},
																							run: (*parser).callonfuncParam67,
																							expr: &choiceExpr{
																								pos: position{line: 3609, col: 9, offset: 123392},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3609, col: 9, offset: 123392},
																										expr: &anyMatcher{
																											line: 3609, col: 10, offset: 123393,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3609, col: 14, offset: 123397},
																										expr: &anyMatcher{
																											line: 3609, col: 15, offset: 123398,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 3317, col: 35, offset: 113792},
									expr: &litMatcher{
										pos:        position{line: 3317, col: 35, offset: 113792},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3317, col: 40, offset: 113797},
									label: "typeI",
									expr: &ruleRefExpr{
										pos:  position{line: 3317, col: 46, offset: 113803},
										name: "funcType",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3322, col: 5, offset: 113931},
						run: (*parser).callonfuncParam77,
						expr: &labeledExpr{
							pos:   position{line: 3322, col: 5, offset: 113931},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3322, col: 11, offset: 113937},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcVariadicParam",
			pos:  position{line: 3327, col: 1, offset: 114023},
			expr: &actionExpr{
				pos: position{line: 3327, col: 22, offset: 114044},
				run: (*parser).callonfuncVariadicParam1,
				expr: &seqExpr{
					pos: position{line: 3327, col: 22, offset: 114044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3327, col: 22, offset: 114044},
							label: "nameI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3327, col: 28, offset: 114050},
								expr: &seqExpr{
									pos: position{line: 3327, col: 29, offset: 114051},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 2212, col: 12, offset: 75917},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2212, col: 12, offset: 75917},
													run: (*parser).callonfuncVariadicParam7,
													expr: &labeledExpr{
														pos:   position{line: 2212, col: 12, offset: 75917},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2260, col: 17, offset: 77263},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2260, col: 26, offset: 77272},
																	expr: &charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2214, col: 5, offset: 76011},
													run: (*parser).callonfuncVariadicParam13,
													expr: &seqExpr{
														pos: position{line: 2214, col: 5, offset: 76011},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 2214, col: 5, offset: 76011},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 2214, col: 13, offset: 76019},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2214, col: 13, offset: 76019},
																			expr: &litMatcher{
																				pos:        position{line: 2214, col: 13, offset: 76019},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2214, col: 18, offset: 76024},
																			expr: &choiceExpr{
																				pos: position{line: 2214, col: 19, offset: 76025},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 2214, col: 19, offset: 76025},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2214, col: 19, offset: 76025},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2214, col: 28, offset: 76034},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 2214, col: 38, offset: 76044},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 2214, col: 49, offset: 76055},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonfuncVariadicParam26,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 3327, col: 37, offset: 114059},
											expr: &litMatcher{
												pos:        position{line: 3327, col: 37, offset: 114059},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3327, col: 44, offset: 114066},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
						&labeledExpr{
							pos:   position{line: 3327, col: 50, offset: 114072},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3327, col: 56, offset: 114078},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcType",
			pos:  position{line: 3352, col: 1, offset: 114657},
			expr: &choiceExpr{
				pos: position{line: 3352, col: 13, offset: 114669},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3352, col: 13, offset: 114669},
						name: "GoType",
					},
					&actionExpr{
						pos: position{line: 3352, col: 22, offset: 114678},
						run: (*parser).callonfuncType3,
						expr: &seqExpr{
							pos: position{line: 3352, col: 22, offset: 114678},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3352, col: 22, offset: 114678},
									label: "typeI",
									expr: &oneOrMoreExpr{
										pos: position{line: 3352, col: 28, offset: 114684},
										expr: &charClassMatcher{
											pos:        position{line: 3352, col: 28, offset: 114684},
											val:        "[^,)]",
											chars:      []rune{',', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3352, col: 35, offset: 114691},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonfuncType9,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assign",
			pos:  position{line: 3370, col: 1, offset: 115204},
			expr: &choiceExpr{
				pos: position{line: 3370, col: 11, offset: 115214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3370, col: 11, offset: 115214},
						run: (*parser).callonAssign2,
						expr: &seqExpr{
							pos: position{line: 3370, col: 11, offset: 115214},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3370, col: 11, offset: 115214},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 3370, col: 15, offset: 115218},
									expr: &litMatcher{
										pos:        position{line: 3370, col: 15, offset: 115218},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3370, col: 20, offset: 115223},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3370, col: 26, offset: 115229},
										name: "Expression",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3370, col: 37, offset: 115240},
									expr: &actionExpr{
										pos: position{line: 1310, col: 21, offset: 42122},
										run: (*parser).callonAssign10,
										expr: &oneOrMoreExpr{
											pos: position{line: 1310, col: 21, offset: 42122},
											expr: &charClassMatcher{
												pos:        position{line: 3607, col: 12, offset: 123375},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3375, col: 5, offset: 115374},
						run: (*parser).callonAssign22,
						expr: &seqExpr{
							pos: position{line: 3375, col: 5, offset: 115374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3375, col: 5, offset: 115374},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 3375, col: 9, offset: 115378},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonAssign26,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 3393, col: 1, offset: 115912},
			expr: &actionExpr{
				pos: position{line: 3393, col: 15, offset: 115926},
				run: (*parser).callonInlineText1,
				expr: &seqExpr{
					pos: position{line: 3393, col: 15, offset: 115926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3393, col: 15, offset: 115926},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
						&labeledExpr{
							pos:   position{line: 3393, col: 19, offset: 115930},
							label: "lineI",
							expr: &ruleRefExpr{
								pos:  position{line: 3393, col: 25, offset: 115936},
								name: "TextLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlock",
			pos:  position{line: 3404, col: 1, offset: 116238},
			expr: &choiceExpr{
				pos: position{line: 3404, col: 15, offset: 116252},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3404, col: 15, offset: 116252},
						run: (*parser).callonArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3404, col: 15, offset: 116252},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3404, col: 15, offset: 116252},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3404, col: 20, offset: 116257},
									label: "firstLineI",
									expr: &choiceExpr{
										pos: position{line: 3404, col: 32, offset: 116269},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 3404, col: 32, offset: 116269},
												name: "TextLine",
											},
											&seqExpr{
												pos: position{line: 3606, col: 12, offset: 123342},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3606, col: 12, offset: 123342},
														expr: &charClassMatcher{
															pos:        position{line: 3618, col: 36, offset: 123689},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3606, col: 16, offset: 123346},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 16, offset: 123346},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		expr: &litMatcher{
																			pos:        position{line: 3606, col: 16, offset: 123346},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3606, col: 22, offset: 123352},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3605, col: 12, offset: 123328},
																expr: &anyMatcher{
																	line: 3605, col: 13, offset: 123329,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3404, col: 48, offset: 116285},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3404, col: 65, offset: 116302},
										expr: &seqExpr{
											pos: position{line: 3404, col: 66, offset: 116303},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3404, col: 66, offset: 116303},
													expr: &oneOrMoreExpr{
														pos: position{line: 3620, col: 36, offset: 123776},
														expr: &seqExpr{
															pos: position{line: 3620, col: 37, offset: 123777},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3620, col: 37, offset: 123777},
																	expr: &charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3619, col: 36, offset: 123730},
																	expr: &litMatcher{
																		pos:        position{line: 3619, col: 36, offset: 123730},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3619, col: 42, offset: 123736},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 3404, col: 75, offset: 116312},
													name: "INDENTATION2",
												},
												&ruleRefExpr{
													pos:  position{line: 3404, col: 88, offset: 116325},
													name: "TextLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3425, col: 5, offset: 116840},
						run: (*parser).callonArrowBlock31,
						expr: &seqExpr{
							pos: position{line: 3425, col: 5, offset: 116840},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3425, col: 5, offset: 116840},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineArrowBlock",
			pos:  position{line: 3429, col: 1, offset: 116903},
			expr: &choiceExpr{
				pos: position{line: 3429, col: 21, offset: 116923},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3429, col: 21, offset: 116923},
						run: (*parser).callonInlineArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3429, col: 21, offset: 116923},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3429, col: 21, offset: 116923},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3429, col: 26, offset: 116928},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3429, col: 32, offset: 116934},
										name: "TextLine",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3434, col: 5, offset: 117069},
						run: (*parser).callonInlineArrowBlock7,
						expr: &seqExpr{
							pos: position{line: 3434, col: 5, offset: 117069},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3434, col: 5, offset: 117069},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&labeledExpr{
									pos:   position{line: 3434, col: 9, offset: 117073},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3609, col: 8, offset: 123391},
										run: (*parser).callonInlineArrowBlock11,
										expr: &choiceExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3609, col: 9, offset: 123392},
													expr: &anyMatcher{
														line: 3609, col: 10, offset: 123393,
													},
												},
												&notExpr{
													pos: position{line: 3609, col: 14, offset: 123397},
													expr: &anyMatcher{
														line: 3609, col: 15, offset: 123398,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3434, col: 18, offset: 117082},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3434, col: 24, offset: 117088},
										name: "TextLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextLine",
			pos:  position{line: 3452, col: 1, offset: 117668},
			expr: &actionExpr{
				pos: position{line: 3452, col: 13, offset: 117680},
				run: (*parser).callonTextLine1,
				expr: &seqExpr{
					pos: position{line: 3452, col: 13, offset: 117680},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3452, col: 13, offset: 117680},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3452, col: 20, offset: 117687},
								expr: &ruleRefExpr{
									pos:  position{line: 3452, col: 20, offset: 117687},
									name: "TextItem",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3606, col: 12, offset: 123342},
							expr: &charClassMatcher{
								pos:        position{line: 3618, col: 36, offset: 123689},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3606, col: 16, offset: 123346},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											expr: &litMatcher{
												pos:        position{line: 3606, col: 16, offset: 123346},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3606, col: 22, offset: 123352},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3605, col: 12, offset: 123328},
									expr: &anyMatcher{
										line: 3605, col: 13, offset: 123329,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextItem",
			pos:  position{line: 3460, col: 1, offset: 117954},
			expr: &choiceExpr{
				pos: position{line: 3460, col: 13, offset: 117966},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3466, col: 9, offset: 118175},
						run: (*parser).callonTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 3466, col: 9, offset: 118175},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3466, col: 15, offset: 118181},
								expr: &choiceExpr{
									pos: position{line: 3466, col: 16, offset: 118182},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 3466, col: 16, offset: 118182},
											expr: &seqExpr{
												pos: position{line: 3466, col: 17, offset: 118183},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 3466, col: 17, offset: 118183},
														expr: &seqExpr{
															pos: position{line: 3606, col: 12, offset: 123342},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3606, col: 12, offset: 123342},
																	expr: &charClassMatcher{
																		pos:        position{line: 3618, col: 36, offset: 123689},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3606, col: 16, offset: 123346},
																					expr: &litMatcher{
																						pos:        position{line: 3606, col: 16, offset: 123346},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3606, col: 22, offset: 123352},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3605, col: 12, offset: 123328},
																			expr: &anyMatcher{
																				line: 3605, col: 13, offset: 123329,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3466, col: 22, offset: 118188},
														val:        "[^#]",
														chars:      []rune{'#'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3466, col: 31, offset: 118197},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3460, col: 20, offset: 117973},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 3477, col: 1, offset: 118485},
			expr: &choiceExpr{
				pos: position{line: 3477, col: 18, offset: 118502},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3477, col: 18, offset: 118502},
						name: "SimpleInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3477, col: 40, offset: 118524},
						name: "ElementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3477, col: 63, offset: 118547},
						name: "MixinCallInterpolation",
					},
					&actionExpr{
						pos: position{line: 3479, col: 21, offset: 118610},
						run: (*parser).callonInterpolation5,
						expr: &litMatcher{
							pos:        position{line: 3479, col: 21, offset: 118610},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SimpleInterpolation",
			pos:  position{line: 3503, col: 1, offset: 119457},
			expr: &choiceExpr{
				pos: position{line: 3503, col: 24, offset: 119480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3503, col: 24, offset: 119480},
						run: (*parser).callonSimpleInterpolation2,
						expr: &seqExpr{
							pos: position{line: 3503, col: 24, offset: 119480},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3503, col: 24, offset: 119480},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 3503, col: 28, offset: 119484},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3503, col: 38, offset: 119494},
										expr: &litMatcher{
											pos:        position{line: 3503, col: 38, offset: 119494},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3503, col: 43, offset: 119499},
									label: "valueI",
									expr: &choiceExpr{
										pos: position{line: 3565, col: 27, offset: 121849},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3565, col: 27, offset: 121849},
												run: (*parser).callonSimpleInterpolation10,
												expr: &seqExpr{
													pos: position{line: 3565, col: 27, offset: 121849},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3565, col: 27, offset: 121849},
															label: "lBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3634, col: 14, offset: 124183},
																run: (*parser).callonSimpleInterpolation13,
																expr: &litMatcher{
																	pos:        position{line: 3634, col: 14, offset: 124183},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3565, col: 50, offset: 121872},
															label: "textI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3565, col: 56, offset: 121878},
																expr: &charClassMatcher{
																	pos:        position{line: 3565, col: 56, offset: 121878},
																	val:        "[^]\\r\\n]",
																	chars:      []rune{']', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3565, col: 67, offset: 121889},
															label: "rBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3635, col: 14, offset: 124223},
																run: (*parser).callonSimpleInterpolation19,
																expr: &litMatcher{
																	pos:        position{line: 3635, col: 14, offset: 124223},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3571, col: 5, offset: 122100},
												run: (*parser).callonSimpleInterpolation21,
												expr: &seqExpr{
													pos: position{line: 3571, col: 5, offset: 122100},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3571, col: 5, offset: 122100},
															label: "lBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3634, col: 14, offset: 124183},
																run: (*parser).callonSimpleInterpolation24,
																expr: &litMatcher{
																	pos:        position{line: 3634, col: 14, offset: 124183},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3571, col: 28, offset: 122123},
															label: "textI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3571, col: 34, offset: 122129},
																expr: &charClassMatcher{
																	pos:        position{line: 3571, col: 34, offset: 122129},
																	val:        "[^]\\r\\n]",
																	chars:      []rune{']', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3606, col: 12, offset: 123342},
															expr: &charClassMatcher{
																pos:        position{line: 3618, col: 36, offset: 123689},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3606, col: 16, offset: 123346},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3606, col: 16, offset: 123346},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3606, col: 16, offset: 123346},
																			expr: &litMatcher{
																				pos:        position{line: 3606, col: 16, offset: 123346},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3606, col: 22, offset: 123352},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3605, col: 12, offset: 123328},
																	expr: &anyMatcher{
																		line: 3605, col: 13, offset: 123329,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3509, col: 5, offset: 119694},
						run: (*parser).callonSimpleInterpolation38,
						expr: &seqExpr{
							pos: position{line: 3509, col: 5, offset: 119694},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3509, col: 5, offset: 119694},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 3509, col: 9, offset: 119698},
									label: "valueI",
									expr: &choiceExpr{
										pos: position{line: 3509, col: 17, offset: 119706},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 3509, col: 17, offset: 119706},
												name: "expressionInterpolationValue",
											},
											&ruleRefExpr{
												pos:  position{line: 3509, col: 48, offset: 119737},
												name: "fmtExpressionInterpolationValue",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementInterpolation",
			pos:  position{line: 3520, col: 1, offset: 120093},
			expr: &actionExpr{
				pos: position{line: 3520, col: 25, offset: 120117},
				run: (*parser).callonElementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3520, col: 25, offset: 120117},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3520, col: 25, offset: 120117},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3520, col: 29, offset: 120121},
							label: "elPosI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).callonElementInterpolation5,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3520, col: 40, offset: 120132},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2729, col: 16, offset: 94945},
								expr: &charClassMatcher{
									pos:        position{line: 2715, col: 27, offset: 94284},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3520, col: 58, offset: 120150},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3520, col: 65, offset: 120157},
								expr: &ruleRefExpr{
									pos:  position{line: 3520, col: 65, offset: 120157},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3520, col: 96, offset: 120188},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3520, col: 103, offset: 120195},
								expr: &ruleRefExpr{
									pos:  position{line: 3520, col: 103, offset: 120195},
									name: "elementInterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "elementInterpolationValue",
			pos:  position{line: 3533, col: 1, offset: 120601},
			expr: &choiceExpr{
				pos: position{line: 3533, col: 30, offset: 120630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3565, col: 27, offset: 121849},
						run: (*parser).callonelementInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3565, col: 27, offset: 121849},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3565, col: 27, offset: 121849},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3634, col: 14, offset: 124183},
										run: (*parser).callonelementInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3634, col: 14, offset: 124183},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3565, col: 50, offset: 121872},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3565, col: 56, offset: 121878},
										expr: &charClassMatcher{
											pos:        position{line: 3565, col: 56, offset: 121878},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3565, col: 67, offset: 121889},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3635, col: 14, offset: 124223},
										run: (*parser).callonelementInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3635, col: 14, offset: 124223},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3571, col: 5, offset: 122100},
						run: (*parser).callonelementInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3571, col: 5, offset: 122100},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3571, col: 5, offset: 122100},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3634, col: 14, offset: 124183},
										run: (*parser).callonelementInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3634, col: 14, offset: 124183},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3571, col: 28, offset: 122123},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3571, col: 34, offset: 122129},
										expr: &charClassMatcher{
											pos:        position{line: 3571, col: 34, offset: 122129},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3533, col: 55, offset: 120655},
						name: "expressionInterpolationValue",
					},
					&actionExpr{
						pos: position{line: 3533, col: 86, offset: 120686},
						run: (*parser).callonelementInterpolationValue31,
						expr: &litMatcher{
							pos:        position{line: 3533, col: 86, offset: 120686},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
				},
			},
		},
		{
			name: "MixinCallInterpolation",
			pos:  position{line: 3541, col: 1, offset: 120934},
			expr: &actionExpr{
				pos: position{line: 3541, col: 27, offset: 120960},
				run: (*parser).callonMixinCallInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3541, col: 27, offset: 120960},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3541, col: 27, offset: 120960},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3541, col: 31, offset: 120964},
							label: "mcPosI",
							expr: &actionExpr{
								pos: position{line: 3609, col: 8, offset: 123391},
								run: (*parser).callonMixinCallInterpolation5,
								expr: &choiceExpr{
									pos: position{line: 3609, col: 9, offset: 123392},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3609, col: 9, offset: 123392},
											expr: &anyMatcher{
												line: 3609, col: 10, offset: 123393,
											},
										},
										&notExpr{
											pos: position{line: 3609, col: 14, offset: 123397},
											expr: &anyMatcher{
												line: 3609, col: 15, offset: 123398,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3541, col: 42, offset: 120975},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3541, col: 46, offset: 120979},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3541, col: 57, offset: 120990},
								expr: &seqExpr{
									pos: position{line: 3541, col: 58, offset: 120991},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 697, col: 10, offset: 21284},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 10, offset: 21284},
													run: (*parser).callonMixinCallInterpolation16,
													expr: &labeledExpr{
														pos:   position{line: 697, col: 10, offset: 21284},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2260, col: 17, offset: 77263},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2243, col: 20, offset: 77018},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2260, col: 26, offset: 77272},
																	expr: &charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 699, col: 5, offset: 21378},
													run: (*parser).callonMixinCallInterpolation22,
													expr: &seqExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 699, col: 5, offset: 21378},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 699, col: 13, offset: 21386},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 699, col: 13, offset: 21386},
																			expr: &litMatcher{
																				pos:        position{line: 699, col: 13, offset: 21386},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 699, col: 18, offset: 21391},
																			expr: &choiceExpr{
																				pos: position{line: 699, col: 19, offset: 21392},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 699, col: 19, offset: 21392},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 699, col: 19, offset: 21392},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 699, col: 28, offset: 21401},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 699, col: 38, offset: 21411},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 699, col: 49, offset: 21422},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3609, col: 8, offset: 123391},
																	run: (*parser).callonMixinCallInterpolation35,
																	expr: &choiceExpr{
																		pos: position{line: 3609, col: 9, offset: 123392},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3609, col: 9, offset: 123392},
																				expr: &anyMatcher{
																					line: 3609, col: 10, offset: 123393,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3609, col: 14, offset: 123397},
																				expr: &anyMatcher{
																					line: 3609, col: 15, offset: 123398,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3541, col: 64, offset: 120997},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3541, col: 70, offset: 121003},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 21839},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 711, col: 14, offset: 21839},
										run: (*parser).callonMixinCallInterpolation44,
										expr: &labeledExpr{
											pos:   position{line: 711, col: 14, offset: 21839},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 697, col: 10, offset: 21284},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 697, col: 10, offset: 21284},
														run: (*parser).callonMixinCallInterpolation47,
														expr: &labeledExpr{
															pos:   position{line: 697, col: 10, offset: 21284},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2260, col: 17, offset: 77263},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2243, col: 20, offset: 77018},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2260, col: 26, offset: 77272},
																		expr: &charClassMatcher{
																			pos:        position{line: 2243, col: 20, offset: 77018},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 699, col: 5, offset: 21378},
														run: (*parser).callonMixinCallInterpolation53,
														expr: &seqExpr{
															pos: position{line: 699, col: 5, offset: 21378},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 699, col: 5, offset: 21378},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 699, col: 13, offset: 21386},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 699, col: 13, offset: 21386},
																				expr: &litMatcher{
																					pos:        position{line: 699, col: 13, offset: 21386},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 699, col: 18, offset: 21391},
																				expr: &choiceExpr{
																					pos: position{line: 699, col: 19, offset: 21392},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 699, col: 19, offset: 21392},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 699, col: 19, offset: 21392},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 699, col: 28, offset: 21401},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 699, col: 38, offset: 21411},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 699, col: 49, offset: 21422},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3609, col: 8, offset: 123391},
																		run: (*parser).callonMixinCallInterpolation66,
																		expr: &choiceExpr{
																			pos: position{line: 3609, col: 9, offset: 123392},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3609, col: 9, offset: 123392},
																					expr: &anyMatcher{
																						line: 3609, col: 10, offset: 123393,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3609, col: 14, offset: 123397},
																					expr: &anyMatcher{
																						line: 3609, col: 15, offset: 123398,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 5, offset: 21881},
										run: (*parser).callonMixinCallInterpolation72,
										expr: &seqExpr{
											pos: position{line: 713, col: 5, offset: 21881},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 713, col: 5, offset: 21881},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonMixinCallInterpolation75,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 713, col: 14, offset: 21890},
													expr: &choiceExpr{
														pos: position{line: 713, col: 16, offset: 21892},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3606, col: 12, offset: 123342},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3606, col: 12, offset: 123342},
																		expr: &charClassMatcher{
																			pos:        position{line: 3618, col: 36, offset: 123689},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3606, col: 16, offset: 123346},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3606, col: 16, offset: 123346},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3606, col: 16, offset: 123346},
																						expr: &litMatcher{
																							pos:        position{line: 3606, col: 16, offset: 123346},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3606, col: 22, offset: 123352},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3605, col: 12, offset: 123328},
																				expr: &anyMatcher{
																					line: 3605, col: 13, offset: 123329,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 713, col: 22, offset: 21898},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 22230},
										run: (*parser).callonMixinCallInterpolation94,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 22230},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 724, col: 5, offset: 22230},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 724, col: 12, offset: 22237},
														expr: &charClassMatcher{
															pos:        position{line: 724, col: 12, offset: 22237},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 724, col: 29, offset: 22254},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonMixinCallInterpolation100,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3541, col: 86, offset: 121019},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3541, col: 92, offset: 121025},
								expr: &ruleRefExpr{
									pos:  position{line: 3541, col: 92, offset: 121025},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3541, col: 116, offset: 121049},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3541, col: 123, offset: 121056},
								expr: &ruleRefExpr{
									pos:  position{line: 3541, col: 123, offset: 121056},
									name: "mixinCallInterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallInterpolationValue",
			pos:  position{line: 3556, col: 1, offset: 121514},
			expr: &choiceExpr{
				pos: position{line: 3556, col: 32, offset: 121545},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3565, col: 27, offset: 121849},
						run: (*parser).callonmixinCallInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3565, col: 27, offset: 121849},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3565, col: 27, offset: 121849},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3634, col: 14, offset: 124183},
										run: (*parser).callonmixinCallInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3634, col: 14, offset: 124183},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3565, col: 50, offset: 121872},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3565, col: 56, offset: 121878},
										expr: &charClassMatcher{
											pos:        position{line: 3565, col: 56, offset: 121878},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3565, col: 67, offset: 121889},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3635, col: 14, offset: 124223},
										run: (*parser).callonmixinCallInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3635, col: 14, offset: 124223},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3571, col: 5, offset: 122100},
						run: (*parser).callonmixinCallInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3571, col: 5, offset: 122100},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3571, col: 5, offset: 122100},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3634, col: 14, offset: 124183},
										run: (*parser).callonmixinCallInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3634, col: 14, offset: 124183},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3571, col: 28, offset: 122123},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3571, col: 34, offset: 122129},
										expr: &charClassMatcher{
											pos:        position{line: 3571, col: 34, offset: 122129},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3556, col: 57, offset: 121570},
						name: "expressionInterpolationValue",
					},
				},
			},
		},
		{
			name: "expressionInterpolationValue",
			pos:  position{line: 3582, col: 1, offset: 122357},
			expr: &choiceExpr{
				pos: position{line: 3582, col: 33, offset: 122389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3582, col: 33, offset: 122389},
						run: (*parser).callonexpressionInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3582, col: 33, offset: 122389},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3582, col: 33, offset: 122389},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3631, col: 12, offset: 124104},
										run: (*parser).callonexpressionInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3631, col: 12, offset: 124104},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3582, col: 52, offset: 122408},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3582, col: 58, offset: 122414},
										name: "SingleLineExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 3582, col: 79, offset: 122435},
									label: "rBracePosI",
									expr: &actionExpr{
										pos: position{line: 3632, col: 12, offset: 124142},
										run: (*parser).callonexpressionInterpolationValue10,
										expr: &litMatcher{
											pos:        position{line: 3632, col: 12, offset: 124142},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3588, col: 5, offset: 122656},
						run: (*parser).callonexpressionInterpolationValue12,
						expr: &seqExpr{
							pos: position{line: 3588, col: 5, offset: 122656},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3588, col: 5, offset: 122656},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3634, col: 14, offset: 124183},
										run: (*parser).callonexpressionInterpolationValue15,
										expr: &litMatcher{
											pos:        position{line: 3634, col: 14, offset: 124183},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3588, col: 26, offset: 122677},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3588, col: 32, offset: 122683},
										name: "SingleLineExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3606, col: 12, offset: 123342},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3606, col: 16, offset: 123346},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3606, col: 16, offset: 123346},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3606, col: 16, offset: 123346},
													expr: &litMatcher{
														pos:        position{line: 3606, col: 16, offset: 123346},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3606, col: 22, offset: 123352},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3605, col: 12, offset: 123328},
											expr: &anyMatcher{
												line: 3605, col: 13, offset: 123329,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fmtExpressionInterpolationValue",
			pos:  position{line: 3595, col: 1, offset: 122906},
			expr: &actionExpr{
				pos: position{line: 3595, col: 36, offset: 122941},
				run: (*parser).callonfmtExpressionInterpolationValue1,
				expr: &seqExpr{
					pos: position{line: 3595, col: 36, offset: 122941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3595, col: 36, offset: 122941},
							label: "fmtDirectiveI",
							expr: &choiceExpr{
								pos: position{line: 1705, col: 17, offset: 55960},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1705, col: 17, offset: 55960},
										run: (*parser).callonfmtExpressionInterpolationValue5,
										expr: &seqExpr{
											pos: position{line: 1705, col: 17, offset: 55960},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1705, col: 17, offset: 55960},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1705, col: 21, offset: 55964},
													expr: &charClassMatcher{
														pos:        position{line: 1721, col: 12, offset: 56641},
														val:        "[ 0+-#]",
														chars:      []rune{' ', '0'},
														ranges:     []rune{'+', '#'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 1705, col: 30, offset: 55973},
													expr: &seqExpr{
														pos: position{line: 1705, col: 31, offset: 55974},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1705, col: 31, offset: 55974},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 1705, col: 36, offset: 55979},
																expr: &charClassMatcher{
																	pos:        position{line: 1705, col: 36, offset: 55979},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 1705, col: 45, offset: 55988},
													expr: &seqExpr{
														pos: position{line: 1705, col: 46, offset: 55989},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1705, col: 46, offset: 55989},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1705, col: 50, offset: 55993},
																expr: &charClassMatcher{
																	pos:        position{line: 1705, col: 50, offset: 55993},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1722, col: 12, offset: 56660},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1722, col: 12, offset: 56660},
															val:        "[vTtbcdoOqxXUeEfFgGsp]",
															chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
															ignoreCase: false,
															inverted:   false,
														},
														&actionExpr{
															pos: position{line: 1722, col: 74, offset: 56722},
															run: (*parser).callonfmtExpressionInterpolationValue22,
															expr: &andExpr{
																pos: position{line: 1722, col: 74, offset: 56722},
																expr: &charClassMatcher{
																	pos:        position{line: 1722, col: 76, offset: 56724},
																	val:        "[{\"`]",
																	chars:      []rune{'{', '"', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1734, col: 5, offset: 57261},
															run: (*parser).callonfmtExpressionInterpolationValue25,
															expr: &anyMatcher{
																line: 1734, col: 5, offset: 57261,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1707, col: 5, offset: 56051},
										run: (*parser).callonfmtExpressionInterpolationValue27,
										expr: &seqExpr{
											pos: position{line: 1707, col: 5, offset: 56051},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1707, col: 5, offset: 56051},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1707, col: 9, offset: 56055},
													expr: &charClassMatcher{
														pos:        position{line: 1707, col: 9, offset: 56055},
														val:        "[^`\"{]",
														chars:      []rune{'`', '"', '{'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&labeledExpr{
													pos:   position{line: 1707, col: 17, offset: 56063},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3609, col: 8, offset: 123391},
														run: (*parser).callonfmtExpressionInterpolationValue33,
														expr: &choiceExpr{
															pos: position{line: 3609, col: 9, offset: 123392},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3609, col: 9, offset: 123392},
																	expr: &anyMatcher{
																		line: 3609, col: 10, offset: 123393,
																	},
																},
																&notExpr{
																	pos: position{line: 3609, col: 14, offset: 123397},
																	expr: &anyMatcher{
																		line: 3609, col: 15, offset: 123398,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3595, col: 63, offset: 122968},
							label: "eivI",
							expr: &ruleRefExpr{
								pos:  position{line: 3595, col: 68, offset: 122973},
								name: "expressionInterpolationValue",
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION_IGNORE_ADDITIONAL",
			pos:  position{line: 3927, col: 1, offset: 137136},
			expr: &choiceExpr{
				pos: position{line: 3927, col: 34, offset: 137169},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 3927, col: 34, offset: 137169},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 3927, col: 34, offset: 137169},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL3,
							},
							&actionExpr{
								pos: position{line: 3707, col: 17, offset: 127583},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 3707, col: 17, offset: 127583},
									expr: &charClassMatcher{
										pos:        position{line: 3618, col: 36, offset: 123689},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 3707, col: 41, offset: 127607},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL7,
							},
							&choiceExpr{
								pos: position{line: 3759, col: 5, offset: 129517},
								alternatives: []interface{}{
									&andCodeExpr{
										pos: position{line: 3759, col: 5, offset: 129517},
										run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL9,
									},
									&seqExpr{
										pos: position{line: 3761, col: 9, offset: 129600},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3761, col: 9, offset: 129600},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL11,
											},
											&stateCodeExpr{
												pos: position{line: 3763, col: 7, offset: 129704},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL12,
											},
										},
									},
									&seqExpr{
										pos: position{line: 3770, col: 9, offset: 130040},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3770, col: 9, offset: 130040},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL14,
											},
											&choiceExpr{
												pos: position{line: 3823, col: 9, offset: 132375},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3823, col: 9, offset: 132375},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 3823, col: 9, offset: 132375},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL17,
															},
															&andCodeExpr{
																pos: position{line: 3827, col: 11, offset: 132625},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL18,
															},
															&stateCodeExpr{
																pos: position{line: 3893, col: 11, offset: 135831},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL19,
															},
														},
													},
													&seqExpr{
														pos: position{line: 3901, col: 13, offset: 136184},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 3901, col: 13, offset: 136184},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL21,
															},
															&andCodeExpr{
																pos: position{line: 3905, col: 11, offset: 136439},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL22,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 3931, col: 5, offset: 137320},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 3932, col: 9, offset: 137330},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 3932, col: 9, offset: 137330},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3932, col: 9, offset: 137330},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL26,
											},
											&choiceExpr{
												pos: position{line: 3937, col: 13, offset: 137594},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3937, col: 13, offset: 137594},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 3937, col: 13, offset: 137594},
																expr: &charClassMatcher{
																	pos:        position{line: 3618, col: 36, offset: 123689},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 3937, col: 16, offset: 137597},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL31,
															},
														},
													},
													&seqExpr{
														pos: position{line: 3948, col: 17, offset: 137991},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 3948, col: 17, offset: 137991},
																expr: &charClassMatcher{
																	pos:        position{line: 3618, col: 36, offset: 123689},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 3948, col: 20, offset: 137994},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL35,
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 4013, col: 11, offset: 141225},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL36,
											},
										},
									},
									&seqExpr{
										pos: position{line: 4020, col: 13, offset: 141547},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 4020, col: 13, offset: 141547},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL38,
											},
											&andCodeExpr{
												pos: position{line: 4024, col: 11, offset: 141802},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL39,
											},
										},
									},
								},
							},
							&stateCodeExpr{
								pos: position{line: 4029, col: 7, offset: 141983},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL40,
							},
						},
					},
					&seqExpr{
						pos: position{line: 4033, col: 5, offset: 142060},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 4033, col: 5, offset: 142060},
								label: "spaceI",
								expr: &charClassMatcher{
									pos:        position{line: 3618, col: 36, offset: 123689},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&andCodeExpr{
								pos: position{line: 4033, col: 14, offset: 142069},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL44,
							},
							&stateCodeExpr{
								pos: position{line: 4083, col: 3, offset: 143901},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL45,
							},
							&ruleRefExpr{
								pos:  position{line: 4086, col: 3, offset: 144003},
								name: "INDENTATION_IGNORE_ADDITIONAL",
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION2",
			pos:  position{line: 4105, col: 1, offset: 144656},
			expr: &choiceExpr{
				pos: position{line: 4105, col: 17, offset: 144672},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4105, col: 17, offset: 144672},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4105, col: 17, offset: 144672},
								run: (*parser).callonINDENTATION23,
							},
							&litMatcher{
								pos:        position{line: 4107, col: 3, offset: 144733},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 4107, col: 10, offset: 144740},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 4107, col: 10, offset: 144740},
								name: "INDENTATION_IGNORE_ADDITIONAL",
							},
							&litMatcher{
								pos:        position{line: 4107, col: 40, offset: 144770},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onFile3() error {
	c.state["Indentation.Level"] = 0       // the lvl we are in rn
	c.state["Indentation.Char"] = byte(0)  // the char used for indentation
	c.state["Indentation.Repetitions"] = 0 // num of repetitions of char per lvl
	c.state["Indentation.RefLine"] = 0     // the line no where we got char and repetitions from

	// a stack containing the actual number of repetitions of char per lvl
	// used to recover from inconsistent indentations errs
	c.state["Indentation.ActualRepetitions"] = &stack.Stack[int]{}
	c.state["Indentation.TotalRepetitions"] = 0 // sum of the stack above

	// used by INDENTATION_NO_INCREASE to count how many chars it has found
	c.state["Indentation.CharCount"] = 0
	return nil
}

func (p *parser) callonFile3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile3()
}

func (c *current) onFile36(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonFile36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile36(stack["strI"])
}

func (c *current) onFile43(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonFile43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile43(stack["strI"])
}

func (c *current) onFile75() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonFile75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile75()
}

func (c *current) onFile88() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile88()
}

func (c *current) onFile109() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile109()
}

func (c *current) onFile132() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile132()
}

func (c *current) onFile143() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile143()
}

func (c *current) onFile150() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile150()
}

func (c *current) onFile155() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonFile155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile155()
}

func (c *current) onFile60(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonFile60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile60(stack["strI"])
}

func (c *current) onFile176() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonFile176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile176()
}

func (c *current) onFile189() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile189()
}

func (c *current) onFile210() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile210()
}

func (c *current) onFile233() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile233()
}

func (c *current) onFile244() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile244()
}

func (c *current) onFile251() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile251()
}

func (c *current) onFile256() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonFile256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile256()
}

func (c *current) onFile262() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile262()
}

func (c *current) onFile161(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonFile161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile161(stack["strI"], stack["endPosI"])
}

func (c *current) onFile287() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile287()
}

func (c *current) onFile279(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonFile279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile279(stack["strI"], stack["endPosI"])
}

func (c *current) onFile30(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonFile30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile30(stack["sI"])
}

func (c *current) onFile293(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonFile293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile293(stack["pathI"])
}

func (c *current) onFile25(extendI interface{}) (interface{}, error) {
	return file.Extend{Path: extendI.(file.String), Position: pos(c)}, nil
}

func (p *parser) callonFile25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile25(stack["extendI"])
}

func (c *current) onFile383() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile383()
}

func (c *current) onFile379(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile379(stack["startPosI"])
}

func (c *current) onFile400() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile400()
}

func (c *current) onFile364() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonFile364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile364()
}

func (c *current) onFile434() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile434()
}

func (c *current) onFile430(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile430(stack["startPosI"])
}

func (c *current) onFile451() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonFile451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile451()
}

func (c *current) onFile415() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonFile415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile415()
}

func (c *current) onFile1(extendComments, extendI, importsAndCommentsI, usesAndCommentsI, globalCodeAndFuncI, doctypeCommentsI, doctypeI, scopeI interface{}) (interface{}, error) {
	var f file.File

	f.TopLevelComments = append(f.TopLevelComments, castedOrZero[[]file.CorgiComment](extendComments)...)

	f.Extend = ptrOrNil[file.Extend](extendI)

	if importsAndCommentsI != nil {
		f.Imports = getTuple[[]file.Import](importsAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](importsAndCommentsI, 1)...)
	}

	if usesAndCommentsI != nil {
		f.Uses = getTuple[[]file.Use](usesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](usesAndCommentsI, 1)...)
	}

	if globalCodeAndFuncI != nil {
		partFile := globalCodeAndFuncI.(file.File)

		f.TopLevelComments = append(f.TopLevelComments, partFile.TopLevelComments...)
		f.GlobalCode = partFile.GlobalCode
		f.Func = partFile.Func
	}

	f.Scope = castedOrZero[file.Scope](scopeI)

	if doctypeI != nil {
		f.Scope = append(file.Scope{doctypeI.(file.Doctype)}, f.Scope...)
	}

	if doctypeCommentsI != nil {
		comments := doctypeCommentsI.([]file.CorgiComment)

		commentScope := make(file.Scope, len(comments))
		for i, comment := range comments {
			commentScope[i] = comment
		}

		f.Scope = append(commentScope, f.Scope...)
	}

	return &f, nil
}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["extendComments"], stack["extendI"], stack["importsAndCommentsI"], stack["usesAndCommentsI"], stack["globalCodeAndFuncI"], stack["doctypeCommentsI"], stack["doctypeI"], stack["scopeI"])
}

func (c *current) onimportsAndComments34() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonimportsAndComments34() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments34()
}

func (c *current) onimportsAndComments46() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonimportsAndComments46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments46()
}

func (c *current) onimportsAndComments49() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonimportsAndComments49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments49()
}

func (c *current) onimportsAndComments51() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonimportsAndComments51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments51()
}

func (c *current) onimportsAndComments53() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonimportsAndComments53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments53()
}

func (c *current) onimportsAndComments54() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonimportsAndComments54() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments54()
}

func (c *current) onimportsAndComments56() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments56()
}

func (c *current) onimportsAndComments59() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonimportsAndComments59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments59()
}

func (c *current) onimportsAndComments60() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments60()
}

func (c *current) onimportsAndComments61() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonimportsAndComments61() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments61()
}

func (c *current) onimportsAndComments63() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonimportsAndComments63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments63()
}

func (c *current) onimportsAndComments64() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonimportsAndComments64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments64()
}

func (c *current) onimportsAndComments71() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments71()
}

func (c *current) onimportsAndComments73(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments73(stack["ident"])
}

func (c *current) onimportsAndComments92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments92()
}

func (c *current) onimportsAndComments79(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonimportsAndComments79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments79(stack["identI"], stack["endPosI"])
}

func (c *current) onimportsAndComments103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments103()
}

func (c *current) onimportsAndComments98(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments98(stack["endPosI"])
}

func (c *current) onimportsAndComments113(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments113(stack["strI"])
}

func (c *current) onimportsAndComments120(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments120(stack["strI"])
}

func (c *current) onimportsAndComments152() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments152()
}

func (c *current) onimportsAndComments165() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments165()
}

func (c *current) onimportsAndComments186() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments186()
}

func (c *current) onimportsAndComments209() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments209()
}

func (c *current) onimportsAndComments220() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments220()
}

func (c *current) onimportsAndComments227() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments227()
}

func (c *current) onimportsAndComments232() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments232()
}

func (c *current) onimportsAndComments137(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments137(stack["strI"])
}

func (c *current) onimportsAndComments253() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments253()
}

func (c *current) onimportsAndComments266() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments266()
}

func (c *current) onimportsAndComments287() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments287()
}

func (c *current) onimportsAndComments310() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments310()
}

func (c *current) onimportsAndComments321() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments321()
}

func (c *current) onimportsAndComments328() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments328()
}

func (c *current) onimportsAndComments333() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments333()
}

func (c *current) onimportsAndComments339() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments339()
}

func (c *current) onimportsAndComments238(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments238(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments364() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments364()
}

func (c *current) onimportsAndComments356(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments356(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments370(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments370(stack["pathI"])
}

func (c *current) onimportsAndComments65(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments65(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments383(importsI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonimportsAndComments383() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments383(stack["importsI"])
}

func (c *current) onimportsAndComments32(importsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.ImportSpec](importsI, -1), nil
}

func (p *parser) callonimportsAndComments32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments32(stack["importsI"])
}

func (c *current) onimportsAndComments28(specsI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  specsI.([]file.ImportSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments28(stack["specsI"])
}

func (c *current) onimportsAndComments396() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments396()
}

func (c *current) onimportsAndComments398(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments398(stack["ident"])
}

func (c *current) onimportsAndComments417() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments417()
}

func (c *current) onimportsAndComments404(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonimportsAndComments404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments404(stack["identI"], stack["endPosI"])
}

func (c *current) onimportsAndComments428() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments428()
}

func (c *current) onimportsAndComments423(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments423(stack["endPosI"])
}

func (c *current) onimportsAndComments438(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments438(stack["strI"])
}

func (c *current) onimportsAndComments445(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments445(stack["strI"])
}

func (c *current) onimportsAndComments477() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments477()
}

func (c *current) onimportsAndComments490() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments490()
}

func (c *current) onimportsAndComments511() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments511()
}

func (c *current) onimportsAndComments534() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments534()
}

func (c *current) onimportsAndComments545() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments545()
}

func (c *current) onimportsAndComments552() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments552()
}

func (c *current) onimportsAndComments557() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments557()
}

func (c *current) onimportsAndComments462(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments462(stack["strI"])
}

func (c *current) onimportsAndComments578() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments578()
}

func (c *current) onimportsAndComments591() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments591()
}

func (c *current) onimportsAndComments612() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments612()
}

func (c *current) onimportsAndComments635() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments635()
}

func (c *current) onimportsAndComments646() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments646()
}

func (c *current) onimportsAndComments653() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments653()
}

func (c *current) onimportsAndComments658() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments658()
}

func (c *current) onimportsAndComments664() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments664()
}

func (c *current) onimportsAndComments563(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments563(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments689() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments689()
}

func (c *current) onimportsAndComments681(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments681(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments695(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments695(stack["pathI"])
}

func (c *current) onimportsAndComments390(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments390(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments384(specI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  []file.ImportSpec{specI.(file.ImportSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments384(stack["specI"])
}

func (c *current) onimportsAndComments712() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments712()
}

func (c *current) onimportsAndComments708(posI interface{}) (interface{}, error) {
	return file.Import{Position: pos(c)}, &corgierr.Error{
		Message: "missing import path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an import path, optionally preceded by an import alias",
		}),
	}
}

func (p *parser) callonimportsAndComments708() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments708(stack["posI"])
}

func (c *current) onimportsAndComments15(importsI interface{}) (interface{}, error) {
	impTuples := islice(importsI)
	if impTuples == nil {
		return []file.Import(nil), nil
	}

	var imps []file.Import
	for _, impTuple := range impTuples {
		imps = append(imps, getTuple[file.Import](impTuple, 1))
	}

	return imps, nil
}

func (p *parser) callonimportsAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments15(stack["importsI"])
}

func (c *current) onimportsAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var imports []file.Import

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		imports = append(imports, getTuple[[]file.Import](t, -1)...)
	}

	return []any{imports, comments}, nil
}

func (p *parser) callonimportsAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments1(stack["valsI"])
}

func (c *current) onusesAndComments34() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonusesAndComments34() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments34()
}

func (c *current) onusesAndComments46() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonusesAndComments46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments46()
}

func (c *current) onusesAndComments49() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonusesAndComments49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments49()
}

func (c *current) onusesAndComments51() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonusesAndComments51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments51()
}

func (c *current) onusesAndComments53() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonusesAndComments53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments53()
}

func (c *current) onusesAndComments54() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonusesAndComments54() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments54()
}

func (c *current) onusesAndComments56() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments56()
}

func (c *current) onusesAndComments59() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonusesAndComments59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments59()
}

func (c *current) onusesAndComments60() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments60()
}

func (c *current) onusesAndComments61() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonusesAndComments61() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments61()
}

func (c *current) onusesAndComments63() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonusesAndComments63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments63()
}

func (c *current) onusesAndComments64() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonusesAndComments64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments64()
}

func (c *current) onusesAndComments71() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments71()
}

func (c *current) onusesAndComments73(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments73(stack["identI"])
}

func (c *current) onusesAndComments92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments92()
}

func (c *current) onusesAndComments79(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments79(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments103()
}

func (c *current) onusesAndComments98(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments98(stack["endPosI"])
}

func (c *current) onusesAndComments113(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments113(stack["strI"])
}

func (c *current) onusesAndComments120(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments120(stack["strI"])
}

func (c *current) onusesAndComments152() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments152()
}

func (c *current) onusesAndComments165() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments165()
}

func (c *current) onusesAndComments186() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments186()
}

func (c *current) onusesAndComments209() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments209()
}

func (c *current) onusesAndComments220() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments220()
}

func (c *current) onusesAndComments227() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments227()
}

func (c *current) onusesAndComments232() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments232()
}

func (c *current) onusesAndComments137(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments137(stack["strI"])
}

func (c *current) onusesAndComments253() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments253()
}

func (c *current) onusesAndComments266() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments266()
}

func (c *current) onusesAndComments287() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments287()
}

func (c *current) onusesAndComments310() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments310()
}

func (c *current) onusesAndComments321() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments321()
}

func (c *current) onusesAndComments328() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments328()
}

func (c *current) onusesAndComments333() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments333()
}

func (c *current) onusesAndComments339() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments339()
}

func (c *current) onusesAndComments238(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments238(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments364() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments364()
}

func (c *current) onusesAndComments356(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments356(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments370(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments370(stack["pathI"])
}

func (c *current) onusesAndComments65(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments65(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments383(usesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonusesAndComments383() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments383(stack["usesI"])
}

func (c *current) onusesAndComments32(usesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.UseSpec](usesI, -1), nil
}

func (p *parser) callonusesAndComments32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments32(stack["usesI"])
}

func (c *current) onusesAndComments28(specsI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     specsI.([]file.UseSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments28(stack["specsI"])
}

func (c *current) onusesAndComments396() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments396()
}

func (c *current) onusesAndComments398(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments398(stack["identI"])
}

func (c *current) onusesAndComments417() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments417()
}

func (c *current) onusesAndComments404(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments404(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments428() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments428()
}

func (c *current) onusesAndComments423(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments423(stack["endPosI"])
}

func (c *current) onusesAndComments438(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments438(stack["strI"])
}

func (c *current) onusesAndComments445(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments445(stack["strI"])
}

func (c *current) onusesAndComments477() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments477()
}

func (c *current) onusesAndComments490() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments490()
}

func (c *current) onusesAndComments511() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments511()
}

func (c *current) onusesAndComments534() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments534()
}

func (c *current) onusesAndComments545() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments545()
}

func (c *current) onusesAndComments552() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments552()
}

func (c *current) onusesAndComments557() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments557()
}

func (c *current) onusesAndComments462(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments462(stack["strI"])
}

func (c *current) onusesAndComments578() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments578()
}

func (c *current) onusesAndComments591() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments591()
}

func (c *current) onusesAndComments612() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments612()
}

func (c *current) onusesAndComments635() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments635()
}

func (c *current) onusesAndComments646() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments646()
}

func (c *current) onusesAndComments653() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments653()
}

func (c *current) onusesAndComments658() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments658()
}

func (c *current) onusesAndComments664() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments664()
}

func (c *current) onusesAndComments563(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments563(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments689() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments689()
}

func (c *current) onusesAndComments681(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments681(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments695(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments695(stack["pathI"])
}

func (c *current) onusesAndComments390(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments390(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments384(specI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     []file.UseSpec{specI.(file.UseSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments384(stack["specI"])
}

func (c *current) onusesAndComments712() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments712()
}

func (c *current) onusesAndComments708(posI interface{}) (interface{}, error) {
	return file.Use{Position: pos(c)}, &corgierr.Error{
		Message: "missing use path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an use path, optionally preceded by an use alias",
		}),
	}
}

func (p *parser) callonusesAndComments708() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments708(stack["posI"])
}

func (c *current) onusesAndComments15(usesI interface{}) (interface{}, error) {
	useTuples := islice(usesI)
	if useTuples == nil {
		return []file.Use(nil), nil
	}

	var uses []file.Use
	for _, useTuple := range useTuples {
		uses = append(uses, getTuple[file.Use](useTuple, 1))
	}

	return uses, nil
}

func (p *parser) callonusesAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments15(stack["usesI"])
}

func (c *current) onusesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var uses []file.Use

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		uses = append(uses, getTuple[[]file.Use](t, -1)...)
	}

	return []any{uses, comments}, nil
}

func (p *parser) callonusesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments1(stack["valsI"])
}

func (c *current) oncodesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var codes []file.Code

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		codes = append(codes, getTuple[[]file.Code](t, -1)...)
	}

	return []any{codes, comments}, nil
}

func (p *parser) calloncodesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodesAndComments1(stack["valsI"])
}

func (c *current) onglobalCodeAndFunc1(codesAndCommentsI, commentsI, funcI interface{}) (interface{}, error) {
	var f file.File

	if codesAndCommentsI != nil {
		f.GlobalCode = getTuple[[]file.Code](codesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](codesAndCommentsI, 1)...)
	}

	if commentsI != nil {
		f.TopLevelComments = append(f.TopLevelComments, commentsI.([]file.CorgiComment)...)
	}

	fun := funcI.(file.Func)
	f.Func = &fun

	return f, nil
}

func (p *parser) callonglobalCodeAndFunc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalCodeAndFunc1(stack["codesAndCommentsI"], stack["commentsI"], stack["funcI"])
}

func (c *current) onScope13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonScope13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope13()
}

func (c *current) onScope16() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonScope16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope16()
}

func (c *current) onScope18() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonScope18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope18()
}

func (c *current) onScope20() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonScope20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope20()
}

func (c *current) onScope21() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonScope21() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope21()
}

func (c *current) onScope23() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonScope23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope23()
}

func (c *current) onScope26() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonScope26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope26()
}

func (c *current) onScope27() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope27()
}

func (c *current) onScope28() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonScope28() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope28()
}

func (c *current) onScope30() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonScope30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope30()
}

func (c *current) onScope31() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonScope31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope31()
}

func (c *current) onScope1(itemsI interface{}) (interface{}, error) {
	itemTuples := islice(itemsI)

	scope := make(file.Scope, 0, len(itemTuples))
	for _, it := range itemTuples {
		tuple := islice(it)
		if si, ok := tuple[len(tuple)-1].(file.ScopeItem); ok {
			scope = append(scope, si)
		}
	}

	return scope, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["itemsI"])
}

func (c *current) onscopeItem29() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem29() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem29()
}

func (c *current) onscopeItem43() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem43()
}

func (c *current) onscopeItem46() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem46()
}

func (c *current) onscopeItem48() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem48()
}

func (c *current) onscopeItem50() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonscopeItem50() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem50()
}

func (c *current) onscopeItem51() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem51() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem51()
}

func (c *current) onscopeItem53() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem53()
}

func (c *current) onscopeItem56() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem56()
}

func (c *current) onscopeItem57() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem57() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem57()
}

func (c *current) onscopeItem58() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem58() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem58()
}

func (c *current) onscopeItem60() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem60()
}

func (c *current) onscopeItem61() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem61() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem61()
}

func (c *current) onscopeItem63() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem63()
}

func (c *current) onscopeItem41(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem41(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem81(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem81() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem81(stack["linesI"])
}

func (c *current) onscopeItem27(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem27(stack["linesI"])
}

func (c *current) onscopeItem13(bodyI interface{}) (interface{}, error) {
	return file.RawFilter{
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem13(stack["bodyI"])
}

func (c *current) onscopeItem97(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem97(stack["strI"])
}

func (c *current) onscopeItem104(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem104(stack["strI"])
}

func (c *current) onscopeItem136() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem136()
}

func (c *current) onscopeItem149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem149()
}

func (c *current) onscopeItem170() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem170()
}

func (c *current) onscopeItem193() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem193()
}

func (c *current) onscopeItem204() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem204()
}

func (c *current) onscopeItem211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem211()
}

func (c *current) onscopeItem216() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem216()
}

func (c *current) onscopeItem121(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem121(stack["strI"])
}

func (c *current) onscopeItem237() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem237()
}

func (c *current) onscopeItem250() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem250()
}

func (c *current) onscopeItem271() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem271()
}

func (c *current) onscopeItem294() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem294()
}

func (c *current) onscopeItem305() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem305()
}

func (c *current) onscopeItem312() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem312() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem312()
}

func (c *current) onscopeItem317() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem317()
}

func (c *current) onscopeItem323() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem323()
}

func (c *current) onscopeItem222(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem222(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem348() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem348()
}

func (c *current) onscopeItem340(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonscopeItem340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem340(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem94(stringI interface{}) (interface{}, error) {
	return file.StringCommandFilterArg(stringI.(file.String)), nil
}

func (p *parser) callonscopeItem94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem94(stack["stringI"])
}

func (c *current) onscopeItem354(argI interface{}) (interface{}, error) {
	return file.RawCommandFilterArg{Value: concat(argI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem354(stack["argI"])
}

func (c *current) onscopeItem371() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem371() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem371()
}

func (c *current) onscopeItem385() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem385()
}

func (c *current) onscopeItem388() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem388() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem388()
}

func (c *current) onscopeItem390() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem390() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem390()
}

func (c *current) onscopeItem392() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonscopeItem392() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem392()
}

func (c *current) onscopeItem393() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem393() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem393()
}

func (c *current) onscopeItem395() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem395() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem395()
}

func (c *current) onscopeItem398() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem398() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem398()
}

func (c *current) onscopeItem399() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem399() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem399()
}

func (c *current) onscopeItem400() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem400() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem400()
}

func (c *current) onscopeItem402() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem402() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem402()
}

func (c *current) onscopeItem403() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem403() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem403()
}

func (c *current) onscopeItem405() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem405()
}

func (c *current) onscopeItem383(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem383(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem423(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem423() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem423(stack["linesI"])
}

func (c *current) onscopeItem369(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem369(stack["linesI"])
}

func (c *current) onscopeItem82(nameI, argsI, bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
		Name:     concat(nameI),
		Args:     typedSliceFromTuples[file.CommandFilterArg](argsI, -1),
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem82(stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onscopeItem440() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem440() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem440()
}

func (c *current) onscopeItem454() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem454()
}

func (c *current) onscopeItem457() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem457() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem457()
}

func (c *current) onscopeItem459() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem459() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem459()
}

func (c *current) onscopeItem461() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonscopeItem461() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem461()
}

func (c *current) onscopeItem462() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem462() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem462()
}

func (c *current) onscopeItem464() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem464() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem464()
}

func (c *current) onscopeItem467() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem467() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem467()
}

func (c *current) onscopeItem468() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem468() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem468()
}

func (c *current) onscopeItem469() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem469() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem469()
}

func (c *current) onscopeItem471() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem471() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem471()
}

func (c *current) onscopeItem472() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem472() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem472()
}

func (c *current) onscopeItem474() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem474() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem474()
}

func (c *current) onscopeItem452(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem452() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem452(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem492(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem492() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem492(stack["linesI"])
}

func (c *current) onscopeItem438(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem438(stack["linesI"])
}

func (c *current) onscopeItem424(bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
			Position: pos(c),
			Body:     castedOrZero[[]file.FilterLine](bodyI),
		}, &corgierr.Error{
			Message: "bad filter",
			ErrorAnnotation: anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected `raw` or a command name",
			}),
		}
}

func (p *parser) callonscopeItem424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem424(stack["bodyI"])
}

func (c *current) onscopeItem504(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem504(stack["strI"])
}

func (c *current) onscopeItem511(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem511(stack["strI"])
}

func (c *current) onscopeItem543() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem543()
}

func (c *current) onscopeItem556() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem556() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem556()
}

func (c *current) onscopeItem577() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem577()
}

func (c *current) onscopeItem600() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem600() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem600()
}

func (c *current) onscopeItem611() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem611()
}

func (c *current) onscopeItem618() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem618()
}

func (c *current) onscopeItem623() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem623()
}

func (c *current) onscopeItem528(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem528(stack["strI"])
}

func (c *current) onscopeItem644() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem644()
}

func (c *current) onscopeItem657() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem657()
}

func (c *current) onscopeItem678() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem678()
}

func (c *current) onscopeItem701() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem701() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem701()
}

func (c *current) onscopeItem712() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem712()
}

func (c *current) onscopeItem719() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem719()
}

func (c *current) onscopeItem724() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem724() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem724()
}

func (c *current) onscopeItem730() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem730() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem730()
}

func (c *current) onscopeItem629(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem629(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem755() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem755()
}

func (c *current) onscopeItem747(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonscopeItem747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem747(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem498(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonscopeItem498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem498(stack["sI"])
}

func (c *current) onscopeItem761(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonscopeItem761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem761(stack["pathI"])
}

func (c *current) onscopeItem493(pathI interface{}) (interface{}, error) {
	return file.Include{
		Path:     pathI.(file.String),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem493(stack["pathI"])
}

func (c *current) onscopeItem795() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem795() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem795()
}

func (c *current) onscopeItem791(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem791(stack["startPosI"])
}

func (c *current) onscopeItem812() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem812()
}

func (c *current) onscopeItem776() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonscopeItem776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem776()
}

func (c *current) onscopeItem846() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem846() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem846()
}

func (c *current) onscopeItem842(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem842() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem842(stack["startPosI"])
}

func (c *current) onscopeItem863() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem863() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem863()
}

func (c *current) onscopeItem827() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonscopeItem827() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem827()
}

func (c *current) onscopeItem773(doctypeI interface{}) (interface{}, error) {
	return doctypeI, &corgierr.Error{
		Message: "`doctype` not first item",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             pos(c),
			ToEOL:             true,
			Annotation:        "cannot place doctype directive here",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "`doctype`s may only be placed as the first element after the `func` declaration\n" +
					"remove this `doctype` and move it right under the `func` of your file, if there isn't a doctype there already",
			},
		},
	}
}

func (p *parser) callonscopeItem773() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem773(stack["doctypeI"])
}

func (c *current) onBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody3()
}

func (c *current) onBody6(scopeI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonBody6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody6(stack["scopeI"])
}

func (c *current) onBody1(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody1(stack["scopeI"])
}

func (c *current) onBeaitb2(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil
}

func (p *parser) callonBeaitb2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb2(stack["scopeItemI"])
}

func (c *current) onBeaitb8(bodyI interface{}) (interface{}, error) {
	return bodyI, nil
}

func (p *parser) callonBeaitb8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb8(stack["bodyI"])
}

func (c *current) onBeaitb21() (interface{}, error) {
	return file.Scope(nil), nil
}

func (p *parser) callonBeaitb21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb21()
}

func (c *current) onBeaitb32(lineI, bodyI interface{}) (interface{}, error) {
	return file.Scope{file.BadItem{
			Line:     concat(lineI),
			Body:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}}, &corgierr.Error{
			Message: "unexpected tokens",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				ToEOL:      true,
				Annotation: "expected a block expansion (`:`), an assign (`=` or `!=`), inline text, a body, or nothing",
			}),
		}
}

func (p *parser) callonBeaitb32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb32(stack["lineI"], stack["bodyI"])
}

func (c *current) onBeait2(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil
}

func (p *parser) callonBeait2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait2(stack["scopeItemI"])
}

func (c *current) onBeait8() (interface{}, error) {
	return file.Scope(nil), nil
}

func (p *parser) callonBeait8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait8()
}

func (c *current) onBeait19(lineI interface{}) (interface{}, error) {
	return file.Scope{file.BadItem{
			Line:     concat(lineI),
			Position: pos(c),
		}}, &corgierr.Error{
			Message: "unexpected tokens",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				ToEOL:      true,
				Annotation: "expected a block expansion (`:`), an assign (`=` or `!=`), inline text, or nothing",
			}),
		}
}

func (p *parser) callonBeait19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait19(stack["lineI"])
}

func (c *current) onBadItem1(lineI, bodyI interface{}) (interface{}, error) {
	line := concat(lineI)

	firstWordLen := strings.IndexByte(line, ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(line))
	}

	return file.BadItem{
			Line:     line,
			Body:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive or invalid element name",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a valid corgi directive or an element name",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
				{
					Suggestion: "use a valid corgi directive",
					ShouldBe: "a block (`block`, `append`, `prepend`), code (`-`), a conditional (`if`, `else if`, `else`, `switch`),\n" +
						"a loop (`for`), a filter (`:`), an include (`include`), a mixin (`mixin`), a mixin call (`+`),\n" +
						"a Go import (`import`), a corgi use (`use`), the func header (`func`),\n" +
						"an assign (`=`, `!=`), an arrow block (`>`)",
				},
			},
		}
}

func (p *parser) callonBadItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem1(stack["lineI"], stack["bodyI"])
}

func (c *current) onBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock18(stack["identI"])
}

func (c *current) onBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock37()
}

func (c *current) onBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock15(stack["identI"])
}

func (c *current) onBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock46()
}

func (c *current) onBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock43(stack["posI"])
}

func (c *current) onBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock71()
}

func (c *current) onBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock9(stack["identI"])
}

func (c *current) onBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock77()
}

func (c *current) onBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock4(stack["nameI"])
}

func (c *current) onBlock1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["blockI"], stack["bodyI"])
}

func (c *current) onInlineBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock18(stack["identI"])
}

func (c *current) onInlineBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock37()
}

func (c *current) onInlineBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock15(stack["identI"])
}

func (c *current) onInlineBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock46()
}

func (c *current) onInlineBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock43(stack["posI"])
}

func (c *current) onInlineBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock71()
}

func (c *current) onInlineBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock9(stack["identI"])
}

func (c *current) onInlineBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonInlineBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock77()
}

func (c *current) onInlineBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock4(stack["nameI"])
}

func (c *current) onInlineBlock1(blockI, scopeI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = castedOrZero[file.Scope](scopeI)
	return block, nil
}

func (p *parser) callonInlineBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock1(stack["blockI"], stack["scopeI"])
}

func (c *current) onPrepend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonPrepend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend18(stack["identI"])
}

func (c *current) onPrepend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend37()
}

func (c *current) onPrepend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonPrepend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend24(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend15(stack["identI"])
}

func (c *current) onPrepend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend46()
}

func (c *current) onPrepend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend43(stack["posI"])
}

func (c *current) onPrepend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend71()
}

func (c *current) onPrepend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend65(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend9(stack["identI"])
}

func (c *current) onPrepend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonPrepend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend77()
}

func (c *current) onPrepend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypePrepend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonPrepend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend4(stack["nameI"])
}

func (c *current) onPrepend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonPrepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onAppend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonAppend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend18(stack["identI"])
}

func (c *current) onAppend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend37()
}

func (c *current) onAppend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonAppend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend24(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend15(stack["identI"])
}

func (c *current) onAppend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend46()
}

func (c *current) onAppend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend43(stack["posI"])
}

func (c *current) onAppend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend71()
}

func (c *current) onAppend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend65(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend9(stack["identI"])
}

func (c *current) onAppend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonAppend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend77()
}

func (c *current) onAppend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeAppend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonAppend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend4(stack["nameI"])
}

func (c *current) onAppend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonAppend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onBlockExpansion1(sI interface{}) (interface{}, error) {
	return file.BlockExpansion{
		Item:     sI.(file.ScopeItem),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlockExpansion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion1(stack["sI"])
}

func (c *current) onblockExpansionItem4(lineI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	bi := file.BadItem{
		Line:     concat(lineI),
		Position: pos(c),
	}

	var suggestions []corgierr.Suggestion
	if bi.Line != "" {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec",
		})
	}

	return bi, &corgierr.Error{
		Message: "malformed block expansion",
		ErrorAnnotation: anno(c, annotation{
			Start: pos(c),
			Len:   firstWordLen,
			Annotation: "expected a block directive, an inline element, an inline arrow block,\n" +
				"a mixin call, or inline &-attributes",
		}),
		Suggestions: suggestions,
	}
}

func (p *parser) callonblockExpansionItem4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblockExpansionItem4(stack["lineI"])
}

func (c *current) onspacedBlockExpansionItem2(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonspacedBlockExpansionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem2(stack["sI"])
}

func (c *current) onspacedBlockExpansionItem11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonspacedBlockExpansionItem11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem11()
}

func (c *current) onspacedBlockExpansionItem8(posI, sI interface{}) (interface{}, error) {
	var fromThe string
	switch sI.(type) {
	case file.Block:
		fromThe = "block"
	case file.Element:
		fromThe = "inline element"
	case file.DivShorthand:
		fromThe = "div shorthand"
	case file.MixinCall:
		fromThe = "mixin call"
	case file.And:
		fromThe = "&"
	default:
		fromThe = "rest"
	}

	return file.BlockExpansion{
			Item:     sI.(file.ScopeItem),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `:` from the " + fromThe,
			}),
		}
}

func (p *parser) callonspacedBlockExpansionItem8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem8(stack["posI"], stack["sI"])
}

func (c *current) onCodes1(codesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.Code](codesI, 1), nil
}

func (p *parser) callonCodes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCodes1(stack["codesI"])
}

func (c *current) onCode6(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode6(stack["code"])
}

func (c *current) onCode32(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode32(stack["code"])
}

func (c *current) onCode2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	additionalLineTuples := islice(additionalLinesI)

	lines := make([]file.CodeLine, 1+len(additionalLineTuples))
	lines[0] = firstLineI.(file.CodeLine)
	for i, lt := range additionalLineTuples {
		lines[i+1] = getTuple[file.CodeLine](lt, -1)
	}

	return file.Code{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonCode2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onCode50() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonCode50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode50()
}

func (c *current) onCode46(posI interface{}) (interface{}, error) {
	return file.Code{Position: pos(c)}, &corgierr.Error{
		Message: "empty code block",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected code here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "either write some code, or delete this line"},
		},
	}
}

func (p *parser) callonCode46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode46(stack["posI"])
}

func (c *current) oncondition2(condI interface{}) (interface{}, error) {
	return condI, nil
}

func (p *parser) calloncondition2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition2(stack["condI"])
}

func (c *current) oncondition11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition11()
}

func (c *current) oncondition8(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition8(stack["posI"])
}

func (c *current) oncondition30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition30()
}

func (c *current) oncondition28(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition28(stack["posI"])
}

func (c *current) onthen2(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonthen2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen2(stack["scopeI"])
}

func (c *current) onthen15(beI interface{}) (interface{}, error) {
	return file.Scope{beI.(file.BlockExpansion)}, nil
}

func (p *parser) callonthen15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen15(stack["beI"])
}

func (c *current) onthen18() (interface{}, error) {
	return file.Scope(nil), &corgierr.Error{
		Message: "missing body",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}
}

func (p *parser) callonthen18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen18()
}

func (c *current) onthen30() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonthen30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen30()
}

func (c *current) onthen33() (bool, error) {
	return true, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}

}

func (p *parser) callonthen33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen33()
}

func (c *current) onIf1(condI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.If{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		ElseIfs:   typedSlice[file.ElseIf](elseIfsI),
		Else:      ptrOrNil[file.Else](elseI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIf1(stack["condI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onElseIf11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIf11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf11()
}

func (c *current) onElseIf14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIf14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf14()
}

func (c *current) onElseIf16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIf16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf16()
}

func (c *current) onElseIf18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonElseIf18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf18()
}

func (c *current) onElseIf19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIf19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf19()
}

func (c *current) onElseIf21() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIf21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf21()
}

func (c *current) onElseIf24() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIf24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf24()
}

func (c *current) onElseIf25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIf25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf25()
}

func (c *current) onElseIf26() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIf26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf26()
}

func (c *current) onElseIf28() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIf28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf28()
}

func (c *current) onElseIf29() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIf29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf29()
}

func (c *current) onElseIf31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIf31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf31()
}

func (c *current) onElseIf1(posI, condI, thenI interface{}) (interface{}, error) {
	return file.ElseIf{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		Position:  posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf1(stack["posI"], stack["condI"], stack["thenI"])
}

func (c *current) onElse11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElse11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse11()
}

func (c *current) onElse14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElse14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse14()
}

func (c *current) onElse16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElse16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse16()
}

func (c *current) onElse18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonElse18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse18()
}

func (c *current) onElse19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElse19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse19()
}

func (c *current) onElse21() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElse21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse21()
}

func (c *current) onElse24() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElse24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse24()
}

func (c *current) onElse25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElse25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse25()
}

func (c *current) onElse26() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElse26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse26()
}

func (c *current) onElse28() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElse28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse28()
}

func (c *current) onElse29() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElse29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse29()
}

func (c *current) onElse1(thenI interface{}) (interface{}, error) {
	return file.Else{
		Then:     thenI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse1(stack["thenI"])
}

func (c *current) onIfBlock15(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonIfBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock15(stack["identI"])
}

func (c *current) onIfBlock34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock34()
}

func (c *current) onIfBlock21(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonIfBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock21(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock12(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock12(stack["identI"])
}

func (c *current) onIfBlock43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock43()
}

func (c *current) onIfBlock40(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock40(stack["posI"])
}

func (c *current) onIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock68()
}

func (c *current) onIfBlock62(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock62(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock6(stack["identI"])
}

func (c *current) onIfBlock74() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock74()
}

func (c *current) onIfBlock1(nameI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.IfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		ElseIfs:  typedSlice[file.ElseIfBlock](elseIfsI),
		Else:     ptrOrNil[file.Else](elseI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock1(stack["nameI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onElseIfBlock11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIfBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock11()
}

func (c *current) onElseIfBlock14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIfBlock14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock14()
}

func (c *current) onElseIfBlock16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIfBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock16()
}

func (c *current) onElseIfBlock18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonElseIfBlock18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock18()
}

func (c *current) onElseIfBlock19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIfBlock19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock19()
}

func (c *current) onElseIfBlock21() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock21()
}

func (c *current) onElseIfBlock24() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIfBlock24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock24()
}

func (c *current) onElseIfBlock25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock25()
}

func (c *current) onElseIfBlock26() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIfBlock26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock26()
}

func (c *current) onElseIfBlock28() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIfBlock28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock28()
}

func (c *current) onElseIfBlock29() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIfBlock29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock29()
}

func (c *current) onElseIfBlock31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock31()
}

func (c *current) onElseIfBlock49(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonElseIfBlock49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock49(stack["identI"])
}

func (c *current) onElseIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock68()
}

func (c *current) onElseIfBlock55(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonElseIfBlock55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock55(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock46(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock46(stack["identI"])
}

func (c *current) onElseIfBlock77() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock77()
}

func (c *current) onElseIfBlock74(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock74(stack["posI"])
}

func (c *current) onElseIfBlock102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock102()
}

func (c *current) onElseIfBlock96(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock96(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock40(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock40(stack["identI"])
}

func (c *current) onElseIfBlock108() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonElseIfBlock108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock108()
}

func (c *current) onElseIfBlock1(posI, nameI, thenI interface{}) (interface{}, error) {
	return file.ElseIfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		Position: posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock1(stack["posI"], stack["nameI"], stack["thenI"])
}

func (c *current) onSwitch1(comparatorI, bodyI interface{}) (interface{}, error) {
	body := bodyI.(file.Switch)

	s := file.Switch{
		Comparator: comparatorI.(*file.Expression),
		Cases:      body.Cases,
		Default:    body.Default,
		Position:   pos(c),
	}

	if len(s.Cases) == 0 {
		return s, &corgierr.Error{
			Message: "switch must have at least one case",
			ErrorAnnotation: anno(c, annotation{
				ContextEndDelta: 1,
				Start:           pos(c),
				ToEOL:           true,
				Annotation:      "expected switch to have at least one non-default case",
			}),
		}
	}

	return s, nil
}

func (p *parser) callonSwitch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch1(stack["comparatorI"], stack["bodyI"])
}

func (c *current) onswitchComparator2() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonswitchComparator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator2()
}

func (c *current) onswitchComparator13(compI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, nil
}

func (p *parser) callonswitchComparator13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator13(stack["compI"])
}

func (c *current) onswitchComparator35() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonswitchComparator35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator35()
}

func (c *current) onswitchComparator28(compI, startPosI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			Annotation: "expression was terminated here, but should span entire line",
		}),
	}
}

func (p *parser) callonswitchComparator28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator28(stack["compI"], stack["startPosI"])
}

func (c *current) onswitchBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonswitchBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody3()
}

func (c *current) onswitchBody15() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonswitchBody15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody15()
}

func (c *current) onswitchBody18() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonswitchBody18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody18()
}

func (c *current) onswitchBody20() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonswitchBody20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody20()
}

func (c *current) onswitchBody22() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonswitchBody22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody22()
}

func (c *current) onswitchBody23() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonswitchBody23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody23()
}

func (c *current) onswitchBody25() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody25()
}

func (c *current) onswitchBody28() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonswitchBody28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody28()
}

func (c *current) onswitchBody29() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody29()
}

func (c *current) onswitchBody30() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonswitchBody30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody30()
}

func (c *current) onswitchBody32() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonswitchBody32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody32()
}

func (c *current) onswitchBody33() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonswitchBody33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody33()
}

func (c *current) onswitchBody35(itms interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonswitchBody35() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody35(stack["itms"])
}

func (c *current) onswitchBody1(itms interface{}) (interface{}, error) {
	tupleTuples := islice(itms)

	s := file.Switch{Cases: make([]file.Case, 0, len(tupleTuples))}

	var err error
	for _, tupleTuple := range tupleTuples {
		tuple := getTuple[any](tupleTuple, -1)

		switchCase, ok := getTuple[file.Case](tuple, 0), getTuple[bool](tuple, -1)
		if switchCase.Expression != nil || !ok {
			s.Cases = append(s.Cases, switchCase)
		} else {
			if s.Default != nil {
				err = &corgierr.Error{
					Message: "multiple default cases in switch",
					ErrorAnnotation: anno(c, annotation{
						Start:      switchCase.Position,
						Len:        len("default"),
						Annotation: "second default case",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      s.Default.Position,
							Len:        len("default"),
							Annotation: "first default case",
						}),
					},
				}
			} else {
				s.Default = &switchCase
			}
		}
	}

	return s, err
}

func (p *parser) callonswitchBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody1(stack["itms"])
}

func (c *current) onswitchBodyItem2(caseI interface{}) (interface{}, error) {
	return []any{caseI, true}, nil
}

func (p *parser) callonswitchBodyItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem2(stack["caseI"])
}

func (c *current) onswitchBodyItem7(caseI interface{}) (interface{}, error) {
	return []any{caseI, false}, nil
}

func (p *parser) callonswitchBodyItem7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem7(stack["caseI"])
}

func (c *current) onCase1(condI, thenI interface{}) (interface{}, error) {
	return file.Case{
		Expression: ptrOrNil[file.Expression](condI),
		Then:       thenI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase1(stack["condI"], stack["thenI"])
}

func (c *current) onDefault1(thenI interface{}) (interface{}, error) {
	return file.Case{
		Then:     thenI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["thenI"])
}

func (c *current) onBadCase1(bodyI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	return file.Case{
			Then:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive in switch body",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a case or a default",
			}),
		}
}

func (p *parser) callonBadCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadCase1(stack["bodyI"])
}

func (c *current) onFor1(exprI, bodyI interface{}) (interface{}, error) {
	return file.For{
		Expression: exprI.(*file.Expression),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonFor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onforExpression2(exprI interface{}) (interface{}, error) {
	return ptr(exprI.(file.Expression)), nil
}

func (p *parser) callonforExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onforExpression2(stack["exprI"])
}

func (c *current) onforExpression10() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonforExpression10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onforExpression10()
}

func (c *current) onCorgiComments1(commentsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiComment](commentsI, -1), nil
}

func (p *parser) callonCorgiComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComments1(stack["commentsI"])
}

func (c *current) onCorgiComment8(linesI interface{}) (interface{}, error) {
	return linesI, nil

}

func (p *parser) callonCorgiComment8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment8(stack["linesI"])
}

func (c *current) onCorgiComment25(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonCorgiComment25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment25(stack["commentI"])
}

func (c *current) onCorgiComment23(lineI interface{}) (interface{}, error) {
	return []file.CorgiCommentLine{lineI.(file.CorgiCommentLine)}, nil

}

func (p *parser) callonCorgiComment23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment23(stack["lineI"])
}

func (c *current) onCorgiComment1(linesI interface{}) (interface{}, error) {
	return file.CorgiComment{
		Lines:    linesI.([]file.CorgiCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonCorgiComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment1(stack["linesI"])
}

func (c *current) oncorgiCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) calloncorgiCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock3()
}

func (c *current) oncorgiCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) calloncorgiCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock16(stack["commentI"])
}

func (c *current) oncorgiCommentBlock30(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) calloncorgiCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock30(stack["linesI"])
}

func (c *current) oncorgiCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiCommentLine](linesI, -1), nil
}

func (p *parser) calloncorgiCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock1(stack["linesI"])
}

func (c *current) onHTMLComment6(linesI interface{}) (interface{}, error) {
	return linesI, nil

}

func (p *parser) callonHTMLComment6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment6(stack["linesI"])
}

func (c *current) onHTMLComment21(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonHTMLComment21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment21(stack["commentI"])
}

func (c *current) onHTMLComment19(lineI interface{}) (interface{}, error) {
	return []file.HTMLCommentLine{lineI.(file.HTMLCommentLine)}, nil

}

func (p *parser) callonHTMLComment19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment19(stack["lineI"])
}

func (c *current) onHTMLComment1(linesI interface{}) (interface{}, error) {
	return file.HTMLComment{
		Lines:    linesI.([]file.HTMLCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonHTMLComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment1(stack["linesI"])
}

func (c *current) onhtmlCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonhtmlCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock3()
}

func (c *current) onhtmlCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonhtmlCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock16(stack["commentI"])
}

func (c *current) onhtmlCommentBlock30(linesI interface{}) error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonhtmlCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock30(stack["linesI"])
}

func (c *current) onhtmlCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.HTMLCommentLine](linesI, -1), nil
}

func (p *parser) callonhtmlCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock1(stack["linesI"])
}

func (c *current) onElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onInlineElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand5(stack["nameI"])
}

func (c *current) onDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand15()
}

func (c *current) onDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand11(stack["posI"])
}

func (c *current) onDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand21(stack["idI"])
}

func (c *current) onDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand31()
}

func (c *current) onDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand27(stack["posI"])
}

func (c *current) onDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](moreAttrsI)...),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onInlineDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand5(stack["nameI"])
}

func (c *current) onInlineDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand15()
}

func (c *current) onInlineDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand11(stack["posI"])
}

func (c *current) onInlineDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand21(stack["idI"])
}

func (c *current) onInlineDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand31()
}

func (c *current) onInlineDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand27(stack["posI"])
}

func (c *current) onInlineDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](moreAttrsI)...),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onAnd2(collsI interface{}) (interface{}, error) {
	return file.And{
		Attributes: typedSlice[file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd2(stack["collsI"])
}

func (c *current) onAnd21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd21()
}

func (c *current) onAnd17(posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "`&` with no attributes",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an attribute here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd17(stack["posI"])
}

func (c *current) onAnd43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd43()
}

func (c *current) onAnd36(collsI, posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "bad attribute syntax",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "this is not a valid attribute (list)",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
					Example:    "`&#bark .woof (title=\"howl\")`",
					ShouldBe:   "`&#bark.woof(title=\"howl\")`",
				},
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd36(stack["collsI"], stack["posI"])
}

func (c *current) onInlineAnd2(collsI interface{}) (interface{}, error) {
	return file.And{
		Attributes: typedSlice[file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd2(stack["collsI"])
}

func (c *current) onInlineAnd21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineAnd21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd21()
}

func (c *current) onInlineAnd17(posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "`&` with no attributes",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an attribute here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonInlineAnd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd17(stack["posI"])
}

func (c *current) onInlineAnd43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineAnd43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd43()
}

func (c *current) onInlineAnd36(collsI, posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "bad attribute syntax",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "this is not a valid attribute (list)",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
					Example:    "`&#bark .woof (title=\"howl\")`",
					ShouldBe:   "`&#bark.woof(title=\"howl\")`",
				},
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonInlineAnd36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd36(stack["collsI"], stack["posI"])
}

func (c *current) onAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection2(stack["idI"])
}

func (c *current) onAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection12()
}

func (c *current) onAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection8(stack["posI"])
}

func (c *current) onAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection18(stack["nameI"])
}

func (c *current) onAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection28()
}

func (c *current) onAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection24(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection2(stack["idI"])
}

func (c *current) onSingleLineAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection12()
}

func (c *current) onSingleLineAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection8(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection18(stack["nameI"])
}

func (c *current) onSingleLineAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection28()
}

func (c *current) onSingleLineAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection24(stack["posI"])
}

func (c *current) onAttributeList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList28()
}

func (c *current) onAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onAttributeList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList49()
}

func (c *current) onAttributeList30(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonAttributeList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList30(stack["attributesI"], stack["posI"])
}

func (c *current) onattributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonattributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineAttributeList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList18()
}

func (c *current) onSingleLineAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonSingleLineAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onSingleLineAttributeList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList34()
}

func (c *current) onSingleLineAttributeList20(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonSingleLineAttributeList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList20(stack["attributesI"], stack["posI"])
}

func (c *current) onsingleLineAttributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonsingleLineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineAttributes1(stack["firstI"], stack["restI"])
}

func (c *current) onAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute3()
}

func (c *current) onSingleLineAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonSingleLineAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttribute3()
}

func (c *current) onSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute3(stack["nameI"])
}

func (c *current) onSingleLineSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineSimpleAttribute3(stack["nameI"])
}

func (c *current) onsimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute15()
}

func (c *current) onsimpleValueAttribute30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute30()
}

func (c *current) onsimpleValueAttribute2(nameI, assignPosI, posI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		AssignPos: ptr(assignPosI.(file.Position)),
		Value:     ptrOrNil[file.Expression](exprI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonsimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["posI"], stack["exprI"])
}

func (c *current) onsimpleValueAttribute51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute51()
}

func (c *current) onsimpleValueAttribute59() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute59()
}

func (c *current) onsimpleValueAttribute38(nameI, assignPosI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			AssignPos: ptrOrNil[file.Position](assignPosI),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression here",
			}),
		}
}

func (p *parser) callonsimpleValueAttribute38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute38(stack["nameI"], stack["assignPosI"], stack["posI"])
}

func (c *current) onsingleLineSimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute15()
}

func (c *current) onsingleLineSimpleValueAttribute2(nameI, assignPosI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		AssignPos: ptrOrNil[file.Position](assignPosI),
		Value:     ptrOrNil[file.Expression](exprI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonsingleLineSimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["exprI"])
}

func (c *current) onsingleLineSimpleValueAttribute39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute39()
}

func (c *current) onsingleLineSimpleValueAttribute47() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute47()
}

func (c *current) onsingleLineSimpleValueAttribute26(nameI, assignPosI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			AssignPos: ptrOrNil[file.Position](assignPosI),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression or a mixin call here",
			}),
		}
}

func (p *parser) callonsingleLineSimpleValueAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute26(stack["nameI"], stack["assignPosI"], stack["posI"])
}

func (c *current) onMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute14()
}

func (c *current) onMixinCallAttribute1(nameI, assignPosI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["callI"])
}

func (c *current) onSingleLineMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute14()
}

func (c *current) onSingleLineMixinCallAttribute1(nameI, assignPosI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["callI"])
}

func (c *current) onmixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall8(stack["identI"])
}

func (c *current) onmixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall27()
}

func (c *current) onmixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall39(stack["identI"])
}

func (c *current) onmixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall58()
}

func (c *current) onmixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall36(stack["identI"])
}

func (c *current) onmixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall67()
}

func (c *current) onmixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall64(stack["posI"])
}

func (c *current) onmixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall92()
}

func (c *current) onmixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonmixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onsingleLineMixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall8(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall27()
}

func (c *current) onsingleLineMixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall39(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall58()
}

func (c *current) onsingleLineMixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall36(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall67()
}

func (c *current) onsingleLineMixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall64(stack["posI"])
}

func (c *current) onsingleLineMixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall92()
}

func (c *current) onsingleLineMixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinCallAttributeValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue5()
}

func (c *current) onmixinCallAttributeValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue11()
}

func (c *current) onmixinCallAttributeValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinCallAttributeValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinCallAttributeValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue16()
}

func (c *current) onmixinCallAttributeValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonmixinCallAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression2(stack["cExprI"])
}

func (c *current) onSingleLineExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonSingleLineExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineExpression2(stack["cExprI"])
}

func (c *current) onGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression11()
}

func (c *current) onGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression27()
}

func (c *current) onGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression48()
}

func (c *current) onGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression80()
}

func (c *current) onGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression87()
}

func (c *current) onGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression98()
}

func (c *current) onGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression105()
}

func (c *current) onGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression110()
}

func (c *current) onGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression128()
}

func (c *current) onGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression149()
}

func (c *current) onGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression181()
}

func (c *current) onGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression188()
}

func (c *current) onGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression199()
}

func (c *current) onGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression206()
}

func (c *current) onGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression211()
}

func (c *current) onGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression218()
}

func (c *current) onGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression8(stack["posI"])
}

func (c *current) onGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression227()
}

func (c *current) onGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression224(stack["posI"])
}

func (c *current) onGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression1(stack["exprsI"])
}

func (c *current) ongoParenExpr9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr9()
}

func (c *current) ongoParenExpr20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr20()
}

func (c *current) ongoParenExpr31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr31()
}

func (c *current) ongoParenExpr2(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]), // opening paren
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]), // closing paren
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil
}

func (p *parser) callongoParenExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr2(stack["exprI"])
}

func (c *current) ongoParenExpr43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr43()
}

func (c *current) ongoParenExpr38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			ContextLen: 3,
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here or on a line below",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}
}

func (p *parser) callongoParenExpr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) ongoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression11()
}

func (c *current) ongoSubExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression27()
}

func (c *current) ongoSubExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression48()
}

func (c *current) ongoSubExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression80()
}

func (c *current) ongoSubExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression87()
}

func (c *current) ongoSubExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression98()
}

func (c *current) ongoSubExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression105()
}

func (c *current) ongoSubExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression110()
}

func (c *current) ongoSubExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression128()
}

func (c *current) ongoSubExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression149()
}

func (c *current) ongoSubExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression181()
}

func (c *current) ongoSubExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression188()
}

func (c *current) ongoSubExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression199()
}

func (c *current) ongoSubExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression206()
}

func (c *current) ongoSubExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression211()
}

func (c *current) ongoSubExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression218()
}

func (c *current) ongoSubExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callongoSubExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) ongoSubExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callongoSubExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression8(stack["posI"])
}

func (c *current) ongoSubExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression227()
}

func (c *current) ongoSubExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callongoSubExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression224(stack["posI"])
}

func (c *current) ongoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callongoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression1(stack["exprsI"])
}

func (c *current) onmultiLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression11()
}

func (c *current) onmultiLineGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression27()
}

func (c *current) onmultiLineGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression48()
}

func (c *current) onmultiLineGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression80()
}

func (c *current) onmultiLineGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression87()
}

func (c *current) onmultiLineGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression98()
}

func (c *current) onmultiLineGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression105()
}

func (c *current) onmultiLineGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression110()
}

func (c *current) onmultiLineGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression128()
}

func (c *current) onmultiLineGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression149()
}

func (c *current) onmultiLineGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression181()
}

func (c *current) onmultiLineGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression188()
}

func (c *current) onmultiLineGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression199()
}

func (c *current) onmultiLineGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression206()
}

func (c *current) onmultiLineGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression211()
}

func (c *current) onmultiLineGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression218()
}

func (c *current) onmultiLineGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onmultiLineGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonmultiLineGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression8(stack["posI"])
}

func (c *current) onmultiLineGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression227()
}

func (c *current) onmultiLineGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonmultiLineGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression224(stack["posI"])
}

func (c *current) onmultiLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonmultiLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression1(stack["exprsI"])
}

func (c *current) onSingleLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression11()
}

func (c *current) onSingleLineGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression27()
}

func (c *current) onSingleLineGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression48()
}

func (c *current) onSingleLineGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression80()
}

func (c *current) onSingleLineGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression87()
}

func (c *current) onSingleLineGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression98()
}

func (c *current) onSingleLineGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression105()
}

func (c *current) onSingleLineGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression110()
}

func (c *current) onSingleLineGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression128()
}

func (c *current) onSingleLineGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression149()
}

func (c *current) onSingleLineGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression181()
}

func (c *current) onSingleLineGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression188()
}

func (c *current) onSingleLineGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression199()
}

func (c *current) onSingleLineGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression206()
}

func (c *current) onSingleLineGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression211()
}

func (c *current) onSingleLineGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression218()
}

func (c *current) onSingleLineGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onSingleLineGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonSingleLineGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression8(stack["posI"])
}

func (c *current) onSingleLineGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression227()
}

func (c *current) onSingleLineGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonSingleLineGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression224(stack["posI"])
}

func (c *current) onSingleLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonSingleLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression1(stack["exprsI"])
}

func (c *current) onsingleLineGoParenExpr9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr9()
}

func (c *current) onsingleLineGoParenExpr20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr20()
}

func (c *current) onsingleLineGoParenExpr31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr31()
}

func (c *current) onsingleLineGoParenExpr2(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil
}

func (p *parser) callonsingleLineGoParenExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr2(stack["exprI"])
}

func (c *current) onsingleLineGoParenExpr43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr43()
}

func (c *current) onsingleLineGoParenExpr38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}
}

func (p *parser) callonsingleLineGoParenExpr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onsingleLineGoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression11()
}

func (c *current) onsingleLineGoSubExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression27()
}

func (c *current) onsingleLineGoSubExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression48()
}

func (c *current) onsingleLineGoSubExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression80()
}

func (c *current) onsingleLineGoSubExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression87()
}

func (c *current) onsingleLineGoSubExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression98()
}

func (c *current) onsingleLineGoSubExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression105()
}

func (c *current) onsingleLineGoSubExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression110()
}

func (c *current) onsingleLineGoSubExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression128()
}

func (c *current) onsingleLineGoSubExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression149()
}

func (c *current) onsingleLineGoSubExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression181()
}

func (c *current) onsingleLineGoSubExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression188()
}

func (c *current) onsingleLineGoSubExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression199()
}

func (c *current) onsingleLineGoSubExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression206()
}

func (c *current) onsingleLineGoSubExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression211()
}

func (c *current) onsingleLineGoSubExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression218()
}

func (c *current) onsingleLineGoSubExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onsingleLineGoSubExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonsingleLineGoSubExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression8(stack["posI"])
}

func (c *current) onsingleLineGoSubExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression227()
}

func (c *current) onsingleLineGoSubExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonsingleLineGoSubExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression224(stack["posI"])
}

func (c *current) onsingleLineGoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonsingleLineGoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression1(stack["exprsI"])
}

func (c *current) onIfExpression2(cExprI interface{}) (interface{}, error) {
	cExpr := cExprI.(file.ChainExpression)
	expr := file.Expression{Expressions: []file.ExpressionItem{cExpr}}
	if cExpr.Default != nil {
		return expr, &corgierr.Error{
			Message: "chain expression with default as conditional",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "here", // todo: span the entire len of the expression
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the default"},
			},
		}
	}

	return expr, nil
}

func (p *parser) callonIfExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression2(stack["cExprI"])
}

func (c *current) onIfExpression15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression15()
}

func (c *current) onIfExpression31() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression31()
}

func (c *current) onIfExpression52() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression52()
}

func (c *current) onIfExpression84() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression84()
}

func (c *current) onIfExpression91() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression91()
}

func (c *current) onIfExpression102() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression102()
}

func (c *current) onIfExpression109() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression109()
}

func (c *current) onIfExpression114() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression114()
}

func (c *current) onIfExpression132() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression132()
}

func (c *current) onIfExpression153() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression153()
}

func (c *current) onIfExpression185() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression185()
}

func (c *current) onIfExpression192() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression192()
}

func (c *current) onIfExpression203() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression203()
}

func (c *current) onIfExpression210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression210()
}

func (c *current) onIfExpression215() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression215()
}

func (c *current) onIfExpression222() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression222()
}

func (c *current) onIfExpression120(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonIfExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression120(stack["valsI"], stack["endPosI"])
}

func (c *current) onIfExpression12(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonIfExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression12(stack["posI"])
}

func (c *current) onIfExpression231() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression231()
}

func (c *current) onIfExpression228(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonIfExpression228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression228(stack["posI"])
}

func (c *current) onIfExpression5(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonIfExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression5(stack["exprsI"])
}

func (c *current) onRangeExpression9(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression9(stack["ident"])
}

func (c *current) onRangeExpression28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRangeExpression28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression28()
}

func (c *current) onRangeExpression15(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonRangeExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression15(stack["identI"], stack["endPosI"])
}

func (c *current) onRangeExpression43(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression43(stack["ident"])
}

func (c *current) onRangeExpression62() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRangeExpression62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression62()
}

func (c *current) onRangeExpression49(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonRangeExpression49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression49(stack["identI"], stack["endPosI"])
}

func (c *current) onRangeExpression71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRangeExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression71()
}

func (c *current) onRangeExpression5(var1I, var2I, eqPosI, declaresI interface{}) (interface{}, error) {
	var1 := var1I.(file.GoIdent)

	var var2 *file.GoIdent
	if var2I != nil {
		var2Val := getTuple[file.GoIdent](var2I, -1)
		var2 = &var2Val
	}

	return file.RangeExpression{
		Var1:     &var1,
		Var2:     var2,
		EqPos:    eqPosI.(file.Position),
		Declares: declaresI != nil,
	}, nil
}

func (p *parser) callonRangeExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onRangeExpression1(varsI, orderedI, exprI interface{}) (interface{}, error) {
	re := file.RangeExpression{
		Ordered:         orderedI != nil,
		Position:        pos(c),
		RangeExpression: exprI.(file.Expression),
	}

	if partRE, ok := varsI.(file.RangeExpression); ok {
		re.Var1 = partRE.Var1
		re.Var2 = partRE.Var2
		re.EqPos = partRE.EqPos
		re.Declares = partRE.Declares
	}

	return re, nil
}

func (p *parser) callonRangeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression1(stack["varsI"], stack["orderedI"], stack["exprI"])
}

func (c *current) onInterpretedStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '"',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression2(stack["contentsI"])
}

func (c *current) onInterpretedStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInterpretedStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression13()
}

func (c *current) onInterpretedStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '"',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a `\"` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonInterpretedStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onRawStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '`',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression2(stack["contentsI"])
}

func (c *current) onRawStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRawStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression13()
}

func (c *current) onRawStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '`',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a ``` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonRawStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onInterpretedStringExpressionItem16() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem16()
}

func (c *current) onInterpretedStringExpressionItem37() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem37()
}

func (c *current) onInterpretedStringExpressionItem69() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonInterpretedStringExpressionItem69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem69()
}

func (c *current) onInterpretedStringExpressionItem76() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem76()
}

func (c *current) onInterpretedStringExpressionItem87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem87()
}

func (c *current) onInterpretedStringExpressionItem94() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem94()
}

func (c *current) onInterpretedStringExpressionItem99() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem99()
}

func (c *current) onInterpretedStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem2()
}

func (c *current) onRawStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpressionItem2()
}

func (c *current) onStringExpressionInterpolation25() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation25()
}

func (c *current) onStringExpressionInterpolation28() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation28()
}

func (c *current) onStringExpressionInterpolation8() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation8()
}

func (c *current) onStringExpressionInterpolation36() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation36()
}

func (c *current) onStringExpressionInterpolation30(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation30(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation43()
}

func (c *current) onStringExpressionInterpolation48() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation48()
}

func (c *current) onStringExpressionInterpolation2(fmtDirectiveI, lBracePosI, exprI, rBracePosI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
		FormatDirective: castedOrZero[string](fmtDirectiveI),
		Expression:      exprI.(file.Expression),
		LBracePos:       lBracePosI.(file.Position),
		RBracePos:       rBracePosI.(file.Position),
		Position:        pos(c),
	}, nil
}

func (p *parser) callonStringExpressionInterpolation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation2(stack["fmtDirectiveI"], stack["lBracePosI"], stack["exprI"], stack["rBracePosI"])
}

func (c *current) onStringExpressionInterpolation73() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation73()
}

func (c *current) onStringExpressionInterpolation76() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation76()
}

func (c *current) onStringExpressionInterpolation56() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation56()
}

func (c *current) onStringExpressionInterpolation84() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation84()
}

func (c *current) onStringExpressionInterpolation78(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation78(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation91()
}

func (c *current) onStringExpressionInterpolation50(fmtDirectiveI, parenPosI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			FormatDirective: castedOrZero[string](fmtDirectiveI),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "interpolation is missing an expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      parenPosI.(file.Position),
				Annotation: "expected a `" + lbrace + "` here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "add an expression enclosed in braces",
					Code:       "`" + string(c.text) + "{1+1}`",
				},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation50(stack["fmtDirectiveI"], stack["parenPosI"])
}

func (c *current) onStringExpressionInterpolation120() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation120()
}

func (c *current) onStringExpressionInterpolation123() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation123()
}

func (c *current) onStringExpressionInterpolation103() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation103()
}

func (c *current) onStringExpressionInterpolation131() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation131()
}

func (c *current) onStringExpressionInterpolation125(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation125(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation138() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation138()
}

func (c *current) onStringExpressionInterpolation145() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation145()
}

func (c *current) onStringExpressionInterpolation148() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation148()
}

func (c *current) onStringExpressionInterpolation97(fmtDirectiveI, parenPosI, lBracePosI, startPosI, exprI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			FormatDirective: castedOrZero[string](fmtDirectiveI),
			Expression:      exprI.(file.Expression),
			LBracePos:       lBracePosI.(file.Position),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "unclosed string interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				EOLDelta:   1,
				Annotation: "expected a `" + rbrace + "` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					End:        startPosI.(file.Position),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "add the missing `" + rbrace + "`"},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation97(stack["fmtDirectiveI"], stack["parenPosI"], stack["lBracePosI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onTernaryExpression51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression51()
}

func (c *current) onTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression57() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression57()
}

func (c *current) onTernaryExpression71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression71()
}

func (c *current) onTernaryExpression53(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression53(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression93() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression93()
}

func (c *current) onTernaryExpression87(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression87(stack["posI"])
}

func (c *current) onTernaryExpression109() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression109()
}

func (c *current) onTernaryExpression106(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression106(stack["posI"])
}

func (c *current) onTernaryExpression118() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression118()
}

func (c *current) onTernaryExpression73(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression73(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression152() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression152()
}

func (c *current) onTernaryExpression146(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression146(stack["posI"])
}

func (c *current) onTernaryExpression168() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression168()
}

func (c *current) onTernaryExpression165(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression165(stack["posI"])
}

func (c *current) onTernaryExpression177() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression177()
}

func (c *current) onTernaryExpression120(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression120(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression31()
}

func (c *current) onSingleLineTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression37()
}

func (c *current) onSingleLineTernaryExpression46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression46()
}

func (c *current) onSingleLineTernaryExpression33(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression33(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression63() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression63()
}

func (c *current) onSingleLineTernaryExpression57(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression57(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression79()
}

func (c *current) onSingleLineTernaryExpression76(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression76(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression88() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression88()
}

func (c *current) onSingleLineTernaryExpression48(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression48(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression112() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression112()
}

func (c *current) onSingleLineTernaryExpression106(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression106(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression128() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression128()
}

func (c *current) onSingleLineTernaryExpression125(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression125(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression137() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression137()
}

func (c *current) onSingleLineTernaryExpression90(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression90(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onChainExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression21()
}

func (c *current) onChainExpression37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression37()
}

func (c *current) onChainExpression64(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(typedSlice[file.ChainExpressionItem](chainI)) || defaultI != nil, nil
}

func (p *parser) callonChainExpression64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression64(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression68()
}

func (c *current) onChainExpression86() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression86()
}

func (c *current) onChainExpression92(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(typedSlice[file.ChainExpressionItem](chainI)), nil
}

func (p *parser) callonChainExpression92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression92(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onChainExpression94() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression94()
}

func (c *current) onChainExpression102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression102()
}

func (c *current) onChainExpression65(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}

	var multiline string
	if malEndPosI.(file.Position).Line > malStartPosI.(file.Position).Line {
		multiline += " and the lines below"
	}

	return expr, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this" + multiline + " part",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "this is valid",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonChainExpression65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression65(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onchainExpressionRoot2() (interface{}, error) {
	return file.GoExpression{
		Expression: string(c.text),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonchainExpressionRoot2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot2()
}

func (c *current) onchainExpressionRoot11(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonchainExpressionRoot11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot11(stack["ident"])
}

func (c *current) onchainExpressionRoot30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonchainExpressionRoot30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot30()
}

func (c *current) onchainExpressionRoot17(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonchainExpressionRoot17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot17(stack["identI"], stack["endPosI"])
}

func (c *current) onchainExpressionRoot8(identI interface{}) (interface{}, error) {
	ident := identI.(file.GoIdent)
	return file.GoExpression{
		Expression: ident.Ident,
		Position:   ident.Position,
	}, nil
}

func (p *parser) callonchainExpressionRoot8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot8(stack["identI"])
}

func (c *current) onSingleLineChainExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression21()
}

func (c *current) onSingleLineChainExpression32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression32()
}

func (c *current) onSingleLineChainExpression55(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0 || defaultI != nil, nil
}

func (p *parser) callonSingleLineChainExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression55(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonSingleLineChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression58()
}

func (c *current) onSingleLineChainExpression76() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression76()
}

func (c *current) onSingleLineChainExpression82(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0, nil
}

func (p *parser) callonSingleLineChainExpression82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression82(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression84() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression84()
}

func (c *current) onSingleLineChainExpression92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression92()
}

func (c *current) onSingleLineChainExpression98(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (bool, error) {
	return false, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this part",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "this is valid",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonSingleLineChainExpression98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression98(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onChainExpressionItem15(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem15(stack["ident"])
}

func (c *current) onChainExpressionItem34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem34()
}

func (c *current) onChainExpressionItem21(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonChainExpressionItem21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem21(stack["identI"], stack["endPosI"])
}

func (c *current) onChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onChainExpressionItem58(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem58(stack["ident"])
}

func (c *current) onChainExpressionItem77() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem77()
}

func (c *current) onChainExpressionItem64(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonChainExpressionItem64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem64(stack["identI"], stack["endPosI"])
}

func (c *current) onChainExpressionItem88(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem88(stack["ident"])
}

func (c *current) onChainExpressionItem107() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem107()
}

func (c *current) onChainExpressionItem94(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonChainExpressionItem94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem94(stack["identI"], stack["endPosI"])
}

func (c *current) onChainExpressionItem116() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem116()
}

func (c *current) onChainExpressionItem44(ptrsI, packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		PointerCount: len(islice(ptrsI)),
		Package:      packageIdent,
		Type:         typeI.(file.GoIdent),
		RParenPos:    rParenPosI.(file.Position),
		Check:        checkI != nil,
	}, nil
}

func (p *parser) callonChainExpressionItem44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem44(stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem10(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem10(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem29() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem29()
}

func (c *current) onSingleLineChainExpressionItem16(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonSingleLineChainExpressionItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem16(stack["identI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem53(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem53(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem72() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem72()
}

func (c *current) onSingleLineChainExpressionItem59(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonSingleLineChainExpressionItem59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem59(stack["identI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpressionItem83(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem83(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem102()
}

func (c *current) onSingleLineChainExpressionItem89(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonSingleLineChainExpressionItem89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem89(stack["identI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpressionItem111() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem111()
}

func (c *current) onSingleLineChainExpressionItem39(ptrsI, packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		PointerCount: len(islice(ptrsI)),
		Package:      packageIdent,
		Type:         typeI.(file.GoIdent),
		RParenPos:    rParenPosI.(file.Position),
		Check:        checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem39(stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression3()
}

func (c *current) onIndexExpression30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression30()
}

func (c *current) onIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onindexExpressionIndex11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex11()
}

func (c *current) onindexExpressionIndex27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex27()
}

func (c *current) onindexExpressionIndex48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex48()
}

func (c *current) onindexExpressionIndex80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex80()
}

func (c *current) onindexExpressionIndex87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex87()
}

func (c *current) onindexExpressionIndex98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex98()
}

func (c *current) onindexExpressionIndex105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex105()
}

func (c *current) onindexExpressionIndex110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex110()
}

func (c *current) onindexExpressionIndex128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex128()
}

func (c *current) onindexExpressionIndex149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex149()
}

func (c *current) onindexExpressionIndex181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex181()
}

func (c *current) onindexExpressionIndex188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex188()
}

func (c *current) onindexExpressionIndex199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex199()
}

func (c *current) onindexExpressionIndex206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex206()
}

func (c *current) onindexExpressionIndex211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex211()
}

func (c *current) onindexExpressionIndex218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex218()
}

func (c *current) onindexExpressionIndex116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex116(stack["valsI"], stack["endPosI"])
}

func (c *current) onindexExpressionIndex8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonindexExpressionIndex8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex8(stack["posI"])
}

func (c *current) onindexExpressionIndex227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex227()
}

func (c *current) onindexExpressionIndex224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonindexExpressionIndex224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex224(stack["posI"])
}

func (c *current) onindexExpressionIndex1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonindexExpressionIndex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex1(stack["exprsI"])
}

func (c *current) onSingleLineIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression3()
}

func (c *current) onSingleLineIndexExpression25() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression25()
}

func (c *current) onSingleLineIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonSingleLineIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onsingleLineIndexExpressionIndex11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex11()
}

func (c *current) onsingleLineIndexExpressionIndex27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex27()
}

func (c *current) onsingleLineIndexExpressionIndex48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex48()
}

func (c *current) onsingleLineIndexExpressionIndex80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex80()
}

func (c *current) onsingleLineIndexExpressionIndex87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex87()
}

func (c *current) onsingleLineIndexExpressionIndex98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex98()
}

func (c *current) onsingleLineIndexExpressionIndex105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex105()
}

func (c *current) onsingleLineIndexExpressionIndex110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex110()
}

func (c *current) onsingleLineIndexExpressionIndex128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex128()
}

func (c *current) onsingleLineIndexExpressionIndex149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex149()
}

func (c *current) onsingleLineIndexExpressionIndex181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex181()
}

func (c *current) onsingleLineIndexExpressionIndex188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex188()
}

func (c *current) onsingleLineIndexExpressionIndex199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex199()
}

func (c *current) onsingleLineIndexExpressionIndex206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex206()
}

func (c *current) onsingleLineIndexExpressionIndex211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex211()
}

func (c *current) onsingleLineIndexExpressionIndex218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex218()
}

func (c *current) onsingleLineIndexExpressionIndex116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex116(stack["valsI"], stack["endPosI"])
}

func (c *current) onsingleLineIndexExpressionIndex8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonsingleLineIndexExpressionIndex8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex8(stack["posI"])
}

func (c *current) onsingleLineIndexExpressionIndex227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex227()
}

func (c *current) onsingleLineIndexExpressionIndex224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonsingleLineIndexExpressionIndex224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex224(stack["posI"])
}

func (c *current) onsingleLineIndexExpressionIndex1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonsingleLineIndexExpressionIndex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex1(stack["exprsI"])
}

func (c *current) onParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression3()
}

func (c *current) onParenExpression23() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression23()
}

func (c *current) onParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onparenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonparenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression3()
}

func (c *current) onSingleLineParenExpression18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression18()
}

func (c *current) onSingleLineParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onsingleLinearenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonsingleLinearenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLinearenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onGoType1(goTypeI interface{}) (interface{}, error) {
	return file.GoType{Type: concat(goTypeI), Position: pos(c)}, nil
}

func (p *parser) callonGoType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoType1(stack["goTypeI"])
}

func (c *current) ongoFieldDecl33() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a ``` somewhere here",
		}),
	}
}

func (p *parser) callongoFieldDecl33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl33()
}

func (c *current) ongoFieldDecl57() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl57()
}

func (c *current) ongoFieldDecl78() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl78()
}

func (c *current) ongoFieldDecl110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl110()
}

func (c *current) ongoFieldDecl117() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl117()
}

func (c *current) ongoFieldDecl128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl128()
}

func (c *current) ongoFieldDecl135() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl135()
}

func (c *current) ongoFieldDecl140() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl140()
}

func (c *current) ongoFieldDecl157() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl157()
}

func (c *current) ongoFieldDecl178() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl178()
}

func (c *current) ongoFieldDecl210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl210()
}

func (c *current) ongoFieldDecl217() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl217()
}

func (c *current) ongoFieldDecl228() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl228()
}

func (c *current) ongoFieldDecl235() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl235()
}

func (c *current) ongoFieldDecl240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl240()
}

func (c *current) ongoFieldDecl146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a `\"` somewhere here",
		}),
	}

}

func (p *parser) callongoFieldDecl146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl146()
}

func (c *current) onMixin12(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixin12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin12(stack["identI"])
}

func (c *current) onMixin31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin31()
}

func (c *current) onMixin18(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixin18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin18(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixin9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin9(stack["identI"])
}

func (c *current) onMixin40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin40()
}

func (c *current) onMixin37(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin37(stack["posI"])
}

func (c *current) onMixin65() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin65()
}

func (c *current) onMixin59(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin59(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin2(nameI, paramsI, bodyI interface{}) (interface{}, error) {
	params := castedOrZero[file.Mixin](paramsI)
	return file.Mixin{
		Name:      nameI.(file.Ident),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixin2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin2(stack["nameI"], stack["paramsI"], stack["bodyI"])
}

func (c *current) onMixin80() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin80()
}

func (c *current) onMixin76(posI, bodyI interface{}) (interface{}, error) {
	return file.Mixin{
			Body:     bodyI.(file.Scope),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "mixin: missing name",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected the name of the mixin here",
			}),
			Example: "`mixin woof\n" +
				"  > bark`",
		}
}

func (p *parser) callonMixin76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin76(stack["posI"], stack["bodyI"])
}

func (c *current) onmixinParamList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList28()
}

func (c *current) onmixinParamList2(paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Mixin{
		LParenPos: ptr(pos(c)),
		Params:    castedOrZero[[]file.MixinParam](paramsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinParamList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList2(stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onmixinParamList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList49()
}

func (c *current) onmixinParamList30(paramsI, posI interface{}) (interface{}, error) {
	return file.Mixin{
			LParenPos: ptr(pos(c)),
			Params:    castedOrZero[[]file.MixinParam](paramsI),
		}, &corgierr.Error{
			Message: "mixin parameters: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinParamList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList30(stack["paramsI"], stack["posI"])
}

func (c *current) onmixinParams1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinParams := make([]file.MixinParam, 1+len(restIs))
	mixinParams[0] = firstI.(file.MixinParam)
	for i, ai := range restIs {
		mixinParams[i+1] = getTuple[file.MixinParam](ai, -1)
	}

	return mixinParams, nil
}

func (p *parser) callonmixinParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParams1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinParam8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam8(stack["identI"])
}

func (c *current) onmixinParam27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam27()
}

func (c *current) onmixinParam14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinParam14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam5(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam5(stack["identI"])
}

func (c *current) onmixinParam39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam39()
}

func (c *current) onmixinParam33(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinParam33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam33(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam46()
}

func (c *current) onmixinParam1(nameI, posI, typeI, defaultI interface{}) (interface{}, error) {
	defaultTuple := islice(defaultI)
	var paramDefault file.MixinParam
	if len(defaultTuple) == 2 {
		paramDefault = defaultTuple[1].(file.MixinParam)
	}

	typeTuple := islice(typeI)
	var paramType *file.GoType
	if len(typeTuple) == 2 {
		paramType = ptr(typeTuple[1].(file.GoType))
	}

	p := file.MixinParam{
		Name:      nameI.(file.Ident),
		Type:      paramType,
		AssignPos: paramDefault.AssignPos,
		Default:   paramDefault.Default,
		Position:  pos(c),
	}
	if p.Type == nil && p.Default == nil {
		return p, &corgierr.Error{
			Message: "mixin param: need either a type or a default",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected either a type or a default here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "give this param a type", Code: "`" + p.Name.Ident + " string`"},
				{Suggestion: "give this param a default with an inferrable type", Code: "`" + p.Name.Ident + "=\"woof\"`"},
			},
		}
	}

	return p, nil
}

func (p *parser) callonmixinParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam1(stack["nameI"], stack["posI"], stack["typeI"], stack["defaultI"])
}

func (c *current) onmixinParamDefault2(exprI interface{}) (interface{}, error) {
	return file.MixinParam{
		AssignPos: ptr(pos(c)),
		Default:   ptrOrNil[file.Expression](exprI),
	}, nil
}

func (p *parser) callonmixinParamDefault2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault2(stack["exprI"])
}

func (c *current) onmixinParamDefault13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamDefault13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault13()
}

func (c *current) onmixinParamDefault9(posI interface{}) (interface{}, error) {
	return file.MixinParam{
			AssignPos: ptr(pos(c)),
		}, &corgierr.Error{
			Message: "mixin param: missing default",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "because of this `=`",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the `=`, if you didn't mean to define a default"},
			},
		}
}

func (p *parser) callonmixinParamDefault9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault9(stack["posI"])
}

func (c *current) onReturn8() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonReturn8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn8()
}

func (c *current) onReturn1(errExprI interface{}) (interface{}, error) {
	return file.Return{
		Err:      ptrOrNil[file.Expression](errExprI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonReturn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn1(stack["errExprI"])
}

func (c *current) onMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall8(stack["identI"])
}

func (c *current) onMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall27()
}

func (c *current) onMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall39(stack["identI"])
}

func (c *current) onMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall58()
}

func (c *current) onMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall36(stack["identI"])
}

func (c *current) onMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall67()
}

func (c *current) onMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall64(stack["posI"])
}

func (c *current) onMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall92()
}

func (c *current) onMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCall{
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onInlineMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall8(stack["identI"])
}

func (c *current) onInlineMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall27()
}

func (c *current) onInlineMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall39(stack["identI"])
}

func (c *current) onInlineMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall58()
}

func (c *current) onInlineMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall36(stack["identI"])
}

func (c *current) onInlineMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall67()
}

func (c *current) onInlineMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall64(stack["posI"])
}

func (c *current) onInlineMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall92()
}

func (c *current) onInlineMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCall{
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonInlineMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onmixinArgList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList28()
}

func (c *current) onmixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onmixinArgList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList49()
}

func (c *current) onmixinArgList30(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin args: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinArgList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList30(stack["argsI"], stack["posI"])
}

func (c *current) onsingleLineMixinArgList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList18()
}

func (c *current) onsingleLineMixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonsingleLineMixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onsingleLineMixinArgList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList34()
}

func (c *current) onsingleLineMixinArgList20(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin args: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonsingleLineMixinArgList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList20(stack["argsI"], stack["posI"])
}

func (c *current) onmixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonmixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onsingleLineMixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonsingleLineMixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg9(stack["identI"])
}

func (c *current) onmixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg28()
}

func (c *current) onmixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg6(stack["identI"])
}

func (c *current) onmixinArg40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg40()
}

func (c *current) onmixinArg34(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg34(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonmixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onmixinArg60(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg60(stack["identI"])
}

func (c *current) onmixinArg79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg79()
}

func (c *current) onmixinArg66(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg66(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg57(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg57(stack["identI"])
}

func (c *current) onmixinArg91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg91()
}

func (c *current) onmixinArg85(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg85(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg103()
}

func (c *current) onmixinArg53(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonmixinArg53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg53(stack["nameI"], stack["posI"])
}

func (c *current) onsingleLineMixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg9(stack["identI"])
}

func (c *current) onsingleLineMixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg28()
}

func (c *current) onsingleLineMixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg6(stack["identI"])
}

func (c *current) onsingleLineMixinArg40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg40()
}

func (c *current) onsingleLineMixinArg34(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg34(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonsingleLineMixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onsingleLineMixinArg60(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg60(stack["identI"])
}

func (c *current) onsingleLineMixinArg79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg79()
}

func (c *current) onsingleLineMixinArg66(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg66(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg57(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg57(stack["identI"])
}

func (c *current) onsingleLineMixinArg91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg91()
}

func (c *current) onsingleLineMixinArg85(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg85(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg103()
}

func (c *current) onsingleLineMixinArg53(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonsingleLineMixinArg53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg53(stack["nameI"], stack["posI"])
}

func (c *current) onmixinCallBody2(shI interface{}) (interface{}, error) {
	return file.Scope{shI.(file.MixinMainBlockShorthand)}, nil
}

func (p *parser) callonmixinCallBody2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallBody2(stack["shI"])
}

func (c *current) onMixinMainBlockShorthand6() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand6()
}

func (c *current) onMixinMainBlockShorthand2(bodyI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
		Body:     bodyI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinMainBlockShorthand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand2(stack["bodyI"])
}

func (c *current) onMixinMainBlockShorthand24() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand24()
}

func (c *current) onMixinMainBlockShorthand28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinMainBlockShorthand28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand28()
}

func (c *current) onMixinMainBlockShorthand20(posI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing body",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an indented body",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if you want the `_` block to write nothing,\n" +
						"use a block directive inside the body of the mixin call",
					Example: "`+woof\n" +
						"  block _`",
				},
			},
		}
}

func (p *parser) callonMixinMainBlockShorthand20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand20(stack["posI"])
}

func (c *current) onFunc9(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonFunc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc9(stack["ident"])
}

func (c *current) onFunc28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc28()
}

func (c *current) onFunc15(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonFunc15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc15(stack["identI"], stack["endPosI"])
}

func (c *current) onFunc39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc39()
}

func (c *current) onFunc43(paramsI interface{}) (interface{}, error) {
	return castedOrZero[[]file.FuncParam](paramsI), nil

}

func (p *parser) callonFunc43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc43(stack["paramsI"])
}

func (c *current) onFunc72() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc72()
}

func (c *current) onFunc67(endPosI interface{}) (interface{}, error) {
	return ([]file.FuncParam)(nil), &corgierr.Error{
		Message: "invalid parameter list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "this is not correct, maybe a missing comma?",
		}),
	}

}

func (p *parser) callonFunc67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc67(stack["endPosI"])
}

func (c *current) onFunc79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc79()
}

func (c *current) onFunc36(lParenPosI, paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Func{
		LParenPos: lParenPosI.(file.Position),
		Params:    paramsI.([]file.FuncParam),
		RParenPos: rParenPosI.(file.Position),
	}, nil

}

func (p *parser) callonFunc36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc36(stack["lParenPosI"], stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onFunc81() (interface{}, error) {
	return file.Func{}, &corgierr.Error{
		Message: "missing `(` or `)` or invalid param list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}

}

func (p *parser) callonFunc81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc81()
}

func (c *current) onFunc2(nameI, paramsI interface{}) (interface{}, error) {
	params := paramsI.(file.Func)
	return file.Func{
		Name:      nameI.(file.GoIdent),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonFunc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc2(stack["nameI"], stack["paramsI"])
}

func (c *current) onFunc97() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc97()
}

func (c *current) onFunc93(posI interface{}) (interface{}, error) {
	return file.Func{Position: pos(c)}, &corgierr.Error{
		Message: "missing func name",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected an identifier followed by a parameter list",
		}),
	}
}

func (p *parser) callonFunc93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc93(stack["posI"])
}

func (c *current) onfuncOnlyVariadicParamList1(variadicI interface{}) (interface{}, error) {
	return []file.FuncParam{variadicI.(file.FuncParam)}, nil
}

func (p *parser) callonfuncOnlyVariadicParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOnlyVariadicParamList1(stack["variadicI"])
}

func (c *current) onfuncOtherParamList1(firstI, restI, variadicI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	n := 1 + len(restTuples)
	if variadicI != nil {
		n++
	}
	params := make([]file.FuncParam, 1, n)
	params[0] = firstI.(file.FuncParam)

	for _, t := range restTuples {
		params = append(params, getTuple[file.FuncParam](t, -1))
	}

	if variadicI != nil {
		params = append(params, getTuple[file.FuncParam](variadicI, -1))
	}

	return params, nil
}

func (p *parser) callonfuncOtherParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOtherParamList1(stack["firstI"], stack["restI"], stack["variadicI"])
}

func (c *current) onfuncParam9(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam9(stack["ident"])
}

func (c *current) onfuncParam28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncParam28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam28()
}

func (c *current) onfuncParam15(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonfuncParam15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam15(stack["identI"], stack["endPosI"])
}

func (c *current) onfuncParam48(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam48(stack["ident"])
}

func (c *current) onfuncParam67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncParam67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam67()
}

func (c *current) onfuncParam54(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonfuncParam54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam54(stack["identI"], stack["endPosI"])
}

func (c *current) onfuncParam5(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)
	idents := make([]file.GoIdent, 1, 1+len(restTuples))
	idents[0] = firstI.(file.GoIdent)

	for _, t := range restTuples {
		idents = append(idents, getTuple[file.GoIdent](t, -1))
	}

	return idents, nil
}

func (p *parser) callonfuncParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam5(stack["firstI"], stack["restI"])
}

func (c *current) onfuncParam2(namesI, typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Names: namesI.([]file.GoIdent),
		Type:  typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam2(stack["namesI"], stack["typeI"])
}

func (c *current) onfuncParam77(typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Type: typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam77(stack["typeI"])
}

func (c *current) onfuncVariadicParam7(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncVariadicParam7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam7(stack["ident"])
}

func (c *current) onfuncVariadicParam26() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncVariadicParam26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam26()
}

func (c *current) onfuncVariadicParam13(identI, endPosI interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
	}
}

func (p *parser) callonfuncVariadicParam13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam13(stack["identI"], stack["endPosI"])
}

func (c *current) onfuncVariadicParam1(nameI, typeI interface{}) (interface{}, error) {
	var names []file.GoIdent
	if nameI != nil {
		names = []file.GoIdent{getTuple[file.GoIdent](nameI, 0)}
	}

	return file.FuncParam{
		Names:    names,
		Variadic: true,
		Type:     typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncVariadicParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam1(stack["nameI"], stack["typeI"])
}

func (c *current) onfuncType9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncType9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType9()
}

func (c *current) onfuncType3(typeI, endPosI interface{}) (interface{}, error) {
	return file.GoType{
			Type:     concat(typeI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid type",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "not a valid Go type",
			}),
		}
}

func (p *parser) callonfuncType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType3(stack["typeI"], stack["endPosI"])
}

func (c *current) onAssign10() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonAssign10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign10()
}

func (c *current) onAssign2(exprI interface{}) (interface{}, error) {
	return file.Assign{
		Expression: exprI.(file.Expression),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAssign2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign2(stack["exprI"])
}

func (c *current) onAssign26() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAssign26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign26()
}

func (c *current) onAssign22(posI interface{}) (interface{}, error) {
	return file.Assign{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing expression",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected an expression here",
			}),
			Example: "`= 1 + 2`",
		}
}

func (p *parser) callonAssign22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssign22(stack["posI"])
}

func (c *current) onInlineText1(lineI interface{}) (interface{}, error) {
	return file.InlineText{
		Text:     lineI.(file.TextLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText1(stack["lineI"])
}

func (c *current) onArrowBlock2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	firstLine, firstLineOk := firstLineI.(file.TextLine)
	additionalLineTuples := islice(additionalLinesI)

	n := len(additionalLineTuples)
	if firstLineOk {
		n++
	}

	lines := make([]file.TextLine, 0, n)
	if firstLineOk {
		lines = append(lines, firstLine)
	}
	for _, lt := range additionalLineTuples {
		lines = append(lines, getTuple[file.TextLine](lt, -1))
	}

	return file.ArrowBlock{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onArrowBlock31() (interface{}, error) {
	return file.ArrowBlock{Position: pos(c)}, nil
}

func (p *parser) callonArrowBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock31()
}

func (c *current) onInlineArrowBlock2(lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
		Lines:    []file.TextLine{lineI.(file.TextLine)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock2(stack["lineI"])
}

func (c *current) onInlineArrowBlock11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineArrowBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock11()
}

func (c *current) onInlineArrowBlock7(posI, lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
			Lines:    []file.TextLine{lineI.(file.TextLine)},
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `>` from the text",
			}),
			Example: "`> woof`",
		}
}

func (p *parser) callonInlineArrowBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock7(stack["posI"], stack["lineI"])
}

func (c *current) onTextLine1(itemsI interface{}) (interface{}, error) {
	return file.TextLine(typedSlice[file.TextItem](itemsI)), nil
}

func (p *parser) callonTextLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextLine1(stack["itemsI"])
}

func (c *current) onTextItem2(textI interface{}) (interface{}, error) {
	return file.Text{
		Text:     concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTextItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextItem2(stack["textI"])
}

func (c *current) onInterpolation5() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "start of interpolation",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected a `#`, `[`, `" + lbrace + "`, a mixin call, or an element name here",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation5()
}

func (c *current) onSimpleInterpolation13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation13()
}

func (c *current) onSimpleInterpolation19() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation19()
}

func (c *current) onSimpleInterpolation10(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonSimpleInterpolation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation10(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onSimpleInterpolation24() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation24()
}

func (c *current) onSimpleInterpolation21(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonSimpleInterpolation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation21(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onSimpleInterpolation2(noEscapeI, valueI interface{}) (interface{}, error) {
	return file.SimpleInterpolation{
		NoEscape: noEscapeI != nil,
		Value:    valueI.(file.InterpolationValue),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleInterpolation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation2(stack["noEscapeI"], stack["valueI"])
}

func (c *current) onSimpleInterpolation38(valueI interface{}) (interface{}, error) {
	return file.SimpleInterpolation{
		Value:    valueI.(file.InterpolationValue),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleInterpolation38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation38(stack["valueI"])
}

func (c *current) onElementInterpolation5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElementInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation5()
}

func (c *current) onElementInterpolation1(elPosI, nameI, attrsI, valueI interface{}) (interface{}, error) {
	return file.ElementInterpolation{
		Element: file.Element{
			Name:       concat(nameI),
			Attributes: typedSlice[file.AttributeCollection](attrsI),
			Void:       castedOrZero[bool](valueI),
			Position:   elPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElementInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation1(stack["elPosI"], stack["nameI"], stack["attrsI"], stack["valueI"])
}

func (c *current) onelementInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue5()
}

func (c *current) onelementInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue11()
}

func (c *current) onelementInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonelementInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onelementInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue16()
}

func (c *current) onelementInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonelementInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onelementInterpolationValue31() (interface{}, error) {
	return true, nil // hacky, but whatev
}

func (p *parser) callonelementInterpolationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue31()
}

func (c *current) onMixinCallInterpolation5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation5()
}

func (c *current) onMixinCallInterpolation16(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCallInterpolation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation16(stack["identI"])
}

func (c *current) onMixinCallInterpolation35() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation35()
}

func (c *current) onMixinCallInterpolation22(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCallInterpolation22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation22(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation47(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCallInterpolation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation47(stack["identI"])
}

func (c *current) onMixinCallInterpolation66() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation66()
}

func (c *current) onMixinCallInterpolation53(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCallInterpolation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation53(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation44(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinCallInterpolation44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation44(stack["identI"])
}

func (c *current) onMixinCallInterpolation75() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation75()
}

func (c *current) onMixinCallInterpolation72(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCallInterpolation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation72(stack["posI"])
}

func (c *current) onMixinCallInterpolation100() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation100()
}

func (c *current) onMixinCallInterpolation94(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCallInterpolation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation94(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation1(mcPosI, namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)
	return file.MixinCallInterpolation{
		MixinCall: file.MixinCall{
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  mcPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinCallInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation1(stack["mcPosI"], stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinCallInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue5()
}

func (c *current) onmixinCallInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue11()
}

func (c *current) onmixinCallInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinCallInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinCallInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue16()
}

func (c *current) onmixinCallInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
	}, errors.New("unclosed text interpolation")
}

func (p *parser) callonmixinCallInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onexpressionInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue5()
}

func (c *current) onexpressionInterpolationValue10() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue10()
}

func (c *current) onexpressionInterpolationValue2(lBracePosI, exprI, rBracePosI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
		LBracePos:  lBracePosI.(file.Position),
		Expression: exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
	}, nil
}

func (p *parser) callonexpressionInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue2(stack["lBracePosI"], stack["exprI"], stack["rBracePosI"])
}

func (c *current) onexpressionInterpolationValue15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue15()
}

func (c *current) onexpressionInterpolationValue12(lBracePosI, exprI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
		LBracePos:  lBracePosI.(file.Position),
		Expression: exprI.(file.Expression),
	}, errors.New("unclosed expression interpolation")
}

func (p *parser) callonexpressionInterpolationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue12(stack["lBracePosI"], stack["exprI"])
}

func (c *current) onfmtExpressionInterpolationValue22() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue22()
}

func (c *current) onfmtExpressionInterpolationValue25() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue25()
}

func (c *current) onfmtExpressionInterpolationValue5() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonfmtExpressionInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue5()
}

func (c *current) onfmtExpressionInterpolationValue33() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfmtExpressionInterpolationValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue33()
}

func (c *current) onfmtExpressionInterpolationValue27(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue27(stack["endPosI"])
}

func (c *current) onfmtExpressionInterpolationValue1(fmtDirectiveI, eivI interface{}) (interface{}, error) {
	eiv := eivI.(file.ExpressionInterpolationValue)
	eiv.FormatDirective = fmtDirectiveI.(string)
	return eiv, nil
}

func (p *parser) callonfmtExpressionInterpolationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue1(stack["fmtDirectiveI"], stack["eivI"])
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	// this is our first ever indentation, INDENTATION will handle it
	return c.state["Indentation.Char"].(byte) == 0, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL3()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL4()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL7()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL9()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL11()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL12() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL12()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL14()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL17()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL18()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL19() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL19()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL21() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL21()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL22()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL26() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL26()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL31() (bool, error) {
	refReps := c.state["Indentation.Repetitions"].(int)
	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	want := totalReps + refReps
	have := c.state["Indentation.CharCount"].(int)
	if want == have {
		return true, nil
	}

	return false, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL31()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL35() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	have := c.state["Indentation.CharCount"].(int)
	want := totalReps + refReps
	if have == want {
		return true, nil
	} else if have <= totalReps {
		return false, nil
	}

	if indentChar == ' ' {
		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               have - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d spaces", have-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two spaces for a single indentation, use four for a two-level indentation",
				},
			},
		}
	}

	return true, &corgierr.Error{
		Message: "inconsistent indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
			Len:               have - totalReps,
			Annotation:        fmt.Sprintf("however, here you used %d tabs", have-totalReps),
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: refLine, Col: 1},
				Len:               refReps,
				Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "be consistent in your indentation:\n" +
					"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
			},
		},
	}

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL35()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL36() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)

	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(have - totalReps)
	c.state["Indentation.TotalRepetitions"] = have
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL36() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL36()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL38() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL38()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL39() (bool, error) {
	want := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)
	return want == have, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL39()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL40() error {
	c.state["Indentation.CharCount"] = 0
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL40() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL40()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL44(spaceI interface{}) (bool, error) {
	space := byte(char(spaceI))

	indentChar := c.state["Indentation.Char"].(byte)
	if indentChar != space {
		refLine := c.state["Indentation.RefLine"].(int)
		reps := c.state["Indentation.Repetitions"].(int)

		if indentChar == ' ' {
			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      pos(c),
					Annotation: "this is a tab",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               reps,
						Annotation:        "these are spaces",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}

		panic(&corgierr.Error{
			Message: "mix of tabs and spaces for indentation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "this is a space",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               reps,
					Annotation:        "these are tabs",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "use only tabs OR spaces for indentation, but not both"},
			},
		})
	}

	return true, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL44(stack["spaceI"])
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL45(spaceI interface{}) error {
	c.state["Indentation.CharCount"] = c.state["Indentation.CharCount"].(int) + 1
	return nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL45() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL45(stack["spaceI"])
}

func (c *current) onINDENTATION23() (bool, error) {
	return c.state["Indentation.Level"].(int) == 0, nil
}

func (p *parser) callonINDENTATION23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION23()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
